// Generated from ./TrinoSQL.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { TrinoSQLListener } from "./TrinoSQLListener.js";
import { TrinoSQLVisitor } from "./TrinoSQLVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class TrinoSQLParser extends antlr.Parser {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly ABSENT = 18;
    public static readonly ADD = 19;
    public static readonly ADMIN = 20;
    public static readonly AFTER = 21;
    public static readonly ALL = 22;
    public static readonly ALTER = 23;
    public static readonly ANALYZE = 24;
    public static readonly AND = 25;
    public static readonly ANY = 26;
    public static readonly ARRAY = 27;
    public static readonly AS = 28;
    public static readonly ASC = 29;
    public static readonly AT = 30;
    public static readonly AUTHORIZATION = 31;
    public static readonly BEGIN = 32;
    public static readonly BERNOULLI = 33;
    public static readonly BETWEEN = 34;
    public static readonly BOTH = 35;
    public static readonly BY = 36;
    public static readonly CALL = 37;
    public static readonly CALLED = 38;
    public static readonly CASCADE = 39;
    public static readonly CASE = 40;
    public static readonly CAST = 41;
    public static readonly CATALOG = 42;
    public static readonly CATALOGS = 43;
    public static readonly COLUMN = 44;
    public static readonly COLUMNS = 45;
    public static readonly COMMENT = 46;
    public static readonly COMMIT = 47;
    public static readonly COMMITTED = 48;
    public static readonly CONDITIONAL = 49;
    public static readonly CONSTRAINT = 50;
    public static readonly COUNT = 51;
    public static readonly COPARTITION = 52;
    public static readonly CREATE = 53;
    public static readonly CROSS = 54;
    public static readonly CUBE = 55;
    public static readonly CURRENT = 56;
    public static readonly CURRENT_CATALOG = 57;
    public static readonly CURRENT_DATE = 58;
    public static readonly CURRENT_PATH = 59;
    public static readonly CURRENT_ROLE = 60;
    public static readonly CURRENT_SCHEMA = 61;
    public static readonly CURRENT_TIME = 62;
    public static readonly CURRENT_TIMESTAMP = 63;
    public static readonly CURRENT_USER = 64;
    public static readonly DATA = 65;
    public static readonly DATE = 66;
    public static readonly DAY = 67;
    public static readonly DEALLOCATE = 68;
    public static readonly DECLARE = 69;
    public static readonly DEFAULT = 70;
    public static readonly DEFINE = 71;
    public static readonly DEFINER = 72;
    public static readonly DELETE = 73;
    public static readonly DENY = 74;
    public static readonly DESC = 75;
    public static readonly DESCRIBE = 76;
    public static readonly DESCRIPTOR = 77;
    public static readonly DETERMINISTIC = 78;
    public static readonly DISTINCT = 79;
    public static readonly DISTRIBUTED = 80;
    public static readonly DO = 81;
    public static readonly DOUBLE = 82;
    public static readonly DROP = 83;
    public static readonly ELSE = 84;
    public static readonly EMPTY = 85;
    public static readonly ELSEIF = 86;
    public static readonly ENCODING = 87;
    public static readonly END = 88;
    public static readonly ERROR = 89;
    public static readonly ESCAPE = 90;
    public static readonly EXCEPT = 91;
    public static readonly EXCLUDING = 92;
    public static readonly EXECUTE = 93;
    public static readonly EXISTS = 94;
    public static readonly EXPLAIN = 95;
    public static readonly EXTRACT = 96;
    public static readonly FALSE = 97;
    public static readonly FETCH = 98;
    public static readonly FILTER = 99;
    public static readonly FINAL = 100;
    public static readonly FIRST = 101;
    public static readonly FOLLOWING = 102;
    public static readonly FOR = 103;
    public static readonly FORMAT = 104;
    public static readonly FROM = 105;
    public static readonly FULL = 106;
    public static readonly FUNCTION = 107;
    public static readonly FUNCTIONS = 108;
    public static readonly GRACE = 109;
    public static readonly GRANT = 110;
    public static readonly GRANTED = 111;
    public static readonly GRANTS = 112;
    public static readonly GRAPHVIZ = 113;
    public static readonly GROUP = 114;
    public static readonly GROUPING = 115;
    public static readonly GROUPS = 116;
    public static readonly HAVING = 117;
    public static readonly HOUR = 118;
    public static readonly IF = 119;
    public static readonly IGNORE = 120;
    public static readonly IMMEDIATE = 121;
    public static readonly IN = 122;
    public static readonly INCLUDING = 123;
    public static readonly INITIAL = 124;
    public static readonly INNER = 125;
    public static readonly INPUT = 126;
    public static readonly INSERT = 127;
    public static readonly INTERSECT = 128;
    public static readonly INTERVAL = 129;
    public static readonly INTO = 130;
    public static readonly INVOKER = 131;
    public static readonly IO = 132;
    public static readonly IS = 133;
    public static readonly ISOLATION = 134;
    public static readonly ITERATE = 135;
    public static readonly JOIN = 136;
    public static readonly JSON = 137;
    public static readonly JSON_ARRAY = 138;
    public static readonly JSON_EXISTS = 139;
    public static readonly JSON_OBJECT = 140;
    public static readonly JSON_QUERY = 141;
    public static readonly JSON_TABLE = 142;
    public static readonly JSON_VALUE = 143;
    public static readonly KEEP = 144;
    public static readonly KEY = 145;
    public static readonly KEYS = 146;
    public static readonly LANGUAGE = 147;
    public static readonly LAST = 148;
    public static readonly LATERAL = 149;
    public static readonly LEADING = 150;
    public static readonly LEAVE = 151;
    public static readonly LEFT = 152;
    public static readonly LEVEL = 153;
    public static readonly LIKE = 154;
    public static readonly LIMIT = 155;
    public static readonly LISTAGG = 156;
    public static readonly LOCAL = 157;
    public static readonly LOCALTIME = 158;
    public static readonly LOCALTIMESTAMP = 159;
    public static readonly LOGICAL = 160;
    public static readonly LOOP = 161;
    public static readonly MAP = 162;
    public static readonly MATCH = 163;
    public static readonly MATCHED = 164;
    public static readonly MATCHES = 165;
    public static readonly MATCH_RECOGNIZE = 166;
    public static readonly MATERIALIZED = 167;
    public static readonly MEASURES = 168;
    public static readonly MERGE = 169;
    public static readonly MINUTE = 170;
    public static readonly MONTH = 171;
    public static readonly NATURAL = 172;
    public static readonly NESTED = 173;
    public static readonly NEXT = 174;
    public static readonly NFC = 175;
    public static readonly NFD = 176;
    public static readonly NFKC = 177;
    public static readonly NFKD = 178;
    public static readonly NO = 179;
    public static readonly NONE = 180;
    public static readonly NORMALIZE = 181;
    public static readonly NOT = 182;
    public static readonly NULL = 183;
    public static readonly NULLIF = 184;
    public static readonly NULLS = 185;
    public static readonly OBJECT = 186;
    public static readonly OF = 187;
    public static readonly OFFSET = 188;
    public static readonly OMIT = 189;
    public static readonly ON = 190;
    public static readonly ONE = 191;
    public static readonly ONLY = 192;
    public static readonly OPTION = 193;
    public static readonly OR = 194;
    public static readonly ORDER = 195;
    public static readonly ORDINALITY = 196;
    public static readonly OUTER = 197;
    public static readonly OUTPUT = 198;
    public static readonly OVER = 199;
    public static readonly OVERFLOW = 200;
    public static readonly PARTITION = 201;
    public static readonly PARTITIONS = 202;
    public static readonly PASSING = 203;
    public static readonly PAST = 204;
    public static readonly PATH = 205;
    public static readonly PATTERN = 206;
    public static readonly PER = 207;
    public static readonly PERIOD = 208;
    public static readonly PERMUTE = 209;
    public static readonly PLAN = 210;
    public static readonly POSITION = 211;
    public static readonly PRECEDING = 212;
    public static readonly PRECISION = 213;
    public static readonly PREPARE = 214;
    public static readonly PRIVILEGES = 215;
    public static readonly PROPERTIES = 216;
    public static readonly PRUNE = 217;
    public static readonly QUOTES = 218;
    public static readonly RANGE = 219;
    public static readonly READ = 220;
    public static readonly RECURSIVE = 221;
    public static readonly REFRESH = 222;
    public static readonly RENAME = 223;
    public static readonly REPEAT = 224;
    public static readonly REPEATABLE = 225;
    public static readonly REPLACE = 226;
    public static readonly RESET = 227;
    public static readonly RESPECT = 228;
    public static readonly RESTRICT = 229;
    public static readonly RETURN = 230;
    public static readonly RETURNING = 231;
    public static readonly RETURNS = 232;
    public static readonly REVOKE = 233;
    public static readonly RIGHT = 234;
    public static readonly ROLE = 235;
    public static readonly ROLES = 236;
    public static readonly ROLLBACK = 237;
    public static readonly ROLLUP = 238;
    public static readonly ROW = 239;
    public static readonly ROWS = 240;
    public static readonly RUNNING = 241;
    public static readonly SCALAR = 242;
    public static readonly SCHEMA = 243;
    public static readonly SCHEMAS = 244;
    public static readonly SECOND = 245;
    public static readonly SECURITY = 246;
    public static readonly SEEK = 247;
    public static readonly SELECT = 248;
    public static readonly SERIALIZABLE = 249;
    public static readonly SESSION = 250;
    public static readonly SET = 251;
    public static readonly SETS = 252;
    public static readonly SHOW = 253;
    public static readonly SOME = 254;
    public static readonly START = 255;
    public static readonly STATS = 256;
    public static readonly SUBSET = 257;
    public static readonly SUBSTRING = 258;
    public static readonly SYSTEM = 259;
    public static readonly TABLE = 260;
    public static readonly TABLES = 261;
    public static readonly TABLESAMPLE = 262;
    public static readonly TEXT = 263;
    public static readonly TEXT_STRING = 264;
    public static readonly THEN = 265;
    public static readonly TIES = 266;
    public static readonly TIME = 267;
    public static readonly TIMESTAMP = 268;
    public static readonly TO = 269;
    public static readonly TRAILING = 270;
    public static readonly TRANSACTION = 271;
    public static readonly TRIM = 272;
    public static readonly TRUE = 273;
    public static readonly TRUNCATE = 274;
    public static readonly TRY_CAST = 275;
    public static readonly TYPE = 276;
    public static readonly UESCAPE = 277;
    public static readonly UNBOUNDED = 278;
    public static readonly UNCOMMITTED = 279;
    public static readonly UNCONDITIONAL = 280;
    public static readonly UNION = 281;
    public static readonly UNIQUE = 282;
    public static readonly UNKNOWN = 283;
    public static readonly UNMATCHED = 284;
    public static readonly UNNEST = 285;
    public static readonly UNTIL = 286;
    public static readonly UPDATE = 287;
    public static readonly USE = 288;
    public static readonly USER = 289;
    public static readonly USING = 290;
    public static readonly UTF16 = 291;
    public static readonly UTF32 = 292;
    public static readonly UTF8 = 293;
    public static readonly VALIDATE = 294;
    public static readonly VALUE = 295;
    public static readonly VALUES = 296;
    public static readonly VERBOSE = 297;
    public static readonly VERSION = 298;
    public static readonly VIEW = 299;
    public static readonly WHEN = 300;
    public static readonly WHERE = 301;
    public static readonly WHILE = 302;
    public static readonly WINDOW = 303;
    public static readonly WITH = 304;
    public static readonly WITHIN = 305;
    public static readonly WITHOUT = 306;
    public static readonly WORK = 307;
    public static readonly WRAPPER = 308;
    public static readonly WRITE = 309;
    public static readonly YEAR = 310;
    public static readonly ZONE = 311;
    public static readonly EQ = 312;
    public static readonly NEQ = 313;
    public static readonly LT = 314;
    public static readonly LTE = 315;
    public static readonly GT = 316;
    public static readonly GTE = 317;
    public static readonly PLUS = 318;
    public static readonly MINUS = 319;
    public static readonly ASTERISK = 320;
    public static readonly SLASH = 321;
    public static readonly PERCENT = 322;
    public static readonly CONCAT = 323;
    public static readonly QUESTION_MARK = 324;
    public static readonly SEMICOLON = 325;
    public static readonly STRING = 326;
    public static readonly UNICODE_STRING = 327;
    public static readonly BINARY_LITERAL = 328;
    public static readonly INTEGER_VALUE = 329;
    public static readonly DECIMAL_VALUE = 330;
    public static readonly DOUBLE_VALUE = 331;
    public static readonly IDENTIFIER = 332;
    public static readonly DIGIT_IDENTIFIER = 333;
    public static readonly QUOTED_IDENTIFIER = 334;
    public static readonly BACKQUOTED_IDENTIFIER = 335;
    public static readonly SIMPLE_COMMENT = 336;
    public static readonly BRACKETED_COMMENT = 337;
    public static readonly WS = 338;
    public static readonly UNRECOGNIZED = 339;
    public static readonly DELIMITER = 340;
    public static readonly RULE_singleStatement = 0;
    public static readonly RULE_standaloneExpression = 1;
    public static readonly RULE_standalonePathSpecification = 2;
    public static readonly RULE_standaloneType = 3;
    public static readonly RULE_standaloneRowPattern = 4;
    public static readonly RULE_standaloneFunctionSpecification = 5;
    public static readonly RULE_statement = 6;
    public static readonly RULE_rootQuery = 7;
    public static readonly RULE_withFunction = 8;
    public static readonly RULE_query = 9;
    public static readonly RULE_with = 10;
    public static readonly RULE_tableElement = 11;
    public static readonly RULE_columnDefinition = 12;
    public static readonly RULE_likeClause = 13;
    public static readonly RULE_properties = 14;
    public static readonly RULE_propertyAssignments = 15;
    public static readonly RULE_property = 16;
    public static readonly RULE_propertyValue = 17;
    public static readonly RULE_queryNoWith = 18;
    public static readonly RULE_limitRowCount = 19;
    public static readonly RULE_rowCount = 20;
    public static readonly RULE_queryTerm = 21;
    public static readonly RULE_queryPrimary = 22;
    public static readonly RULE_sortItem = 23;
    public static readonly RULE_querySpecification = 24;
    public static readonly RULE_groupBy = 25;
    public static readonly RULE_groupingElement = 26;
    public static readonly RULE_groupingSet = 27;
    public static readonly RULE_windowDefinition = 28;
    public static readonly RULE_windowSpecification = 29;
    public static readonly RULE_namedQuery = 30;
    public static readonly RULE_setQuantifier = 31;
    public static readonly RULE_selectItem = 32;
    public static readonly RULE_relation = 33;
    public static readonly RULE_joinType = 34;
    public static readonly RULE_joinCriteria = 35;
    public static readonly RULE_sampledRelation = 36;
    public static readonly RULE_sampleType = 37;
    public static readonly RULE_trimsSpecification = 38;
    public static readonly RULE_listAggOverflowBehavior = 39;
    public static readonly RULE_listaggCountIndication = 40;
    public static readonly RULE_patternRecognition = 41;
    public static readonly RULE_measureDefinition = 42;
    public static readonly RULE_rowsPerMatch = 43;
    public static readonly RULE_emptyMatchHandling = 44;
    public static readonly RULE_skipTo = 45;
    public static readonly RULE_subsetDefinition = 46;
    public static readonly RULE_variableDefinition = 47;
    public static readonly RULE_aliasedRelation = 48;
    public static readonly RULE_columnAliases = 49;
    public static readonly RULE_relationPrimary = 50;
    public static readonly RULE_jsonTableColumn = 51;
    public static readonly RULE_jsonTableSpecificPlan = 52;
    public static readonly RULE_jsonTablePathName = 53;
    public static readonly RULE_planPrimary = 54;
    public static readonly RULE_jsonTableDefaultPlan = 55;
    public static readonly RULE_tableFunctionCall = 56;
    public static readonly RULE_tableFunctionArgument = 57;
    public static readonly RULE_tableArgument = 58;
    public static readonly RULE_tableArgumentRelation = 59;
    public static readonly RULE_descriptorArgument = 60;
    public static readonly RULE_descriptorField = 61;
    public static readonly RULE_copartitionTables = 62;
    public static readonly RULE_expression = 63;
    public static readonly RULE_booleanExpression = 64;
    public static readonly RULE_predicate = 65;
    public static readonly RULE_valueExpression = 66;
    public static readonly RULE_primaryExpression = 67;
    public static readonly RULE_jsonPathInvocation = 68;
    public static readonly RULE_jsonValueExpression = 69;
    public static readonly RULE_jsonRepresentation = 70;
    public static readonly RULE_jsonArgument = 71;
    public static readonly RULE_jsonExistsErrorBehavior = 72;
    public static readonly RULE_jsonValueBehavior = 73;
    public static readonly RULE_jsonQueryWrapperBehavior = 74;
    public static readonly RULE_jsonQueryBehavior = 75;
    public static readonly RULE_jsonObjectMember = 76;
    public static readonly RULE_processingMode = 77;
    public static readonly RULE_nullTreatment = 78;
    public static readonly RULE_string = 79;
    public static readonly RULE_timeZoneSpecifier = 80;
    public static readonly RULE_comparisonOperator = 81;
    public static readonly RULE_comparisonQuantifier = 82;
    public static readonly RULE_booleanValue = 83;
    public static readonly RULE_interval = 84;
    public static readonly RULE_intervalField = 85;
    public static readonly RULE_normalForm = 86;
    public static readonly RULE_type = 87;
    public static readonly RULE_rowField = 88;
    public static readonly RULE_typeParameter = 89;
    public static readonly RULE_whenClause = 90;
    public static readonly RULE_filter = 91;
    public static readonly RULE_mergeCase = 92;
    public static readonly RULE_over = 93;
    public static readonly RULE_windowFrame = 94;
    public static readonly RULE_frameExtent = 95;
    public static readonly RULE_frameBound = 96;
    public static readonly RULE_rowPattern = 97;
    public static readonly RULE_patternPrimary = 98;
    public static readonly RULE_patternQuantifier = 99;
    public static readonly RULE_updateAssignment = 100;
    public static readonly RULE_explainOption = 101;
    public static readonly RULE_transactionMode = 102;
    public static readonly RULE_levelOfIsolation = 103;
    public static readonly RULE_callArgument = 104;
    public static readonly RULE_pathElement = 105;
    public static readonly RULE_pathSpecification = 106;
    public static readonly RULE_functionSpecification = 107;
    public static readonly RULE_functionDeclaration = 108;
    public static readonly RULE_parameterDeclaration = 109;
    public static readonly RULE_returnsClause = 110;
    public static readonly RULE_routineCharacteristic = 111;
    public static readonly RULE_controlStatement = 112;
    public static readonly RULE_caseStatementWhenClause = 113;
    public static readonly RULE_elseIfClause = 114;
    public static readonly RULE_elseClause = 115;
    public static readonly RULE_variableDeclaration = 116;
    public static readonly RULE_sqlStatementList = 117;
    public static readonly RULE_privilege = 118;
    public static readonly RULE_entityKind = 119;
    public static readonly RULE_grantObject = 120;
    public static readonly RULE_qualifiedName = 121;
    public static readonly RULE_queryPeriod = 122;
    public static readonly RULE_rangeType = 123;
    public static readonly RULE_grantor = 124;
    public static readonly RULE_principal = 125;
    public static readonly RULE_roles = 126;
    public static readonly RULE_privilegeOrRole = 127;
    public static readonly RULE_identifier = 128;
    public static readonly RULE_number = 129;
    public static readonly RULE_authorizationUser = 130;
    public static readonly RULE_nonReserved = 131;

    public static readonly literalNames = [
        null, "'.'", "'('", "')'", "','", "'SKIP'", "'=>'", "'->'", "'['", 
        "']'", "':'", "'|'", "'^'", "'$'", "'{-'", "'-}'", "'{'", "'}'", 
        "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
        "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
        "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
        "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
        "'CONDITIONAL'", "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
        "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", 
        "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DEFINE'", "'DEFINER'", 
        "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DETERMINISTIC'", 
        "'DISTINCT'", "'DISTRIBUTED'", "'DO'", "'DOUBLE'", "'DROP'", "'ELSE'", 
        "'EMPTY'", "'ELSEIF'", "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", 
        "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", "'FIRST'", 
        "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", 
        "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", 
        "'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", 
        "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDING'", "'INITIAL'", "'INNER'", 
        "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", 
        "'IO'", "'IS'", "'ISOLATION'", "'ITERATE'", "'JOIN'", "'JSON'", 
        "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_QUERY'", 
        "'JSON_TABLE'", "'JSON_VALUE'", "'KEEP'", "'KEY'", "'KEYS'", "'LANGUAGE'", 
        "'LAST'", "'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LEVEL'", 
        "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
        "'LOGICAL'", "'LOOP'", "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", 
        "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MEASURES'", "'MERGE'", 
        "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", "'NEXT'", "'NFC'", 
        "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", 
        "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", 
        "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", 
        "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", 
        "'PARTITIONS'", "'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", 
        "'PERIOD'", "'PERMUTE'", "'PLAN'", "'POSITION'", "'PRECEDING'", 
        "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'PRUNE'", 
        "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", "'REFRESH'", "'RENAME'", 
        "'REPEAT'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
        "'RESTRICT'", "'RETURN'", "'RETURNING'", "'RETURNS'", "'REVOKE'", 
        "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
        "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", 
        "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", "'SESSION'", 
        "'SET'", "'SETS'", "'SHOW'", "'SOME'", "'START'", "'STATS'", "'SUBSET'", 
        "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
        "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", "'TIMESTAMP'", 
        "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", "'TRUNCATE'", 
        "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", 
        "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
        "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", "'USING'", 
        "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", "'VALUES'", 
        "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", "'WHILE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
        "'WRITE'", "'YEAR'", "'ZONE'", "'='", null, "'<'", "'<='", "'>'", 
        "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'?'", "';'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, "ABSENT", "ADD", "ADMIN", 
        "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", 
        "ASC", "AT", "AUTHORIZATION", "BEGIN", "BERNOULLI", "BETWEEN", "BOTH", 
        "BY", "CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", 
        "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "CONDITIONAL", 
        "CONSTRAINT", "COUNT", "COPARTITION", "CREATE", "CROSS", "CUBE", 
        "CURRENT", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_PATH", "CURRENT_ROLE", 
        "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
        "DATA", "DATE", "DAY", "DEALLOCATE", "DECLARE", "DEFAULT", "DEFINE", 
        "DEFINER", "DELETE", "DENY", "DESC", "DESCRIBE", "DESCRIPTOR", "DETERMINISTIC", 
        "DISTINCT", "DISTRIBUTED", "DO", "DOUBLE", "DROP", "ELSE", "EMPTY", 
        "ELSEIF", "ENCODING", "END", "ERROR", "ESCAPE", "EXCEPT", "EXCLUDING", 
        "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", "FETCH", "FILTER", 
        "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", "FROM", "FULL", 
        "FUNCTION", "FUNCTIONS", "GRACE", "GRANT", "GRANTED", "GRANTS", 
        "GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", 
        "IGNORE", "IMMEDIATE", "IN", "INCLUDING", "INITIAL", "INNER", "INPUT", 
        "INSERT", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IO", "IS", 
        "ISOLATION", "ITERATE", "JOIN", "JSON", "JSON_ARRAY", "JSON_EXISTS", 
        "JSON_OBJECT", "JSON_QUERY", "JSON_TABLE", "JSON_VALUE", "KEEP", 
        "KEY", "KEYS", "LANGUAGE", "LAST", "LATERAL", "LEADING", "LEAVE", 
        "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTAGG", "LOCAL", "LOCALTIME", 
        "LOCALTIMESTAMP", "LOGICAL", "LOOP", "MAP", "MATCH", "MATCHED", 
        "MATCHES", "MATCH_RECOGNIZE", "MATERIALIZED", "MEASURES", "MERGE", 
        "MINUTE", "MONTH", "NATURAL", "NESTED", "NEXT", "NFC", "NFD", "NFKC", 
        "NFKD", "NO", "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", 
        "OBJECT", "OF", "OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", 
        "OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", "OVERFLOW", 
        "PARTITION", "PARTITIONS", "PASSING", "PAST", "PATH", "PATTERN", 
        "PER", "PERIOD", "PERMUTE", "PLAN", "POSITION", "PRECEDING", "PRECISION", 
        "PREPARE", "PRIVILEGES", "PROPERTIES", "PRUNE", "QUOTES", "RANGE", 
        "READ", "RECURSIVE", "REFRESH", "RENAME", "REPEAT", "REPEATABLE", 
        "REPLACE", "RESET", "RESPECT", "RESTRICT", "RETURN", "RETURNING", 
        "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
        "ROW", "ROWS", "RUNNING", "SCALAR", "SCHEMA", "SCHEMAS", "SECOND", 
        "SECURITY", "SEEK", "SELECT", "SERIALIZABLE", "SESSION", "SET", 
        "SETS", "SHOW", "SOME", "START", "STATS", "SUBSET", "SUBSTRING", 
        "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEXT", "TEXT_STRING", 
        "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", 
        "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", 
        "UNCOMMITTED", "UNCONDITIONAL", "UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", 
        "UNNEST", "UNTIL", "UPDATE", "USE", "USER", "USING", "UTF16", "UTF32", 
        "UTF8", "VALIDATE", "VALUE", "VALUES", "VERBOSE", "VERSION", "VIEW", 
        "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", "WITHIN", "WITHOUT", 
        "WORK", "WRAPPER", "WRITE", "YEAR", "ZONE", "EQ", "NEQ", "LT", "LTE", 
        "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", 
        "QUESTION_MARK", "SEMICOLON", "STRING", "UNICODE_STRING", "BINARY_LITERAL", 
        "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", 
        "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
        "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER"
    ];
    public static readonly ruleNames = [
        "singleStatement", "standaloneExpression", "standalonePathSpecification", 
        "standaloneType", "standaloneRowPattern", "standaloneFunctionSpecification", 
        "statement", "rootQuery", "withFunction", "query", "with", "tableElement", 
        "columnDefinition", "likeClause", "properties", "propertyAssignments", 
        "property", "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
        "queryTerm", "queryPrimary", "sortItem", "querySpecification", "groupBy", 
        "groupingElement", "groupingSet", "windowDefinition", "windowSpecification", 
        "namedQuery", "setQuantifier", "selectItem", "relation", "joinType", 
        "joinCriteria", "sampledRelation", "sampleType", "trimsSpecification", 
        "listAggOverflowBehavior", "listaggCountIndication", "patternRecognition", 
        "measureDefinition", "rowsPerMatch", "emptyMatchHandling", "skipTo", 
        "subsetDefinition", "variableDefinition", "aliasedRelation", "columnAliases", 
        "relationPrimary", "jsonTableColumn", "jsonTableSpecificPlan", "jsonTablePathName", 
        "planPrimary", "jsonTableDefaultPlan", "tableFunctionCall", "tableFunctionArgument", 
        "tableArgument", "tableArgumentRelation", "descriptorArgument", 
        "descriptorField", "copartitionTables", "expression", "booleanExpression", 
        "predicate", "valueExpression", "primaryExpression", "jsonPathInvocation", 
        "jsonValueExpression", "jsonRepresentation", "jsonArgument", "jsonExistsErrorBehavior", 
        "jsonValueBehavior", "jsonQueryWrapperBehavior", "jsonQueryBehavior", 
        "jsonObjectMember", "processingMode", "nullTreatment", "string", 
        "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
        "booleanValue", "interval", "intervalField", "normalForm", "type", 
        "rowField", "typeParameter", "whenClause", "filter", "mergeCase", 
        "over", "windowFrame", "frameExtent", "frameBound", "rowPattern", 
        "patternPrimary", "patternQuantifier", "updateAssignment", "explainOption", 
        "transactionMode", "levelOfIsolation", "callArgument", "pathElement", 
        "pathSpecification", "functionSpecification", "functionDeclaration", 
        "parameterDeclaration", "returnsClause", "routineCharacteristic", 
        "controlStatement", "caseStatementWhenClause", "elseIfClause", "elseClause", 
        "variableDeclaration", "sqlStatementList", "privilege", "entityKind", 
        "grantObject", "qualifiedName", "queryPeriod", "rangeType", "grantor", 
        "principal", "roles", "privilegeOrRole", "identifier", "number", 
        "authorizationUser", "nonReserved",
    ];

    public get grammarFileName(): string { return "TrinoSQL.g4"; }
    public get literalNames(): (string | null)[] { return TrinoSQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return TrinoSQLParser.symbolicNames; }
    public get ruleNames(): string[] { return TrinoSQLParser.ruleNames; }
    public get serializedATN(): number[] { return TrinoSQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, TrinoSQLParser._ATN, TrinoSQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 0, TrinoSQLParser.RULE_singleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 264;
            this.statement();
            this.state = 265;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneExpression(): StandaloneExpressionContext {
        let localContext = new StandaloneExpressionContext(this.context, this.state);
        this.enterRule(localContext, 2, TrinoSQLParser.RULE_standaloneExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 267;
            this.expression();
            this.state = 268;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standalonePathSpecification(): StandalonePathSpecificationContext {
        let localContext = new StandalonePathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 4, TrinoSQLParser.RULE_standalonePathSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 270;
            this.pathSpecification();
            this.state = 271;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneType(): StandaloneTypeContext {
        let localContext = new StandaloneTypeContext(this.context, this.state);
        this.enterRule(localContext, 6, TrinoSQLParser.RULE_standaloneType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 273;
            this.type_(0);
            this.state = 274;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneRowPattern(): StandaloneRowPatternContext {
        let localContext = new StandaloneRowPatternContext(this.context, this.state);
        this.enterRule(localContext, 8, TrinoSQLParser.RULE_standaloneRowPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 276;
            this.rowPattern(0);
            this.state = 277;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneFunctionSpecification(): StandaloneFunctionSpecificationContext {
        let localContext = new StandaloneFunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 10, TrinoSQLParser.RULE_standaloneFunctionSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 279;
            this.functionSpecification();
            this.state = 280;
            this.match(TrinoSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 12, TrinoSQLParser.RULE_statement);
        let _la: number;
        try {
            this.state = 1167;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 282;
                this.rootQuery();
                }
                break;
            case 2:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 283;
                this.match(TrinoSQLParser.USE);
                this.state = 284;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 3:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 285;
                this.match(TrinoSQLParser.USE);
                this.state = 286;
                (localContext as UseContext)._catalog = this.identifier();
                this.state = 287;
                this.match(TrinoSQLParser.T__0);
                this.state = 288;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 4:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 290;
                this.match(TrinoSQLParser.CREATE);
                this.state = 291;
                this.match(TrinoSQLParser.CATALOG);
                this.state = 295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
                case 1:
                    {
                    this.state = 292;
                    this.match(TrinoSQLParser.IF);
                    this.state = 293;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 294;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 297;
                (localContext as CreateCatalogContext)._catalog = this.identifier();
                this.state = 298;
                this.match(TrinoSQLParser.USING);
                this.state = 299;
                (localContext as CreateCatalogContext)._connectorName = this.identifier();
                this.state = 302;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 300;
                    this.match(TrinoSQLParser.COMMENT);
                    this.state = 301;
                    this.string_();
                    }
                }

                this.state = 306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 304;
                    this.match(TrinoSQLParser.AUTHORIZATION);
                    this.state = 305;
                    this.principal();
                    }
                }

                this.state = 310;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 308;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 309;
                    this.properties();
                    }
                }

                }
                break;
            case 5:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 312;
                this.match(TrinoSQLParser.DROP);
                this.state = 313;
                this.match(TrinoSQLParser.CATALOG);
                this.state = 316;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
                case 1:
                    {
                    this.state = 314;
                    this.match(TrinoSQLParser.IF);
                    this.state = 315;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 318;
                (localContext as DropCatalogContext)._catalog = this.identifier();
                this.state = 320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 229) {
                    {
                    this.state = 319;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 229)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                localContext = new CreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 322;
                this.match(TrinoSQLParser.CREATE);
                this.state = 323;
                this.match(TrinoSQLParser.SCHEMA);
                this.state = 327;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
                case 1:
                    {
                    this.state = 324;
                    this.match(TrinoSQLParser.IF);
                    this.state = 325;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 326;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 329;
                this.qualifiedName();
                this.state = 332;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 330;
                    this.match(TrinoSQLParser.AUTHORIZATION);
                    this.state = 331;
                    this.principal();
                    }
                }

                this.state = 336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 334;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 335;
                    this.properties();
                    }
                }

                }
                break;
            case 7:
                localContext = new DropSchemaContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 338;
                this.match(TrinoSQLParser.DROP);
                this.state = 339;
                this.match(TrinoSQLParser.SCHEMA);
                this.state = 342;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 340;
                    this.match(TrinoSQLParser.IF);
                    this.state = 341;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 344;
                this.qualifiedName();
                this.state = 346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 229) {
                    {
                    this.state = 345;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 229)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 8:
                localContext = new RenameSchemaContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 348;
                this.match(TrinoSQLParser.ALTER);
                this.state = 349;
                this.match(TrinoSQLParser.SCHEMA);
                this.state = 350;
                this.qualifiedName();
                this.state = 351;
                this.match(TrinoSQLParser.RENAME);
                this.state = 352;
                this.match(TrinoSQLParser.TO);
                this.state = 353;
                this.identifier();
                }
                break;
            case 9:
                localContext = new SetSchemaAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 355;
                this.match(TrinoSQLParser.ALTER);
                this.state = 356;
                this.match(TrinoSQLParser.SCHEMA);
                this.state = 357;
                this.qualifiedName();
                this.state = 358;
                this.match(TrinoSQLParser.SET);
                this.state = 359;
                this.match(TrinoSQLParser.AUTHORIZATION);
                this.state = 360;
                this.principal();
                }
                break;
            case 10:
                localContext = new CreateTableAsSelectContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 362;
                this.match(TrinoSQLParser.CREATE);
                this.state = 365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 363;
                    this.match(TrinoSQLParser.OR);
                    this.state = 364;
                    this.match(TrinoSQLParser.REPLACE);
                    }
                }

                this.state = 367;
                this.match(TrinoSQLParser.TABLE);
                this.state = 371;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 368;
                    this.match(TrinoSQLParser.IF);
                    this.state = 369;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 370;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 373;
                this.qualifiedName();
                this.state = 375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 374;
                    this.columnAliases();
                    }
                }

                this.state = 379;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 377;
                    this.match(TrinoSQLParser.COMMENT);
                    this.state = 378;
                    this.string_();
                    }
                }

                this.state = 383;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 381;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 382;
                    this.properties();
                    }
                }

                this.state = 385;
                this.match(TrinoSQLParser.AS);
                this.state = 391;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 386;
                    this.rootQuery();
                    }
                    break;
                case 2:
                    {
                    this.state = 387;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 388;
                    this.rootQuery();
                    this.state = 389;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                this.state = 398;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 393;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 395;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 179) {
                        {
                        this.state = 394;
                        this.match(TrinoSQLParser.NO);
                        }
                    }

                    this.state = 397;
                    this.match(TrinoSQLParser.DATA);
                    }
                }

                }
                break;
            case 11:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 400;
                this.match(TrinoSQLParser.CREATE);
                this.state = 403;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 401;
                    this.match(TrinoSQLParser.OR);
                    this.state = 402;
                    this.match(TrinoSQLParser.REPLACE);
                    }
                }

                this.state = 405;
                this.match(TrinoSQLParser.TABLE);
                this.state = 409;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 406;
                    this.match(TrinoSQLParser.IF);
                    this.state = 407;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 408;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 411;
                this.qualifiedName();
                this.state = 412;
                this.match(TrinoSQLParser.T__1);
                this.state = 413;
                this.tableElement();
                this.state = 418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 414;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 415;
                    this.tableElement();
                    }
                    }
                    this.state = 420;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 421;
                this.match(TrinoSQLParser.T__2);
                this.state = 424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 422;
                    this.match(TrinoSQLParser.COMMENT);
                    this.state = 423;
                    this.string_();
                    }
                }

                this.state = 428;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 426;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 427;
                    this.properties();
                    }
                }

                }
                break;
            case 12:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 430;
                this.match(TrinoSQLParser.DROP);
                this.state = 431;
                this.match(TrinoSQLParser.TABLE);
                this.state = 434;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 432;
                    this.match(TrinoSQLParser.IF);
                    this.state = 433;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 436;
                this.qualifiedName();
                }
                break;
            case 13:
                localContext = new InsertIntoContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 437;
                this.match(TrinoSQLParser.INSERT);
                this.state = 438;
                this.match(TrinoSQLParser.INTO);
                this.state = 439;
                this.qualifiedName();
                this.state = 441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 440;
                    this.columnAliases();
                    }
                    break;
                }
                this.state = 443;
                this.rootQuery();
                }
                break;
            case 14:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 445;
                this.match(TrinoSQLParser.DELETE);
                this.state = 446;
                this.match(TrinoSQLParser.FROM);
                this.state = 447;
                this.qualifiedName();
                this.state = 450;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 448;
                    this.match(TrinoSQLParser.WHERE);
                    this.state = 449;
                    this.booleanExpression(0);
                    }
                }

                }
                break;
            case 15:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 452;
                this.match(TrinoSQLParser.TRUNCATE);
                this.state = 453;
                this.match(TrinoSQLParser.TABLE);
                this.state = 454;
                this.qualifiedName();
                }
                break;
            case 16:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 455;
                this.match(TrinoSQLParser.COMMENT);
                this.state = 456;
                this.match(TrinoSQLParser.ON);
                this.state = 457;
                this.match(TrinoSQLParser.TABLE);
                this.state = 458;
                this.qualifiedName();
                this.state = 459;
                this.match(TrinoSQLParser.IS);
                this.state = 462;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSQLParser.STRING:
                case TrinoSQLParser.UNICODE_STRING:
                    {
                    this.state = 460;
                    this.string_();
                    }
                    break;
                case TrinoSQLParser.NULL:
                    {
                    this.state = 461;
                    this.match(TrinoSQLParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 17:
                localContext = new CommentViewContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 464;
                this.match(TrinoSQLParser.COMMENT);
                this.state = 465;
                this.match(TrinoSQLParser.ON);
                this.state = 466;
                this.match(TrinoSQLParser.VIEW);
                this.state = 467;
                this.qualifiedName();
                this.state = 468;
                this.match(TrinoSQLParser.IS);
                this.state = 471;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSQLParser.STRING:
                case TrinoSQLParser.UNICODE_STRING:
                    {
                    this.state = 469;
                    this.string_();
                    }
                    break;
                case TrinoSQLParser.NULL:
                    {
                    this.state = 470;
                    this.match(TrinoSQLParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new CommentColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 473;
                this.match(TrinoSQLParser.COMMENT);
                this.state = 474;
                this.match(TrinoSQLParser.ON);
                this.state = 475;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 476;
                this.qualifiedName();
                this.state = 477;
                this.match(TrinoSQLParser.IS);
                this.state = 480;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSQLParser.STRING:
                case TrinoSQLParser.UNICODE_STRING:
                    {
                    this.state = 478;
                    this.string_();
                    }
                    break;
                case TrinoSQLParser.NULL:
                    {
                    this.state = 479;
                    this.match(TrinoSQLParser.NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 19:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 482;
                this.match(TrinoSQLParser.ALTER);
                this.state = 483;
                this.match(TrinoSQLParser.TABLE);
                this.state = 486;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
                case 1:
                    {
                    this.state = 484;
                    this.match(TrinoSQLParser.IF);
                    this.state = 485;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 488;
                (localContext as RenameTableContext)._from_ = this.qualifiedName();
                this.state = 489;
                this.match(TrinoSQLParser.RENAME);
                this.state = 490;
                this.match(TrinoSQLParser.TO);
                this.state = 491;
                (localContext as RenameTableContext)._to = this.qualifiedName();
                }
                break;
            case 20:
                localContext = new AddColumnContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 493;
                this.match(TrinoSQLParser.ALTER);
                this.state = 494;
                this.match(TrinoSQLParser.TABLE);
                this.state = 497;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
                case 1:
                    {
                    this.state = 495;
                    this.match(TrinoSQLParser.IF);
                    this.state = 496;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 499;
                (localContext as AddColumnContext)._tableName = this.qualifiedName();
                this.state = 500;
                this.match(TrinoSQLParser.ADD);
                this.state = 501;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.match(TrinoSQLParser.IF);
                    this.state = 503;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 504;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 507;
                (localContext as AddColumnContext)._column = this.columnDefinition();
                }
                break;
            case 21:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 509;
                this.match(TrinoSQLParser.ALTER);
                this.state = 510;
                this.match(TrinoSQLParser.TABLE);
                this.state = 513;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 511;
                    this.match(TrinoSQLParser.IF);
                    this.state = 512;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 515;
                (localContext as RenameColumnContext)._tableName = this.qualifiedName();
                this.state = 516;
                this.match(TrinoSQLParser.RENAME);
                this.state = 517;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 520;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 518;
                    this.match(TrinoSQLParser.IF);
                    this.state = 519;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 522;
                (localContext as RenameColumnContext)._from_ = this.qualifiedName();
                this.state = 523;
                this.match(TrinoSQLParser.TO);
                this.state = 524;
                (localContext as RenameColumnContext)._to = this.identifier();
                }
                break;
            case 22:
                localContext = new DropColumnContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 526;
                this.match(TrinoSQLParser.ALTER);
                this.state = 527;
                this.match(TrinoSQLParser.TABLE);
                this.state = 530;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 528;
                    this.match(TrinoSQLParser.IF);
                    this.state = 529;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 532;
                (localContext as DropColumnContext)._tableName = this.qualifiedName();
                this.state = 533;
                this.match(TrinoSQLParser.DROP);
                this.state = 534;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 537;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 535;
                    this.match(TrinoSQLParser.IF);
                    this.state = 536;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 539;
                (localContext as DropColumnContext)._column = this.qualifiedName();
                }
                break;
            case 23:
                localContext = new SetColumnTypeContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 541;
                this.match(TrinoSQLParser.ALTER);
                this.state = 542;
                this.match(TrinoSQLParser.TABLE);
                this.state = 545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 543;
                    this.match(TrinoSQLParser.IF);
                    this.state = 544;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 547;
                (localContext as SetColumnTypeContext)._tableName = this.qualifiedName();
                this.state = 548;
                this.match(TrinoSQLParser.ALTER);
                this.state = 549;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 550;
                (localContext as SetColumnTypeContext)._columnName = this.qualifiedName();
                this.state = 551;
                this.match(TrinoSQLParser.SET);
                this.state = 552;
                this.match(TrinoSQLParser.DATA);
                this.state = 553;
                this.match(TrinoSQLParser.TYPE);
                this.state = 554;
                this.type_(0);
                }
                break;
            case 24:
                localContext = new DropNotNullConstraintContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 556;
                this.match(TrinoSQLParser.ALTER);
                this.state = 557;
                this.match(TrinoSQLParser.TABLE);
                this.state = 560;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 558;
                    this.match(TrinoSQLParser.IF);
                    this.state = 559;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 562;
                (localContext as DropNotNullConstraintContext)._tableName = this.qualifiedName();
                this.state = 563;
                this.match(TrinoSQLParser.ALTER);
                this.state = 564;
                this.match(TrinoSQLParser.COLUMN);
                this.state = 565;
                (localContext as DropNotNullConstraintContext)._columnName = this.identifier();
                this.state = 566;
                this.match(TrinoSQLParser.DROP);
                this.state = 567;
                this.match(TrinoSQLParser.NOT);
                this.state = 568;
                this.match(TrinoSQLParser.NULL);
                }
                break;
            case 25:
                localContext = new SetTableAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 570;
                this.match(TrinoSQLParser.ALTER);
                this.state = 571;
                this.match(TrinoSQLParser.TABLE);
                this.state = 572;
                (localContext as SetTableAuthorizationContext)._tableName = this.qualifiedName();
                this.state = 573;
                this.match(TrinoSQLParser.SET);
                this.state = 574;
                this.match(TrinoSQLParser.AUTHORIZATION);
                this.state = 575;
                this.principal();
                }
                break;
            case 26:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 577;
                this.match(TrinoSQLParser.ALTER);
                this.state = 578;
                this.match(TrinoSQLParser.TABLE);
                this.state = 579;
                (localContext as SetTablePropertiesContext)._tableName = this.qualifiedName();
                this.state = 580;
                this.match(TrinoSQLParser.SET);
                this.state = 581;
                this.match(TrinoSQLParser.PROPERTIES);
                this.state = 582;
                this.propertyAssignments();
                }
                break;
            case 27:
                localContext = new TableExecuteContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 584;
                this.match(TrinoSQLParser.ALTER);
                this.state = 585;
                this.match(TrinoSQLParser.TABLE);
                this.state = 586;
                (localContext as TableExecuteContext)._tableName = this.qualifiedName();
                this.state = 587;
                this.match(TrinoSQLParser.EXECUTE);
                this.state = 588;
                (localContext as TableExecuteContext)._procedureName = this.identifier();
                this.state = 601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 589;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 598;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 590;
                        this.callArgument();
                        this.state = 595;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 591;
                            this.match(TrinoSQLParser.T__3);
                            this.state = 592;
                            this.callArgument();
                            }
                            }
                            this.state = 597;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 600;
                    this.match(TrinoSQLParser.T__2);
                    }
                }

                this.state = 605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 603;
                    this.match(TrinoSQLParser.WHERE);
                    this.state = 604;
                    (localContext as TableExecuteContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 28:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 607;
                this.match(TrinoSQLParser.ANALYZE);
                this.state = 608;
                this.qualifiedName();
                this.state = 611;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 609;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 610;
                    this.properties();
                    }
                }

                }
                break;
            case 29:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 613;
                this.match(TrinoSQLParser.CREATE);
                this.state = 616;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 614;
                    this.match(TrinoSQLParser.OR);
                    this.state = 615;
                    this.match(TrinoSQLParser.REPLACE);
                    }
                }

                this.state = 618;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 619;
                this.match(TrinoSQLParser.VIEW);
                this.state = 623;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
                case 1:
                    {
                    this.state = 620;
                    this.match(TrinoSQLParser.IF);
                    this.state = 621;
                    this.match(TrinoSQLParser.NOT);
                    this.state = 622;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 625;
                this.qualifiedName();
                this.state = 629;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 626;
                    this.match(TrinoSQLParser.GRACE);
                    this.state = 627;
                    this.match(TrinoSQLParser.PERIOD);
                    this.state = 628;
                    this.interval();
                    }
                }

                this.state = 633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 631;
                    this.match(TrinoSQLParser.COMMENT);
                    this.state = 632;
                    this.string_();
                    }
                }

                this.state = 637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 635;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 636;
                    this.properties();
                    }
                }

                this.state = 639;
                this.match(TrinoSQLParser.AS);
                this.state = 640;
                this.rootQuery();
                }
                break;
            case 30:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 642;
                this.match(TrinoSQLParser.CREATE);
                this.state = 645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 643;
                    this.match(TrinoSQLParser.OR);
                    this.state = 644;
                    this.match(TrinoSQLParser.REPLACE);
                    }
                }

                this.state = 647;
                this.match(TrinoSQLParser.VIEW);
                this.state = 648;
                this.qualifiedName();
                this.state = 651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 649;
                    this.match(TrinoSQLParser.COMMENT);
                    this.state = 650;
                    this.string_();
                    }
                }

                this.state = 655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 246) {
                    {
                    this.state = 653;
                    this.match(TrinoSQLParser.SECURITY);
                    this.state = 654;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 72 || _la === 131)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 657;
                this.match(TrinoSQLParser.AS);
                this.state = 658;
                this.rootQuery();
                }
                break;
            case 31:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 660;
                this.match(TrinoSQLParser.REFRESH);
                this.state = 661;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 662;
                this.match(TrinoSQLParser.VIEW);
                this.state = 663;
                this.qualifiedName();
                }
                break;
            case 32:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 664;
                this.match(TrinoSQLParser.DROP);
                this.state = 665;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 666;
                this.match(TrinoSQLParser.VIEW);
                this.state = 669;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
                case 1:
                    {
                    this.state = 667;
                    this.match(TrinoSQLParser.IF);
                    this.state = 668;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 671;
                this.qualifiedName();
                }
                break;
            case 33:
                localContext = new RenameMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 672;
                this.match(TrinoSQLParser.ALTER);
                this.state = 673;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 674;
                this.match(TrinoSQLParser.VIEW);
                this.state = 677;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
                case 1:
                    {
                    this.state = 675;
                    this.match(TrinoSQLParser.IF);
                    this.state = 676;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 679;
                (localContext as RenameMaterializedViewContext)._from_ = this.qualifiedName();
                this.state = 680;
                this.match(TrinoSQLParser.RENAME);
                this.state = 681;
                this.match(TrinoSQLParser.TO);
                this.state = 682;
                (localContext as RenameMaterializedViewContext)._to = this.qualifiedName();
                }
                break;
            case 34:
                localContext = new SetMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 684;
                this.match(TrinoSQLParser.ALTER);
                this.state = 685;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 686;
                this.match(TrinoSQLParser.VIEW);
                this.state = 687;
                this.qualifiedName();
                this.state = 688;
                this.match(TrinoSQLParser.SET);
                this.state = 689;
                this.match(TrinoSQLParser.PROPERTIES);
                this.state = 690;
                this.propertyAssignments();
                }
                break;
            case 35:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 692;
                this.match(TrinoSQLParser.DROP);
                this.state = 693;
                this.match(TrinoSQLParser.VIEW);
                this.state = 696;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 694;
                    this.match(TrinoSQLParser.IF);
                    this.state = 695;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 698;
                this.qualifiedName();
                }
                break;
            case 36:
                localContext = new RenameViewContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 699;
                this.match(TrinoSQLParser.ALTER);
                this.state = 700;
                this.match(TrinoSQLParser.VIEW);
                this.state = 701;
                (localContext as RenameViewContext)._from_ = this.qualifiedName();
                this.state = 702;
                this.match(TrinoSQLParser.RENAME);
                this.state = 703;
                this.match(TrinoSQLParser.TO);
                this.state = 704;
                (localContext as RenameViewContext)._to = this.qualifiedName();
                }
                break;
            case 37:
                localContext = new SetViewAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 706;
                this.match(TrinoSQLParser.ALTER);
                this.state = 707;
                this.match(TrinoSQLParser.VIEW);
                this.state = 708;
                (localContext as SetViewAuthorizationContext)._from_ = this.qualifiedName();
                this.state = 709;
                this.match(TrinoSQLParser.SET);
                this.state = 710;
                this.match(TrinoSQLParser.AUTHORIZATION);
                this.state = 711;
                this.principal();
                }
                break;
            case 38:
                localContext = new CallContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 713;
                this.match(TrinoSQLParser.CALL);
                this.state = 714;
                this.qualifiedName();
                this.state = 715;
                this.match(TrinoSQLParser.T__1);
                this.state = 724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 716;
                    this.callArgument();
                    this.state = 721;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 717;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 718;
                        this.callArgument();
                        }
                        }
                        this.state = 723;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 726;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 39:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 728;
                this.match(TrinoSQLParser.CREATE);
                this.state = 731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 729;
                    this.match(TrinoSQLParser.OR);
                    this.state = 730;
                    this.match(TrinoSQLParser.REPLACE);
                    }
                }

                this.state = 733;
                this.functionSpecification();
                }
                break;
            case 40:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 734;
                this.match(TrinoSQLParser.DROP);
                this.state = 735;
                this.match(TrinoSQLParser.FUNCTION);
                this.state = 738;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 736;
                    this.match(TrinoSQLParser.IF);
                    this.state = 737;
                    this.match(TrinoSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 740;
                this.functionDeclaration();
                }
                break;
            case 41:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 741;
                this.match(TrinoSQLParser.CREATE);
                this.state = 742;
                this.match(TrinoSQLParser.ROLE);
                this.state = 743;
                (localContext as CreateRoleContext)._name = this.identifier();
                this.state = 747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 744;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 745;
                    this.match(TrinoSQLParser.ADMIN);
                    this.state = 746;
                    this.grantor();
                    }
                }

                this.state = 751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 749;
                    this.match(TrinoSQLParser.IN);
                    this.state = 750;
                    (localContext as CreateRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 42:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 753;
                this.match(TrinoSQLParser.DROP);
                this.state = 754;
                this.match(TrinoSQLParser.ROLE);
                this.state = 755;
                (localContext as DropRoleContext)._name = this.identifier();
                this.state = 758;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 756;
                    this.match(TrinoSQLParser.IN);
                    this.state = 757;
                    (localContext as DropRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 43:
                localContext = new GrantRolesContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 760;
                this.match(TrinoSQLParser.GRANT);
                this.state = 761;
                this.privilegeOrRole();
                this.state = 766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 762;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 763;
                    this.privilegeOrRole();
                    }
                    }
                    this.state = 768;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 769;
                this.match(TrinoSQLParser.TO);
                this.state = 770;
                this.principal();
                this.state = 775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 771;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 772;
                    this.principal();
                    }
                    }
                    this.state = 777;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 778;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 779;
                    this.match(TrinoSQLParser.ADMIN);
                    this.state = 780;
                    this.match(TrinoSQLParser.OPTION);
                    }
                }

                this.state = 786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 111) {
                    {
                    this.state = 783;
                    this.match(TrinoSQLParser.GRANTED);
                    this.state = 784;
                    this.match(TrinoSQLParser.BY);
                    this.state = 785;
                    this.grantor();
                    }
                }

                this.state = 790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 788;
                    this.match(TrinoSQLParser.IN);
                    this.state = 789;
                    (localContext as GrantRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 44:
                localContext = new GrantPrivilegesContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 792;
                this.match(TrinoSQLParser.GRANT);
                this.state = 803;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 68, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 793;
                    this.privilegeOrRole();
                    this.state = 798;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 794;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 795;
                        this.privilegeOrRole();
                        }
                        }
                        this.state = 800;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 801;
                    this.match(TrinoSQLParser.ALL);
                    this.state = 802;
                    this.match(TrinoSQLParser.PRIVILEGES);
                    }
                    break;
                }
                this.state = 805;
                this.match(TrinoSQLParser.ON);
                this.state = 806;
                this.grantObject();
                this.state = 807;
                this.match(TrinoSQLParser.TO);
                this.state = 808;
                this.principal();
                this.state = 812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 809;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 810;
                    this.match(TrinoSQLParser.GRANT);
                    this.state = 811;
                    this.match(TrinoSQLParser.OPTION);
                    }
                }

                }
                break;
            case 45:
                localContext = new RevokeRolesContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 814;
                this.match(TrinoSQLParser.REVOKE);
                this.state = 818;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
                case 1:
                    {
                    this.state = 815;
                    this.match(TrinoSQLParser.ADMIN);
                    this.state = 816;
                    this.match(TrinoSQLParser.OPTION);
                    this.state = 817;
                    this.match(TrinoSQLParser.FOR);
                    }
                    break;
                }
                this.state = 820;
                this.privilegeOrRole();
                this.state = 825;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 821;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 822;
                    this.privilegeOrRole();
                    }
                    }
                    this.state = 827;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 828;
                this.match(TrinoSQLParser.FROM);
                this.state = 829;
                this.principal();
                this.state = 834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 830;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 831;
                    this.principal();
                    }
                    }
                    this.state = 836;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 111) {
                    {
                    this.state = 837;
                    this.match(TrinoSQLParser.GRANTED);
                    this.state = 838;
                    this.match(TrinoSQLParser.BY);
                    this.state = 839;
                    this.grantor();
                    }
                }

                this.state = 844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 842;
                    this.match(TrinoSQLParser.IN);
                    this.state = 843;
                    (localContext as RevokeRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 46:
                localContext = new RevokePrivilegesContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 846;
                this.match(TrinoSQLParser.REVOKE);
                this.state = 850;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 847;
                    this.match(TrinoSQLParser.GRANT);
                    this.state = 848;
                    this.match(TrinoSQLParser.OPTION);
                    this.state = 849;
                    this.match(TrinoSQLParser.FOR);
                    }
                    break;
                }
                this.state = 862;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 852;
                    this.privilegeOrRole();
                    this.state = 857;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 853;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 854;
                        this.privilegeOrRole();
                        }
                        }
                        this.state = 859;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 860;
                    this.match(TrinoSQLParser.ALL);
                    this.state = 861;
                    this.match(TrinoSQLParser.PRIVILEGES);
                    }
                    break;
                }
                this.state = 864;
                this.match(TrinoSQLParser.ON);
                this.state = 865;
                this.grantObject();
                this.state = 866;
                this.match(TrinoSQLParser.FROM);
                this.state = 867;
                (localContext as RevokePrivilegesContext)._grantee = this.principal();
                }
                break;
            case 47:
                localContext = new DenyContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 869;
                this.match(TrinoSQLParser.DENY);
                this.state = 880;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 79, this.context) ) {
                case 1:
                    {
                    this.state = 870;
                    this.privilege();
                    this.state = 875;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 871;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 872;
                        this.privilege();
                        }
                        }
                        this.state = 877;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 878;
                    this.match(TrinoSQLParser.ALL);
                    this.state = 879;
                    this.match(TrinoSQLParser.PRIVILEGES);
                    }
                    break;
                }
                this.state = 882;
                this.match(TrinoSQLParser.ON);
                this.state = 883;
                this.grantObject();
                this.state = 884;
                this.match(TrinoSQLParser.TO);
                this.state = 885;
                (localContext as DenyContext)._grantee = this.principal();
                }
                break;
            case 48:
                localContext = new SetRoleContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 887;
                this.match(TrinoSQLParser.SET);
                this.state = 888;
                this.match(TrinoSQLParser.ROLE);
                this.state = 892;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                case 1:
                    {
                    this.state = 889;
                    this.match(TrinoSQLParser.ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 890;
                    this.match(TrinoSQLParser.NONE);
                    }
                    break;
                case 3:
                    {
                    this.state = 891;
                    (localContext as SetRoleContext)._role = this.identifier();
                    }
                    break;
                }
                this.state = 896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 894;
                    this.match(TrinoSQLParser.IN);
                    this.state = 895;
                    (localContext as SetRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 49:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 898;
                this.match(TrinoSQLParser.SHOW);
                this.state = 899;
                this.match(TrinoSQLParser.GRANTS);
                this.state = 902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 900;
                    this.match(TrinoSQLParser.ON);
                    this.state = 901;
                    this.grantObject();
                    }
                }

                }
                break;
            case 50:
                localContext = new ExplainContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 904;
                this.match(TrinoSQLParser.EXPLAIN);
                this.state = 916;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 905;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 906;
                    this.explainOption();
                    this.state = 911;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 907;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 908;
                        this.explainOption();
                        }
                        }
                        this.state = 913;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 914;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                this.state = 918;
                this.statement();
                }
                break;
            case 51:
                localContext = new ExplainAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 919;
                this.match(TrinoSQLParser.EXPLAIN);
                this.state = 920;
                this.match(TrinoSQLParser.ANALYZE);
                this.state = 922;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 921;
                    this.match(TrinoSQLParser.VERBOSE);
                    }
                }

                this.state = 924;
                this.statement();
                }
                break;
            case 52:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 925;
                this.match(TrinoSQLParser.SHOW);
                this.state = 926;
                this.match(TrinoSQLParser.CREATE);
                this.state = 927;
                this.match(TrinoSQLParser.TABLE);
                this.state = 928;
                this.qualifiedName();
                }
                break;
            case 53:
                localContext = new ShowCreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 929;
                this.match(TrinoSQLParser.SHOW);
                this.state = 930;
                this.match(TrinoSQLParser.CREATE);
                this.state = 931;
                this.match(TrinoSQLParser.SCHEMA);
                this.state = 932;
                this.qualifiedName();
                }
                break;
            case 54:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 933;
                this.match(TrinoSQLParser.SHOW);
                this.state = 934;
                this.match(TrinoSQLParser.CREATE);
                this.state = 935;
                this.match(TrinoSQLParser.VIEW);
                this.state = 936;
                this.qualifiedName();
                }
                break;
            case 55:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 937;
                this.match(TrinoSQLParser.SHOW);
                this.state = 938;
                this.match(TrinoSQLParser.CREATE);
                this.state = 939;
                this.match(TrinoSQLParser.MATERIALIZED);
                this.state = 940;
                this.match(TrinoSQLParser.VIEW);
                this.state = 941;
                this.qualifiedName();
                }
                break;
            case 56:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 942;
                this.match(TrinoSQLParser.SHOW);
                this.state = 943;
                this.match(TrinoSQLParser.TABLES);
                this.state = 946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 944;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 945;
                    this.qualifiedName();
                    }
                }

                this.state = 954;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 948;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 949;
                    (localContext as ShowTablesContext)._pattern = this.string_();
                    this.state = 952;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 950;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 951;
                        (localContext as ShowTablesContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 57:
                localContext = new ShowSchemasContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 956;
                this.match(TrinoSQLParser.SHOW);
                this.state = 957;
                this.match(TrinoSQLParser.SCHEMAS);
                this.state = 960;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 958;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 959;
                    this.identifier();
                    }
                }

                this.state = 968;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 962;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 963;
                    (localContext as ShowSchemasContext)._pattern = this.string_();
                    this.state = 966;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 964;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 965;
                        (localContext as ShowSchemasContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 58:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 970;
                this.match(TrinoSQLParser.SHOW);
                this.state = 971;
                this.match(TrinoSQLParser.CATALOGS);
                this.state = 978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 972;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 973;
                    (localContext as ShowCatalogsContext)._pattern = this.string_();
                    this.state = 976;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 974;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 975;
                        (localContext as ShowCatalogsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 59:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 980;
                this.match(TrinoSQLParser.SHOW);
                this.state = 981;
                this.match(TrinoSQLParser.COLUMNS);
                this.state = 982;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 122)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 983;
                this.qualifiedName();
                this.state = 990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 984;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 985;
                    (localContext as ShowColumnsContext)._pattern = this.string_();
                    this.state = 988;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 986;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 987;
                        (localContext as ShowColumnsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 60:
                localContext = new ShowStatsContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 992;
                this.match(TrinoSQLParser.SHOW);
                this.state = 993;
                this.match(TrinoSQLParser.STATS);
                this.state = 994;
                this.match(TrinoSQLParser.FOR);
                this.state = 995;
                this.qualifiedName();
                }
                break;
            case 61:
                localContext = new ShowStatsForQueryContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 996;
                this.match(TrinoSQLParser.SHOW);
                this.state = 997;
                this.match(TrinoSQLParser.STATS);
                this.state = 998;
                this.match(TrinoSQLParser.FOR);
                this.state = 999;
                this.match(TrinoSQLParser.T__1);
                this.state = 1000;
                this.rootQuery();
                this.state = 1001;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 62:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1003;
                this.match(TrinoSQLParser.SHOW);
                this.state = 1005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 1004;
                    this.match(TrinoSQLParser.CURRENT);
                    }
                }

                this.state = 1007;
                this.match(TrinoSQLParser.ROLES);
                this.state = 1010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1008;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1009;
                    this.identifier();
                    }
                }

                }
                break;
            case 63:
                localContext = new ShowRoleGrantsContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1012;
                this.match(TrinoSQLParser.SHOW);
                this.state = 1013;
                this.match(TrinoSQLParser.ROLE);
                this.state = 1014;
                this.match(TrinoSQLParser.GRANTS);
                this.state = 1017;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1015;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1016;
                    this.identifier();
                    }
                }

                }
                break;
            case 64:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1019;
                this.match(TrinoSQLParser.DESCRIBE);
                this.state = 1020;
                this.qualifiedName();
                }
                break;
            case 65:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1021;
                this.match(TrinoSQLParser.DESC);
                this.state = 1022;
                this.qualifiedName();
                }
                break;
            case 66:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1023;
                this.match(TrinoSQLParser.SHOW);
                this.state = 1024;
                this.match(TrinoSQLParser.FUNCTIONS);
                this.state = 1027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1025;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1026;
                    this.qualifiedName();
                    }
                }

                this.state = 1035;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1029;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 1030;
                    (localContext as ShowFunctionsContext)._pattern = this.string_();
                    this.state = 1033;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1031;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 1032;
                        (localContext as ShowFunctionsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 67:
                localContext = new ShowSessionContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1037;
                this.match(TrinoSQLParser.SHOW);
                this.state = 1038;
                this.match(TrinoSQLParser.SESSION);
                this.state = 1045;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1039;
                    this.match(TrinoSQLParser.LIKE);
                    this.state = 1040;
                    (localContext as ShowSessionContext)._pattern = this.string_();
                    this.state = 1043;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1041;
                        this.match(TrinoSQLParser.ESCAPE);
                        this.state = 1042;
                        (localContext as ShowSessionContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 68:
                localContext = new SetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1047;
                this.match(TrinoSQLParser.SET);
                this.state = 1048;
                this.match(TrinoSQLParser.SESSION);
                this.state = 1049;
                this.match(TrinoSQLParser.AUTHORIZATION);
                this.state = 1050;
                this.authorizationUser();
                }
                break;
            case 69:
                localContext = new ResetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1051;
                this.match(TrinoSQLParser.RESET);
                this.state = 1052;
                this.match(TrinoSQLParser.SESSION);
                this.state = 1053;
                this.match(TrinoSQLParser.AUTHORIZATION);
                }
                break;
            case 70:
                localContext = new SetSessionContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1054;
                this.match(TrinoSQLParser.SET);
                this.state = 1055;
                this.match(TrinoSQLParser.SESSION);
                this.state = 1056;
                this.qualifiedName();
                this.state = 1057;
                this.match(TrinoSQLParser.EQ);
                this.state = 1058;
                this.expression();
                }
                break;
            case 71:
                localContext = new ResetSessionContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1060;
                this.match(TrinoSQLParser.RESET);
                this.state = 1061;
                this.match(TrinoSQLParser.SESSION);
                this.state = 1062;
                this.qualifiedName();
                }
                break;
            case 72:
                localContext = new StartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1063;
                this.match(TrinoSQLParser.START);
                this.state = 1064;
                this.match(TrinoSQLParser.TRANSACTION);
                this.state = 1073;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 220) {
                    {
                    this.state = 1065;
                    this.transactionMode();
                    this.state = 1070;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1066;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1067;
                        this.transactionMode();
                        }
                        }
                        this.state = 1072;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 73:
                localContext = new CommitContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1075;
                this.match(TrinoSQLParser.COMMIT);
                this.state = 1077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 1076;
                    this.match(TrinoSQLParser.WORK);
                    }
                }

                }
                break;
            case 74:
                localContext = new RollbackContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1079;
                this.match(TrinoSQLParser.ROLLBACK);
                this.state = 1081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 1080;
                    this.match(TrinoSQLParser.WORK);
                    }
                }

                }
                break;
            case 75:
                localContext = new PrepareContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1083;
                this.match(TrinoSQLParser.PREPARE);
                this.state = 1084;
                this.identifier();
                this.state = 1085;
                this.match(TrinoSQLParser.FROM);
                this.state = 1086;
                this.statement();
                }
                break;
            case 76:
                localContext = new DeallocateContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1088;
                this.match(TrinoSQLParser.DEALLOCATE);
                this.state = 1089;
                this.match(TrinoSQLParser.PREPARE);
                this.state = 1090;
                this.identifier();
                }
                break;
            case 77:
                localContext = new ExecuteContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1091;
                this.match(TrinoSQLParser.EXECUTE);
                this.state = 1092;
                this.identifier();
                this.state = 1102;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 290) {
                    {
                    this.state = 1093;
                    this.match(TrinoSQLParser.USING);
                    this.state = 1094;
                    this.expression();
                    this.state = 1099;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1095;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1096;
                        this.expression();
                        }
                        }
                        this.state = 1101;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 78:
                localContext = new ExecuteImmediateContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1104;
                this.match(TrinoSQLParser.EXECUTE);
                this.state = 1105;
                this.match(TrinoSQLParser.IMMEDIATE);
                this.state = 1106;
                this.string_();
                this.state = 1116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 290) {
                    {
                    this.state = 1107;
                    this.match(TrinoSQLParser.USING);
                    this.state = 1108;
                    this.expression();
                    this.state = 1113;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1109;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1110;
                        this.expression();
                        }
                        }
                        this.state = 1115;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 79:
                localContext = new DescribeInputContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1118;
                this.match(TrinoSQLParser.DESCRIBE);
                this.state = 1119;
                this.match(TrinoSQLParser.INPUT);
                this.state = 1120;
                this.identifier();
                }
                break;
            case 80:
                localContext = new DescribeOutputContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1121;
                this.match(TrinoSQLParser.DESCRIBE);
                this.state = 1122;
                this.match(TrinoSQLParser.OUTPUT);
                this.state = 1123;
                this.identifier();
                }
                break;
            case 81:
                localContext = new SetPathContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1124;
                this.match(TrinoSQLParser.SET);
                this.state = 1125;
                this.match(TrinoSQLParser.PATH);
                this.state = 1126;
                this.pathSpecification();
                }
                break;
            case 82:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1127;
                this.match(TrinoSQLParser.SET);
                this.state = 1128;
                this.match(TrinoSQLParser.TIME);
                this.state = 1129;
                this.match(TrinoSQLParser.ZONE);
                this.state = 1132;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1130;
                    this.match(TrinoSQLParser.LOCAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1131;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 83:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1134;
                this.match(TrinoSQLParser.UPDATE);
                this.state = 1135;
                this.qualifiedName();
                this.state = 1136;
                this.match(TrinoSQLParser.SET);
                this.state = 1137;
                this.updateAssignment();
                this.state = 1142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1138;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1139;
                    this.updateAssignment();
                    }
                    }
                    this.state = 1144;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1147;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 1145;
                    this.match(TrinoSQLParser.WHERE);
                    this.state = 1146;
                    (localContext as UpdateContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 84:
                localContext = new MergeContext(localContext);
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1149;
                this.match(TrinoSQLParser.MERGE);
                this.state = 1150;
                this.match(TrinoSQLParser.INTO);
                this.state = 1151;
                this.qualifiedName();
                this.state = 1156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282056543) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 1153;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1152;
                        this.match(TrinoSQLParser.AS);
                        }
                    }

                    this.state = 1155;
                    this.identifier();
                    }
                }

                this.state = 1158;
                this.match(TrinoSQLParser.USING);
                this.state = 1159;
                this.relation(0);
                this.state = 1160;
                this.match(TrinoSQLParser.ON);
                this.state = 1161;
                this.expression();
                this.state = 1163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1162;
                    this.mergeCase();
                    }
                    }
                    this.state = 1165;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rootQuery(): RootQueryContext {
        let localContext = new RootQueryContext(this.context, this.state);
        this.enterRule(localContext, 14, TrinoSQLParser.RULE_rootQuery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1170;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
            case 1:
                {
                this.state = 1169;
                this.withFunction();
                }
                break;
            }
            this.state = 1172;
            this.query();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withFunction(): WithFunctionContext {
        let localContext = new WithFunctionContext(this.context, this.state);
        this.enterRule(localContext, 16, TrinoSQLParser.RULE_withFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1174;
            this.match(TrinoSQLParser.WITH);
            this.state = 1175;
            this.functionSpecification();
            this.state = 1180;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1176;
                this.match(TrinoSQLParser.T__3);
                this.state = 1177;
                this.functionSpecification();
                }
                }
                this.state = 1182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 18, TrinoSQLParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1184;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 304) {
                {
                this.state = 1183;
                this.with_();
                }
            }

            this.state = 1186;
            this.queryNoWith();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): WithContext {
        let localContext = new WithContext(this.context, this.state);
        this.enterRule(localContext, 20, TrinoSQLParser.RULE_with);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1188;
            this.match(TrinoSQLParser.WITH);
            this.state = 1190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 221) {
                {
                this.state = 1189;
                this.match(TrinoSQLParser.RECURSIVE);
                }
            }

            this.state = 1192;
            this.namedQuery();
            this.state = 1197;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1193;
                this.match(TrinoSQLParser.T__3);
                this.state = 1194;
                this.namedQuery();
                }
                }
                this.state = 1199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 22, TrinoSQLParser.RULE_tableElement);
        try {
            this.state = 1202;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1200;
                this.columnDefinition();
                }
                break;
            case TrinoSQLParser.LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1201;
                this.likeClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 24, TrinoSQLParser.RULE_columnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1204;
            this.qualifiedName();
            this.state = 1205;
            this.type_(0);
            this.state = 1208;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 1206;
                this.match(TrinoSQLParser.NOT);
                this.state = 1207;
                this.match(TrinoSQLParser.NULL);
                }
            }

            this.state = 1212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 46) {
                {
                this.state = 1210;
                this.match(TrinoSQLParser.COMMENT);
                this.state = 1211;
                this.string_();
                }
            }

            this.state = 1216;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 304) {
                {
                this.state = 1214;
                this.match(TrinoSQLParser.WITH);
                this.state = 1215;
                this.properties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 26, TrinoSQLParser.RULE_likeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1218;
            this.match(TrinoSQLParser.LIKE);
            this.state = 1219;
            this.qualifiedName();
            this.state = 1222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 123) {
                {
                this.state = 1220;
                localContext._optionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 92 || _la === 123)) {
                    localContext._optionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1221;
                this.match(TrinoSQLParser.PROPERTIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public properties(): PropertiesContext {
        let localContext = new PropertiesContext(this.context, this.state);
        this.enterRule(localContext, 28, TrinoSQLParser.RULE_properties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1224;
            this.match(TrinoSQLParser.T__1);
            this.state = 1225;
            this.propertyAssignments();
            this.state = 1226;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        let localContext = new PropertyAssignmentsContext(this.context, this.state);
        this.enterRule(localContext, 30, TrinoSQLParser.RULE_propertyAssignments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1228;
            this.property();
            this.state = 1233;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1229;
                this.match(TrinoSQLParser.T__3);
                this.state = 1230;
                this.property();
                }
                }
                this.state = 1235;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 32, TrinoSQLParser.RULE_property);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1236;
            this.identifier();
            this.state = 1237;
            this.match(TrinoSQLParser.EQ);
            this.state = 1238;
            this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 34, TrinoSQLParser.RULE_propertyValue);
        try {
            this.state = 1242;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 130, this.context) ) {
            case 1:
                localContext = new DefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1240;
                this.match(TrinoSQLParser.DEFAULT);
                }
                break;
            case 2:
                localContext = new NonDefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1241;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryNoWith(): QueryNoWithContext {
        let localContext = new QueryNoWithContext(this.context, this.state);
        this.enterRule(localContext, 36, TrinoSQLParser.RULE_queryNoWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1244;
            this.queryTerm(0);
            this.state = 1255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 1245;
                this.match(TrinoSQLParser.ORDER);
                this.state = 1246;
                this.match(TrinoSQLParser.BY);
                this.state = 1247;
                this.sortItem();
                this.state = 1252;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1248;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1249;
                    this.sortItem();
                    }
                    }
                    this.state = 1254;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 1257;
                this.match(TrinoSQLParser.OFFSET);
                this.state = 1258;
                localContext._offset = this.rowCount();
                this.state = 1260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 239 || _la === 240) {
                    {
                    this.state = 1259;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 239 || _la === 240)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
            }

            this.state = 1277;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.LIMIT:
                {
                {
                this.state = 1264;
                this.match(TrinoSQLParser.LIMIT);
                this.state = 1265;
                localContext._limit = this.limitRowCount();
                }
                }
                break;
            case TrinoSQLParser.FETCH:
                {
                {
                this.state = 1266;
                this.match(TrinoSQLParser.FETCH);
                this.state = 1267;
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 174)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 324 || _la === 329) {
                    {
                    this.state = 1268;
                    localContext._fetchFirst = this.rowCount();
                    }
                }

                this.state = 1271;
                _la = this.tokenStream.LA(1);
                if(!(_la === 239 || _la === 240)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1275;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSQLParser.ONLY:
                    {
                    this.state = 1272;
                    this.match(TrinoSQLParser.ONLY);
                    }
                    break;
                case TrinoSQLParser.WITH:
                    {
                    this.state = 1273;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 1274;
                    this.match(TrinoSQLParser.TIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case TrinoSQLParser.EOF:
            case TrinoSQLParser.T__2:
            case TrinoSQLParser.WITH:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitRowCount(): LimitRowCountContext {
        let localContext = new LimitRowCountContext(this.context, this.state);
        this.enterRule(localContext, 38, TrinoSQLParser.RULE_limitRowCount);
        try {
            this.state = 1281;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1279;
                this.match(TrinoSQLParser.ALL);
                }
                break;
            case TrinoSQLParser.QUESTION_MARK:
            case TrinoSQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1280;
                this.rowCount();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowCount(): RowCountContext {
        let localContext = new RowCountContext(this.context, this.state);
        this.enterRule(localContext, 40, TrinoSQLParser.RULE_rowCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1283;
            _la = this.tokenStream.LA(1);
            if(!(_la === 324 || _la === 329)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 42;
        this.enterRecursionRule(localContext, 42, TrinoSQLParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1286;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1302;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1300;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 141, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_queryTerm);
                        this.state = 1288;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1289;
                        (localContext as SetOperationContext)._operator = this.match(TrinoSQLParser.INTERSECT);
                        this.state = 1291;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 79) {
                            {
                            this.state = 1290;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1293;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_queryTerm);
                        this.state = 1294;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1295;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 91 || _la === 281)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1297;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 79) {
                            {
                            this.state = 1296;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1299;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1304;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 44, TrinoSQLParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1321;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.SELECT:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1305;
                this.querySpecification();
                }
                break;
            case TrinoSQLParser.TABLE:
                localContext = new TableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1306;
                this.match(TrinoSQLParser.TABLE);
                this.state = 1307;
                this.qualifiedName();
                }
                break;
            case TrinoSQLParser.VALUES:
                localContext = new InlineTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1308;
                this.match(TrinoSQLParser.VALUES);
                this.state = 1309;
                this.expression();
                this.state = 1314;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1310;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1311;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1316;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 143, this.context);
                }
                }
                break;
            case TrinoSQLParser.T__1:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1317;
                this.match(TrinoSQLParser.T__1);
                this.state = 1318;
                this.queryNoWith();
                this.state = 1319;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 46, TrinoSQLParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1323;
            this.expression();
            this.state = 1325;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29 || _la === 75) {
                {
                this.state = 1324;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 29 || _la === 75)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1327;
                this.match(TrinoSQLParser.NULLS);
                this.state = 1328;
                localContext._nullOrdering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 148)) {
                    localContext._nullOrdering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 48, TrinoSQLParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1331;
            this.match(TrinoSQLParser.SELECT);
            this.state = 1333;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
            case 1:
                {
                this.state = 1332;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1335;
            this.selectItem();
            this.state = 1340;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1336;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1337;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1342;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
            }
            this.state = 1352;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                {
                this.state = 1343;
                this.match(TrinoSQLParser.FROM);
                this.state = 1344;
                this.relation(0);
                this.state = 1349;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 149, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1345;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1346;
                        this.relation(0);
                        }
                        }
                    }
                    this.state = 1351;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 149, this.context);
                }
                }
                break;
            }
            this.state = 1356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 151, this.context) ) {
            case 1:
                {
                this.state = 1354;
                this.match(TrinoSQLParser.WHERE);
                this.state = 1355;
                localContext._where = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1361;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
            case 1:
                {
                this.state = 1358;
                this.match(TrinoSQLParser.GROUP);
                this.state = 1359;
                this.match(TrinoSQLParser.BY);
                this.state = 1360;
                this.groupBy();
                }
                break;
            }
            this.state = 1365;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1363;
                this.match(TrinoSQLParser.HAVING);
                this.state = 1364;
                localContext._having = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1376;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 1367;
                this.match(TrinoSQLParser.WINDOW);
                this.state = 1368;
                this.windowDefinition();
                this.state = 1373;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1369;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1370;
                        this.windowDefinition();
                        }
                        }
                    }
                    this.state = 1375;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupBy(): GroupByContext {
        let localContext = new GroupByContext(this.context, this.state);
        this.enterRule(localContext, 50, TrinoSQLParser.RULE_groupBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1379;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
            case 1:
                {
                this.state = 1378;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1381;
            this.groupingElement();
            this.state = 1386;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 157, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1382;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1383;
                    this.groupingElement();
                    }
                    }
                }
                this.state = 1388;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 157, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 52, TrinoSQLParser.RULE_groupingElement);
        let _la: number;
        try {
            this.state = 1429;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                localContext = new SingleGroupingSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1389;
                this.groupingSet();
                }
                break;
            case 2:
                localContext = new RollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1390;
                this.match(TrinoSQLParser.ROLLUP);
                this.state = 1391;
                this.match(TrinoSQLParser.T__1);
                this.state = 1400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 1392;
                    this.groupingSet();
                    this.state = 1397;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1393;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1394;
                        this.groupingSet();
                        }
                        }
                        this.state = 1399;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1402;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 3:
                localContext = new CubeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1403;
                this.match(TrinoSQLParser.CUBE);
                this.state = 1404;
                this.match(TrinoSQLParser.T__1);
                this.state = 1413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 1405;
                    this.groupingSet();
                    this.state = 1410;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1406;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1407;
                        this.groupingSet();
                        }
                        }
                        this.state = 1412;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1415;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 4:
                localContext = new MultipleGroupingSetsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1416;
                this.match(TrinoSQLParser.GROUPING);
                this.state = 1417;
                this.match(TrinoSQLParser.SETS);
                this.state = 1418;
                this.match(TrinoSQLParser.T__1);
                this.state = 1419;
                this.groupingSet();
                this.state = 1424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1420;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1421;
                    this.groupingSet();
                    }
                    }
                    this.state = 1426;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1427;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 54, TrinoSQLParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 1444;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 166, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1431;
                this.match(TrinoSQLParser.T__1);
                this.state = 1440;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 1432;
                    this.expression();
                    this.state = 1437;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1433;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1434;
                        this.expression();
                        }
                        }
                        this.state = 1439;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1442;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1443;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 56, TrinoSQLParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1446;
            localContext._name = this.identifier();
            this.state = 1447;
            this.match(TrinoSQLParser.AS);
            this.state = 1448;
            this.match(TrinoSQLParser.T__1);
            this.state = 1449;
            this.windowSpecification();
            this.state = 1450;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 58, TrinoSQLParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
            case 1:
                {
                this.state = 1452;
                localContext._existingWindowName = this.identifier();
                }
                break;
            }
            this.state = 1465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 201) {
                {
                this.state = 1455;
                this.match(TrinoSQLParser.PARTITION);
                this.state = 1456;
                this.match(TrinoSQLParser.BY);
                this.state = 1457;
                localContext._expression = this.expression();
                localContext._partition.push(localContext._expression);
                this.state = 1462;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1458;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1459;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    }
                    this.state = 1464;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 1467;
                this.match(TrinoSQLParser.ORDER);
                this.state = 1468;
                this.match(TrinoSQLParser.BY);
                this.state = 1469;
                this.sortItem();
                this.state = 1474;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1470;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1471;
                    this.sortItem();
                    }
                    }
                    this.state = 1476;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1480;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116 || _la === 168 || _la === 219 || _la === 240) {
                {
                this.state = 1479;
                this.windowFrame();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 60, TrinoSQLParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1482;
            localContext._name = this.identifier();
            this.state = 1484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1483;
                this.columnAliases();
                }
            }

            this.state = 1486;
            this.match(TrinoSQLParser.AS);
            this.state = 1487;
            this.match(TrinoSQLParser.T__1);
            this.state = 1488;
            this.query();
            this.state = 1489;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 62, TrinoSQLParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1491;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 79)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 64, TrinoSQLParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 1508;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                localContext = new SelectSingleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1493;
                this.expression();
                this.state = 1498;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
                case 1:
                    {
                    this.state = 1495;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1494;
                        this.match(TrinoSQLParser.AS);
                        }
                    }

                    this.state = 1497;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1500;
                this.primaryExpression(0);
                this.state = 1501;
                this.match(TrinoSQLParser.T__0);
                this.state = 1502;
                this.match(TrinoSQLParser.ASTERISK);
                this.state = 1505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
                case 1:
                    {
                    this.state = 1503;
                    this.match(TrinoSQLParser.AS);
                    this.state = 1504;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1507;
                this.match(TrinoSQLParser.ASTERISK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public relation(): RelationContext;
    public relation(_p: number): RelationContext;
    public relation(_p?: number): RelationContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RelationContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 66;
        this.enterRecursionRule(localContext, 66, TrinoSQLParser.RULE_relation, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new RelationDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1511;
            this.sampledRelation();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1531;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 179, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new JoinRelationContext(new RelationContext(parentContext, parentState));
                    (localContext as JoinRelationContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_relation);
                    this.state = 1513;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1527;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSQLParser.CROSS:
                        {
                        this.state = 1514;
                        this.match(TrinoSQLParser.CROSS);
                        this.state = 1515;
                        this.match(TrinoSQLParser.JOIN);
                        this.state = 1516;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    case TrinoSQLParser.FULL:
                    case TrinoSQLParser.INNER:
                    case TrinoSQLParser.JOIN:
                    case TrinoSQLParser.LEFT:
                    case TrinoSQLParser.RIGHT:
                        {
                        this.state = 1517;
                        this.joinType();
                        this.state = 1518;
                        this.match(TrinoSQLParser.JOIN);
                        this.state = 1519;
                        (localContext as JoinRelationContext)._rightRelation = this.relation(0);
                        this.state = 1520;
                        this.joinCriteria();
                        }
                        break;
                    case TrinoSQLParser.NATURAL:
                        {
                        this.state = 1522;
                        this.match(TrinoSQLParser.NATURAL);
                        this.state = 1523;
                        this.joinType();
                        this.state = 1524;
                        this.match(TrinoSQLParser.JOIN);
                        this.state = 1525;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 1533;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 179, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 68, TrinoSQLParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 1549;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.INNER:
            case TrinoSQLParser.JOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 125) {
                    {
                    this.state = 1534;
                    this.match(TrinoSQLParser.INNER);
                    }
                }

                }
                break;
            case TrinoSQLParser.LEFT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1537;
                this.match(TrinoSQLParser.LEFT);
                this.state = 1539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1538;
                    this.match(TrinoSQLParser.OUTER);
                    }
                }

                }
                break;
            case TrinoSQLParser.RIGHT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1541;
                this.match(TrinoSQLParser.RIGHT);
                this.state = 1543;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1542;
                    this.match(TrinoSQLParser.OUTER);
                    }
                }

                }
                break;
            case TrinoSQLParser.FULL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1545;
                this.match(TrinoSQLParser.FULL);
                this.state = 1547;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1546;
                    this.match(TrinoSQLParser.OUTER);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 70, TrinoSQLParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.state = 1565;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1551;
                this.match(TrinoSQLParser.ON);
                this.state = 1552;
                this.booleanExpression(0);
                }
                break;
            case TrinoSQLParser.USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1553;
                this.match(TrinoSQLParser.USING);
                this.state = 1554;
                this.match(TrinoSQLParser.T__1);
                this.state = 1555;
                this.identifier();
                this.state = 1560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1556;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1557;
                    this.identifier();
                    }
                    }
                    this.state = 1562;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1563;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampledRelation(): SampledRelationContext {
        let localContext = new SampledRelationContext(this.context, this.state);
        this.enterRule(localContext, 72, TrinoSQLParser.RULE_sampledRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1567;
            this.patternRecognition();
            this.state = 1574;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                {
                this.state = 1568;
                this.match(TrinoSQLParser.TABLESAMPLE);
                this.state = 1569;
                this.sampleType();
                this.state = 1570;
                this.match(TrinoSQLParser.T__1);
                this.state = 1571;
                localContext._percentage = this.expression();
                this.state = 1572;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleType(): SampleTypeContext {
        let localContext = new SampleTypeContext(this.context, this.state);
        this.enterRule(localContext, 74, TrinoSQLParser.RULE_sampleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1576;
            _la = this.tokenStream.LA(1);
            if(!(_la === 33 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimsSpecification(): TrimsSpecificationContext {
        let localContext = new TrimsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 76, TrinoSQLParser.RULE_trimsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            _la = this.tokenStream.LA(1);
            if(!(_la === 35 || _la === 150 || _la === 270)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
        let localContext = new ListAggOverflowBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 78, TrinoSQLParser.RULE_listAggOverflowBehavior);
        let _la: number;
        try {
            this.state = 1586;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1580;
                this.match(TrinoSQLParser.ERROR);
                }
                break;
            case TrinoSQLParser.TRUNCATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1581;
                this.match(TrinoSQLParser.TRUNCATE);
                this.state = 1583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326 || _la === 327) {
                    {
                    this.state = 1582;
                    this.string_();
                    }
                }

                this.state = 1585;
                this.listaggCountIndication();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listaggCountIndication(): ListaggCountIndicationContext {
        let localContext = new ListaggCountIndicationContext(this.context, this.state);
        this.enterRule(localContext, 80, TrinoSQLParser.RULE_listaggCountIndication);
        try {
            this.state = 1592;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1588;
                this.match(TrinoSQLParser.WITH);
                this.state = 1589;
                this.match(TrinoSQLParser.COUNT);
                }
                break;
            case TrinoSQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1590;
                this.match(TrinoSQLParser.WITHOUT);
                this.state = 1591;
                this.match(TrinoSQLParser.COUNT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternRecognition(): PatternRecognitionContext {
        let localContext = new PatternRecognitionContext(this.context, this.state);
        this.enterRule(localContext, 82, TrinoSQLParser.RULE_patternRecognition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1594;
            this.aliasedRelation();
            this.state = 1677;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                {
                this.state = 1595;
                this.match(TrinoSQLParser.MATCH_RECOGNIZE);
                this.state = 1596;
                this.match(TrinoSQLParser.T__1);
                this.state = 1607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1597;
                    this.match(TrinoSQLParser.PARTITION);
                    this.state = 1598;
                    this.match(TrinoSQLParser.BY);
                    this.state = 1599;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 1604;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1600;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1601;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 1606;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 1609;
                    this.match(TrinoSQLParser.ORDER);
                    this.state = 1610;
                    this.match(TrinoSQLParser.BY);
                    this.state = 1611;
                    this.sortItem();
                    this.state = 1616;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1612;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1613;
                        this.sortItem();
                        }
                        }
                        this.state = 1618;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1621;
                    this.match(TrinoSQLParser.MEASURES);
                    this.state = 1622;
                    this.measureDefinition();
                    this.state = 1627;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1623;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1624;
                        this.measureDefinition();
                        }
                        }
                        this.state = 1629;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 191) {
                    {
                    this.state = 1632;
                    this.rowsPerMatch();
                    }
                }

                this.state = 1638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 1635;
                    this.match(TrinoSQLParser.AFTER);
                    this.state = 1636;
                    this.match(TrinoSQLParser.MATCH);
                    this.state = 1637;
                    this.skipTo();
                    }
                }

                this.state = 1641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 124 || _la === 247) {
                    {
                    this.state = 1640;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 124 || _la === 247)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1643;
                this.match(TrinoSQLParser.PATTERN);
                this.state = 1644;
                this.match(TrinoSQLParser.T__1);
                this.state = 1645;
                this.rowPattern(0);
                this.state = 1646;
                this.match(TrinoSQLParser.T__2);
                this.state = 1656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 257) {
                    {
                    this.state = 1647;
                    this.match(TrinoSQLParser.SUBSET);
                    this.state = 1648;
                    this.subsetDefinition();
                    this.state = 1653;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 1649;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 1650;
                        this.subsetDefinition();
                        }
                        }
                        this.state = 1655;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1658;
                this.match(TrinoSQLParser.DEFINE);
                this.state = 1659;
                this.variableDefinition();
                this.state = 1664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1660;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1661;
                    this.variableDefinition();
                    }
                    }
                    this.state = 1666;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1667;
                this.match(TrinoSQLParser.T__2);
                this.state = 1675;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 205, this.context) ) {
                case 1:
                    {
                    this.state = 1669;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1668;
                        this.match(TrinoSQLParser.AS);
                        }
                    }

                    this.state = 1671;
                    this.identifier();
                    this.state = 1673;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 204, this.context) ) {
                    case 1:
                        {
                        this.state = 1672;
                        this.columnAliases();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measureDefinition(): MeasureDefinitionContext {
        let localContext = new MeasureDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 84, TrinoSQLParser.RULE_measureDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1679;
            this.expression();
            this.state = 1680;
            this.match(TrinoSQLParser.AS);
            this.state = 1681;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsPerMatch(): RowsPerMatchContext {
        let localContext = new RowsPerMatchContext(this.context, this.state);
        this.enterRule(localContext, 86, TrinoSQLParser.RULE_rowsPerMatch);
        let _la: number;
        try {
            this.state = 1694;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1683;
                this.match(TrinoSQLParser.ONE);
                this.state = 1684;
                this.match(TrinoSQLParser.ROW);
                this.state = 1685;
                this.match(TrinoSQLParser.PER);
                this.state = 1686;
                this.match(TrinoSQLParser.MATCH);
                }
                break;
            case TrinoSQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1687;
                this.match(TrinoSQLParser.ALL);
                this.state = 1688;
                this.match(TrinoSQLParser.ROWS);
                this.state = 1689;
                this.match(TrinoSQLParser.PER);
                this.state = 1690;
                this.match(TrinoSQLParser.MATCH);
                this.state = 1692;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 189 || _la === 253 || _la === 304) {
                    {
                    this.state = 1691;
                    this.emptyMatchHandling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext {
        let localContext = new EmptyMatchHandlingContext(this.context, this.state);
        this.enterRule(localContext, 88, TrinoSQLParser.RULE_emptyMatchHandling);
        try {
            this.state = 1705;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1696;
                this.match(TrinoSQLParser.SHOW);
                this.state = 1697;
                this.match(TrinoSQLParser.EMPTY);
                this.state = 1698;
                this.match(TrinoSQLParser.MATCHES);
                }
                break;
            case TrinoSQLParser.OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1699;
                this.match(TrinoSQLParser.OMIT);
                this.state = 1700;
                this.match(TrinoSQLParser.EMPTY);
                this.state = 1701;
                this.match(TrinoSQLParser.MATCHES);
                }
                break;
            case TrinoSQLParser.WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1702;
                this.match(TrinoSQLParser.WITH);
                this.state = 1703;
                this.match(TrinoSQLParser.UNMATCHED);
                this.state = 1704;
                this.match(TrinoSQLParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipTo(): SkipToContext {
        let localContext = new SkipToContext(this.context, this.state);
        this.enterRule(localContext, 90, TrinoSQLParser.RULE_skipTo);
        try {
            this.state = 1726;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1707;
                this.match(TrinoSQLParser.T__4);
                this.state = 1708;
                this.match(TrinoSQLParser.TO);
                this.state = 1709;
                this.match(TrinoSQLParser.NEXT);
                this.state = 1710;
                this.match(TrinoSQLParser.ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1711;
                this.match(TrinoSQLParser.T__4);
                this.state = 1712;
                this.match(TrinoSQLParser.PAST);
                this.state = 1713;
                this.match(TrinoSQLParser.LAST);
                this.state = 1714;
                this.match(TrinoSQLParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1715;
                this.match(TrinoSQLParser.T__4);
                this.state = 1716;
                this.match(TrinoSQLParser.TO);
                this.state = 1717;
                this.match(TrinoSQLParser.FIRST);
                this.state = 1718;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1719;
                this.match(TrinoSQLParser.T__4);
                this.state = 1720;
                this.match(TrinoSQLParser.TO);
                this.state = 1721;
                this.match(TrinoSQLParser.LAST);
                this.state = 1722;
                this.identifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1723;
                this.match(TrinoSQLParser.T__4);
                this.state = 1724;
                this.match(TrinoSQLParser.TO);
                this.state = 1725;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subsetDefinition(): SubsetDefinitionContext {
        let localContext = new SubsetDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 92, TrinoSQLParser.RULE_subsetDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1728;
            localContext._name = this.identifier();
            this.state = 1729;
            this.match(TrinoSQLParser.EQ);
            this.state = 1730;
            this.match(TrinoSQLParser.T__1);
            this.state = 1731;
            localContext._identifier = this.identifier();
            localContext._union.push(localContext._identifier);
            this.state = 1736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1732;
                this.match(TrinoSQLParser.T__3);
                this.state = 1733;
                localContext._identifier = this.identifier();
                localContext._union.push(localContext._identifier);
                }
                }
                this.state = 1738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1739;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefinition(): VariableDefinitionContext {
        let localContext = new VariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 94, TrinoSQLParser.RULE_variableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1741;
            this.identifier();
            this.state = 1742;
            this.match(TrinoSQLParser.AS);
            this.state = 1743;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasedRelation(): AliasedRelationContext {
        let localContext = new AliasedRelationContext(this.context, this.state);
        this.enterRule(localContext, 96, TrinoSQLParser.RULE_aliasedRelation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1745;
            this.relationPrimary();
            this.state = 1753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
            case 1:
                {
                this.state = 1747;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 1746;
                    this.match(TrinoSQLParser.AS);
                    }
                }

                this.state = 1749;
                this.identifier();
                this.state = 1751;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
                case 1:
                    {
                    this.state = 1750;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 98, TrinoSQLParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1755;
            this.match(TrinoSQLParser.T__1);
            this.state = 1756;
            this.identifier();
            this.state = 1761;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 1757;
                this.match(TrinoSQLParser.T__3);
                this.state = 1758;
                this.identifier();
                }
                }
                this.state = 1763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1764;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 100, TrinoSQLParser.RULE_relationPrimary);
        let _la: number;
        try {
            this.state = 1837;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
            case 1:
                localContext = new TableNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1766;
                this.qualifiedName();
                this.state = 1768;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 216, this.context) ) {
                case 1:
                    {
                    this.state = 1767;
                    this.queryPeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SubqueryRelationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1770;
                this.match(TrinoSQLParser.T__1);
                this.state = 1771;
                this.query();
                this.state = 1772;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 3:
                localContext = new UnnestContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1774;
                this.match(TrinoSQLParser.UNNEST);
                this.state = 1775;
                this.match(TrinoSQLParser.T__1);
                this.state = 1776;
                this.expression();
                this.state = 1781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1777;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1778;
                    this.expression();
                    }
                    }
                    this.state = 1783;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1784;
                this.match(TrinoSQLParser.T__2);
                this.state = 1787;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
                case 1:
                    {
                    this.state = 1785;
                    this.match(TrinoSQLParser.WITH);
                    this.state = 1786;
                    this.match(TrinoSQLParser.ORDINALITY);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new LateralContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1789;
                this.match(TrinoSQLParser.LATERAL);
                this.state = 1790;
                this.match(TrinoSQLParser.T__1);
                this.state = 1791;
                this.query();
                this.state = 1792;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 5:
                localContext = new TableFunctionInvocationContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1794;
                this.match(TrinoSQLParser.TABLE);
                this.state = 1795;
                this.match(TrinoSQLParser.T__1);
                this.state = 1796;
                this.tableFunctionCall();
                this.state = 1797;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 6:
                localContext = new ParenthesizedRelationContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1799;
                this.match(TrinoSQLParser.T__1);
                this.state = 1800;
                this.relation(0);
                this.state = 1801;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 7:
                localContext = new JsonTableContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1803;
                this.match(TrinoSQLParser.JSON_TABLE);
                this.state = 1804;
                this.match(TrinoSQLParser.T__1);
                this.state = 1805;
                this.jsonPathInvocation();
                this.state = 1806;
                this.match(TrinoSQLParser.COLUMNS);
                this.state = 1807;
                this.match(TrinoSQLParser.T__1);
                this.state = 1808;
                this.jsonTableColumn();
                this.state = 1813;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1809;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1810;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 1815;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1816;
                this.match(TrinoSQLParser.T__2);
                this.state = 1828;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
                case 1:
                    {
                    this.state = 1817;
                    this.match(TrinoSQLParser.PLAN);
                    this.state = 1818;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 1819;
                    this.jsonTableSpecificPlan();
                    this.state = 1820;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 1822;
                    this.match(TrinoSQLParser.PLAN);
                    this.state = 1823;
                    this.match(TrinoSQLParser.DEFAULT);
                    this.state = 1824;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 1825;
                    this.jsonTableDefaultPlan();
                    this.state = 1826;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                this.state = 1833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89) {
                    {
                    this.state = 1830;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 85 || _la === 89)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1831;
                    this.match(TrinoSQLParser.ON);
                    this.state = 1832;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                this.state = 1835;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableColumn(): JsonTableColumnContext {
        let localContext = new JsonTableColumnContext(this.context, this.state);
        this.enterRule(localContext, 102, TrinoSQLParser.RULE_jsonTableColumn);
        let _la: number;
        try {
            this.state = 1916;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                localContext = new OrdinalityColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1839;
                this.identifier();
                this.state = 1840;
                this.match(TrinoSQLParser.FOR);
                this.state = 1841;
                this.match(TrinoSQLParser.ORDINALITY);
                }
                break;
            case 2:
                localContext = new ValueColumnContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1843;
                this.identifier();
                this.state = 1844;
                this.type_(0);
                this.state = 1847;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 1845;
                    this.match(TrinoSQLParser.PATH);
                    this.state = 1846;
                    this.string_();
                    }
                }

                this.state = 1853;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
                case 1:
                    {
                    this.state = 1849;
                    (localContext as ValueColumnContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 1850;
                    this.match(TrinoSQLParser.ON);
                    this.state = 1851;
                    this.match(TrinoSQLParser.EMPTY);
                    }
                    break;
                }
                this.state = 1859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 70 || _la === 89 || _la === 183) {
                    {
                    this.state = 1855;
                    (localContext as ValueColumnContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 1856;
                    this.match(TrinoSQLParser.ON);
                    this.state = 1857;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                }
                break;
            case 3:
                localContext = new QueryColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1861;
                this.identifier();
                this.state = 1862;
                this.type_(0);
                this.state = 1863;
                this.match(TrinoSQLParser.FORMAT);
                this.state = 1864;
                this.jsonRepresentation();
                this.state = 1867;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 1865;
                    this.match(TrinoSQLParser.PATH);
                    this.state = 1866;
                    this.string_();
                    }
                }

                this.state = 1872;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304 || _la === 306) {
                    {
                    this.state = 1869;
                    this.jsonQueryWrapperBehavior();
                    this.state = 1870;
                    this.match(TrinoSQLParser.WRAPPER);
                    }
                }

                this.state = 1881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144 || _la === 189) {
                    {
                    this.state = 1874;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 144 || _la === 189)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1875;
                    this.match(TrinoSQLParser.QUOTES);
                    this.state = 1879;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 190) {
                        {
                        this.state = 1876;
                        this.match(TrinoSQLParser.ON);
                        this.state = 1877;
                        this.match(TrinoSQLParser.SCALAR);
                        this.state = 1878;
                        this.match(TrinoSQLParser.TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 1887;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
                case 1:
                    {
                    this.state = 1883;
                    (localContext as QueryColumnContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 1884;
                    this.match(TrinoSQLParser.ON);
                    this.state = 1885;
                    this.match(TrinoSQLParser.EMPTY);
                    }
                    break;
                }
                this.state = 1893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89 || _la === 183) {
                    {
                    this.state = 1889;
                    (localContext as QueryColumnContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 1890;
                    this.match(TrinoSQLParser.ON);
                    this.state = 1891;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                }
                break;
            case 4:
                localContext = new NestedColumnsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1895;
                this.match(TrinoSQLParser.NESTED);
                this.state = 1897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 1896;
                    this.match(TrinoSQLParser.PATH);
                    }
                }

                this.state = 1899;
                this.string_();
                this.state = 1902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 1900;
                    this.match(TrinoSQLParser.AS);
                    this.state = 1901;
                    this.identifier();
                    }
                }

                this.state = 1904;
                this.match(TrinoSQLParser.COLUMNS);
                this.state = 1905;
                this.match(TrinoSQLParser.T__1);
                this.state = 1906;
                this.jsonTableColumn();
                this.state = 1911;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1907;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1908;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 1913;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1914;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext {
        let localContext = new JsonTableSpecificPlanContext(this.context, this.state);
        this.enterRule(localContext, 104, TrinoSQLParser.RULE_jsonTableSpecificPlan);
        let _la: number;
        try {
            this.state = 1943;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                localContext = new LeafPlanContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1918;
                this.jsonTablePathName();
                }
                break;
            case 2:
                localContext = new JoinPlanContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1919;
                this.jsonTablePathName();
                this.state = 1920;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1921;
                this.planPrimary();
                }
                break;
            case 3:
                localContext = new UnionPlanContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1923;
                this.planPrimary();
                this.state = 1924;
                this.match(TrinoSQLParser.UNION);
                this.state = 1925;
                this.planPrimary();
                this.state = 1930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 281) {
                    {
                    {
                    this.state = 1926;
                    this.match(TrinoSQLParser.UNION);
                    this.state = 1927;
                    this.planPrimary();
                    }
                    }
                    this.state = 1932;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new CrossPlanContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1933;
                this.planPrimary();
                this.state = 1934;
                this.match(TrinoSQLParser.CROSS);
                this.state = 1935;
                this.planPrimary();
                this.state = 1940;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 54) {
                    {
                    {
                    this.state = 1936;
                    this.match(TrinoSQLParser.CROSS);
                    this.state = 1937;
                    this.planPrimary();
                    }
                    }
                    this.state = 1942;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        let localContext = new JsonTablePathNameContext(this.context, this.state);
        this.enterRule(localContext, 106, TrinoSQLParser.RULE_jsonTablePathName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1945;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public planPrimary(): PlanPrimaryContext {
        let localContext = new PlanPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 108, TrinoSQLParser.RULE_planPrimary);
        try {
            this.state = 1952;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1947;
                this.jsonTablePathName();
                }
                break;
            case TrinoSQLParser.T__1:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1948;
                this.match(TrinoSQLParser.T__1);
                this.state = 1949;
                this.jsonTableSpecificPlan();
                this.state = 1950;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext {
        let localContext = new JsonTableDefaultPlanContext(this.context, this.state);
        this.enterRule(localContext, 110, TrinoSQLParser.RULE_jsonTableDefaultPlan);
        let _la: number;
        try {
            this.state = 1964;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.INNER:
            case TrinoSQLParser.OUTER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1954;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1955;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1956;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 54 || _la === 281)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case TrinoSQLParser.CROSS:
            case TrinoSQLParser.UNION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1959;
                _la = this.tokenStream.LA(1);
                if(!(_la === 54 || _la === 281)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1960;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1961;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 125 || _la === 197)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        let localContext = new TableFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 112, TrinoSQLParser.RULE_tableFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1966;
            this.qualifiedName();
            this.state = 1967;
            this.match(TrinoSQLParser.T__1);
            this.state = 1976;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 1968;
                this.tableFunctionArgument();
                this.state = 1973;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1969;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1970;
                    this.tableFunctionArgument();
                    }
                    }
                    this.state = 1975;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 1987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 1978;
                this.match(TrinoSQLParser.COPARTITION);
                this.state = 1979;
                this.copartitionTables();
                this.state = 1984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 1980;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 1981;
                    this.copartitionTables();
                    }
                    }
                    this.state = 1986;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1989;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext {
        let localContext = new TableFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 114, TrinoSQLParser.RULE_tableFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1994;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 1991;
                this.identifier();
                this.state = 1992;
                this.match(TrinoSQLParser.T__5);
                }
                break;
            }
            this.state = 1999;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 248, this.context) ) {
            case 1:
                {
                this.state = 1996;
                this.tableArgument();
                }
                break;
            case 2:
                {
                this.state = 1997;
                this.descriptorArgument();
                }
                break;
            case 3:
                {
                this.state = 1998;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgument(): TableArgumentContext {
        let localContext = new TableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 116, TrinoSQLParser.RULE_tableArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2001;
            this.tableArgumentRelation();
            this.state = 2019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 201) {
                {
                this.state = 2002;
                this.match(TrinoSQLParser.PARTITION);
                this.state = 2003;
                this.match(TrinoSQLParser.BY);
                this.state = 2017;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
                case 1:
                    {
                    this.state = 2004;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2013;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 2005;
                        this.expression();
                        this.state = 2010;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 4) {
                            {
                            {
                            this.state = 2006;
                            this.match(TrinoSQLParser.T__3);
                            this.state = 2007;
                            this.expression();
                            }
                            }
                            this.state = 2012;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 2015;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 2016;
                    this.expression();
                    }
                    break;
                }
                }
            }

            this.state = 2027;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.PRUNE:
                {
                this.state = 2021;
                this.match(TrinoSQLParser.PRUNE);
                this.state = 2022;
                this.match(TrinoSQLParser.WHEN);
                this.state = 2023;
                this.match(TrinoSQLParser.EMPTY);
                }
                break;
            case TrinoSQLParser.KEEP:
                {
                this.state = 2024;
                this.match(TrinoSQLParser.KEEP);
                this.state = 2025;
                this.match(TrinoSQLParser.WHEN);
                this.state = 2026;
                this.match(TrinoSQLParser.EMPTY);
                }
                break;
            case TrinoSQLParser.T__2:
            case TrinoSQLParser.T__3:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.ORDER:
                break;
            default:
                break;
            }
            this.state = 2045;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 2029;
                this.match(TrinoSQLParser.ORDER);
                this.state = 2030;
                this.match(TrinoSQLParser.BY);
                this.state = 2043;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
                case 1:
                    {
                    this.state = 2031;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2032;
                    this.sortItem();
                    this.state = 2037;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2033;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2034;
                        this.sortItem();
                        }
                        }
                        this.state = 2039;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2040;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                case 2:
                    {
                    this.state = 2042;
                    this.sortItem();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        let localContext = new TableArgumentRelationContext(this.context, this.state);
        this.enterRule(localContext, 118, TrinoSQLParser.RULE_tableArgumentRelation);
        let _la: number;
        try {
            this.state = 2073;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
            case 1:
                localContext = new TableArgumentTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2047;
                this.match(TrinoSQLParser.TABLE);
                this.state = 2048;
                this.match(TrinoSQLParser.T__1);
                this.state = 2049;
                this.qualifiedName();
                this.state = 2050;
                this.match(TrinoSQLParser.T__2);
                this.state = 2058;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
                case 1:
                    {
                    this.state = 2052;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 2051;
                        this.match(TrinoSQLParser.AS);
                        }
                    }

                    this.state = 2054;
                    this.identifier();
                    this.state = 2056;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 2055;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableArgumentQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2060;
                this.match(TrinoSQLParser.TABLE);
                this.state = 2061;
                this.match(TrinoSQLParser.T__1);
                this.state = 2062;
                this.query();
                this.state = 2063;
                this.match(TrinoSQLParser.T__2);
                this.state = 2071;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
                case 1:
                    {
                    this.state = 2065;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 2064;
                        this.match(TrinoSQLParser.AS);
                        }
                    }

                    this.state = 2067;
                    this.identifier();
                    this.state = 2069;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 2068;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorArgument(): DescriptorArgumentContext {
        let localContext = new DescriptorArgumentContext(this.context, this.state);
        this.enterRule(localContext, 120, TrinoSQLParser.RULE_descriptorArgument);
        let _la: number;
        try {
            this.state = 2093;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.DESCRIPTOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2075;
                this.match(TrinoSQLParser.DESCRIPTOR);
                this.state = 2076;
                this.match(TrinoSQLParser.T__1);
                this.state = 2077;
                this.descriptorField();
                this.state = 2082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2078;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2079;
                    this.descriptorField();
                    }
                    }
                    this.state = 2084;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2085;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case TrinoSQLParser.CAST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2087;
                this.match(TrinoSQLParser.CAST);
                this.state = 2088;
                this.match(TrinoSQLParser.T__1);
                this.state = 2089;
                this.match(TrinoSQLParser.NULL);
                this.state = 2090;
                this.match(TrinoSQLParser.AS);
                this.state = 2091;
                this.match(TrinoSQLParser.DESCRIPTOR);
                this.state = 2092;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorField(): DescriptorFieldContext {
        let localContext = new DescriptorFieldContext(this.context, this.state);
        this.enterRule(localContext, 122, TrinoSQLParser.RULE_descriptorField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2095;
            this.identifier();
            this.state = 2097;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                {
                this.state = 2096;
                this.type_(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copartitionTables(): CopartitionTablesContext {
        let localContext = new CopartitionTablesContext(this.context, this.state);
        this.enterRule(localContext, 124, TrinoSQLParser.RULE_copartitionTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2099;
            this.match(TrinoSQLParser.T__1);
            this.state = 2100;
            this.qualifiedName();
            this.state = 2101;
            this.match(TrinoSQLParser.T__3);
            this.state = 2102;
            this.qualifiedName();
            this.state = 2107;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 2103;
                this.match(TrinoSQLParser.T__3);
                this.state = 2104;
                this.qualifiedName();
                }
                }
                this.state = 2109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2110;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 126, TrinoSQLParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2112;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 128;
        this.enterRecursionRule(localContext, 128, TrinoSQLParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2121;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.T__1:
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CASE:
            case TrinoSQLParser.CAST:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.CURRENT_CATALOG:
            case TrinoSQLParser.CURRENT_DATE:
            case TrinoSQLParser.CURRENT_PATH:
            case TrinoSQLParser.CURRENT_SCHEMA:
            case TrinoSQLParser.CURRENT_TIME:
            case TrinoSQLParser.CURRENT_TIMESTAMP:
            case TrinoSQLParser.CURRENT_USER:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXISTS:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.EXTRACT:
            case TrinoSQLParser.FALSE:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPING:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.JSON_ARRAY:
            case TrinoSQLParser.JSON_EXISTS:
            case TrinoSQLParser.JSON_OBJECT:
            case TrinoSQLParser.JSON_QUERY:
            case TrinoSQLParser.JSON_VALUE:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LISTAGG:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOCALTIME:
            case TrinoSQLParser.LOCALTIMESTAMP:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NORMALIZE:
            case TrinoSQLParser.NULL:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRIM:
            case TrinoSQLParser.TRUE:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.PLUS:
            case TrinoSQLParser.MINUS:
            case TrinoSQLParser.QUESTION_MARK:
            case TrinoSQLParser.STRING:
            case TrinoSQLParser.UNICODE_STRING:
            case TrinoSQLParser.BINARY_LITERAL:
            case TrinoSQLParser.INTEGER_VALUE:
            case TrinoSQLParser.DECIMAL_VALUE:
            case TrinoSQLParser.DOUBLE_VALUE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2115;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 2117;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 268, this.context) ) {
                case 1:
                    {
                    this.state = 2116;
                    this.predicate((localContext as PredicatedContext)._valueExpression);
                    }
                    break;
                }
                }
                break;
            case TrinoSQLParser.NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2119;
                this.match(TrinoSQLParser.NOT);
                this.state = 2120;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2131;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 271, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2129;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
                    case 1:
                        {
                        localContext = new AndContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_booleanExpression);
                        this.state = 2123;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2124;
                        this.match(TrinoSQLParser.AND);
                        this.state = 2125;
                        this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new OrContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_booleanExpression);
                        this.state = 2126;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2127;
                        this.match(TrinoSQLParser.OR);
                        this.state = 2128;
                        this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2133;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 271, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 130, TrinoSQLParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 2195;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 280, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2134;
                this.comparisonOperator();
                this.state = 2135;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2137;
                this.comparisonOperator();
                this.state = 2138;
                this.comparisonQuantifier();
                this.state = 2139;
                this.match(TrinoSQLParser.T__1);
                this.state = 2140;
                this.query();
                this.state = 2141;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2143;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2146;
                this.match(TrinoSQLParser.BETWEEN);
                this.state = 2147;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 2148;
                this.match(TrinoSQLParser.AND);
                this.state = 2149;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2151;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2154;
                this.match(TrinoSQLParser.IN);
                this.state = 2155;
                this.match(TrinoSQLParser.T__1);
                this.state = 2156;
                this.expression();
                this.state = 2161;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2157;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2158;
                    this.expression();
                    }
                    }
                    this.state = 2163;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2164;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2167;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2166;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2169;
                this.match(TrinoSQLParser.IN);
                this.state = 2170;
                this.match(TrinoSQLParser.T__1);
                this.state = 2171;
                this.query();
                this.state = 2172;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2175;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2174;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2177;
                this.match(TrinoSQLParser.LIKE);
                this.state = 2178;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 2181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
                case 1:
                    {
                    this.state = 2179;
                    this.match(TrinoSQLParser.ESCAPE);
                    this.state = 2180;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2183;
                this.match(TrinoSQLParser.IS);
                this.state = 2185;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2184;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2187;
                this.match(TrinoSQLParser.NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2188;
                this.match(TrinoSQLParser.IS);
                this.state = 2190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2189;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 2192;
                this.match(TrinoSQLParser.DISTINCT);
                this.state = 2193;
                this.match(TrinoSQLParser.FROM);
                this.state = 2194;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 132;
        this.enterRecursionRule(localContext, 132, TrinoSQLParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2201;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2198;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2199;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 318 || _la === 319)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2200;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2217;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2215;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_valueExpression);
                        this.state = 2203;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2204;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2205;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_valueExpression);
                        this.state = 2206;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2207;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 318 || _la === 319)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2208;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_valueExpression);
                        this.state = 2209;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2210;
                        this.match(TrinoSQLParser.CONCAT);
                        this.state = 2211;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_valueExpression);
                        this.state = 2212;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2213;
                        this.match(TrinoSQLParser.AT);
                        this.state = 2214;
                        this.timeZoneSpecifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2219;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 283, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 134;
        this.enterRecursionRule(localContext, 134, TrinoSQLParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
            case 1:
                {
                localContext = new NullLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2221;
                this.match(TrinoSQLParser.NULL);
                }
                break;
            case 2:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2222;
                this.interval();
                }
                break;
            case 3:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2223;
                this.identifier();
                this.state = 2224;
                this.string_();
                }
                break;
            case 4:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2226;
                this.match(TrinoSQLParser.DOUBLE);
                this.state = 2227;
                this.match(TrinoSQLParser.PRECISION);
                this.state = 2228;
                this.string_();
                }
                break;
            case 5:
                {
                localContext = new NumericLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2229;
                this.number_();
                }
                break;
            case 6:
                {
                localContext = new BooleanLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2230;
                this.booleanValue();
                }
                break;
            case 7:
                {
                localContext = new StringLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2231;
                this.string_();
                }
                break;
            case 8:
                {
                localContext = new BinaryLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2232;
                this.match(TrinoSQLParser.BINARY_LITERAL);
                }
                break;
            case 9:
                {
                localContext = new ParameterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2233;
                this.match(TrinoSQLParser.QUESTION_MARK);
                }
                break;
            case 10:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2234;
                this.match(TrinoSQLParser.POSITION);
                this.state = 2235;
                this.match(TrinoSQLParser.T__1);
                this.state = 2236;
                this.valueExpression(0);
                this.state = 2237;
                this.match(TrinoSQLParser.IN);
                this.state = 2238;
                this.valueExpression(0);
                this.state = 2239;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 11:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2241;
                this.match(TrinoSQLParser.T__1);
                this.state = 2242;
                this.expression();
                this.state = 2245;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2243;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2244;
                    this.expression();
                    }
                    }
                    this.state = 2247;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 4);
                this.state = 2249;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 12:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2251;
                this.match(TrinoSQLParser.ROW);
                this.state = 2252;
                this.match(TrinoSQLParser.T__1);
                this.state = 2253;
                this.expression();
                this.state = 2258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2254;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2255;
                    this.expression();
                    }
                    }
                    this.state = 2260;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2261;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 13:
                {
                localContext = new ListaggContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2263;
                (localContext as ListaggContext)._name = this.match(TrinoSQLParser.LISTAGG);
                this.state = 2264;
                this.match(TrinoSQLParser.T__1);
                this.state = 2266;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
                case 1:
                    {
                    this.state = 2265;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2268;
                this.expression();
                this.state = 2271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2269;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2270;
                    this.string_();
                    }
                }

                this.state = 2276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 2273;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2274;
                    this.match(TrinoSQLParser.OVERFLOW);
                    this.state = 2275;
                    this.listAggOverflowBehavior();
                    }
                }

                this.state = 2278;
                this.match(TrinoSQLParser.T__2);
                {
                this.state = 2279;
                this.match(TrinoSQLParser.WITHIN);
                this.state = 2280;
                this.match(TrinoSQLParser.GROUP);
                this.state = 2281;
                this.match(TrinoSQLParser.T__1);
                this.state = 2282;
                this.match(TrinoSQLParser.ORDER);
                this.state = 2283;
                this.match(TrinoSQLParser.BY);
                this.state = 2284;
                this.sortItem();
                this.state = 2289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2285;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2286;
                    this.sortItem();
                    }
                    }
                    this.state = 2291;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2292;
                this.match(TrinoSQLParser.T__2);
                }
                this.state = 2295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2294;
                    this.filter();
                    }
                    break;
                }
                }
                break;
            case 14:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2298;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 2297;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2300;
                this.qualifiedName();
                this.state = 2301;
                this.match(TrinoSQLParser.T__1);
                this.state = 2305;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2302;
                    (localContext as FunctionCallContext)._label = this.identifier();
                    this.state = 2303;
                    this.match(TrinoSQLParser.T__0);
                    }
                }

                this.state = 2307;
                this.match(TrinoSQLParser.ASTERISK);
                this.state = 2308;
                this.match(TrinoSQLParser.T__2);
                this.state = 2310;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 2309;
                    this.filter();
                    }
                    break;
                }
                this.state = 2313;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
                case 1:
                    {
                    this.state = 2312;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2316;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
                case 1:
                    {
                    this.state = 2315;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2318;
                this.qualifiedName();
                this.state = 2319;
                this.match(TrinoSQLParser.T__1);
                this.state = 2331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538415087) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 2321;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
                    case 1:
                        {
                        this.state = 2320;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2323;
                    this.expression();
                    this.state = 2328;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2324;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2325;
                        this.expression();
                        }
                        }
                        this.state = 2330;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 2333;
                    this.match(TrinoSQLParser.ORDER);
                    this.state = 2334;
                    this.match(TrinoSQLParser.BY);
                    this.state = 2335;
                    this.sortItem();
                    this.state = 2340;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2336;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2337;
                        this.sortItem();
                        }
                        }
                        this.state = 2342;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2345;
                this.match(TrinoSQLParser.T__2);
                this.state = 2347;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
                case 1:
                    {
                    this.state = 2346;
                    this.filter();
                    }
                    break;
                }
                this.state = 2353;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
                case 1:
                    {
                    this.state = 2350;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 120 || _la === 228) {
                        {
                        this.state = 2349;
                        this.nullTreatment();
                        }
                    }

                    this.state = 2352;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 16:
                {
                localContext = new MeasureContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2355;
                this.identifier();
                this.state = 2356;
                this.over();
                }
                break;
            case 17:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2358;
                this.identifier();
                this.state = 2359;
                this.match(TrinoSQLParser.T__6);
                this.state = 2360;
                this.expression();
                }
                break;
            case 18:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2362;
                this.match(TrinoSQLParser.T__1);
                this.state = 2371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2363;
                    this.identifier();
                    this.state = 2368;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2364;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2365;
                        this.identifier();
                        }
                        }
                        this.state = 2370;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2373;
                this.match(TrinoSQLParser.T__2);
                this.state = 2374;
                this.match(TrinoSQLParser.T__6);
                this.state = 2375;
                this.expression();
                }
                break;
            case 19:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2376;
                this.match(TrinoSQLParser.T__1);
                this.state = 2377;
                this.query();
                this.state = 2378;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 20:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2380;
                this.match(TrinoSQLParser.EXISTS);
                this.state = 2381;
                this.match(TrinoSQLParser.T__1);
                this.state = 2382;
                this.query();
                this.state = 2383;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 21:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2385;
                this.match(TrinoSQLParser.CASE);
                this.state = 2386;
                (localContext as SimpleCaseContext)._operand = this.expression();
                this.state = 2388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2387;
                    this.whenClause();
                    }
                    }
                    this.state = 2390;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 2394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 2392;
                    this.match(TrinoSQLParser.ELSE);
                    this.state = 2393;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2396;
                this.match(TrinoSQLParser.END);
                }
                break;
            case 22:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2398;
                this.match(TrinoSQLParser.CASE);
                this.state = 2400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2399;
                    this.whenClause();
                    }
                    }
                    this.state = 2402;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 2406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 2404;
                    this.match(TrinoSQLParser.ELSE);
                    this.state = 2405;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2408;
                this.match(TrinoSQLParser.END);
                }
                break;
            case 23:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2410;
                this.match(TrinoSQLParser.CAST);
                this.state = 2411;
                this.match(TrinoSQLParser.T__1);
                this.state = 2412;
                this.expression();
                this.state = 2413;
                this.match(TrinoSQLParser.AS);
                this.state = 2414;
                this.type_(0);
                this.state = 2415;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 24:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2417;
                this.match(TrinoSQLParser.TRY_CAST);
                this.state = 2418;
                this.match(TrinoSQLParser.T__1);
                this.state = 2419;
                this.expression();
                this.state = 2420;
                this.match(TrinoSQLParser.AS);
                this.state = 2421;
                this.type_(0);
                this.state = 2422;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 25:
                {
                localContext = new ArrayConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2424;
                this.match(TrinoSQLParser.ARRAY);
                this.state = 2425;
                this.match(TrinoSQLParser.T__7);
                this.state = 2434;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 2426;
                    this.expression();
                    this.state = 2431;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2427;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2428;
                        this.expression();
                        }
                        }
                        this.state = 2433;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2436;
                this.match(TrinoSQLParser.T__8);
                }
                break;
            case 26:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2437;
                this.identifier();
                }
                break;
            case 27:
                {
                localContext = new CurrentDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2438;
                (localContext as CurrentDateContext)._name = this.match(TrinoSQLParser.CURRENT_DATE);
                }
                break;
            case 28:
                {
                localContext = new CurrentTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2439;
                (localContext as CurrentTimeContext)._name = this.match(TrinoSQLParser.CURRENT_TIME);
                this.state = 2443;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
                case 1:
                    {
                    this.state = 2440;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2441;
                    (localContext as CurrentTimeContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
                    this.state = 2442;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 29:
                {
                localContext = new CurrentTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2445;
                (localContext as CurrentTimestampContext)._name = this.match(TrinoSQLParser.CURRENT_TIMESTAMP);
                this.state = 2449;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2446;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2447;
                    (localContext as CurrentTimestampContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
                    this.state = 2448;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 30:
                {
                localContext = new LocalTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2451;
                (localContext as LocalTimeContext)._name = this.match(TrinoSQLParser.LOCALTIME);
                this.state = 2455;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 2452;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2453;
                    (localContext as LocalTimeContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
                    this.state = 2454;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 31:
                {
                localContext = new LocalTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2457;
                (localContext as LocalTimestampContext)._name = this.match(TrinoSQLParser.LOCALTIMESTAMP);
                this.state = 2461;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
                case 1:
                    {
                    this.state = 2458;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2459;
                    (localContext as LocalTimestampContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
                    this.state = 2460;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                }
                break;
            case 32:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2463;
                (localContext as CurrentUserContext)._name = this.match(TrinoSQLParser.CURRENT_USER);
                }
                break;
            case 33:
                {
                localContext = new CurrentCatalogContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2464;
                (localContext as CurrentCatalogContext)._name = this.match(TrinoSQLParser.CURRENT_CATALOG);
                }
                break;
            case 34:
                {
                localContext = new CurrentSchemaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2465;
                (localContext as CurrentSchemaContext)._name = this.match(TrinoSQLParser.CURRENT_SCHEMA);
                }
                break;
            case 35:
                {
                localContext = new CurrentPathContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2466;
                (localContext as CurrentPathContext)._name = this.match(TrinoSQLParser.CURRENT_PATH);
                }
                break;
            case 36:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2467;
                this.match(TrinoSQLParser.TRIM);
                this.state = 2468;
                this.match(TrinoSQLParser.T__1);
                this.state = 2476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
                case 1:
                    {
                    this.state = 2470;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
                    case 1:
                        {
                        this.state = 2469;
                        this.trimsSpecification();
                        }
                        break;
                    }
                    this.state = 2473;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326660) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3755997183) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 2472;
                        (localContext as TrimContext)._trimChar = this.valueExpression(0);
                        }
                    }

                    this.state = 2475;
                    this.match(TrinoSQLParser.FROM);
                    }
                    break;
                }
                this.state = 2478;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2479;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 37:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2481;
                this.match(TrinoSQLParser.TRIM);
                this.state = 2482;
                this.match(TrinoSQLParser.T__1);
                this.state = 2483;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2484;
                this.match(TrinoSQLParser.T__3);
                this.state = 2485;
                (localContext as TrimContext)._trimChar = this.valueExpression(0);
                this.state = 2486;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 38:
                {
                localContext = new SubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2488;
                this.match(TrinoSQLParser.SUBSTRING);
                this.state = 2489;
                this.match(TrinoSQLParser.T__1);
                this.state = 2490;
                this.valueExpression(0);
                this.state = 2491;
                this.match(TrinoSQLParser.FROM);
                this.state = 2492;
                this.valueExpression(0);
                this.state = 2495;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2493;
                    this.match(TrinoSQLParser.FOR);
                    this.state = 2494;
                    this.valueExpression(0);
                    }
                }

                this.state = 2497;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 39:
                {
                localContext = new NormalizeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2499;
                this.match(TrinoSQLParser.NORMALIZE);
                this.state = 2500;
                this.match(TrinoSQLParser.T__1);
                this.state = 2501;
                this.valueExpression(0);
                this.state = 2504;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 2502;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2503;
                    this.normalForm();
                    }
                }

                this.state = 2506;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 40:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2508;
                this.match(TrinoSQLParser.EXTRACT);
                this.state = 2509;
                this.match(TrinoSQLParser.T__1);
                this.state = 2510;
                this.identifier();
                this.state = 2511;
                this.match(TrinoSQLParser.FROM);
                this.state = 2512;
                this.valueExpression(0);
                this.state = 2513;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 41:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2515;
                this.match(TrinoSQLParser.T__1);
                this.state = 2516;
                this.expression();
                this.state = 2517;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 42:
                {
                localContext = new GroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2519;
                this.match(TrinoSQLParser.GROUPING);
                this.state = 2520;
                this.match(TrinoSQLParser.T__1);
                this.state = 2529;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2521;
                    this.qualifiedName();
                    this.state = 2526;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2522;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2523;
                        this.qualifiedName();
                        }
                        }
                        this.state = 2528;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2531;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 43:
                {
                localContext = new JsonExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2532;
                this.match(TrinoSQLParser.JSON_EXISTS);
                this.state = 2533;
                this.match(TrinoSQLParser.T__1);
                this.state = 2534;
                this.jsonPathInvocation();
                this.state = 2539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 89 || _la === 97 || _la === 273 || _la === 283) {
                    {
                    this.state = 2535;
                    this.jsonExistsErrorBehavior();
                    this.state = 2536;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2537;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                this.state = 2541;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 44:
                {
                localContext = new JsonValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2543;
                this.match(TrinoSQLParser.JSON_VALUE);
                this.state = 2544;
                this.match(TrinoSQLParser.T__1);
                this.state = 2545;
                this.jsonPathInvocation();
                this.state = 2548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2546;
                    this.match(TrinoSQLParser.RETURNING);
                    this.state = 2547;
                    this.type_(0);
                    }
                }

                this.state = 2554;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
                case 1:
                    {
                    this.state = 2550;
                    (localContext as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 2551;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2552;
                    this.match(TrinoSQLParser.EMPTY);
                    }
                    break;
                }
                this.state = 2560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 70 || _la === 89 || _la === 183) {
                    {
                    this.state = 2556;
                    (localContext as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 2557;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2558;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                this.state = 2562;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 45:
                {
                localContext = new JsonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2564;
                this.match(TrinoSQLParser.JSON_QUERY);
                this.state = 2565;
                this.match(TrinoSQLParser.T__1);
                this.state = 2566;
                this.jsonPathInvocation();
                this.state = 2573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2567;
                    this.match(TrinoSQLParser.RETURNING);
                    this.state = 2568;
                    this.type_(0);
                    this.state = 2571;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2569;
                        this.match(TrinoSQLParser.FORMAT);
                        this.state = 2570;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304 || _la === 306) {
                    {
                    this.state = 2575;
                    this.jsonQueryWrapperBehavior();
                    this.state = 2576;
                    this.match(TrinoSQLParser.WRAPPER);
                    }
                }

                this.state = 2587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144 || _la === 189) {
                    {
                    this.state = 2580;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 144 || _la === 189)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2581;
                    this.match(TrinoSQLParser.QUOTES);
                    this.state = 2585;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 190) {
                        {
                        this.state = 2582;
                        this.match(TrinoSQLParser.ON);
                        this.state = 2583;
                        this.match(TrinoSQLParser.SCALAR);
                        this.state = 2584;
                        this.match(TrinoSQLParser.TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 2593;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
                case 1:
                    {
                    this.state = 2589;
                    (localContext as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2590;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2591;
                    this.match(TrinoSQLParser.EMPTY);
                    }
                    break;
                }
                this.state = 2599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89 || _la === 183) {
                    {
                    this.state = 2595;
                    (localContext as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2596;
                    this.match(TrinoSQLParser.ON);
                    this.state = 2597;
                    this.match(TrinoSQLParser.ERROR);
                    }
                }

                this.state = 2601;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 46:
                {
                localContext = new JsonObjectContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2603;
                this.match(TrinoSQLParser.JSON_OBJECT);
                this.state = 2604;
                this.match(TrinoSQLParser.T__1);
                this.state = 2633;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
                case 1:
                    {
                    this.state = 2605;
                    this.jsonObjectMember();
                    this.state = 2610;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2606;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2607;
                        this.jsonObjectMember();
                        }
                        }
                        this.state = 2612;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2619;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSQLParser.NULL:
                        {
                        this.state = 2613;
                        this.match(TrinoSQLParser.NULL);
                        this.state = 2614;
                        this.match(TrinoSQLParser.ON);
                        this.state = 2615;
                        this.match(TrinoSQLParser.NULL);
                        }
                        break;
                    case TrinoSQLParser.ABSENT:
                        {
                        this.state = 2616;
                        this.match(TrinoSQLParser.ABSENT);
                        this.state = 2617;
                        this.match(TrinoSQLParser.ON);
                        this.state = 2618;
                        this.match(TrinoSQLParser.NULL);
                        }
                        break;
                    case TrinoSQLParser.T__2:
                    case TrinoSQLParser.RETURNING:
                    case TrinoSQLParser.WITH:
                    case TrinoSQLParser.WITHOUT:
                        break;
                    default:
                        break;
                    }
                    this.state = 2631;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSQLParser.WITH:
                        {
                        this.state = 2621;
                        this.match(TrinoSQLParser.WITH);
                        this.state = 2622;
                        this.match(TrinoSQLParser.UNIQUE);
                        this.state = 2624;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 146) {
                            {
                            this.state = 2623;
                            this.match(TrinoSQLParser.KEYS);
                            }
                        }

                        }
                        break;
                    case TrinoSQLParser.WITHOUT:
                        {
                        this.state = 2626;
                        this.match(TrinoSQLParser.WITHOUT);
                        this.state = 2627;
                        this.match(TrinoSQLParser.UNIQUE);
                        this.state = 2629;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 146) {
                            {
                            this.state = 2628;
                            this.match(TrinoSQLParser.KEYS);
                            }
                        }

                        }
                        break;
                    case TrinoSQLParser.T__2:
                    case TrinoSQLParser.RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2635;
                    this.match(TrinoSQLParser.RETURNING);
                    this.state = 2636;
                    this.type_(0);
                    this.state = 2639;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2637;
                        this.match(TrinoSQLParser.FORMAT);
                        this.state = 2638;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2643;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 47:
                {
                localContext = new JsonArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2644;
                this.match(TrinoSQLParser.JSON_ARRAY);
                this.state = 2645;
                this.match(TrinoSQLParser.T__1);
                this.state = 2662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                case 1:
                    {
                    this.state = 2646;
                    this.jsonValueExpression();
                    this.state = 2651;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2647;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2648;
                        this.jsonValueExpression();
                        }
                        }
                        this.state = 2653;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2660;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSQLParser.NULL:
                        {
                        this.state = 2654;
                        this.match(TrinoSQLParser.NULL);
                        this.state = 2655;
                        this.match(TrinoSQLParser.ON);
                        this.state = 2656;
                        this.match(TrinoSQLParser.NULL);
                        }
                        break;
                    case TrinoSQLParser.ABSENT:
                        {
                        this.state = 2657;
                        this.match(TrinoSQLParser.ABSENT);
                        this.state = 2658;
                        this.match(TrinoSQLParser.ON);
                        this.state = 2659;
                        this.match(TrinoSQLParser.NULL);
                        }
                        break;
                    case TrinoSQLParser.T__2:
                    case TrinoSQLParser.RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2664;
                    this.match(TrinoSQLParser.RETURNING);
                    this.state = 2665;
                    this.type_(0);
                    this.state = 2668;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2666;
                        this.match(TrinoSQLParser.FORMAT);
                        this.state = 2667;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2672;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2685;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2683;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
                    case 1:
                        {
                        localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as SubscriptContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_primaryExpression);
                        this.state = 2675;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 2676;
                        this.match(TrinoSQLParser.T__7);
                        this.state = 2677;
                        (localContext as SubscriptContext)._index = this.valueExpression(0);
                        this.state = 2678;
                        this.match(TrinoSQLParser.T__8);
                        }
                        break;
                    case 2:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_primaryExpression);
                        this.state = 2680;
                        if (!(this.precpred(this.context, 22))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 22)");
                        }
                        this.state = 2681;
                        this.match(TrinoSQLParser.T__0);
                        this.state = 2682;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2687;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 349, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        let localContext = new JsonPathInvocationContext(this.context, this.state);
        this.enterRule(localContext, 136, TrinoSQLParser.RULE_jsonPathInvocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2688;
            this.jsonValueExpression();
            this.state = 2689;
            this.match(TrinoSQLParser.T__3);
            this.state = 2690;
            localContext._path = this.string_();
            this.state = 2693;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 2691;
                this.match(TrinoSQLParser.AS);
                this.state = 2692;
                localContext._pathName = this.identifier();
                }
            }

            this.state = 2704;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 203) {
                {
                this.state = 2695;
                this.match(TrinoSQLParser.PASSING);
                this.state = 2696;
                this.jsonArgument();
                this.state = 2701;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2697;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2698;
                    this.jsonArgument();
                    }
                    }
                    this.state = 2703;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        let localContext = new JsonValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 138, TrinoSQLParser.RULE_jsonValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2706;
            this.expression();
            this.state = 2709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104) {
                {
                this.state = 2707;
                this.match(TrinoSQLParser.FORMAT);
                this.state = 2708;
                this.jsonRepresentation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        let localContext = new JsonRepresentationContext(this.context, this.state);
        this.enterRule(localContext, 140, TrinoSQLParser.RULE_jsonRepresentation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2711;
            this.match(TrinoSQLParser.JSON);
            this.state = 2714;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 2712;
                this.match(TrinoSQLParser.ENCODING);
                this.state = 2713;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonArgument(): JsonArgumentContext {
        let localContext = new JsonArgumentContext(this.context, this.state);
        this.enterRule(localContext, 142, TrinoSQLParser.RULE_jsonArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2716;
            this.jsonValueExpression();
            this.state = 2717;
            this.match(TrinoSQLParser.AS);
            this.state = 2718;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
        let localContext = new JsonExistsErrorBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 144, TrinoSQLParser.RULE_jsonExistsErrorBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2720;
            _la = this.tokenStream.LA(1);
            if(!(_la === 89 || _la === 97 || _la === 273 || _la === 283)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueBehavior(): JsonValueBehaviorContext {
        let localContext = new JsonValueBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 146, TrinoSQLParser.RULE_jsonValueBehavior);
        try {
            this.state = 2726;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2722;
                this.match(TrinoSQLParser.ERROR);
                }
                break;
            case TrinoSQLParser.NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2723;
                this.match(TrinoSQLParser.NULL);
                }
                break;
            case TrinoSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2724;
                this.match(TrinoSQLParser.DEFAULT);
                this.state = 2725;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
        let localContext = new JsonQueryWrapperBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 148, TrinoSQLParser.RULE_jsonQueryWrapperBehavior);
        let _la: number;
        try {
            this.state = 2739;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2728;
                this.match(TrinoSQLParser.WITHOUT);
                this.state = 2730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2729;
                    this.match(TrinoSQLParser.ARRAY);
                    }
                }

                }
                break;
            case TrinoSQLParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2732;
                this.match(TrinoSQLParser.WITH);
                this.state = 2734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 49 || _la === 280) {
                    {
                    this.state = 2733;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 49 || _la === 280)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2736;
                    this.match(TrinoSQLParser.ARRAY);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext {
        let localContext = new JsonQueryBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 150, TrinoSQLParser.RULE_jsonQueryBehavior);
        try {
            this.state = 2747;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 360, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2741;
                this.match(TrinoSQLParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2742;
                this.match(TrinoSQLParser.NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2743;
                this.match(TrinoSQLParser.EMPTY);
                this.state = 2744;
                this.match(TrinoSQLParser.ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2745;
                this.match(TrinoSQLParser.EMPTY);
                this.state = 2746;
                this.match(TrinoSQLParser.OBJECT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonObjectMember(): JsonObjectMemberContext {
        let localContext = new JsonObjectMemberContext(this.context, this.state);
        this.enterRule(localContext, 152, TrinoSQLParser.RULE_jsonObjectMember);
        try {
            this.state = 2760;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2750;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 361, this.context) ) {
                case 1:
                    {
                    this.state = 2749;
                    this.match(TrinoSQLParser.KEY);
                    }
                    break;
                }
                this.state = 2752;
                this.expression();
                this.state = 2753;
                this.match(TrinoSQLParser.VALUE);
                this.state = 2754;
                this.jsonValueExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2756;
                this.expression();
                this.state = 2757;
                this.match(TrinoSQLParser.T__9);
                this.state = 2758;
                this.jsonValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public processingMode(): ProcessingModeContext {
        let localContext = new ProcessingModeContext(this.context, this.state);
        this.enterRule(localContext, 154, TrinoSQLParser.RULE_processingMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2762;
            _la = this.tokenStream.LA(1);
            if(!(_la === 100 || _la === 241)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 156, TrinoSQLParser.RULE_nullTreatment);
        try {
            this.state = 2768;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.IGNORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2764;
                this.match(TrinoSQLParser.IGNORE);
                this.state = 2765;
                this.match(TrinoSQLParser.NULLS);
                }
                break;
            case TrinoSQLParser.RESPECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2766;
                this.match(TrinoSQLParser.RESPECT);
                this.state = 2767;
                this.match(TrinoSQLParser.NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): StringContext {
        let localContext = new StringContext(this.context, this.state);
        this.enterRule(localContext, 158, TrinoSQLParser.RULE_string);
        try {
            this.state = 2776;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.STRING:
                localContext = new BasicStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2770;
                this.match(TrinoSQLParser.STRING);
                }
                break;
            case TrinoSQLParser.UNICODE_STRING:
                localContext = new UnicodeStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2771;
                this.match(TrinoSQLParser.UNICODE_STRING);
                this.state = 2774;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
                case 1:
                    {
                    this.state = 2772;
                    this.match(TrinoSQLParser.UESCAPE);
                    this.state = 2773;
                    this.match(TrinoSQLParser.STRING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        let localContext = new TimeZoneSpecifierContext(this.context, this.state);
        this.enterRule(localContext, 160, TrinoSQLParser.RULE_timeZoneSpecifier);
        try {
            this.state = 2784;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
            case 1:
                localContext = new TimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2778;
                this.match(TrinoSQLParser.TIME);
                this.state = 2779;
                this.match(TrinoSQLParser.ZONE);
                this.state = 2780;
                this.interval();
                }
                break;
            case 2:
                localContext = new TimeZoneStringContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2781;
                this.match(TrinoSQLParser.TIME);
                this.state = 2782;
                this.match(TrinoSQLParser.ZONE);
                this.state = 2783;
                this.string_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 162, TrinoSQLParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2786;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        let localContext = new ComparisonQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 164, TrinoSQLParser.RULE_comparisonQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2788;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 26 || _la === 254)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 166, TrinoSQLParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2790;
            _la = this.tokenStream.LA(1);
            if(!(_la === 97 || _la === 273)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 168, TrinoSQLParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2792;
            this.match(TrinoSQLParser.INTERVAL);
            this.state = 2794;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 318 || _la === 319) {
                {
                this.state = 2793;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 318 || _la === 319)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2796;
            this.string_();
            this.state = 2797;
            localContext._from_ = this.intervalField();
            this.state = 2800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                {
                this.state = 2798;
                this.match(TrinoSQLParser.TO);
                this.state = 2799;
                localContext._to = this.intervalField();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalField(): IntervalFieldContext {
        let localContext = new IntervalFieldContext(this.context, this.state);
        this.enterRule(localContext, 170, TrinoSQLParser.RULE_intervalField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2802;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 118 || _la === 170 || _la === 171 || _la === 245 || _la === 310)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 172, TrinoSQLParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2804;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public type_(): TypeContext;
    public type_(_p: number): TypeContext;
    public type_(_p?: number): TypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 174;
        this.enterRecursionRule(localContext, 174, TrinoSQLParser.RULE_type, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2897;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
            case 1:
                {
                localContext = new RowTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2807;
                this.match(TrinoSQLParser.ROW);
                this.state = 2808;
                this.match(TrinoSQLParser.T__1);
                this.state = 2809;
                this.rowField();
                this.state = 2814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2810;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2811;
                    this.rowField();
                    }
                    }
                    this.state = 2816;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2817;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 2:
                {
                localContext = new IntervalTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2819;
                this.match(TrinoSQLParser.INTERVAL);
                this.state = 2820;
                (localContext as IntervalTypeContext)._from_ = this.intervalField();
                this.state = 2823;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
                case 1:
                    {
                    this.state = 2821;
                    this.match(TrinoSQLParser.TO);
                    this.state = 2822;
                    (localContext as IntervalTypeContext)._to = this.intervalField();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2825;
                (localContext as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIMESTAMP);
                this.state = 2830;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 2826;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2827;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2828;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                this.state = 2835;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 2832;
                    this.match(TrinoSQLParser.WITHOUT);
                    this.state = 2833;
                    this.match(TrinoSQLParser.TIME);
                    this.state = 2834;
                    this.match(TrinoSQLParser.ZONE);
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2837;
                (localContext as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIMESTAMP);
                this.state = 2842;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2838;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2839;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2840;
                    this.match(TrinoSQLParser.T__2);
                    }
                }

                this.state = 2844;
                this.match(TrinoSQLParser.WITH);
                this.state = 2845;
                this.match(TrinoSQLParser.TIME);
                this.state = 2846;
                this.match(TrinoSQLParser.ZONE);
                }
                break;
            case 5:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2847;
                (localContext as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIME);
                this.state = 2852;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 2848;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2849;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2850;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                this.state = 2857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 2854;
                    this.match(TrinoSQLParser.WITHOUT);
                    this.state = 2855;
                    this.match(TrinoSQLParser.TIME);
                    this.state = 2856;
                    this.match(TrinoSQLParser.ZONE);
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2859;
                (localContext as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIME);
                this.state = 2864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2860;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2861;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2862;
                    this.match(TrinoSQLParser.T__2);
                    }
                }

                this.state = 2866;
                this.match(TrinoSQLParser.WITH);
                this.state = 2867;
                this.match(TrinoSQLParser.TIME);
                this.state = 2868;
                this.match(TrinoSQLParser.ZONE);
                }
                break;
            case 7:
                {
                localContext = new DoublePrecisionTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2869;
                this.match(TrinoSQLParser.DOUBLE);
                this.state = 2870;
                this.match(TrinoSQLParser.PRECISION);
                }
                break;
            case 8:
                {
                localContext = new LegacyArrayTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2871;
                this.match(TrinoSQLParser.ARRAY);
                this.state = 2872;
                this.match(TrinoSQLParser.LT);
                this.state = 2873;
                this.type_(0);
                this.state = 2874;
                this.match(TrinoSQLParser.GT);
                }
                break;
            case 9:
                {
                localContext = new LegacyMapTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2876;
                this.match(TrinoSQLParser.MAP);
                this.state = 2877;
                this.match(TrinoSQLParser.LT);
                this.state = 2878;
                (localContext as LegacyMapTypeContext)._keyType = this.type_(0);
                this.state = 2879;
                this.match(TrinoSQLParser.T__3);
                this.state = 2880;
                (localContext as LegacyMapTypeContext)._valueType = this.type_(0);
                this.state = 2881;
                this.match(TrinoSQLParser.GT);
                }
                break;
            case 10:
                {
                localContext = new GenericTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2883;
                this.identifier();
                this.state = 2895;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 2884;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2885;
                    this.typeParameter();
                    this.state = 2890;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2886;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2887;
                        this.typeParameter();
                        }
                        }
                        this.state = 2892;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2893;
                    this.match(TrinoSQLParser.T__2);
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2908;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 381, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ArrayTypeContext(new TypeContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_type);
                    this.state = 2899;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 2900;
                    this.match(TrinoSQLParser.ARRAY);
                    this.state = 2904;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
                    case 1:
                        {
                        this.state = 2901;
                        this.match(TrinoSQLParser.T__7);
                        this.state = 2902;
                        this.match(TrinoSQLParser.INTEGER_VALUE);
                        this.state = 2903;
                        this.match(TrinoSQLParser.T__8);
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 2910;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 381, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowField(): RowFieldContext {
        let localContext = new RowFieldContext(this.context, this.state);
        this.enterRule(localContext, 176, TrinoSQLParser.RULE_rowField);
        try {
            this.state = 2915;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2911;
                this.type_(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2912;
                this.identifier();
                this.state = 2913;
                this.type_(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeParameter(): TypeParameterContext {
        let localContext = new TypeParameterContext(this.context, this.state);
        this.enterRule(localContext, 178, TrinoSQLParser.RULE_typeParameter);
        try {
            this.state = 2919;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2917;
                this.match(TrinoSQLParser.INTEGER_VALUE);
                }
                break;
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2918;
                this.type_(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 180, TrinoSQLParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2921;
            this.match(TrinoSQLParser.WHEN);
            this.state = 2922;
            localContext._condition = this.expression();
            this.state = 2923;
            this.match(TrinoSQLParser.THEN);
            this.state = 2924;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter(): FilterContext {
        let localContext = new FilterContext(this.context, this.state);
        this.enterRule(localContext, 182, TrinoSQLParser.RULE_filter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2926;
            this.match(TrinoSQLParser.FILTER);
            this.state = 2927;
            this.match(TrinoSQLParser.T__1);
            this.state = 2928;
            this.match(TrinoSQLParser.WHERE);
            this.state = 2929;
            this.booleanExpression(0);
            this.state = 2930;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeCase(): MergeCaseContext {
        let localContext = new MergeCaseContext(this.context, this.state);
        this.enterRule(localContext, 184, TrinoSQLParser.RULE_mergeCase);
        let _la: number;
        try {
            this.state = 2996;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                localContext = new MergeUpdateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2932;
                this.match(TrinoSQLParser.WHEN);
                this.state = 2933;
                this.match(TrinoSQLParser.MATCHED);
                this.state = 2936;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2934;
                    this.match(TrinoSQLParser.AND);
                    this.state = 2935;
                    (localContext as MergeUpdateContext)._condition = this.expression();
                    }
                }

                this.state = 2938;
                this.match(TrinoSQLParser.THEN);
                this.state = 2939;
                this.match(TrinoSQLParser.UPDATE);
                this.state = 2940;
                this.match(TrinoSQLParser.SET);
                this.state = 2941;
                (localContext as MergeUpdateContext)._identifier = this.identifier();
                (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                this.state = 2942;
                this.match(TrinoSQLParser.EQ);
                this.state = 2943;
                (localContext as MergeUpdateContext)._expression = this.expression();
                (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                this.state = 2951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2944;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2945;
                    (localContext as MergeUpdateContext)._identifier = this.identifier();
                    (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                    this.state = 2946;
                    this.match(TrinoSQLParser.EQ);
                    this.state = 2947;
                    (localContext as MergeUpdateContext)._expression = this.expression();
                    (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                    }
                    }
                    this.state = 2953;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new MergeDeleteContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2954;
                this.match(TrinoSQLParser.WHEN);
                this.state = 2955;
                this.match(TrinoSQLParser.MATCHED);
                this.state = 2958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2956;
                    this.match(TrinoSQLParser.AND);
                    this.state = 2957;
                    (localContext as MergeDeleteContext)._condition = this.expression();
                    }
                }

                this.state = 2960;
                this.match(TrinoSQLParser.THEN);
                this.state = 2961;
                this.match(TrinoSQLParser.DELETE);
                }
                break;
            case 3:
                localContext = new MergeInsertContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2962;
                this.match(TrinoSQLParser.WHEN);
                this.state = 2963;
                this.match(TrinoSQLParser.NOT);
                this.state = 2964;
                this.match(TrinoSQLParser.MATCHED);
                this.state = 2967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2965;
                    this.match(TrinoSQLParser.AND);
                    this.state = 2966;
                    (localContext as MergeInsertContext)._condition = this.expression();
                    }
                }

                this.state = 2969;
                this.match(TrinoSQLParser.THEN);
                this.state = 2970;
                this.match(TrinoSQLParser.INSERT);
                this.state = 2982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2971;
                    this.match(TrinoSQLParser.T__1);
                    this.state = 2972;
                    (localContext as MergeInsertContext)._identifier = this.identifier();
                    (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                    this.state = 2977;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 4) {
                        {
                        {
                        this.state = 2973;
                        this.match(TrinoSQLParser.T__3);
                        this.state = 2974;
                        (localContext as MergeInsertContext)._identifier = this.identifier();
                        (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                        }
                        }
                        this.state = 2979;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2980;
                    this.match(TrinoSQLParser.T__2);
                    }
                }

                this.state = 2984;
                this.match(TrinoSQLParser.VALUES);
                this.state = 2985;
                this.match(TrinoSQLParser.T__1);
                this.state = 2986;
                (localContext as MergeInsertContext)._expression = this.expression();
                (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                this.state = 2991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 2987;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 2988;
                    (localContext as MergeInsertContext)._expression = this.expression();
                    (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                    }
                    }
                    this.state = 2993;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2994;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over(): OverContext {
        let localContext = new OverContext(this.context, this.state);
        this.enterRule(localContext, 186, TrinoSQLParser.RULE_over);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2998;
            this.match(TrinoSQLParser.OVER);
            this.state = 3004;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 2999;
                localContext._windowName = this.identifier();
                }
                break;
            case TrinoSQLParser.T__1:
                {
                this.state = 3000;
                this.match(TrinoSQLParser.T__1);
                this.state = 3001;
                this.windowSpecification();
                this.state = 3002;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 188, TrinoSQLParser.RULE_windowFrame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 3006;
                this.match(TrinoSQLParser.MEASURES);
                this.state = 3007;
                this.measureDefinition();
                this.state = 3012;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3008;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 3009;
                    this.measureDefinition();
                    }
                    }
                    this.state = 3014;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3017;
            this.frameExtent();
            this.state = 3021;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21) {
                {
                this.state = 3018;
                this.match(TrinoSQLParser.AFTER);
                this.state = 3019;
                this.match(TrinoSQLParser.MATCH);
                this.state = 3020;
                this.skipTo();
                }
            }

            this.state = 3024;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124 || _la === 247) {
                {
                this.state = 3023;
                _la = this.tokenStream.LA(1);
                if(!(_la === 124 || _la === 247)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 3026;
                this.match(TrinoSQLParser.PATTERN);
                this.state = 3027;
                this.match(TrinoSQLParser.T__1);
                this.state = 3028;
                this.rowPattern(0);
                this.state = 3029;
                this.match(TrinoSQLParser.T__2);
                }
            }

            this.state = 3042;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 257) {
                {
                this.state = 3033;
                this.match(TrinoSQLParser.SUBSET);
                this.state = 3034;
                this.subsetDefinition();
                this.state = 3039;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3035;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 3036;
                    this.subsetDefinition();
                    }
                    }
                    this.state = 3041;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3053;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 3044;
                this.match(TrinoSQLParser.DEFINE);
                this.state = 3045;
                this.variableDefinition();
                this.state = 3050;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3046;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 3047;
                    this.variableDefinition();
                    }
                    }
                    this.state = 3052;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 190, TrinoSQLParser.RULE_frameExtent);
        try {
            this.state = 3079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3055;
                localContext._frameType = this.match(TrinoSQLParser.RANGE);
                this.state = 3056;
                localContext._start = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3057;
                localContext._frameType = this.match(TrinoSQLParser.ROWS);
                this.state = 3058;
                localContext._start = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3059;
                localContext._frameType = this.match(TrinoSQLParser.GROUPS);
                this.state = 3060;
                localContext._start = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3061;
                localContext._frameType = this.match(TrinoSQLParser.RANGE);
                this.state = 3062;
                this.match(TrinoSQLParser.BETWEEN);
                this.state = 3063;
                localContext._start = this.frameBound();
                this.state = 3064;
                this.match(TrinoSQLParser.AND);
                this.state = 3065;
                localContext._end = this.frameBound();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3067;
                localContext._frameType = this.match(TrinoSQLParser.ROWS);
                this.state = 3068;
                this.match(TrinoSQLParser.BETWEEN);
                this.state = 3069;
                localContext._start = this.frameBound();
                this.state = 3070;
                this.match(TrinoSQLParser.AND);
                this.state = 3071;
                localContext._end = this.frameBound();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3073;
                localContext._frameType = this.match(TrinoSQLParser.GROUPS);
                this.state = 3074;
                this.match(TrinoSQLParser.BETWEEN);
                this.state = 3075;
                localContext._start = this.frameBound();
                this.state = 3076;
                this.match(TrinoSQLParser.AND);
                this.state = 3077;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 192, TrinoSQLParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3090;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 403, this.context) ) {
            case 1:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3081;
                this.match(TrinoSQLParser.UNBOUNDED);
                this.state = 3082;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoSQLParser.PRECEDING);
                }
                break;
            case 2:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3083;
                this.match(TrinoSQLParser.UNBOUNDED);
                this.state = 3084;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoSQLParser.FOLLOWING);
                }
                break;
            case 3:
                localContext = new CurrentRowBoundContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3085;
                this.match(TrinoSQLParser.CURRENT);
                this.state = 3086;
                this.match(TrinoSQLParser.ROW);
                }
                break;
            case 4:
                localContext = new BoundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3087;
                this.expression();
                this.state = 3088;
                (localContext as BoundedFrameContext)._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 102 || _la === 212)) {
                    (localContext as BoundedFrameContext)._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public rowPattern(): RowPatternContext;
    public rowPattern(_p: number): RowPatternContext;
    public rowPattern(_p?: number): RowPatternContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RowPatternContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 194;
        this.enterRecursionRule(localContext, 194, TrinoSQLParser.RULE_rowPattern, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QuantifiedPrimaryContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 3093;
            this.patternPrimary();
            this.state = 3095;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
            case 1:
                {
                this.state = 3094;
                this.patternQuantifier();
                }
                break;
            }
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3104;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 406, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3102;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                    case 1:
                        {
                        localContext = new PatternConcatenationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_rowPattern);
                        this.state = 3097;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3098;
                        this.rowPattern(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PatternAlternationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSQLParser.RULE_rowPattern);
                        this.state = 3099;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3100;
                        this.match(TrinoSQLParser.T__10);
                        this.state = 3101;
                        this.rowPattern(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3106;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 406, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public patternPrimary(): PatternPrimaryContext {
        let localContext = new PatternPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 196, TrinoSQLParser.RULE_patternPrimary);
        let _la: number;
        try {
            this.state = 3132;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
            case 1:
                localContext = new PatternVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3107;
                this.identifier();
                }
                break;
            case 2:
                localContext = new EmptyPatternContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3108;
                this.match(TrinoSQLParser.T__1);
                this.state = 3109;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 3:
                localContext = new PatternPermutationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3110;
                this.match(TrinoSQLParser.PERMUTE);
                this.state = 3111;
                this.match(TrinoSQLParser.T__1);
                this.state = 3112;
                this.rowPattern(0);
                this.state = 3117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3113;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 3114;
                    this.rowPattern(0);
                    }
                    }
                    this.state = 3119;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3120;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 4:
                localContext = new GroupedPatternContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3122;
                this.match(TrinoSQLParser.T__1);
                this.state = 3123;
                this.rowPattern(0);
                this.state = 3124;
                this.match(TrinoSQLParser.T__2);
                }
                break;
            case 5:
                localContext = new PartitionStartAnchorContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3126;
                this.match(TrinoSQLParser.T__11);
                }
                break;
            case 6:
                localContext = new PartitionEndAnchorContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3127;
                this.match(TrinoSQLParser.T__12);
                }
                break;
            case 7:
                localContext = new ExcludedPatternContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3128;
                this.match(TrinoSQLParser.T__13);
                this.state = 3129;
                this.rowPattern(0);
                this.state = 3130;
                this.match(TrinoSQLParser.T__14);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternQuantifier(): PatternQuantifierContext {
        let localContext = new PatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 198, TrinoSQLParser.RULE_patternQuantifier);
        let _la: number;
        try {
            this.state = 3164;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
            case 1:
                localContext = new ZeroOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3134;
                this.match(TrinoSQLParser.ASTERISK);
                this.state = 3136;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
                case 1:
                    {
                    this.state = 3135;
                    (localContext as ZeroOrMoreQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new OneOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3138;
                this.match(TrinoSQLParser.PLUS);
                this.state = 3140;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
                case 1:
                    {
                    this.state = 3139;
                    (localContext as OneOrMoreQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ZeroOrOneQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3142;
                this.match(TrinoSQLParser.QUESTION_MARK);
                this.state = 3144;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
                case 1:
                    {
                    this.state = 3143;
                    (localContext as ZeroOrOneQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3146;
                this.match(TrinoSQLParser.T__15);
                this.state = 3147;
                (localContext as RangeQuantifierContext)._exactly = this.match(TrinoSQLParser.INTEGER_VALUE);
                this.state = 3148;
                this.match(TrinoSQLParser.T__16);
                this.state = 3150;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
                case 1:
                    {
                    this.state = 3149;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3152;
                this.match(TrinoSQLParser.T__15);
                this.state = 3154;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 3153;
                    (localContext as RangeQuantifierContext)._atLeast = this.match(TrinoSQLParser.INTEGER_VALUE);
                    }
                }

                this.state = 3156;
                this.match(TrinoSQLParser.T__3);
                this.state = 3158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 3157;
                    (localContext as RangeQuantifierContext)._atMost = this.match(TrinoSQLParser.INTEGER_VALUE);
                    }
                }

                this.state = 3160;
                this.match(TrinoSQLParser.T__16);
                this.state = 3162;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
                case 1:
                    {
                    this.state = 3161;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 200, TrinoSQLParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3166;
            this.identifier();
            this.state = 3167;
            this.match(TrinoSQLParser.EQ);
            this.state = 3168;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 202, TrinoSQLParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 3174;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.FORMAT:
                localContext = new ExplainFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3170;
                this.match(TrinoSQLParser.FORMAT);
                this.state = 3171;
                (localContext as ExplainFormatContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 113 || _la === 137 || _la === 263)) {
                    (localContext as ExplainFormatContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoSQLParser.TYPE:
                localContext = new ExplainTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3172;
                this.match(TrinoSQLParser.TYPE);
                this.state = 3173;
                (localContext as ExplainTypeContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 80 || _la === 132 || _la === 160 || _la === 294)) {
                    (localContext as ExplainTypeContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 204, TrinoSQLParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 3181;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ISOLATION:
                localContext = new IsolationLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3176;
                this.match(TrinoSQLParser.ISOLATION);
                this.state = 3177;
                this.match(TrinoSQLParser.LEVEL);
                this.state = 3178;
                this.levelOfIsolation();
                }
                break;
            case TrinoSQLParser.READ:
                localContext = new TransactionAccessModeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3179;
                this.match(TrinoSQLParser.READ);
                this.state = 3180;
                (localContext as TransactionAccessModeContext)._accessMode = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 192 || _la === 309)) {
                    (localContext as TransactionAccessModeContext)._accessMode = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 206, TrinoSQLParser.RULE_levelOfIsolation);
        try {
            this.state = 3190;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
            case 1:
                localContext = new ReadUncommittedContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3183;
                this.match(TrinoSQLParser.READ);
                this.state = 3184;
                this.match(TrinoSQLParser.UNCOMMITTED);
                }
                break;
            case 2:
                localContext = new ReadCommittedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3185;
                this.match(TrinoSQLParser.READ);
                this.state = 3186;
                this.match(TrinoSQLParser.COMMITTED);
                }
                break;
            case 3:
                localContext = new RepeatableReadContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3187;
                this.match(TrinoSQLParser.REPEATABLE);
                this.state = 3188;
                this.match(TrinoSQLParser.READ);
                }
                break;
            case 4:
                localContext = new SerializableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3189;
                this.match(TrinoSQLParser.SERIALIZABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callArgument(): CallArgumentContext {
        let localContext = new CallArgumentContext(this.context, this.state);
        this.enterRule(localContext, 208, TrinoSQLParser.RULE_callArgument);
        try {
            this.state = 3197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
            case 1:
                localContext = new PositionalArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3192;
                this.expression();
                }
                break;
            case 2:
                localContext = new NamedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3193;
                this.identifier();
                this.state = 3194;
                this.match(TrinoSQLParser.T__5);
                this.state = 3195;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 210, TrinoSQLParser.RULE_pathElement);
        try {
            this.state = 3204;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                localContext = new QualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3199;
                this.identifier();
                this.state = 3200;
                this.match(TrinoSQLParser.T__0);
                this.state = 3201;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UnqualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3203;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSpecification(): PathSpecificationContext {
        let localContext = new PathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 212, TrinoSQLParser.RULE_pathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3206;
            this.pathElement();
            this.state = 3211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3207;
                this.match(TrinoSQLParser.T__3);
                this.state = 3208;
                this.pathElement();
                }
                }
                this.state = 3213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSpecification(): FunctionSpecificationContext {
        let localContext = new FunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 214, TrinoSQLParser.RULE_functionSpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3214;
            this.match(TrinoSQLParser.FUNCTION);
            this.state = 3215;
            this.functionDeclaration();
            this.state = 3216;
            this.returnsClause();
            this.state = 3220;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 423, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3217;
                    this.routineCharacteristic();
                    }
                    }
                }
                this.state = 3222;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 423, this.context);
            }
            this.state = 3223;
            this.controlStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        let localContext = new FunctionDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 216, TrinoSQLParser.RULE_functionDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3225;
            this.qualifiedName();
            this.state = 3226;
            this.match(TrinoSQLParser.T__1);
            this.state = 3235;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                {
                this.state = 3227;
                this.parameterDeclaration();
                this.state = 3232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 4) {
                    {
                    {
                    this.state = 3228;
                    this.match(TrinoSQLParser.T__3);
                    this.state = 3229;
                    this.parameterDeclaration();
                    }
                    }
                    this.state = 3234;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3237;
            this.match(TrinoSQLParser.T__2);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterDeclaration(): ParameterDeclarationContext {
        let localContext = new ParameterDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 218, TrinoSQLParser.RULE_parameterDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3240;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
            case 1:
                {
                this.state = 3239;
                this.identifier();
                }
                break;
            }
            this.state = 3242;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnsClause(): ReturnsClauseContext {
        let localContext = new ReturnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 220, TrinoSQLParser.RULE_returnsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3244;
            this.match(TrinoSQLParser.RETURNS);
            this.state = 3245;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineCharacteristic(): RoutineCharacteristicContext {
        let localContext = new RoutineCharacteristicContext(this.context, this.state);
        this.enterRule(localContext, 222, TrinoSQLParser.RULE_routineCharacteristic);
        let _la: number;
        try {
            this.state = 3266;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.LANGUAGE:
                localContext = new LanguageCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3247;
                this.match(TrinoSQLParser.LANGUAGE);
                this.state = 3248;
                this.identifier();
                }
                break;
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.NOT:
                localContext = new DeterministicCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 3249;
                    this.match(TrinoSQLParser.NOT);
                    }
                }

                this.state = 3252;
                this.match(TrinoSQLParser.DETERMINISTIC);
                }
                break;
            case TrinoSQLParser.RETURNS:
                localContext = new ReturnsNullOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3253;
                this.match(TrinoSQLParser.RETURNS);
                this.state = 3254;
                this.match(TrinoSQLParser.NULL);
                this.state = 3255;
                this.match(TrinoSQLParser.ON);
                this.state = 3256;
                this.match(TrinoSQLParser.NULL);
                this.state = 3257;
                this.match(TrinoSQLParser.INPUT);
                }
                break;
            case TrinoSQLParser.CALLED:
                localContext = new CalledOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3258;
                this.match(TrinoSQLParser.CALLED);
                this.state = 3259;
                this.match(TrinoSQLParser.ON);
                this.state = 3260;
                this.match(TrinoSQLParser.NULL);
                this.state = 3261;
                this.match(TrinoSQLParser.INPUT);
                }
                break;
            case TrinoSQLParser.SECURITY:
                localContext = new SecurityCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3262;
                this.match(TrinoSQLParser.SECURITY);
                this.state = 3263;
                _la = this.tokenStream.LA(1);
                if(!(_la === 72 || _la === 131)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoSQLParser.COMMENT:
                localContext = new CommentCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3264;
                this.match(TrinoSQLParser.COMMENT);
                this.state = 3265;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public controlStatement(): ControlStatementContext {
        let localContext = new ControlStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, TrinoSQLParser.RULE_controlStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3367;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 440, this.context) ) {
            case 1:
                localContext = new ReturnStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3268;
                this.match(TrinoSQLParser.RETURN);
                this.state = 3269;
                this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new AssignmentStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3270;
                this.match(TrinoSQLParser.SET);
                this.state = 3271;
                this.identifier();
                this.state = 3272;
                this.match(TrinoSQLParser.EQ);
                this.state = 3273;
                this.expression();
                }
                break;
            case 3:
                localContext = new SimpleCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3275;
                this.match(TrinoSQLParser.CASE);
                this.state = 3276;
                this.expression();
                this.state = 3278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3277;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3280;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 3283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3282;
                    this.elseClause();
                    }
                }

                this.state = 3285;
                this.match(TrinoSQLParser.END);
                this.state = 3286;
                this.match(TrinoSQLParser.CASE);
                }
                break;
            case 4:
                localContext = new SearchedCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3288;
                this.match(TrinoSQLParser.CASE);
                this.state = 3290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3289;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3292;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 3295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3294;
                    this.elseClause();
                    }
                }

                this.state = 3297;
                this.match(TrinoSQLParser.END);
                this.state = 3298;
                this.match(TrinoSQLParser.CASE);
                }
                break;
            case 5:
                localContext = new IfStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3300;
                this.match(TrinoSQLParser.IF);
                this.state = 3301;
                this.expression();
                this.state = 3302;
                this.match(TrinoSQLParser.THEN);
                this.state = 3303;
                this.sqlStatementList();
                this.state = 3307;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 86) {
                    {
                    {
                    this.state = 3304;
                    this.elseIfClause();
                    }
                    }
                    this.state = 3309;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3311;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3310;
                    this.elseClause();
                    }
                }

                this.state = 3313;
                this.match(TrinoSQLParser.END);
                this.state = 3314;
                this.match(TrinoSQLParser.IF);
                }
                break;
            case 6:
                localContext = new IterateStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3316;
                this.match(TrinoSQLParser.ITERATE);
                this.state = 3317;
                this.identifier();
                }
                break;
            case 7:
                localContext = new LeaveStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3318;
                this.match(TrinoSQLParser.LEAVE);
                this.state = 3319;
                this.identifier();
                }
                break;
            case 8:
                localContext = new CompoundStatementContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3320;
                this.match(TrinoSQLParser.BEGIN);
                this.state = 3326;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3321;
                        this.variableDeclaration();
                        this.state = 3322;
                        this.match(TrinoSQLParser.SEMICOLON);
                        }
                        }
                    }
                    this.state = 3328;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 435, this.context);
                }
                this.state = 3330;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4286249823) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 3329;
                    this.sqlStatementList();
                    }
                }

                this.state = 3332;
                this.match(TrinoSQLParser.END);
                }
                break;
            case 9:
                localContext = new LoopStatementContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3336;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
                case 1:
                    {
                    this.state = 3333;
                    (localContext as LoopStatementContext)._label = this.identifier();
                    this.state = 3334;
                    this.match(TrinoSQLParser.T__9);
                    }
                    break;
                }
                this.state = 3338;
                this.match(TrinoSQLParser.LOOP);
                this.state = 3339;
                this.sqlStatementList();
                this.state = 3340;
                this.match(TrinoSQLParser.END);
                this.state = 3341;
                this.match(TrinoSQLParser.LOOP);
                }
                break;
            case 10:
                localContext = new WhileStatementContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3346;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
                case 1:
                    {
                    this.state = 3343;
                    (localContext as WhileStatementContext)._label = this.identifier();
                    this.state = 3344;
                    this.match(TrinoSQLParser.T__9);
                    }
                    break;
                }
                this.state = 3348;
                this.match(TrinoSQLParser.WHILE);
                this.state = 3349;
                this.expression();
                this.state = 3350;
                this.match(TrinoSQLParser.DO);
                this.state = 3351;
                this.sqlStatementList();
                this.state = 3352;
                this.match(TrinoSQLParser.END);
                this.state = 3353;
                this.match(TrinoSQLParser.WHILE);
                }
                break;
            case 11:
                localContext = new RepeatStatementContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3358;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 3355;
                    (localContext as RepeatStatementContext)._label = this.identifier();
                    this.state = 3356;
                    this.match(TrinoSQLParser.T__9);
                    }
                    break;
                }
                this.state = 3360;
                this.match(TrinoSQLParser.REPEAT);
                this.state = 3361;
                this.sqlStatementList();
                this.state = 3362;
                this.match(TrinoSQLParser.UNTIL);
                this.state = 3363;
                this.expression();
                this.state = 3364;
                this.match(TrinoSQLParser.END);
                this.state = 3365;
                this.match(TrinoSQLParser.REPEAT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext {
        let localContext = new CaseStatementWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 226, TrinoSQLParser.RULE_caseStatementWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3369;
            this.match(TrinoSQLParser.WHEN);
            this.state = 3370;
            this.expression();
            this.state = 3371;
            this.match(TrinoSQLParser.THEN);
            this.state = 3372;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseIfClause(): ElseIfClauseContext {
        let localContext = new ElseIfClauseContext(this.context, this.state);
        this.enterRule(localContext, 228, TrinoSQLParser.RULE_elseIfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3374;
            this.match(TrinoSQLParser.ELSEIF);
            this.state = 3375;
            this.expression();
            this.state = 3376;
            this.match(TrinoSQLParser.THEN);
            this.state = 3377;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseClause(): ElseClauseContext {
        let localContext = new ElseClauseContext(this.context, this.state);
        this.enterRule(localContext, 230, TrinoSQLParser.RULE_elseClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3379;
            this.match(TrinoSQLParser.ELSE);
            this.state = 3380;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localContext = new VariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 232, TrinoSQLParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3382;
            this.match(TrinoSQLParser.DECLARE);
            this.state = 3383;
            this.identifier();
            this.state = 3388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3384;
                this.match(TrinoSQLParser.T__3);
                this.state = 3385;
                this.identifier();
                }
                }
                this.state = 3390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3391;
            this.type_(0);
            this.state = 3394;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 70) {
                {
                this.state = 3392;
                this.match(TrinoSQLParser.DEFAULT);
                this.state = 3393;
                this.valueExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatementList(): SqlStatementListContext {
        let localContext = new SqlStatementListContext(this.context, this.state);
        this.enterRule(localContext, 234, TrinoSQLParser.RULE_sqlStatementList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3399;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3396;
                    this.controlStatement();
                    this.state = 3397;
                    this.match(TrinoSQLParser.SEMICOLON);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3401;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 443, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 236, TrinoSQLParser.RULE_privilege);
        try {
            this.state = 3409;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3403;
                this.match(TrinoSQLParser.CREATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3404;
                this.match(TrinoSQLParser.SELECT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3405;
                this.match(TrinoSQLParser.DELETE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3406;
                this.match(TrinoSQLParser.INSERT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3407;
                this.match(TrinoSQLParser.UPDATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3408;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public entityKind(): EntityKindContext {
        let localContext = new EntityKindContext(this.context, this.state);
        this.enterRule(localContext, 238, TrinoSQLParser.RULE_entityKind);
        try {
            this.state = 3414;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3411;
                this.match(TrinoSQLParser.TABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3412;
                this.match(TrinoSQLParser.SCHEMA);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3413;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantObject(): GrantObjectContext {
        let localContext = new GrantObjectContext(this.context, this.state);
        this.enterRule(localContext, 240, TrinoSQLParser.RULE_grantObject);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 446, this.context) ) {
            case 1:
                {
                this.state = 3416;
                this.entityKind();
                }
                break;
            }
            this.state = 3419;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 242, TrinoSQLParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3421;
            this.identifier();
            this.state = 3426;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 447, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3422;
                    this.match(TrinoSQLParser.T__0);
                    this.state = 3423;
                    this.identifier();
                    }
                    }
                }
                this.state = 3428;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 447, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPeriod(): QueryPeriodContext {
        let localContext = new QueryPeriodContext(this.context, this.state);
        this.enterRule(localContext, 244, TrinoSQLParser.RULE_queryPeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3429;
            this.match(TrinoSQLParser.FOR);
            this.state = 3430;
            this.rangeType();
            this.state = 3431;
            this.match(TrinoSQLParser.AS);
            this.state = 3432;
            this.match(TrinoSQLParser.OF);
            this.state = 3433;
            localContext._end = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeType(): RangeTypeContext {
        let localContext = new RangeTypeContext(this.context, this.state);
        this.enterRule(localContext, 246, TrinoSQLParser.RULE_rangeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3435;
            _la = this.tokenStream.LA(1);
            if(!(_la === 268 || _la === 298)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantor(): GrantorContext {
        let localContext = new GrantorContext(this.context, this.state);
        this.enterRule(localContext, 248, TrinoSQLParser.RULE_grantor);
        try {
            this.state = 3440;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                localContext = new SpecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3437;
                this.principal();
                }
                break;
            case TrinoSQLParser.CURRENT_USER:
                localContext = new CurrentUserGrantorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3438;
                this.match(TrinoSQLParser.CURRENT_USER);
                }
                break;
            case TrinoSQLParser.CURRENT_ROLE:
                localContext = new CurrentRoleGrantorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3439;
                this.match(TrinoSQLParser.CURRENT_ROLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principal(): PrincipalContext {
        let localContext = new PrincipalContext(this.context, this.state);
        this.enterRule(localContext, 250, TrinoSQLParser.RULE_principal);
        try {
            this.state = 3447;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
            case 1:
                localContext = new UnspecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3442;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UserPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3443;
                this.match(TrinoSQLParser.USER);
                this.state = 3444;
                this.identifier();
                }
                break;
            case 3:
                localContext = new RolePrincipalContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3445;
                this.match(TrinoSQLParser.ROLE);
                this.state = 3446;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roles(): RolesContext {
        let localContext = new RolesContext(this.context, this.state);
        this.enterRule(localContext, 252, TrinoSQLParser.RULE_roles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3449;
            this.identifier();
            this.state = 3454;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 3450;
                this.match(TrinoSQLParser.T__3);
                this.state = 3451;
                this.identifier();
                }
                }
                this.state = 3456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext {
        let localContext = new PrivilegeOrRoleContext(this.context, this.state);
        this.enterRule(localContext, 254, TrinoSQLParser.RULE_privilegeOrRole);
        try {
            this.state = 3463;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3457;
                this.match(TrinoSQLParser.CREATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3458;
                this.match(TrinoSQLParser.SELECT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3459;
                this.match(TrinoSQLParser.DELETE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3460;
                this.match(TrinoSQLParser.INSERT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3461;
                this.match(TrinoSQLParser.UPDATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3462;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 256, TrinoSQLParser.RULE_identifier);
        try {
            this.state = 3470;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.IDENTIFIER:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3465;
                this.match(TrinoSQLParser.IDENTIFIER);
                }
                break;
            case TrinoSQLParser.QUOTED_IDENTIFIER:
                localContext = new QuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3466;
                this.match(TrinoSQLParser.QUOTED_IDENTIFIER);
                }
                break;
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3467;
                this.nonReserved();
                }
                break;
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                localContext = new BackQuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3468;
                this.match(TrinoSQLParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case TrinoSQLParser.DIGIT_IDENTIFIER:
                localContext = new DigitIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3469;
                this.match(TrinoSQLParser.DIGIT_IDENTIFIER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 258, TrinoSQLParser.RULE_number);
        let _la: number;
        try {
            this.state = 3484;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3473;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3472;
                    this.match(TrinoSQLParser.MINUS);
                    }
                }

                this.state = 3475;
                this.match(TrinoSQLParser.DECIMAL_VALUE);
                }
                break;
            case 2:
                localContext = new DoubleLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3476;
                    this.match(TrinoSQLParser.MINUS);
                    }
                }

                this.state = 3479;
                this.match(TrinoSQLParser.DOUBLE_VALUE);
                }
                break;
            case 3:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3480;
                    this.match(TrinoSQLParser.MINUS);
                    }
                }

                this.state = 3483;
                this.match(TrinoSQLParser.INTEGER_VALUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authorizationUser(): AuthorizationUserContext {
        let localContext = new AuthorizationUserContext(this.context, this.state);
        this.enterRule(localContext, 260, TrinoSQLParser.RULE_authorizationUser);
        try {
            this.state = 3488;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSQLParser.ABSENT:
            case TrinoSQLParser.ADD:
            case TrinoSQLParser.ADMIN:
            case TrinoSQLParser.AFTER:
            case TrinoSQLParser.ALL:
            case TrinoSQLParser.ANALYZE:
            case TrinoSQLParser.ANY:
            case TrinoSQLParser.ARRAY:
            case TrinoSQLParser.ASC:
            case TrinoSQLParser.AT:
            case TrinoSQLParser.AUTHORIZATION:
            case TrinoSQLParser.BEGIN:
            case TrinoSQLParser.BERNOULLI:
            case TrinoSQLParser.BOTH:
            case TrinoSQLParser.CALL:
            case TrinoSQLParser.CALLED:
            case TrinoSQLParser.CASCADE:
            case TrinoSQLParser.CATALOG:
            case TrinoSQLParser.CATALOGS:
            case TrinoSQLParser.COLUMN:
            case TrinoSQLParser.COLUMNS:
            case TrinoSQLParser.COMMENT:
            case TrinoSQLParser.COMMIT:
            case TrinoSQLParser.COMMITTED:
            case TrinoSQLParser.CONDITIONAL:
            case TrinoSQLParser.COUNT:
            case TrinoSQLParser.COPARTITION:
            case TrinoSQLParser.CURRENT:
            case TrinoSQLParser.DATA:
            case TrinoSQLParser.DATE:
            case TrinoSQLParser.DAY:
            case TrinoSQLParser.DECLARE:
            case TrinoSQLParser.DEFAULT:
            case TrinoSQLParser.DEFINE:
            case TrinoSQLParser.DEFINER:
            case TrinoSQLParser.DENY:
            case TrinoSQLParser.DESC:
            case TrinoSQLParser.DESCRIPTOR:
            case TrinoSQLParser.DETERMINISTIC:
            case TrinoSQLParser.DISTRIBUTED:
            case TrinoSQLParser.DO:
            case TrinoSQLParser.DOUBLE:
            case TrinoSQLParser.EMPTY:
            case TrinoSQLParser.ELSEIF:
            case TrinoSQLParser.ENCODING:
            case TrinoSQLParser.ERROR:
            case TrinoSQLParser.EXCLUDING:
            case TrinoSQLParser.EXPLAIN:
            case TrinoSQLParser.FETCH:
            case TrinoSQLParser.FILTER:
            case TrinoSQLParser.FINAL:
            case TrinoSQLParser.FIRST:
            case TrinoSQLParser.FOLLOWING:
            case TrinoSQLParser.FORMAT:
            case TrinoSQLParser.FUNCTION:
            case TrinoSQLParser.FUNCTIONS:
            case TrinoSQLParser.GRACE:
            case TrinoSQLParser.GRANT:
            case TrinoSQLParser.GRANTED:
            case TrinoSQLParser.GRANTS:
            case TrinoSQLParser.GRAPHVIZ:
            case TrinoSQLParser.GROUPS:
            case TrinoSQLParser.HOUR:
            case TrinoSQLParser.IF:
            case TrinoSQLParser.IGNORE:
            case TrinoSQLParser.IMMEDIATE:
            case TrinoSQLParser.INCLUDING:
            case TrinoSQLParser.INITIAL:
            case TrinoSQLParser.INPUT:
            case TrinoSQLParser.INTERVAL:
            case TrinoSQLParser.INVOKER:
            case TrinoSQLParser.IO:
            case TrinoSQLParser.ISOLATION:
            case TrinoSQLParser.ITERATE:
            case TrinoSQLParser.JSON:
            case TrinoSQLParser.KEEP:
            case TrinoSQLParser.KEY:
            case TrinoSQLParser.KEYS:
            case TrinoSQLParser.LANGUAGE:
            case TrinoSQLParser.LAST:
            case TrinoSQLParser.LATERAL:
            case TrinoSQLParser.LEADING:
            case TrinoSQLParser.LEAVE:
            case TrinoSQLParser.LEVEL:
            case TrinoSQLParser.LIMIT:
            case TrinoSQLParser.LOCAL:
            case TrinoSQLParser.LOGICAL:
            case TrinoSQLParser.LOOP:
            case TrinoSQLParser.MAP:
            case TrinoSQLParser.MATCH:
            case TrinoSQLParser.MATCHED:
            case TrinoSQLParser.MATCHES:
            case TrinoSQLParser.MATCH_RECOGNIZE:
            case TrinoSQLParser.MATERIALIZED:
            case TrinoSQLParser.MEASURES:
            case TrinoSQLParser.MERGE:
            case TrinoSQLParser.MINUTE:
            case TrinoSQLParser.MONTH:
            case TrinoSQLParser.NESTED:
            case TrinoSQLParser.NEXT:
            case TrinoSQLParser.NFC:
            case TrinoSQLParser.NFD:
            case TrinoSQLParser.NFKC:
            case TrinoSQLParser.NFKD:
            case TrinoSQLParser.NO:
            case TrinoSQLParser.NONE:
            case TrinoSQLParser.NULLIF:
            case TrinoSQLParser.NULLS:
            case TrinoSQLParser.OBJECT:
            case TrinoSQLParser.OF:
            case TrinoSQLParser.OFFSET:
            case TrinoSQLParser.OMIT:
            case TrinoSQLParser.ONE:
            case TrinoSQLParser.ONLY:
            case TrinoSQLParser.OPTION:
            case TrinoSQLParser.ORDINALITY:
            case TrinoSQLParser.OUTPUT:
            case TrinoSQLParser.OVER:
            case TrinoSQLParser.OVERFLOW:
            case TrinoSQLParser.PARTITION:
            case TrinoSQLParser.PARTITIONS:
            case TrinoSQLParser.PASSING:
            case TrinoSQLParser.PAST:
            case TrinoSQLParser.PATH:
            case TrinoSQLParser.PATTERN:
            case TrinoSQLParser.PER:
            case TrinoSQLParser.PERIOD:
            case TrinoSQLParser.PERMUTE:
            case TrinoSQLParser.PLAN:
            case TrinoSQLParser.POSITION:
            case TrinoSQLParser.PRECEDING:
            case TrinoSQLParser.PRECISION:
            case TrinoSQLParser.PRIVILEGES:
            case TrinoSQLParser.PROPERTIES:
            case TrinoSQLParser.PRUNE:
            case TrinoSQLParser.QUOTES:
            case TrinoSQLParser.RANGE:
            case TrinoSQLParser.READ:
            case TrinoSQLParser.REFRESH:
            case TrinoSQLParser.RENAME:
            case TrinoSQLParser.REPEAT:
            case TrinoSQLParser.REPEATABLE:
            case TrinoSQLParser.REPLACE:
            case TrinoSQLParser.RESET:
            case TrinoSQLParser.RESPECT:
            case TrinoSQLParser.RESTRICT:
            case TrinoSQLParser.RETURN:
            case TrinoSQLParser.RETURNING:
            case TrinoSQLParser.RETURNS:
            case TrinoSQLParser.REVOKE:
            case TrinoSQLParser.ROLE:
            case TrinoSQLParser.ROLES:
            case TrinoSQLParser.ROLLBACK:
            case TrinoSQLParser.ROW:
            case TrinoSQLParser.ROWS:
            case TrinoSQLParser.RUNNING:
            case TrinoSQLParser.SCALAR:
            case TrinoSQLParser.SCHEMA:
            case TrinoSQLParser.SCHEMAS:
            case TrinoSQLParser.SECOND:
            case TrinoSQLParser.SECURITY:
            case TrinoSQLParser.SEEK:
            case TrinoSQLParser.SERIALIZABLE:
            case TrinoSQLParser.SESSION:
            case TrinoSQLParser.SET:
            case TrinoSQLParser.SETS:
            case TrinoSQLParser.SHOW:
            case TrinoSQLParser.SOME:
            case TrinoSQLParser.START:
            case TrinoSQLParser.STATS:
            case TrinoSQLParser.SUBSET:
            case TrinoSQLParser.SUBSTRING:
            case TrinoSQLParser.SYSTEM:
            case TrinoSQLParser.TABLES:
            case TrinoSQLParser.TABLESAMPLE:
            case TrinoSQLParser.TEXT:
            case TrinoSQLParser.TEXT_STRING:
            case TrinoSQLParser.TIES:
            case TrinoSQLParser.TIME:
            case TrinoSQLParser.TIMESTAMP:
            case TrinoSQLParser.TO:
            case TrinoSQLParser.TRAILING:
            case TrinoSQLParser.TRANSACTION:
            case TrinoSQLParser.TRUNCATE:
            case TrinoSQLParser.TRY_CAST:
            case TrinoSQLParser.TYPE:
            case TrinoSQLParser.UNBOUNDED:
            case TrinoSQLParser.UNCOMMITTED:
            case TrinoSQLParser.UNCONDITIONAL:
            case TrinoSQLParser.UNIQUE:
            case TrinoSQLParser.UNKNOWN:
            case TrinoSQLParser.UNMATCHED:
            case TrinoSQLParser.UNTIL:
            case TrinoSQLParser.UPDATE:
            case TrinoSQLParser.USE:
            case TrinoSQLParser.USER:
            case TrinoSQLParser.UTF16:
            case TrinoSQLParser.UTF32:
            case TrinoSQLParser.UTF8:
            case TrinoSQLParser.VALIDATE:
            case TrinoSQLParser.VALUE:
            case TrinoSQLParser.VERBOSE:
            case TrinoSQLParser.VERSION:
            case TrinoSQLParser.VIEW:
            case TrinoSQLParser.WHILE:
            case TrinoSQLParser.WINDOW:
            case TrinoSQLParser.WITHIN:
            case TrinoSQLParser.WITHOUT:
            case TrinoSQLParser.WORK:
            case TrinoSQLParser.WRAPPER:
            case TrinoSQLParser.WRITE:
            case TrinoSQLParser.YEAR:
            case TrinoSQLParser.ZONE:
            case TrinoSQLParser.IDENTIFIER:
            case TrinoSQLParser.DIGIT_IDENTIFIER:
            case TrinoSQLParser.QUOTED_IDENTIFIER:
            case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
                localContext = new IdentifierUserContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3486;
                this.identifier();
                }
                break;
            case TrinoSQLParser.STRING:
            case TrinoSQLParser.UNICODE_STRING:
                localContext = new StringUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3487;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 262, TrinoSQLParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3490;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 21:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 33:
            return this.relation_sempred(localContext as RelationContext, predIndex);
        case 64:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 66:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 67:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 87:
            return this.type_sempred(localContext as TypeContext, predIndex);
        case 97:
            return this.rowPattern_sempred(localContext as RowPatternContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private relation_sempred(localContext: RelationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 2);
        case 7:
            return this.precpred(this.context, 1);
        case 8:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 24);
        case 10:
            return this.precpred(this.context, 22);
        }
        return true;
    }
    private type_sempred(localContext: TypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private rowPattern_sempred(localContext: RowPatternContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,340,3493,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,3,6,296,8,6,1,6,1,6,1,6,1,6,1,6,3,6,303,8,6,1,6,1,6,3,6,307,8,
        6,1,6,1,6,3,6,311,8,6,1,6,1,6,1,6,1,6,3,6,317,8,6,1,6,1,6,3,6,321,
        8,6,1,6,1,6,1,6,1,6,1,6,3,6,328,8,6,1,6,1,6,1,6,3,6,333,8,6,1,6,
        1,6,3,6,337,8,6,1,6,1,6,1,6,1,6,3,6,343,8,6,1,6,1,6,3,6,347,8,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,366,8,6,1,6,1,6,1,6,1,6,3,6,372,8,6,1,6,1,6,3,6,376,8,6,
        1,6,1,6,3,6,380,8,6,1,6,1,6,3,6,384,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,392,8,6,1,6,1,6,3,6,396,8,6,1,6,3,6,399,8,6,1,6,1,6,1,6,3,6,
        404,8,6,1,6,1,6,1,6,1,6,3,6,410,8,6,1,6,1,6,1,6,1,6,1,6,5,6,417,
        8,6,10,6,12,6,420,9,6,1,6,1,6,1,6,3,6,425,8,6,1,6,1,6,3,6,429,8,
        6,1,6,1,6,1,6,1,6,3,6,435,8,6,1,6,1,6,1,6,1,6,1,6,3,6,442,8,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,451,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,3,6,463,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,472,8,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,481,8,6,1,6,1,6,1,6,1,6,3,6,487,
        8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,498,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,3,6,506,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,514,8,6,1,6,
        1,6,1,6,1,6,1,6,3,6,521,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        531,8,6,1,6,1,6,1,6,1,6,1,6,3,6,538,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,546,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        3,6,561,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,5,6,594,8,6,10,6,12,6,597,9,6,3,6,599,8,6,1,6,3,6,602,8,
        6,1,6,1,6,3,6,606,8,6,1,6,1,6,1,6,1,6,3,6,612,8,6,1,6,1,6,1,6,3,
        6,617,8,6,1,6,1,6,1,6,1,6,1,6,3,6,624,8,6,1,6,1,6,1,6,1,6,3,6,630,
        8,6,1,6,1,6,3,6,634,8,6,1,6,1,6,3,6,638,8,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,646,8,6,1,6,1,6,1,6,1,6,3,6,652,8,6,1,6,1,6,3,6,656,8,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,670,8,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,678,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,697,8,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,5,6,720,8,6,10,6,12,6,723,9,6,3,6,725,8,6,1,6,1,6,1,6,1,6,1,
        6,3,6,732,8,6,1,6,1,6,1,6,1,6,1,6,3,6,739,8,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,3,6,748,8,6,1,6,1,6,3,6,752,8,6,1,6,1,6,1,6,1,6,1,6,3,
        6,759,8,6,1,6,1,6,1,6,1,6,5,6,765,8,6,10,6,12,6,768,9,6,1,6,1,6,
        1,6,1,6,5,6,774,8,6,10,6,12,6,777,9,6,1,6,1,6,1,6,3,6,782,8,6,1,
        6,1,6,1,6,3,6,787,8,6,1,6,1,6,3,6,791,8,6,1,6,1,6,1,6,1,6,5,6,797,
        8,6,10,6,12,6,800,9,6,1,6,1,6,3,6,804,8,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,813,8,6,1,6,1,6,1,6,1,6,3,6,819,8,6,1,6,1,6,1,6,5,6,824,
        8,6,10,6,12,6,827,9,6,1,6,1,6,1,6,1,6,5,6,833,8,6,10,6,12,6,836,
        9,6,1,6,1,6,1,6,3,6,841,8,6,1,6,1,6,3,6,845,8,6,1,6,1,6,1,6,1,6,
        3,6,851,8,6,1,6,1,6,1,6,5,6,856,8,6,10,6,12,6,859,9,6,1,6,1,6,3,
        6,863,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,874,8,6,10,6,12,
        6,877,9,6,1,6,1,6,3,6,881,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,893,8,6,1,6,1,6,3,6,897,8,6,1,6,1,6,1,6,1,6,3,6,903,8,
        6,1,6,1,6,1,6,1,6,1,6,5,6,910,8,6,10,6,12,6,913,9,6,1,6,1,6,3,6,
        917,8,6,1,6,1,6,1,6,1,6,3,6,923,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,
        947,8,6,1,6,1,6,1,6,1,6,3,6,953,8,6,3,6,955,8,6,1,6,1,6,1,6,1,6,
        3,6,961,8,6,1,6,1,6,1,6,1,6,3,6,967,8,6,3,6,969,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,3,6,977,8,6,3,6,979,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,989,8,6,3,6,991,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,3,6,1006,8,6,1,6,1,6,1,6,3,6,1011,8,6,1,6,1,6,1,
        6,1,6,1,6,3,6,1018,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1028,
        8,6,1,6,1,6,1,6,1,6,3,6,1034,8,6,3,6,1036,8,6,1,6,1,6,1,6,1,6,1,
        6,1,6,3,6,1044,8,6,3,6,1046,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,1069,8,6,
        10,6,12,6,1072,9,6,3,6,1074,8,6,1,6,1,6,3,6,1078,8,6,1,6,1,6,3,6,
        1082,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        5,6,1098,8,6,10,6,12,6,1101,9,6,3,6,1103,8,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,5,6,1112,8,6,10,6,12,6,1115,9,6,3,6,1117,8,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1133,8,6,1,6,1,6,
        1,6,1,6,1,6,1,6,5,6,1141,8,6,10,6,12,6,1144,9,6,1,6,1,6,3,6,1148,
        8,6,1,6,1,6,1,6,1,6,3,6,1154,8,6,1,6,3,6,1157,8,6,1,6,1,6,1,6,1,
        6,1,6,4,6,1164,8,6,11,6,12,6,1165,3,6,1168,8,6,1,7,3,7,1171,8,7,
        1,7,1,7,1,8,1,8,1,8,1,8,5,8,1179,8,8,10,8,12,8,1182,9,8,1,9,3,9,
        1185,8,9,1,9,1,9,1,10,1,10,3,10,1191,8,10,1,10,1,10,1,10,5,10,1196,
        8,10,10,10,12,10,1199,9,10,1,11,1,11,3,11,1203,8,11,1,12,1,12,1,
        12,1,12,3,12,1209,8,12,1,12,1,12,3,12,1213,8,12,1,12,1,12,3,12,1217,
        8,12,1,13,1,13,1,13,1,13,3,13,1223,8,13,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,5,15,1232,8,15,10,15,12,15,1235,9,15,1,16,1,16,1,16,1,
        16,1,17,1,17,3,17,1243,8,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,1251,
        8,18,10,18,12,18,1254,9,18,3,18,1256,8,18,1,18,1,18,1,18,3,18,1261,
        8,18,3,18,1263,8,18,1,18,1,18,1,18,1,18,1,18,3,18,1270,8,18,1,18,
        1,18,1,18,1,18,3,18,1276,8,18,3,18,1278,8,18,1,19,1,19,3,19,1282,
        8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1292,8,21,1,21,
        1,21,1,21,1,21,3,21,1298,8,21,1,21,5,21,1301,8,21,10,21,12,21,1304,
        9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,1313,8,22,10,22,12,
        22,1316,9,22,1,22,1,22,1,22,1,22,3,22,1322,8,22,1,23,1,23,3,23,1326,
        8,23,1,23,1,23,3,23,1330,8,23,1,24,1,24,3,24,1334,8,24,1,24,1,24,
        1,24,5,24,1339,8,24,10,24,12,24,1342,9,24,1,24,1,24,1,24,1,24,5,
        24,1348,8,24,10,24,12,24,1351,9,24,3,24,1353,8,24,1,24,1,24,3,24,
        1357,8,24,1,24,1,24,1,24,3,24,1362,8,24,1,24,1,24,3,24,1366,8,24,
        1,24,1,24,1,24,1,24,5,24,1372,8,24,10,24,12,24,1375,9,24,3,24,1377,
        8,24,1,25,3,25,1380,8,25,1,25,1,25,1,25,5,25,1385,8,25,10,25,12,
        25,1388,9,25,1,26,1,26,1,26,1,26,1,26,1,26,5,26,1396,8,26,10,26,
        12,26,1399,9,26,3,26,1401,8,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,
        1409,8,26,10,26,12,26,1412,9,26,3,26,1414,8,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,5,26,1423,8,26,10,26,12,26,1426,9,26,1,26,1,26,
        3,26,1430,8,26,1,27,1,27,1,27,1,27,5,27,1436,8,27,10,27,12,27,1439,
        9,27,3,27,1441,8,27,1,27,1,27,3,27,1445,8,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,29,3,29,1454,8,29,1,29,1,29,1,29,1,29,1,29,5,29,1461,
        8,29,10,29,12,29,1464,9,29,3,29,1466,8,29,1,29,1,29,1,29,1,29,1,
        29,5,29,1473,8,29,10,29,12,29,1476,9,29,3,29,1478,8,29,1,29,3,29,
        1481,8,29,1,30,1,30,3,30,1485,8,30,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,32,1,32,3,32,1496,8,32,1,32,3,32,1499,8,32,1,32,1,32,1,32,
        1,32,1,32,3,32,1506,8,32,1,32,3,32,1509,8,32,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,1528,8,33,5,33,1530,8,33,10,33,12,33,1533,9,33,1,34,3,34,1536,
        8,34,1,34,1,34,3,34,1540,8,34,1,34,1,34,3,34,1544,8,34,1,34,1,34,
        3,34,1548,8,34,3,34,1550,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        5,35,1559,8,35,10,35,12,35,1562,9,35,1,35,1,35,3,35,1566,8,35,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,1575,8,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,39,3,39,1584,8,39,1,39,3,39,1587,8,39,1,40,1,40,1,
        40,1,40,3,40,1593,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,
        41,1603,8,41,10,41,12,41,1606,9,41,3,41,1608,8,41,1,41,1,41,1,41,
        1,41,1,41,5,41,1615,8,41,10,41,12,41,1618,9,41,3,41,1620,8,41,1,
        41,1,41,1,41,1,41,5,41,1626,8,41,10,41,12,41,1629,9,41,3,41,1631,
        8,41,1,41,3,41,1634,8,41,1,41,1,41,1,41,3,41,1639,8,41,1,41,3,41,
        1642,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,1652,8,41,
        10,41,12,41,1655,9,41,3,41,1657,8,41,1,41,1,41,1,41,1,41,5,41,1663,
        8,41,10,41,12,41,1666,9,41,1,41,1,41,3,41,1670,8,41,1,41,1,41,3,
        41,1674,8,41,3,41,1676,8,41,3,41,1678,8,41,1,42,1,42,1,42,1,42,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1693,8,43,3,43,1695,
        8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1706,8,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1727,8,45,1,46,1,46,1,46,1,46,
        1,46,1,46,5,46,1735,8,46,10,46,12,46,1738,9,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,48,1,48,3,48,1748,8,48,1,48,1,48,3,48,1752,8,48,3,
        48,1754,8,48,1,49,1,49,1,49,1,49,5,49,1760,8,49,10,49,12,49,1763,
        9,49,1,49,1,49,1,50,1,50,3,50,1769,8,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,5,50,1780,8,50,10,50,12,50,1783,9,50,1,50,1,
        50,1,50,3,50,1788,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,5,50,1812,8,50,10,50,12,50,1815,9,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1829,8,50,1,50,1,50,1,50,
        3,50,1834,8,50,1,50,1,50,3,50,1838,8,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1848,8,51,1,51,1,51,1,51,1,51,3,51,1854,8,51,
        1,51,1,51,1,51,1,51,3,51,1860,8,51,1,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1868,8,51,1,51,1,51,1,51,3,51,1873,8,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1880,8,51,3,51,1882,8,51,1,51,1,51,1,51,1,51,3,51,1888,
        8,51,1,51,1,51,1,51,1,51,3,51,1894,8,51,1,51,1,51,3,51,1898,8,51,
        1,51,1,51,1,51,3,51,1903,8,51,1,51,1,51,1,51,1,51,1,51,5,51,1910,
        8,51,10,51,12,51,1913,9,51,1,51,1,51,3,51,1917,8,51,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1929,8,52,10,52,12,52,
        1932,9,52,1,52,1,52,1,52,1,52,1,52,5,52,1939,8,52,10,52,12,52,1942,
        9,52,3,52,1944,8,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,1953,
        8,54,1,55,1,55,1,55,3,55,1958,8,55,1,55,1,55,1,55,3,55,1963,8,55,
        3,55,1965,8,55,1,56,1,56,1,56,1,56,1,56,5,56,1972,8,56,10,56,12,
        56,1975,9,56,3,56,1977,8,56,1,56,1,56,1,56,1,56,5,56,1983,8,56,10,
        56,12,56,1986,9,56,3,56,1988,8,56,1,56,1,56,1,57,1,57,1,57,3,57,
        1995,8,57,1,57,1,57,1,57,3,57,2000,8,57,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,5,58,2009,8,58,10,58,12,58,2012,9,58,3,58,2014,8,58,1,
        58,1,58,3,58,2018,8,58,3,58,2020,8,58,1,58,1,58,1,58,1,58,1,58,1,
        58,3,58,2028,8,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,2036,8,58,10,
        58,12,58,2039,9,58,1,58,1,58,1,58,3,58,2044,8,58,3,58,2046,8,58,
        1,59,1,59,1,59,1,59,1,59,3,59,2053,8,59,1,59,1,59,3,59,2057,8,59,
        3,59,2059,8,59,1,59,1,59,1,59,1,59,1,59,3,59,2066,8,59,1,59,1,59,
        3,59,2070,8,59,3,59,2072,8,59,3,59,2074,8,59,1,60,1,60,1,60,1,60,
        1,60,5,60,2081,8,60,10,60,12,60,2084,9,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,3,60,2094,8,60,1,61,1,61,3,61,2098,8,61,1,62,1,
        62,1,62,1,62,1,62,1,62,5,62,2106,8,62,10,62,12,62,2109,9,62,1,62,
        1,62,1,63,1,63,1,64,1,64,1,64,3,64,2118,8,64,1,64,1,64,3,64,2122,
        8,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2130,8,64,10,64,12,64,2133,
        9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2145,
        8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2153,8,65,1,65,1,65,1,65,
        1,65,1,65,5,65,2160,8,65,10,65,12,65,2163,9,65,1,65,1,65,1,65,3,
        65,2168,8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2176,8,65,1,65,1,
        65,1,65,1,65,3,65,2182,8,65,1,65,1,65,3,65,2186,8,65,1,65,1,65,1,
        65,3,65,2191,8,65,1,65,1,65,1,65,3,65,2196,8,65,1,66,1,66,1,66,1,
        66,3,66,2202,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,5,66,2216,8,66,10,66,12,66,2219,9,66,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,4,67,2246,8,67,11,67,
        12,67,2247,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2257,8,67,10,
        67,12,67,2260,9,67,1,67,1,67,1,67,1,67,1,67,3,67,2267,8,67,1,67,
        1,67,1,67,3,67,2272,8,67,1,67,1,67,1,67,3,67,2277,8,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2288,8,67,10,67,12,67,2291,
        9,67,1,67,1,67,1,67,3,67,2296,8,67,1,67,3,67,2299,8,67,1,67,1,67,
        1,67,1,67,1,67,3,67,2306,8,67,1,67,1,67,1,67,3,67,2311,8,67,1,67,
        3,67,2314,8,67,1,67,3,67,2317,8,67,1,67,1,67,1,67,3,67,2322,8,67,
        1,67,1,67,1,67,5,67,2327,8,67,10,67,12,67,2330,9,67,3,67,2332,8,
        67,1,67,1,67,1,67,1,67,1,67,5,67,2339,8,67,10,67,12,67,2342,9,67,
        3,67,2344,8,67,1,67,1,67,3,67,2348,8,67,1,67,3,67,2351,8,67,1,67,
        3,67,2354,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,5,67,2367,8,67,10,67,12,67,2370,9,67,3,67,2372,8,67,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,4,67,2389,8,67,11,67,12,67,2390,1,67,1,67,3,67,2395,8,67,1,67,
        1,67,1,67,1,67,4,67,2401,8,67,11,67,12,67,2402,1,67,1,67,3,67,2407,
        8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2430,8,67,10,67,
        12,67,2433,9,67,3,67,2435,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        3,67,2444,8,67,1,67,1,67,1,67,1,67,3,67,2450,8,67,1,67,1,67,1,67,
        1,67,3,67,2456,8,67,1,67,1,67,1,67,1,67,3,67,2462,8,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,3,67,2471,8,67,1,67,3,67,2474,8,67,1,67,
        3,67,2477,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2496,8,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,3,67,2505,8,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,
        2525,8,67,10,67,12,67,2528,9,67,3,67,2530,8,67,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,3,67,2540,8,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,3,67,2549,8,67,1,67,1,67,1,67,1,67,3,67,2555,8,67,1,67,1,
        67,1,67,1,67,3,67,2561,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,3,67,2572,8,67,3,67,2574,8,67,1,67,1,67,1,67,3,67,2579,8,
        67,1,67,1,67,1,67,1,67,1,67,3,67,2586,8,67,3,67,2588,8,67,1,67,1,
        67,1,67,1,67,3,67,2594,8,67,1,67,1,67,1,67,1,67,3,67,2600,8,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2609,8,67,10,67,12,67,2612,
        9,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,2620,8,67,1,67,1,67,1,67,
        3,67,2625,8,67,1,67,1,67,1,67,3,67,2630,8,67,3,67,2632,8,67,3,67,
        2634,8,67,1,67,1,67,1,67,1,67,3,67,2640,8,67,3,67,2642,8,67,1,67,
        1,67,1,67,1,67,1,67,1,67,5,67,2650,8,67,10,67,12,67,2653,9,67,1,
        67,1,67,1,67,1,67,1,67,1,67,3,67,2661,8,67,3,67,2663,8,67,1,67,1,
        67,1,67,1,67,3,67,2669,8,67,3,67,2671,8,67,1,67,3,67,2674,8,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,5,67,2684,8,67,10,67,12,67,
        2687,9,67,1,68,1,68,1,68,1,68,1,68,3,68,2694,8,68,1,68,1,68,1,68,
        1,68,5,68,2700,8,68,10,68,12,68,2703,9,68,3,68,2705,8,68,1,69,1,
        69,1,69,3,69,2710,8,69,1,70,1,70,1,70,3,70,2715,8,70,1,71,1,71,1,
        71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,3,73,2727,8,73,1,74,1,74,3,
        74,2731,8,74,1,74,1,74,3,74,2735,8,74,1,74,3,74,2738,8,74,3,74,2740,
        8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,2748,8,75,1,76,3,76,2751,
        8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2761,8,76,1,77,
        1,77,1,78,1,78,1,78,1,78,3,78,2769,8,78,1,79,1,79,1,79,1,79,3,79,
        2775,8,79,3,79,2777,8,79,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2785,
        8,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,3,84,2795,8,84,1,84,
        1,84,1,84,1,84,3,84,2801,8,84,1,85,1,85,1,86,1,86,1,87,1,87,1,87,
        1,87,1,87,1,87,5,87,2813,8,87,10,87,12,87,2816,9,87,1,87,1,87,1,
        87,1,87,1,87,1,87,3,87,2824,8,87,1,87,1,87,1,87,1,87,1,87,3,87,2831,
        8,87,1,87,1,87,1,87,3,87,2836,8,87,1,87,1,87,1,87,1,87,1,87,3,87,
        2843,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2853,8,87,
        1,87,1,87,1,87,3,87,2858,8,87,1,87,1,87,1,87,1,87,1,87,3,87,2865,
        8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,2889,8,87,
        10,87,12,87,2892,9,87,1,87,1,87,3,87,2896,8,87,3,87,2898,8,87,1,
        87,1,87,1,87,1,87,1,87,3,87,2905,8,87,5,87,2907,8,87,10,87,12,87,
        2910,9,87,1,88,1,88,1,88,1,88,3,88,2916,8,88,1,89,1,89,3,89,2920,
        8,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,
        1,92,1,92,1,92,3,92,2937,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,5,92,2950,8,92,10,92,12,92,2953,9,92,1,92,1,
        92,1,92,1,92,3,92,2959,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,
        92,2968,8,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,2976,8,92,10,92,
        12,92,2979,9,92,1,92,1,92,3,92,2983,8,92,1,92,1,92,1,92,1,92,1,92,
        5,92,2990,8,92,10,92,12,92,2993,9,92,1,92,1,92,3,92,2997,8,92,1,
        93,1,93,1,93,1,93,1,93,1,93,3,93,3005,8,93,1,94,1,94,1,94,1,94,5,
        94,3011,8,94,10,94,12,94,3014,9,94,3,94,3016,8,94,1,94,1,94,1,94,
        1,94,3,94,3022,8,94,1,94,3,94,3025,8,94,1,94,1,94,1,94,1,94,1,94,
        3,94,3032,8,94,1,94,1,94,1,94,1,94,5,94,3038,8,94,10,94,12,94,3041,
        9,94,3,94,3043,8,94,1,94,1,94,1,94,1,94,5,94,3049,8,94,10,94,12,
        94,3052,9,94,3,94,3054,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,3080,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,3,96,3091,8,96,1,97,1,97,1,97,3,97,3096,8,97,1,97,1,
        97,1,97,1,97,1,97,5,97,3103,8,97,10,97,12,97,3106,9,97,1,98,1,98,
        1,98,1,98,1,98,1,98,1,98,1,98,5,98,3116,8,98,10,98,12,98,3119,9,
        98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,
        98,3133,8,98,1,99,1,99,3,99,3137,8,99,1,99,1,99,3,99,3141,8,99,1,
        99,1,99,3,99,3145,8,99,1,99,1,99,1,99,1,99,3,99,3151,8,99,1,99,1,
        99,3,99,3155,8,99,1,99,1,99,3,99,3159,8,99,1,99,1,99,3,99,3163,8,
        99,3,99,3165,8,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,
        3,101,3175,8,101,1,102,1,102,1,102,1,102,1,102,3,102,3182,8,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3191,8,103,1,104,
        1,104,1,104,1,104,1,104,3,104,3198,8,104,1,105,1,105,1,105,1,105,
        1,105,3,105,3205,8,105,1,106,1,106,1,106,5,106,3210,8,106,10,106,
        12,106,3213,9,106,1,107,1,107,1,107,1,107,5,107,3219,8,107,10,107,
        12,107,3222,9,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,5,108,
        3231,8,108,10,108,12,108,3234,9,108,3,108,3236,8,108,1,108,1,108,
        1,109,3,109,3241,8,109,1,109,1,109,1,110,1,110,1,110,1,111,1,111,
        1,111,3,111,3251,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,3267,8,111,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,4,112,3279,
        8,112,11,112,12,112,3280,1,112,3,112,3284,8,112,1,112,1,112,1,112,
        1,112,1,112,4,112,3291,8,112,11,112,12,112,3292,1,112,3,112,3296,
        8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,3306,
        8,112,10,112,12,112,3309,9,112,1,112,3,112,3312,8,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,5,112,3325,
        8,112,10,112,12,112,3328,9,112,1,112,3,112,3331,8,112,1,112,1,112,
        1,112,1,112,3,112,3337,8,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,3,112,3347,8,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,3,112,3359,8,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,3,112,3368,8,112,1,113,1,113,1,113,1,113,1,113,
        1,114,1,114,1,114,1,114,1,114,1,115,1,115,1,115,1,116,1,116,1,116,
        1,116,5,116,3387,8,116,10,116,12,116,3390,9,116,1,116,1,116,1,116,
        3,116,3395,8,116,1,117,1,117,1,117,4,117,3400,8,117,11,117,12,117,
        3401,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3410,8,118,1,119,
        1,119,1,119,3,119,3415,8,119,1,120,3,120,3418,8,120,1,120,1,120,
        1,121,1,121,1,121,5,121,3425,8,121,10,121,12,121,3428,9,121,1,122,
        1,122,1,122,1,122,1,122,1,122,1,123,1,123,1,124,1,124,1,124,3,124,
        3441,8,124,1,125,1,125,1,125,1,125,1,125,3,125,3448,8,125,1,126,
        1,126,1,126,5,126,3453,8,126,10,126,12,126,3456,9,126,1,127,1,127,
        1,127,1,127,1,127,1,127,3,127,3464,8,127,1,128,1,128,1,128,1,128,
        1,128,3,128,3471,8,128,1,129,3,129,3474,8,129,1,129,1,129,3,129,
        3478,8,129,1,129,1,129,3,129,3482,8,129,1,129,3,129,3485,8,129,1,
        130,1,130,3,130,3489,8,130,1,131,1,131,1,131,0,7,42,66,128,132,134,
        174,194,132,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,0,35,2,0,39,39,229,229,2,0,72,72,
        131,131,2,0,105,105,122,122,2,0,92,92,123,123,1,0,239,240,2,0,101,
        101,174,174,2,0,324,324,329,329,2,0,91,91,281,281,2,0,29,29,75,75,
        2,0,101,101,148,148,2,0,22,22,79,79,2,0,33,33,259,259,3,0,35,35,
        150,150,270,270,2,0,124,124,247,247,2,0,85,85,89,89,2,0,144,144,
        189,189,2,0,125,125,197,197,2,0,54,54,281,281,1,0,318,319,1,0,320,
        322,1,0,291,293,4,0,89,89,97,97,273,273,283,283,2,0,49,49,280,280,
        2,0,100,100,241,241,1,0,312,317,3,0,22,22,26,26,254,254,2,0,97,97,
        273,273,5,0,67,67,118,118,170,171,245,245,310,310,1,0,175,178,2,
        0,102,102,212,212,3,0,113,113,137,137,263,263,4,0,80,80,132,132,
        160,160,294,294,2,0,192,192,309,309,2,0,268,268,298,298,54,0,18,
        22,24,24,26,27,29,33,35,35,37,39,42,49,51,52,56,56,65,67,69,72,74,
        75,77,78,80,82,85,87,89,89,92,92,95,95,98,102,104,104,107,113,116,
        116,118,121,123,124,126,126,129,129,131,132,134,135,137,137,144,
        151,153,153,155,155,157,157,160,171,173,180,184,189,191,193,196,
        196,198,213,215,220,222,233,235,237,239,247,249,259,261,264,266,
        271,274,276,278,280,282,284,286,289,291,295,297,299,302,303,305,
        311,4038,0,264,1,0,0,0,2,267,1,0,0,0,4,270,1,0,0,0,6,273,1,0,0,0,
        8,276,1,0,0,0,10,279,1,0,0,0,12,1167,1,0,0,0,14,1170,1,0,0,0,16,
        1174,1,0,0,0,18,1184,1,0,0,0,20,1188,1,0,0,0,22,1202,1,0,0,0,24,
        1204,1,0,0,0,26,1218,1,0,0,0,28,1224,1,0,0,0,30,1228,1,0,0,0,32,
        1236,1,0,0,0,34,1242,1,0,0,0,36,1244,1,0,0,0,38,1281,1,0,0,0,40,
        1283,1,0,0,0,42,1285,1,0,0,0,44,1321,1,0,0,0,46,1323,1,0,0,0,48,
        1331,1,0,0,0,50,1379,1,0,0,0,52,1429,1,0,0,0,54,1444,1,0,0,0,56,
        1446,1,0,0,0,58,1453,1,0,0,0,60,1482,1,0,0,0,62,1491,1,0,0,0,64,
        1508,1,0,0,0,66,1510,1,0,0,0,68,1549,1,0,0,0,70,1565,1,0,0,0,72,
        1567,1,0,0,0,74,1576,1,0,0,0,76,1578,1,0,0,0,78,1586,1,0,0,0,80,
        1592,1,0,0,0,82,1594,1,0,0,0,84,1679,1,0,0,0,86,1694,1,0,0,0,88,
        1705,1,0,0,0,90,1726,1,0,0,0,92,1728,1,0,0,0,94,1741,1,0,0,0,96,
        1745,1,0,0,0,98,1755,1,0,0,0,100,1837,1,0,0,0,102,1916,1,0,0,0,104,
        1943,1,0,0,0,106,1945,1,0,0,0,108,1952,1,0,0,0,110,1964,1,0,0,0,
        112,1966,1,0,0,0,114,1994,1,0,0,0,116,2001,1,0,0,0,118,2073,1,0,
        0,0,120,2093,1,0,0,0,122,2095,1,0,0,0,124,2099,1,0,0,0,126,2112,
        1,0,0,0,128,2121,1,0,0,0,130,2195,1,0,0,0,132,2201,1,0,0,0,134,2673,
        1,0,0,0,136,2688,1,0,0,0,138,2706,1,0,0,0,140,2711,1,0,0,0,142,2716,
        1,0,0,0,144,2720,1,0,0,0,146,2726,1,0,0,0,148,2739,1,0,0,0,150,2747,
        1,0,0,0,152,2760,1,0,0,0,154,2762,1,0,0,0,156,2768,1,0,0,0,158,2776,
        1,0,0,0,160,2784,1,0,0,0,162,2786,1,0,0,0,164,2788,1,0,0,0,166,2790,
        1,0,0,0,168,2792,1,0,0,0,170,2802,1,0,0,0,172,2804,1,0,0,0,174,2897,
        1,0,0,0,176,2915,1,0,0,0,178,2919,1,0,0,0,180,2921,1,0,0,0,182,2926,
        1,0,0,0,184,2996,1,0,0,0,186,2998,1,0,0,0,188,3015,1,0,0,0,190,3079,
        1,0,0,0,192,3090,1,0,0,0,194,3092,1,0,0,0,196,3132,1,0,0,0,198,3164,
        1,0,0,0,200,3166,1,0,0,0,202,3174,1,0,0,0,204,3181,1,0,0,0,206,3190,
        1,0,0,0,208,3197,1,0,0,0,210,3204,1,0,0,0,212,3206,1,0,0,0,214,3214,
        1,0,0,0,216,3225,1,0,0,0,218,3240,1,0,0,0,220,3244,1,0,0,0,222,3266,
        1,0,0,0,224,3367,1,0,0,0,226,3369,1,0,0,0,228,3374,1,0,0,0,230,3379,
        1,0,0,0,232,3382,1,0,0,0,234,3399,1,0,0,0,236,3409,1,0,0,0,238,3414,
        1,0,0,0,240,3417,1,0,0,0,242,3421,1,0,0,0,244,3429,1,0,0,0,246,3435,
        1,0,0,0,248,3440,1,0,0,0,250,3447,1,0,0,0,252,3449,1,0,0,0,254,3463,
        1,0,0,0,256,3470,1,0,0,0,258,3484,1,0,0,0,260,3488,1,0,0,0,262,3490,
        1,0,0,0,264,265,3,12,6,0,265,266,5,0,0,1,266,1,1,0,0,0,267,268,3,
        126,63,0,268,269,5,0,0,1,269,3,1,0,0,0,270,271,3,212,106,0,271,272,
        5,0,0,1,272,5,1,0,0,0,273,274,3,174,87,0,274,275,5,0,0,1,275,7,1,
        0,0,0,276,277,3,194,97,0,277,278,5,0,0,1,278,9,1,0,0,0,279,280,3,
        214,107,0,280,281,5,0,0,1,281,11,1,0,0,0,282,1168,3,14,7,0,283,284,
        5,288,0,0,284,1168,3,256,128,0,285,286,5,288,0,0,286,287,3,256,128,
        0,287,288,5,1,0,0,288,289,3,256,128,0,289,1168,1,0,0,0,290,291,5,
        53,0,0,291,295,5,42,0,0,292,293,5,119,0,0,293,294,5,182,0,0,294,
        296,5,94,0,0,295,292,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,
        298,3,256,128,0,298,299,5,290,0,0,299,302,3,256,128,0,300,301,5,
        46,0,0,301,303,3,158,79,0,302,300,1,0,0,0,302,303,1,0,0,0,303,306,
        1,0,0,0,304,305,5,31,0,0,305,307,3,250,125,0,306,304,1,0,0,0,306,
        307,1,0,0,0,307,310,1,0,0,0,308,309,5,304,0,0,309,311,3,28,14,0,
        310,308,1,0,0,0,310,311,1,0,0,0,311,1168,1,0,0,0,312,313,5,83,0,
        0,313,316,5,42,0,0,314,315,5,119,0,0,315,317,5,94,0,0,316,314,1,
        0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,320,3,256,128,0,319,321,
        7,0,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,1168,1,0,0,0,322,323,
        5,53,0,0,323,327,5,243,0,0,324,325,5,119,0,0,325,326,5,182,0,0,326,
        328,5,94,0,0,327,324,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,
        332,3,242,121,0,330,331,5,31,0,0,331,333,3,250,125,0,332,330,1,0,
        0,0,332,333,1,0,0,0,333,336,1,0,0,0,334,335,5,304,0,0,335,337,3,
        28,14,0,336,334,1,0,0,0,336,337,1,0,0,0,337,1168,1,0,0,0,338,339,
        5,83,0,0,339,342,5,243,0,0,340,341,5,119,0,0,341,343,5,94,0,0,342,
        340,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,346,3,242,121,0,
        345,347,7,0,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,1168,1,0,0,0,
        348,349,5,23,0,0,349,350,5,243,0,0,350,351,3,242,121,0,351,352,5,
        223,0,0,352,353,5,269,0,0,353,354,3,256,128,0,354,1168,1,0,0,0,355,
        356,5,23,0,0,356,357,5,243,0,0,357,358,3,242,121,0,358,359,5,251,
        0,0,359,360,5,31,0,0,360,361,3,250,125,0,361,1168,1,0,0,0,362,365,
        5,53,0,0,363,364,5,194,0,0,364,366,5,226,0,0,365,363,1,0,0,0,365,
        366,1,0,0,0,366,367,1,0,0,0,367,371,5,260,0,0,368,369,5,119,0,0,
        369,370,5,182,0,0,370,372,5,94,0,0,371,368,1,0,0,0,371,372,1,0,0,
        0,372,373,1,0,0,0,373,375,3,242,121,0,374,376,3,98,49,0,375,374,
        1,0,0,0,375,376,1,0,0,0,376,379,1,0,0,0,377,378,5,46,0,0,378,380,
        3,158,79,0,379,377,1,0,0,0,379,380,1,0,0,0,380,383,1,0,0,0,381,382,
        5,304,0,0,382,384,3,28,14,0,383,381,1,0,0,0,383,384,1,0,0,0,384,
        385,1,0,0,0,385,391,5,28,0,0,386,392,3,14,7,0,387,388,5,2,0,0,388,
        389,3,14,7,0,389,390,5,3,0,0,390,392,1,0,0,0,391,386,1,0,0,0,391,
        387,1,0,0,0,392,398,1,0,0,0,393,395,5,304,0,0,394,396,5,179,0,0,
        395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,5,65,0,0,
        398,393,1,0,0,0,398,399,1,0,0,0,399,1168,1,0,0,0,400,403,5,53,0,
        0,401,402,5,194,0,0,402,404,5,226,0,0,403,401,1,0,0,0,403,404,1,
        0,0,0,404,405,1,0,0,0,405,409,5,260,0,0,406,407,5,119,0,0,407,408,
        5,182,0,0,408,410,5,94,0,0,409,406,1,0,0,0,409,410,1,0,0,0,410,411,
        1,0,0,0,411,412,3,242,121,0,412,413,5,2,0,0,413,418,3,22,11,0,414,
        415,5,4,0,0,415,417,3,22,11,0,416,414,1,0,0,0,417,420,1,0,0,0,418,
        416,1,0,0,0,418,419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,
        424,5,3,0,0,422,423,5,46,0,0,423,425,3,158,79,0,424,422,1,0,0,0,
        424,425,1,0,0,0,425,428,1,0,0,0,426,427,5,304,0,0,427,429,3,28,14,
        0,428,426,1,0,0,0,428,429,1,0,0,0,429,1168,1,0,0,0,430,431,5,83,
        0,0,431,434,5,260,0,0,432,433,5,119,0,0,433,435,5,94,0,0,434,432,
        1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,1168,3,242,121,0,437,
        438,5,127,0,0,438,439,5,130,0,0,439,441,3,242,121,0,440,442,3,98,
        49,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,3,14,
        7,0,444,1168,1,0,0,0,445,446,5,73,0,0,446,447,5,105,0,0,447,450,
        3,242,121,0,448,449,5,301,0,0,449,451,3,128,64,0,450,448,1,0,0,0,
        450,451,1,0,0,0,451,1168,1,0,0,0,452,453,5,274,0,0,453,454,5,260,
        0,0,454,1168,3,242,121,0,455,456,5,46,0,0,456,457,5,190,0,0,457,
        458,5,260,0,0,458,459,3,242,121,0,459,462,5,133,0,0,460,463,3,158,
        79,0,461,463,5,183,0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,1168,
        1,0,0,0,464,465,5,46,0,0,465,466,5,190,0,0,466,467,5,299,0,0,467,
        468,3,242,121,0,468,471,5,133,0,0,469,472,3,158,79,0,470,472,5,183,
        0,0,471,469,1,0,0,0,471,470,1,0,0,0,472,1168,1,0,0,0,473,474,5,46,
        0,0,474,475,5,190,0,0,475,476,5,44,0,0,476,477,3,242,121,0,477,480,
        5,133,0,0,478,481,3,158,79,0,479,481,5,183,0,0,480,478,1,0,0,0,480,
        479,1,0,0,0,481,1168,1,0,0,0,482,483,5,23,0,0,483,486,5,260,0,0,
        484,485,5,119,0,0,485,487,5,94,0,0,486,484,1,0,0,0,486,487,1,0,0,
        0,487,488,1,0,0,0,488,489,3,242,121,0,489,490,5,223,0,0,490,491,
        5,269,0,0,491,492,3,242,121,0,492,1168,1,0,0,0,493,494,5,23,0,0,
        494,497,5,260,0,0,495,496,5,119,0,0,496,498,5,94,0,0,497,495,1,0,
        0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,500,3,242,121,0,500,501,
        5,19,0,0,501,505,5,44,0,0,502,503,5,119,0,0,503,504,5,182,0,0,504,
        506,5,94,0,0,505,502,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,
        508,3,24,12,0,508,1168,1,0,0,0,509,510,5,23,0,0,510,513,5,260,0,
        0,511,512,5,119,0,0,512,514,5,94,0,0,513,511,1,0,0,0,513,514,1,0,
        0,0,514,515,1,0,0,0,515,516,3,242,121,0,516,517,5,223,0,0,517,520,
        5,44,0,0,518,519,5,119,0,0,519,521,5,94,0,0,520,518,1,0,0,0,520,
        521,1,0,0,0,521,522,1,0,0,0,522,523,3,242,121,0,523,524,5,269,0,
        0,524,525,3,256,128,0,525,1168,1,0,0,0,526,527,5,23,0,0,527,530,
        5,260,0,0,528,529,5,119,0,0,529,531,5,94,0,0,530,528,1,0,0,0,530,
        531,1,0,0,0,531,532,1,0,0,0,532,533,3,242,121,0,533,534,5,83,0,0,
        534,537,5,44,0,0,535,536,5,119,0,0,536,538,5,94,0,0,537,535,1,0,
        0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,3,242,121,0,540,1168,
        1,0,0,0,541,542,5,23,0,0,542,545,5,260,0,0,543,544,5,119,0,0,544,
        546,5,94,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,
        548,3,242,121,0,548,549,5,23,0,0,549,550,5,44,0,0,550,551,3,242,
        121,0,551,552,5,251,0,0,552,553,5,65,0,0,553,554,5,276,0,0,554,555,
        3,174,87,0,555,1168,1,0,0,0,556,557,5,23,0,0,557,560,5,260,0,0,558,
        559,5,119,0,0,559,561,5,94,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
        562,1,0,0,0,562,563,3,242,121,0,563,564,5,23,0,0,564,565,5,44,0,
        0,565,566,3,256,128,0,566,567,5,83,0,0,567,568,5,182,0,0,568,569,
        5,183,0,0,569,1168,1,0,0,0,570,571,5,23,0,0,571,572,5,260,0,0,572,
        573,3,242,121,0,573,574,5,251,0,0,574,575,5,31,0,0,575,576,3,250,
        125,0,576,1168,1,0,0,0,577,578,5,23,0,0,578,579,5,260,0,0,579,580,
        3,242,121,0,580,581,5,251,0,0,581,582,5,216,0,0,582,583,3,30,15,
        0,583,1168,1,0,0,0,584,585,5,23,0,0,585,586,5,260,0,0,586,587,3,
        242,121,0,587,588,5,93,0,0,588,601,3,256,128,0,589,598,5,2,0,0,590,
        595,3,208,104,0,591,592,5,4,0,0,592,594,3,208,104,0,593,591,1,0,
        0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,599,1,0,
        0,0,597,595,1,0,0,0,598,590,1,0,0,0,598,599,1,0,0,0,599,600,1,0,
        0,0,600,602,5,3,0,0,601,589,1,0,0,0,601,602,1,0,0,0,602,605,1,0,
        0,0,603,604,5,301,0,0,604,606,3,128,64,0,605,603,1,0,0,0,605,606,
        1,0,0,0,606,1168,1,0,0,0,607,608,5,24,0,0,608,611,3,242,121,0,609,
        610,5,304,0,0,610,612,3,28,14,0,611,609,1,0,0,0,611,612,1,0,0,0,
        612,1168,1,0,0,0,613,616,5,53,0,0,614,615,5,194,0,0,615,617,5,226,
        0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,5,167,
        0,0,619,623,5,299,0,0,620,621,5,119,0,0,621,622,5,182,0,0,622,624,
        5,94,0,0,623,620,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,629,
        3,242,121,0,626,627,5,109,0,0,627,628,5,208,0,0,628,630,3,168,84,
        0,629,626,1,0,0,0,629,630,1,0,0,0,630,633,1,0,0,0,631,632,5,46,0,
        0,632,634,3,158,79,0,633,631,1,0,0,0,633,634,1,0,0,0,634,637,1,0,
        0,0,635,636,5,304,0,0,636,638,3,28,14,0,637,635,1,0,0,0,637,638,
        1,0,0,0,638,639,1,0,0,0,639,640,5,28,0,0,640,641,3,14,7,0,641,1168,
        1,0,0,0,642,645,5,53,0,0,643,644,5,194,0,0,644,646,5,226,0,0,645,
        643,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,648,5,299,0,0,648,
        651,3,242,121,0,649,650,5,46,0,0,650,652,3,158,79,0,651,649,1,0,
        0,0,651,652,1,0,0,0,652,655,1,0,0,0,653,654,5,246,0,0,654,656,7,
        1,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,5,
        28,0,0,658,659,3,14,7,0,659,1168,1,0,0,0,660,661,5,222,0,0,661,662,
        5,167,0,0,662,663,5,299,0,0,663,1168,3,242,121,0,664,665,5,83,0,
        0,665,666,5,167,0,0,666,669,5,299,0,0,667,668,5,119,0,0,668,670,
        5,94,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,1168,
        3,242,121,0,672,673,5,23,0,0,673,674,5,167,0,0,674,677,5,299,0,0,
        675,676,5,119,0,0,676,678,5,94,0,0,677,675,1,0,0,0,677,678,1,0,0,
        0,678,679,1,0,0,0,679,680,3,242,121,0,680,681,5,223,0,0,681,682,
        5,269,0,0,682,683,3,242,121,0,683,1168,1,0,0,0,684,685,5,23,0,0,
        685,686,5,167,0,0,686,687,5,299,0,0,687,688,3,242,121,0,688,689,
        5,251,0,0,689,690,5,216,0,0,690,691,3,30,15,0,691,1168,1,0,0,0,692,
        693,5,83,0,0,693,696,5,299,0,0,694,695,5,119,0,0,695,697,5,94,0,
        0,696,694,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,1168,3,242,
        121,0,699,700,5,23,0,0,700,701,5,299,0,0,701,702,3,242,121,0,702,
        703,5,223,0,0,703,704,5,269,0,0,704,705,3,242,121,0,705,1168,1,0,
        0,0,706,707,5,23,0,0,707,708,5,299,0,0,708,709,3,242,121,0,709,710,
        5,251,0,0,710,711,5,31,0,0,711,712,3,250,125,0,712,1168,1,0,0,0,
        713,714,5,37,0,0,714,715,3,242,121,0,715,724,5,2,0,0,716,721,3,208,
        104,0,717,718,5,4,0,0,718,720,3,208,104,0,719,717,1,0,0,0,720,723,
        1,0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,721,
        1,0,0,0,724,716,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,727,
        5,3,0,0,727,1168,1,0,0,0,728,731,5,53,0,0,729,730,5,194,0,0,730,
        732,5,226,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
        1168,3,214,107,0,734,735,5,83,0,0,735,738,5,107,0,0,736,737,5,119,
        0,0,737,739,5,94,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,740,1,0,
        0,0,740,1168,3,216,108,0,741,742,5,53,0,0,742,743,5,235,0,0,743,
        747,3,256,128,0,744,745,5,304,0,0,745,746,5,20,0,0,746,748,3,248,
        124,0,747,744,1,0,0,0,747,748,1,0,0,0,748,751,1,0,0,0,749,750,5,
        122,0,0,750,752,3,256,128,0,751,749,1,0,0,0,751,752,1,0,0,0,752,
        1168,1,0,0,0,753,754,5,83,0,0,754,755,5,235,0,0,755,758,3,256,128,
        0,756,757,5,122,0,0,757,759,3,256,128,0,758,756,1,0,0,0,758,759,
        1,0,0,0,759,1168,1,0,0,0,760,761,5,110,0,0,761,766,3,254,127,0,762,
        763,5,4,0,0,763,765,3,254,127,0,764,762,1,0,0,0,765,768,1,0,0,0,
        766,764,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,766,1,0,0,0,
        769,770,5,269,0,0,770,775,3,250,125,0,771,772,5,4,0,0,772,774,3,
        250,125,0,773,771,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,
        1,0,0,0,776,781,1,0,0,0,777,775,1,0,0,0,778,779,5,304,0,0,779,780,
        5,20,0,0,780,782,5,193,0,0,781,778,1,0,0,0,781,782,1,0,0,0,782,786,
        1,0,0,0,783,784,5,111,0,0,784,785,5,36,0,0,785,787,3,248,124,0,786,
        783,1,0,0,0,786,787,1,0,0,0,787,790,1,0,0,0,788,789,5,122,0,0,789,
        791,3,256,128,0,790,788,1,0,0,0,790,791,1,0,0,0,791,1168,1,0,0,0,
        792,803,5,110,0,0,793,798,3,254,127,0,794,795,5,4,0,0,795,797,3,
        254,127,0,796,794,1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,
        1,0,0,0,799,804,1,0,0,0,800,798,1,0,0,0,801,802,5,22,0,0,802,804,
        5,215,0,0,803,793,1,0,0,0,803,801,1,0,0,0,804,805,1,0,0,0,805,806,
        5,190,0,0,806,807,3,240,120,0,807,808,5,269,0,0,808,812,3,250,125,
        0,809,810,5,304,0,0,810,811,5,110,0,0,811,813,5,193,0,0,812,809,
        1,0,0,0,812,813,1,0,0,0,813,1168,1,0,0,0,814,818,5,233,0,0,815,816,
        5,20,0,0,816,817,5,193,0,0,817,819,5,103,0,0,818,815,1,0,0,0,818,
        819,1,0,0,0,819,820,1,0,0,0,820,825,3,254,127,0,821,822,5,4,0,0,
        822,824,3,254,127,0,823,821,1,0,0,0,824,827,1,0,0,0,825,823,1,0,
        0,0,825,826,1,0,0,0,826,828,1,0,0,0,827,825,1,0,0,0,828,829,5,105,
        0,0,829,834,3,250,125,0,830,831,5,4,0,0,831,833,3,250,125,0,832,
        830,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,
        840,1,0,0,0,836,834,1,0,0,0,837,838,5,111,0,0,838,839,5,36,0,0,839,
        841,3,248,124,0,840,837,1,0,0,0,840,841,1,0,0,0,841,844,1,0,0,0,
        842,843,5,122,0,0,843,845,3,256,128,0,844,842,1,0,0,0,844,845,1,
        0,0,0,845,1168,1,0,0,0,846,850,5,233,0,0,847,848,5,110,0,0,848,849,
        5,193,0,0,849,851,5,103,0,0,850,847,1,0,0,0,850,851,1,0,0,0,851,
        862,1,0,0,0,852,857,3,254,127,0,853,854,5,4,0,0,854,856,3,254,127,
        0,855,853,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,
        0,858,863,1,0,0,0,859,857,1,0,0,0,860,861,5,22,0,0,861,863,5,215,
        0,0,862,852,1,0,0,0,862,860,1,0,0,0,863,864,1,0,0,0,864,865,5,190,
        0,0,865,866,3,240,120,0,866,867,5,105,0,0,867,868,3,250,125,0,868,
        1168,1,0,0,0,869,880,5,74,0,0,870,875,3,236,118,0,871,872,5,4,0,
        0,872,874,3,236,118,0,873,871,1,0,0,0,874,877,1,0,0,0,875,873,1,
        0,0,0,875,876,1,0,0,0,876,881,1,0,0,0,877,875,1,0,0,0,878,879,5,
        22,0,0,879,881,5,215,0,0,880,870,1,0,0,0,880,878,1,0,0,0,881,882,
        1,0,0,0,882,883,5,190,0,0,883,884,3,240,120,0,884,885,5,269,0,0,
        885,886,3,250,125,0,886,1168,1,0,0,0,887,888,5,251,0,0,888,892,5,
        235,0,0,889,893,5,22,0,0,890,893,5,180,0,0,891,893,3,256,128,0,892,
        889,1,0,0,0,892,890,1,0,0,0,892,891,1,0,0,0,893,896,1,0,0,0,894,
        895,5,122,0,0,895,897,3,256,128,0,896,894,1,0,0,0,896,897,1,0,0,
        0,897,1168,1,0,0,0,898,899,5,253,0,0,899,902,5,112,0,0,900,901,5,
        190,0,0,901,903,3,240,120,0,902,900,1,0,0,0,902,903,1,0,0,0,903,
        1168,1,0,0,0,904,916,5,95,0,0,905,906,5,2,0,0,906,911,3,202,101,
        0,907,908,5,4,0,0,908,910,3,202,101,0,909,907,1,0,0,0,910,913,1,
        0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,911,1,
        0,0,0,914,915,5,3,0,0,915,917,1,0,0,0,916,905,1,0,0,0,916,917,1,
        0,0,0,917,918,1,0,0,0,918,1168,3,12,6,0,919,920,5,95,0,0,920,922,
        5,24,0,0,921,923,5,297,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,924,
        1,0,0,0,924,1168,3,12,6,0,925,926,5,253,0,0,926,927,5,53,0,0,927,
        928,5,260,0,0,928,1168,3,242,121,0,929,930,5,253,0,0,930,931,5,53,
        0,0,931,932,5,243,0,0,932,1168,3,242,121,0,933,934,5,253,0,0,934,
        935,5,53,0,0,935,936,5,299,0,0,936,1168,3,242,121,0,937,938,5,253,
        0,0,938,939,5,53,0,0,939,940,5,167,0,0,940,941,5,299,0,0,941,1168,
        3,242,121,0,942,943,5,253,0,0,943,946,5,261,0,0,944,945,7,2,0,0,
        945,947,3,242,121,0,946,944,1,0,0,0,946,947,1,0,0,0,947,954,1,0,
        0,0,948,949,5,154,0,0,949,952,3,158,79,0,950,951,5,90,0,0,951,953,
        3,158,79,0,952,950,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,0,954,948,
        1,0,0,0,954,955,1,0,0,0,955,1168,1,0,0,0,956,957,5,253,0,0,957,960,
        5,244,0,0,958,959,7,2,0,0,959,961,3,256,128,0,960,958,1,0,0,0,960,
        961,1,0,0,0,961,968,1,0,0,0,962,963,5,154,0,0,963,966,3,158,79,0,
        964,965,5,90,0,0,965,967,3,158,79,0,966,964,1,0,0,0,966,967,1,0,
        0,0,967,969,1,0,0,0,968,962,1,0,0,0,968,969,1,0,0,0,969,1168,1,0,
        0,0,970,971,5,253,0,0,971,978,5,43,0,0,972,973,5,154,0,0,973,976,
        3,158,79,0,974,975,5,90,0,0,975,977,3,158,79,0,976,974,1,0,0,0,976,
        977,1,0,0,0,977,979,1,0,0,0,978,972,1,0,0,0,978,979,1,0,0,0,979,
        1168,1,0,0,0,980,981,5,253,0,0,981,982,5,45,0,0,982,983,7,2,0,0,
        983,990,3,242,121,0,984,985,5,154,0,0,985,988,3,158,79,0,986,987,
        5,90,0,0,987,989,3,158,79,0,988,986,1,0,0,0,988,989,1,0,0,0,989,
        991,1,0,0,0,990,984,1,0,0,0,990,991,1,0,0,0,991,1168,1,0,0,0,992,
        993,5,253,0,0,993,994,5,256,0,0,994,995,5,103,0,0,995,1168,3,242,
        121,0,996,997,5,253,0,0,997,998,5,256,0,0,998,999,5,103,0,0,999,
        1000,5,2,0,0,1000,1001,3,14,7,0,1001,1002,5,3,0,0,1002,1168,1,0,
        0,0,1003,1005,5,253,0,0,1004,1006,5,56,0,0,1005,1004,1,0,0,0,1005,
        1006,1,0,0,0,1006,1007,1,0,0,0,1007,1010,5,236,0,0,1008,1009,7,2,
        0,0,1009,1011,3,256,128,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,
        1168,1,0,0,0,1012,1013,5,253,0,0,1013,1014,5,235,0,0,1014,1017,5,
        112,0,0,1015,1016,7,2,0,0,1016,1018,3,256,128,0,1017,1015,1,0,0,
        0,1017,1018,1,0,0,0,1018,1168,1,0,0,0,1019,1020,5,76,0,0,1020,1168,
        3,242,121,0,1021,1022,5,75,0,0,1022,1168,3,242,121,0,1023,1024,5,
        253,0,0,1024,1027,5,108,0,0,1025,1026,7,2,0,0,1026,1028,3,242,121,
        0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1035,1,0,0,0,1029,1030,
        5,154,0,0,1030,1033,3,158,79,0,1031,1032,5,90,0,0,1032,1034,3,158,
        79,0,1033,1031,1,0,0,0,1033,1034,1,0,0,0,1034,1036,1,0,0,0,1035,
        1029,1,0,0,0,1035,1036,1,0,0,0,1036,1168,1,0,0,0,1037,1038,5,253,
        0,0,1038,1045,5,250,0,0,1039,1040,5,154,0,0,1040,1043,3,158,79,0,
        1041,1042,5,90,0,0,1042,1044,3,158,79,0,1043,1041,1,0,0,0,1043,1044,
        1,0,0,0,1044,1046,1,0,0,0,1045,1039,1,0,0,0,1045,1046,1,0,0,0,1046,
        1168,1,0,0,0,1047,1048,5,251,0,0,1048,1049,5,250,0,0,1049,1050,5,
        31,0,0,1050,1168,3,260,130,0,1051,1052,5,227,0,0,1052,1053,5,250,
        0,0,1053,1168,5,31,0,0,1054,1055,5,251,0,0,1055,1056,5,250,0,0,1056,
        1057,3,242,121,0,1057,1058,5,312,0,0,1058,1059,3,126,63,0,1059,1168,
        1,0,0,0,1060,1061,5,227,0,0,1061,1062,5,250,0,0,1062,1168,3,242,
        121,0,1063,1064,5,255,0,0,1064,1073,5,271,0,0,1065,1070,3,204,102,
        0,1066,1067,5,4,0,0,1067,1069,3,204,102,0,1068,1066,1,0,0,0,1069,
        1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,
        0,1072,1070,1,0,0,0,1073,1065,1,0,0,0,1073,1074,1,0,0,0,1074,1168,
        1,0,0,0,1075,1077,5,47,0,0,1076,1078,5,307,0,0,1077,1076,1,0,0,0,
        1077,1078,1,0,0,0,1078,1168,1,0,0,0,1079,1081,5,237,0,0,1080,1082,
        5,307,0,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1168,1,0,0,0,
        1083,1084,5,214,0,0,1084,1085,3,256,128,0,1085,1086,5,105,0,0,1086,
        1087,3,12,6,0,1087,1168,1,0,0,0,1088,1089,5,68,0,0,1089,1090,5,214,
        0,0,1090,1168,3,256,128,0,1091,1092,5,93,0,0,1092,1102,3,256,128,
        0,1093,1094,5,290,0,0,1094,1099,3,126,63,0,1095,1096,5,4,0,0,1096,
        1098,3,126,63,0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,
        0,0,0,1099,1100,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1102,
        1093,1,0,0,0,1102,1103,1,0,0,0,1103,1168,1,0,0,0,1104,1105,5,93,
        0,0,1105,1106,5,121,0,0,1106,1116,3,158,79,0,1107,1108,5,290,0,0,
        1108,1113,3,126,63,0,1109,1110,5,4,0,0,1110,1112,3,126,63,0,1111,
        1109,1,0,0,0,1112,1115,1,0,0,0,1113,1111,1,0,0,0,1113,1114,1,0,0,
        0,1114,1117,1,0,0,0,1115,1113,1,0,0,0,1116,1107,1,0,0,0,1116,1117,
        1,0,0,0,1117,1168,1,0,0,0,1118,1119,5,76,0,0,1119,1120,5,126,0,0,
        1120,1168,3,256,128,0,1121,1122,5,76,0,0,1122,1123,5,198,0,0,1123,
        1168,3,256,128,0,1124,1125,5,251,0,0,1125,1126,5,205,0,0,1126,1168,
        3,212,106,0,1127,1128,5,251,0,0,1128,1129,5,267,0,0,1129,1132,5,
        311,0,0,1130,1133,5,157,0,0,1131,1133,3,126,63,0,1132,1130,1,0,0,
        0,1132,1131,1,0,0,0,1133,1168,1,0,0,0,1134,1135,5,287,0,0,1135,1136,
        3,242,121,0,1136,1137,5,251,0,0,1137,1142,3,200,100,0,1138,1139,
        5,4,0,0,1139,1141,3,200,100,0,1140,1138,1,0,0,0,1141,1144,1,0,0,
        0,1142,1140,1,0,0,0,1142,1143,1,0,0,0,1143,1147,1,0,0,0,1144,1142,
        1,0,0,0,1145,1146,5,301,0,0,1146,1148,3,128,64,0,1147,1145,1,0,0,
        0,1147,1148,1,0,0,0,1148,1168,1,0,0,0,1149,1150,5,169,0,0,1150,1151,
        5,130,0,0,1151,1156,3,242,121,0,1152,1154,5,28,0,0,1153,1152,1,0,
        0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1157,3,256,128,0,1156,
        1153,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1159,5,290,
        0,0,1159,1160,3,66,33,0,1160,1161,5,190,0,0,1161,1163,3,126,63,0,
        1162,1164,3,184,92,0,1163,1162,1,0,0,0,1164,1165,1,0,0,0,1165,1163,
        1,0,0,0,1165,1166,1,0,0,0,1166,1168,1,0,0,0,1167,282,1,0,0,0,1167,
        283,1,0,0,0,1167,285,1,0,0,0,1167,290,1,0,0,0,1167,312,1,0,0,0,1167,
        322,1,0,0,0,1167,338,1,0,0,0,1167,348,1,0,0,0,1167,355,1,0,0,0,1167,
        362,1,0,0,0,1167,400,1,0,0,0,1167,430,1,0,0,0,1167,437,1,0,0,0,1167,
        445,1,0,0,0,1167,452,1,0,0,0,1167,455,1,0,0,0,1167,464,1,0,0,0,1167,
        473,1,0,0,0,1167,482,1,0,0,0,1167,493,1,0,0,0,1167,509,1,0,0,0,1167,
        526,1,0,0,0,1167,541,1,0,0,0,1167,556,1,0,0,0,1167,570,1,0,0,0,1167,
        577,1,0,0,0,1167,584,1,0,0,0,1167,607,1,0,0,0,1167,613,1,0,0,0,1167,
        642,1,0,0,0,1167,660,1,0,0,0,1167,664,1,0,0,0,1167,672,1,0,0,0,1167,
        684,1,0,0,0,1167,692,1,0,0,0,1167,699,1,0,0,0,1167,706,1,0,0,0,1167,
        713,1,0,0,0,1167,728,1,0,0,0,1167,734,1,0,0,0,1167,741,1,0,0,0,1167,
        753,1,0,0,0,1167,760,1,0,0,0,1167,792,1,0,0,0,1167,814,1,0,0,0,1167,
        846,1,0,0,0,1167,869,1,0,0,0,1167,887,1,0,0,0,1167,898,1,0,0,0,1167,
        904,1,0,0,0,1167,919,1,0,0,0,1167,925,1,0,0,0,1167,929,1,0,0,0,1167,
        933,1,0,0,0,1167,937,1,0,0,0,1167,942,1,0,0,0,1167,956,1,0,0,0,1167,
        970,1,0,0,0,1167,980,1,0,0,0,1167,992,1,0,0,0,1167,996,1,0,0,0,1167,
        1003,1,0,0,0,1167,1012,1,0,0,0,1167,1019,1,0,0,0,1167,1021,1,0,0,
        0,1167,1023,1,0,0,0,1167,1037,1,0,0,0,1167,1047,1,0,0,0,1167,1051,
        1,0,0,0,1167,1054,1,0,0,0,1167,1060,1,0,0,0,1167,1063,1,0,0,0,1167,
        1075,1,0,0,0,1167,1079,1,0,0,0,1167,1083,1,0,0,0,1167,1088,1,0,0,
        0,1167,1091,1,0,0,0,1167,1104,1,0,0,0,1167,1118,1,0,0,0,1167,1121,
        1,0,0,0,1167,1124,1,0,0,0,1167,1127,1,0,0,0,1167,1134,1,0,0,0,1167,
        1149,1,0,0,0,1168,13,1,0,0,0,1169,1171,3,16,8,0,1170,1169,1,0,0,
        0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,1173,3,18,9,0,1173,15,
        1,0,0,0,1174,1175,5,304,0,0,1175,1180,3,214,107,0,1176,1177,5,4,
        0,0,1177,1179,3,214,107,0,1178,1176,1,0,0,0,1179,1182,1,0,0,0,1180,
        1178,1,0,0,0,1180,1181,1,0,0,0,1181,17,1,0,0,0,1182,1180,1,0,0,0,
        1183,1185,3,20,10,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1186,
        1,0,0,0,1186,1187,3,36,18,0,1187,19,1,0,0,0,1188,1190,5,304,0,0,
        1189,1191,5,221,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,
        1,0,0,0,1192,1197,3,60,30,0,1193,1194,5,4,0,0,1194,1196,3,60,30,
        0,1195,1193,1,0,0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,0,1197,1198,
        1,0,0,0,1198,21,1,0,0,0,1199,1197,1,0,0,0,1200,1203,3,24,12,0,1201,
        1203,3,26,13,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,23,1,0,0,
        0,1204,1205,3,242,121,0,1205,1208,3,174,87,0,1206,1207,5,182,0,0,
        1207,1209,5,183,0,0,1208,1206,1,0,0,0,1208,1209,1,0,0,0,1209,1212,
        1,0,0,0,1210,1211,5,46,0,0,1211,1213,3,158,79,0,1212,1210,1,0,0,
        0,1212,1213,1,0,0,0,1213,1216,1,0,0,0,1214,1215,5,304,0,0,1215,1217,
        3,28,14,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,25,1,0,0,0,1218,
        1219,5,154,0,0,1219,1222,3,242,121,0,1220,1221,7,3,0,0,1221,1223,
        5,216,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,27,1,0,0,0,1224,
        1225,5,2,0,0,1225,1226,3,30,15,0,1226,1227,5,3,0,0,1227,29,1,0,0,
        0,1228,1233,3,32,16,0,1229,1230,5,4,0,0,1230,1232,3,32,16,0,1231,
        1229,1,0,0,0,1232,1235,1,0,0,0,1233,1231,1,0,0,0,1233,1234,1,0,0,
        0,1234,31,1,0,0,0,1235,1233,1,0,0,0,1236,1237,3,256,128,0,1237,1238,
        5,312,0,0,1238,1239,3,34,17,0,1239,33,1,0,0,0,1240,1243,5,70,0,0,
        1241,1243,3,126,63,0,1242,1240,1,0,0,0,1242,1241,1,0,0,0,1243,35,
        1,0,0,0,1244,1255,3,42,21,0,1245,1246,5,195,0,0,1246,1247,5,36,0,
        0,1247,1252,3,46,23,0,1248,1249,5,4,0,0,1249,1251,3,46,23,0,1250,
        1248,1,0,0,0,1251,1254,1,0,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,
        0,1253,1256,1,0,0,0,1254,1252,1,0,0,0,1255,1245,1,0,0,0,1255,1256,
        1,0,0,0,1256,1262,1,0,0,0,1257,1258,5,188,0,0,1258,1260,3,40,20,
        0,1259,1261,7,4,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1263,
        1,0,0,0,1262,1257,1,0,0,0,1262,1263,1,0,0,0,1263,1277,1,0,0,0,1264,
        1265,5,155,0,0,1265,1278,3,38,19,0,1266,1267,5,98,0,0,1267,1269,
        7,5,0,0,1268,1270,3,40,20,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,
        1270,1271,1,0,0,0,1271,1275,7,4,0,0,1272,1276,5,192,0,0,1273,1274,
        5,304,0,0,1274,1276,5,266,0,0,1275,1272,1,0,0,0,1275,1273,1,0,0,
        0,1276,1278,1,0,0,0,1277,1264,1,0,0,0,1277,1266,1,0,0,0,1277,1278,
        1,0,0,0,1278,37,1,0,0,0,1279,1282,5,22,0,0,1280,1282,3,40,20,0,1281,
        1279,1,0,0,0,1281,1280,1,0,0,0,1282,39,1,0,0,0,1283,1284,7,6,0,0,
        1284,41,1,0,0,0,1285,1286,6,21,-1,0,1286,1287,3,44,22,0,1287,1302,
        1,0,0,0,1288,1289,10,2,0,0,1289,1291,5,128,0,0,1290,1292,3,62,31,
        0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1301,
        3,42,21,3,1294,1295,10,1,0,0,1295,1297,7,7,0,0,1296,1298,3,62,31,
        0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1301,
        3,42,21,2,1300,1288,1,0,0,0,1300,1294,1,0,0,0,1301,1304,1,0,0,0,
        1302,1300,1,0,0,0,1302,1303,1,0,0,0,1303,43,1,0,0,0,1304,1302,1,
        0,0,0,1305,1322,3,48,24,0,1306,1307,5,260,0,0,1307,1322,3,242,121,
        0,1308,1309,5,296,0,0,1309,1314,3,126,63,0,1310,1311,5,4,0,0,1311,
        1313,3,126,63,0,1312,1310,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,
        0,0,0,1314,1315,1,0,0,0,1315,1322,1,0,0,0,1316,1314,1,0,0,0,1317,
        1318,5,2,0,0,1318,1319,3,36,18,0,1319,1320,5,3,0,0,1320,1322,1,0,
        0,0,1321,1305,1,0,0,0,1321,1306,1,0,0,0,1321,1308,1,0,0,0,1321,1317,
        1,0,0,0,1322,45,1,0,0,0,1323,1325,3,126,63,0,1324,1326,7,8,0,0,1325,
        1324,1,0,0,0,1325,1326,1,0,0,0,1326,1329,1,0,0,0,1327,1328,5,185,
        0,0,1328,1330,7,9,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,47,
        1,0,0,0,1331,1333,5,248,0,0,1332,1334,3,62,31,0,1333,1332,1,0,0,
        0,1333,1334,1,0,0,0,1334,1335,1,0,0,0,1335,1340,3,64,32,0,1336,1337,
        5,4,0,0,1337,1339,3,64,32,0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,
        1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1352,1,0,0,0,1342,1340,
        1,0,0,0,1343,1344,5,105,0,0,1344,1349,3,66,33,0,1345,1346,5,4,0,
        0,1346,1348,3,66,33,0,1347,1345,1,0,0,0,1348,1351,1,0,0,0,1349,1347,
        1,0,0,0,1349,1350,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,0,0,0,1352,
        1343,1,0,0,0,1352,1353,1,0,0,0,1353,1356,1,0,0,0,1354,1355,5,301,
        0,0,1355,1357,3,128,64,0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,
        1361,1,0,0,0,1358,1359,5,114,0,0,1359,1360,5,36,0,0,1360,1362,3,
        50,25,0,1361,1358,1,0,0,0,1361,1362,1,0,0,0,1362,1365,1,0,0,0,1363,
        1364,5,117,0,0,1364,1366,3,128,64,0,1365,1363,1,0,0,0,1365,1366,
        1,0,0,0,1366,1376,1,0,0,0,1367,1368,5,303,0,0,1368,1373,3,56,28,
        0,1369,1370,5,4,0,0,1370,1372,3,56,28,0,1371,1369,1,0,0,0,1372,1375,
        1,0,0,0,1373,1371,1,0,0,0,1373,1374,1,0,0,0,1374,1377,1,0,0,0,1375,
        1373,1,0,0,0,1376,1367,1,0,0,0,1376,1377,1,0,0,0,1377,49,1,0,0,0,
        1378,1380,3,62,31,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1381,
        1,0,0,0,1381,1386,3,52,26,0,1382,1383,5,4,0,0,1383,1385,3,52,26,
        0,1384,1382,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,
        1,0,0,0,1387,51,1,0,0,0,1388,1386,1,0,0,0,1389,1430,3,54,27,0,1390,
        1391,5,238,0,0,1391,1400,5,2,0,0,1392,1397,3,54,27,0,1393,1394,5,
        4,0,0,1394,1396,3,54,27,0,1395,1393,1,0,0,0,1396,1399,1,0,0,0,1397,
        1395,1,0,0,0,1397,1398,1,0,0,0,1398,1401,1,0,0,0,1399,1397,1,0,0,
        0,1400,1392,1,0,0,0,1400,1401,1,0,0,0,1401,1402,1,0,0,0,1402,1430,
        5,3,0,0,1403,1404,5,55,0,0,1404,1413,5,2,0,0,1405,1410,3,54,27,0,
        1406,1407,5,4,0,0,1407,1409,3,54,27,0,1408,1406,1,0,0,0,1409,1412,
        1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,1414,1,0,0,0,1412,
        1410,1,0,0,0,1413,1405,1,0,0,0,1413,1414,1,0,0,0,1414,1415,1,0,0,
        0,1415,1430,5,3,0,0,1416,1417,5,115,0,0,1417,1418,5,252,0,0,1418,
        1419,5,2,0,0,1419,1424,3,54,27,0,1420,1421,5,4,0,0,1421,1423,3,54,
        27,0,1422,1420,1,0,0,0,1423,1426,1,0,0,0,1424,1422,1,0,0,0,1424,
        1425,1,0,0,0,1425,1427,1,0,0,0,1426,1424,1,0,0,0,1427,1428,5,3,0,
        0,1428,1430,1,0,0,0,1429,1389,1,0,0,0,1429,1390,1,0,0,0,1429,1403,
        1,0,0,0,1429,1416,1,0,0,0,1430,53,1,0,0,0,1431,1440,5,2,0,0,1432,
        1437,3,126,63,0,1433,1434,5,4,0,0,1434,1436,3,126,63,0,1435,1433,
        1,0,0,0,1436,1439,1,0,0,0,1437,1435,1,0,0,0,1437,1438,1,0,0,0,1438,
        1441,1,0,0,0,1439,1437,1,0,0,0,1440,1432,1,0,0,0,1440,1441,1,0,0,
        0,1441,1442,1,0,0,0,1442,1445,5,3,0,0,1443,1445,3,126,63,0,1444,
        1431,1,0,0,0,1444,1443,1,0,0,0,1445,55,1,0,0,0,1446,1447,3,256,128,
        0,1447,1448,5,28,0,0,1448,1449,5,2,0,0,1449,1450,3,58,29,0,1450,
        1451,5,3,0,0,1451,57,1,0,0,0,1452,1454,3,256,128,0,1453,1452,1,0,
        0,0,1453,1454,1,0,0,0,1454,1465,1,0,0,0,1455,1456,5,201,0,0,1456,
        1457,5,36,0,0,1457,1462,3,126,63,0,1458,1459,5,4,0,0,1459,1461,3,
        126,63,0,1460,1458,1,0,0,0,1461,1464,1,0,0,0,1462,1460,1,0,0,0,1462,
        1463,1,0,0,0,1463,1466,1,0,0,0,1464,1462,1,0,0,0,1465,1455,1,0,0,
        0,1465,1466,1,0,0,0,1466,1477,1,0,0,0,1467,1468,5,195,0,0,1468,1469,
        5,36,0,0,1469,1474,3,46,23,0,1470,1471,5,4,0,0,1471,1473,3,46,23,
        0,1472,1470,1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,0,0,0,1474,1475,
        1,0,0,0,1475,1478,1,0,0,0,1476,1474,1,0,0,0,1477,1467,1,0,0,0,1477,
        1478,1,0,0,0,1478,1480,1,0,0,0,1479,1481,3,188,94,0,1480,1479,1,
        0,0,0,1480,1481,1,0,0,0,1481,59,1,0,0,0,1482,1484,3,256,128,0,1483,
        1485,3,98,49,0,1484,1483,1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,
        0,0,1486,1487,5,28,0,0,1487,1488,5,2,0,0,1488,1489,3,18,9,0,1489,
        1490,5,3,0,0,1490,61,1,0,0,0,1491,1492,7,10,0,0,1492,63,1,0,0,0,
        1493,1498,3,126,63,0,1494,1496,5,28,0,0,1495,1494,1,0,0,0,1495,1496,
        1,0,0,0,1496,1497,1,0,0,0,1497,1499,3,256,128,0,1498,1495,1,0,0,
        0,1498,1499,1,0,0,0,1499,1509,1,0,0,0,1500,1501,3,134,67,0,1501,
        1502,5,1,0,0,1502,1505,5,320,0,0,1503,1504,5,28,0,0,1504,1506,3,
        98,49,0,1505,1503,1,0,0,0,1505,1506,1,0,0,0,1506,1509,1,0,0,0,1507,
        1509,5,320,0,0,1508,1493,1,0,0,0,1508,1500,1,0,0,0,1508,1507,1,0,
        0,0,1509,65,1,0,0,0,1510,1511,6,33,-1,0,1511,1512,3,72,36,0,1512,
        1531,1,0,0,0,1513,1527,10,2,0,0,1514,1515,5,54,0,0,1515,1516,5,136,
        0,0,1516,1528,3,72,36,0,1517,1518,3,68,34,0,1518,1519,5,136,0,0,
        1519,1520,3,66,33,0,1520,1521,3,70,35,0,1521,1528,1,0,0,0,1522,1523,
        5,172,0,0,1523,1524,3,68,34,0,1524,1525,5,136,0,0,1525,1526,3,72,
        36,0,1526,1528,1,0,0,0,1527,1514,1,0,0,0,1527,1517,1,0,0,0,1527,
        1522,1,0,0,0,1528,1530,1,0,0,0,1529,1513,1,0,0,0,1530,1533,1,0,0,
        0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,67,1,0,0,0,1533,1531,
        1,0,0,0,1534,1536,5,125,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,
        1536,1550,1,0,0,0,1537,1539,5,152,0,0,1538,1540,5,197,0,0,1539,1538,
        1,0,0,0,1539,1540,1,0,0,0,1540,1550,1,0,0,0,1541,1543,5,234,0,0,
        1542,1544,5,197,0,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,1550,
        1,0,0,0,1545,1547,5,106,0,0,1546,1548,5,197,0,0,1547,1546,1,0,0,
        0,1547,1548,1,0,0,0,1548,1550,1,0,0,0,1549,1535,1,0,0,0,1549,1537,
        1,0,0,0,1549,1541,1,0,0,0,1549,1545,1,0,0,0,1550,69,1,0,0,0,1551,
        1552,5,190,0,0,1552,1566,3,128,64,0,1553,1554,5,290,0,0,1554,1555,
        5,2,0,0,1555,1560,3,256,128,0,1556,1557,5,4,0,0,1557,1559,3,256,
        128,0,1558,1556,1,0,0,0,1559,1562,1,0,0,0,1560,1558,1,0,0,0,1560,
        1561,1,0,0,0,1561,1563,1,0,0,0,1562,1560,1,0,0,0,1563,1564,5,3,0,
        0,1564,1566,1,0,0,0,1565,1551,1,0,0,0,1565,1553,1,0,0,0,1566,71,
        1,0,0,0,1567,1574,3,82,41,0,1568,1569,5,262,0,0,1569,1570,3,74,37,
        0,1570,1571,5,2,0,0,1571,1572,3,126,63,0,1572,1573,5,3,0,0,1573,
        1575,1,0,0,0,1574,1568,1,0,0,0,1574,1575,1,0,0,0,1575,73,1,0,0,0,
        1576,1577,7,11,0,0,1577,75,1,0,0,0,1578,1579,7,12,0,0,1579,77,1,
        0,0,0,1580,1587,5,89,0,0,1581,1583,5,274,0,0,1582,1584,3,158,79,
        0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1587,
        3,80,40,0,1586,1580,1,0,0,0,1586,1581,1,0,0,0,1587,79,1,0,0,0,1588,
        1589,5,304,0,0,1589,1593,5,51,0,0,1590,1591,5,306,0,0,1591,1593,
        5,51,0,0,1592,1588,1,0,0,0,1592,1590,1,0,0,0,1593,81,1,0,0,0,1594,
        1677,3,96,48,0,1595,1596,5,166,0,0,1596,1607,5,2,0,0,1597,1598,5,
        201,0,0,1598,1599,5,36,0,0,1599,1604,3,126,63,0,1600,1601,5,4,0,
        0,1601,1603,3,126,63,0,1602,1600,1,0,0,0,1603,1606,1,0,0,0,1604,
        1602,1,0,0,0,1604,1605,1,0,0,0,1605,1608,1,0,0,0,1606,1604,1,0,0,
        0,1607,1597,1,0,0,0,1607,1608,1,0,0,0,1608,1619,1,0,0,0,1609,1610,
        5,195,0,0,1610,1611,5,36,0,0,1611,1616,3,46,23,0,1612,1613,5,4,0,
        0,1613,1615,3,46,23,0,1614,1612,1,0,0,0,1615,1618,1,0,0,0,1616,1614,
        1,0,0,0,1616,1617,1,0,0,0,1617,1620,1,0,0,0,1618,1616,1,0,0,0,1619,
        1609,1,0,0,0,1619,1620,1,0,0,0,1620,1630,1,0,0,0,1621,1622,5,168,
        0,0,1622,1627,3,84,42,0,1623,1624,5,4,0,0,1624,1626,3,84,42,0,1625,
        1623,1,0,0,0,1626,1629,1,0,0,0,1627,1625,1,0,0,0,1627,1628,1,0,0,
        0,1628,1631,1,0,0,0,1629,1627,1,0,0,0,1630,1621,1,0,0,0,1630,1631,
        1,0,0,0,1631,1633,1,0,0,0,1632,1634,3,86,43,0,1633,1632,1,0,0,0,
        1633,1634,1,0,0,0,1634,1638,1,0,0,0,1635,1636,5,21,0,0,1636,1637,
        5,163,0,0,1637,1639,3,90,45,0,1638,1635,1,0,0,0,1638,1639,1,0,0,
        0,1639,1641,1,0,0,0,1640,1642,7,13,0,0,1641,1640,1,0,0,0,1641,1642,
        1,0,0,0,1642,1643,1,0,0,0,1643,1644,5,206,0,0,1644,1645,5,2,0,0,
        1645,1646,3,194,97,0,1646,1656,5,3,0,0,1647,1648,5,257,0,0,1648,
        1653,3,92,46,0,1649,1650,5,4,0,0,1650,1652,3,92,46,0,1651,1649,1,
        0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,1,0,0,0,1654,
        1657,1,0,0,0,1655,1653,1,0,0,0,1656,1647,1,0,0,0,1656,1657,1,0,0,
        0,1657,1658,1,0,0,0,1658,1659,5,71,0,0,1659,1664,3,94,47,0,1660,
        1661,5,4,0,0,1661,1663,3,94,47,0,1662,1660,1,0,0,0,1663,1666,1,0,
        0,0,1664,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1667,1,0,0,0,1666,1664,
        1,0,0,0,1667,1675,5,3,0,0,1668,1670,5,28,0,0,1669,1668,1,0,0,0,1669,
        1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,3,256,128,0,1672,1674,3,
        98,49,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1676,1,0,0,0,1675,
        1669,1,0,0,0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,1677,1595,1,0,0,
        0,1677,1678,1,0,0,0,1678,83,1,0,0,0,1679,1680,3,126,63,0,1680,1681,
        5,28,0,0,1681,1682,3,256,128,0,1682,85,1,0,0,0,1683,1684,5,191,0,
        0,1684,1685,5,239,0,0,1685,1686,5,207,0,0,1686,1695,5,163,0,0,1687,
        1688,5,22,0,0,1688,1689,5,240,0,0,1689,1690,5,207,0,0,1690,1692,
        5,163,0,0,1691,1693,3,88,44,0,1692,1691,1,0,0,0,1692,1693,1,0,0,
        0,1693,1695,1,0,0,0,1694,1683,1,0,0,0,1694,1687,1,0,0,0,1695,87,
        1,0,0,0,1696,1697,5,253,0,0,1697,1698,5,85,0,0,1698,1706,5,165,0,
        0,1699,1700,5,189,0,0,1700,1701,5,85,0,0,1701,1706,5,165,0,0,1702,
        1703,5,304,0,0,1703,1704,5,284,0,0,1704,1706,5,240,0,0,1705,1696,
        1,0,0,0,1705,1699,1,0,0,0,1705,1702,1,0,0,0,1706,89,1,0,0,0,1707,
        1708,5,5,0,0,1708,1709,5,269,0,0,1709,1710,5,174,0,0,1710,1727,5,
        239,0,0,1711,1712,5,5,0,0,1712,1713,5,204,0,0,1713,1714,5,148,0,
        0,1714,1727,5,239,0,0,1715,1716,5,5,0,0,1716,1717,5,269,0,0,1717,
        1718,5,101,0,0,1718,1727,3,256,128,0,1719,1720,5,5,0,0,1720,1721,
        5,269,0,0,1721,1722,5,148,0,0,1722,1727,3,256,128,0,1723,1724,5,
        5,0,0,1724,1725,5,269,0,0,1725,1727,3,256,128,0,1726,1707,1,0,0,
        0,1726,1711,1,0,0,0,1726,1715,1,0,0,0,1726,1719,1,0,0,0,1726,1723,
        1,0,0,0,1727,91,1,0,0,0,1728,1729,3,256,128,0,1729,1730,5,312,0,
        0,1730,1731,5,2,0,0,1731,1736,3,256,128,0,1732,1733,5,4,0,0,1733,
        1735,3,256,128,0,1734,1732,1,0,0,0,1735,1738,1,0,0,0,1736,1734,1,
        0,0,0,1736,1737,1,0,0,0,1737,1739,1,0,0,0,1738,1736,1,0,0,0,1739,
        1740,5,3,0,0,1740,93,1,0,0,0,1741,1742,3,256,128,0,1742,1743,5,28,
        0,0,1743,1744,3,126,63,0,1744,95,1,0,0,0,1745,1753,3,100,50,0,1746,
        1748,5,28,0,0,1747,1746,1,0,0,0,1747,1748,1,0,0,0,1748,1749,1,0,
        0,0,1749,1751,3,256,128,0,1750,1752,3,98,49,0,1751,1750,1,0,0,0,
        1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1747,1,0,0,0,1753,1754,
        1,0,0,0,1754,97,1,0,0,0,1755,1756,5,2,0,0,1756,1761,3,256,128,0,
        1757,1758,5,4,0,0,1758,1760,3,256,128,0,1759,1757,1,0,0,0,1760,1763,
        1,0,0,0,1761,1759,1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,
        1761,1,0,0,0,1764,1765,5,3,0,0,1765,99,1,0,0,0,1766,1768,3,242,121,
        0,1767,1769,3,244,122,0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,
        1838,1,0,0,0,1770,1771,5,2,0,0,1771,1772,3,18,9,0,1772,1773,5,3,
        0,0,1773,1838,1,0,0,0,1774,1775,5,285,0,0,1775,1776,5,2,0,0,1776,
        1781,3,126,63,0,1777,1778,5,4,0,0,1778,1780,3,126,63,0,1779,1777,
        1,0,0,0,1780,1783,1,0,0,0,1781,1779,1,0,0,0,1781,1782,1,0,0,0,1782,
        1784,1,0,0,0,1783,1781,1,0,0,0,1784,1787,5,3,0,0,1785,1786,5,304,
        0,0,1786,1788,5,196,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,
        1838,1,0,0,0,1789,1790,5,149,0,0,1790,1791,5,2,0,0,1791,1792,3,18,
        9,0,1792,1793,5,3,0,0,1793,1838,1,0,0,0,1794,1795,5,260,0,0,1795,
        1796,5,2,0,0,1796,1797,3,112,56,0,1797,1798,5,3,0,0,1798,1838,1,
        0,0,0,1799,1800,5,2,0,0,1800,1801,3,66,33,0,1801,1802,5,3,0,0,1802,
        1838,1,0,0,0,1803,1804,5,142,0,0,1804,1805,5,2,0,0,1805,1806,3,136,
        68,0,1806,1807,5,45,0,0,1807,1808,5,2,0,0,1808,1813,3,102,51,0,1809,
        1810,5,4,0,0,1810,1812,3,102,51,0,1811,1809,1,0,0,0,1812,1815,1,
        0,0,0,1813,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1816,1,0,0,0,1815,
        1813,1,0,0,0,1816,1828,5,3,0,0,1817,1818,5,210,0,0,1818,1819,5,2,
        0,0,1819,1820,3,104,52,0,1820,1821,5,3,0,0,1821,1829,1,0,0,0,1822,
        1823,5,210,0,0,1823,1824,5,70,0,0,1824,1825,5,2,0,0,1825,1826,3,
        110,55,0,1826,1827,5,3,0,0,1827,1829,1,0,0,0,1828,1817,1,0,0,0,1828,
        1822,1,0,0,0,1828,1829,1,0,0,0,1829,1833,1,0,0,0,1830,1831,7,14,
        0,0,1831,1832,5,190,0,0,1832,1834,5,89,0,0,1833,1830,1,0,0,0,1833,
        1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,3,0,0,1836,1838,1,0,0,
        0,1837,1766,1,0,0,0,1837,1770,1,0,0,0,1837,1774,1,0,0,0,1837,1789,
        1,0,0,0,1837,1794,1,0,0,0,1837,1799,1,0,0,0,1837,1803,1,0,0,0,1838,
        101,1,0,0,0,1839,1840,3,256,128,0,1840,1841,5,103,0,0,1841,1842,
        5,196,0,0,1842,1917,1,0,0,0,1843,1844,3,256,128,0,1844,1847,3,174,
        87,0,1845,1846,5,205,0,0,1846,1848,3,158,79,0,1847,1845,1,0,0,0,
        1847,1848,1,0,0,0,1848,1853,1,0,0,0,1849,1850,3,146,73,0,1850,1851,
        5,190,0,0,1851,1852,5,85,0,0,1852,1854,1,0,0,0,1853,1849,1,0,0,0,
        1853,1854,1,0,0,0,1854,1859,1,0,0,0,1855,1856,3,146,73,0,1856,1857,
        5,190,0,0,1857,1858,5,89,0,0,1858,1860,1,0,0,0,1859,1855,1,0,0,0,
        1859,1860,1,0,0,0,1860,1917,1,0,0,0,1861,1862,3,256,128,0,1862,1863,
        3,174,87,0,1863,1864,5,104,0,0,1864,1867,3,140,70,0,1865,1866,5,
        205,0,0,1866,1868,3,158,79,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,
        1868,1872,1,0,0,0,1869,1870,3,148,74,0,1870,1871,5,308,0,0,1871,
        1873,1,0,0,0,1872,1869,1,0,0,0,1872,1873,1,0,0,0,1873,1881,1,0,0,
        0,1874,1875,7,15,0,0,1875,1879,5,218,0,0,1876,1877,5,190,0,0,1877,
        1878,5,242,0,0,1878,1880,5,264,0,0,1879,1876,1,0,0,0,1879,1880,1,
        0,0,0,1880,1882,1,0,0,0,1881,1874,1,0,0,0,1881,1882,1,0,0,0,1882,
        1887,1,0,0,0,1883,1884,3,150,75,0,1884,1885,5,190,0,0,1885,1886,
        5,85,0,0,1886,1888,1,0,0,0,1887,1883,1,0,0,0,1887,1888,1,0,0,0,1888,
        1893,1,0,0,0,1889,1890,3,150,75,0,1890,1891,5,190,0,0,1891,1892,
        5,89,0,0,1892,1894,1,0,0,0,1893,1889,1,0,0,0,1893,1894,1,0,0,0,1894,
        1917,1,0,0,0,1895,1897,5,173,0,0,1896,1898,5,205,0,0,1897,1896,1,
        0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1902,3,158,79,0,1900,
        1901,5,28,0,0,1901,1903,3,256,128,0,1902,1900,1,0,0,0,1902,1903,
        1,0,0,0,1903,1904,1,0,0,0,1904,1905,5,45,0,0,1905,1906,5,2,0,0,1906,
        1911,3,102,51,0,1907,1908,5,4,0,0,1908,1910,3,102,51,0,1909,1907,
        1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,
        1914,1,0,0,0,1913,1911,1,0,0,0,1914,1915,5,3,0,0,1915,1917,1,0,0,
        0,1916,1839,1,0,0,0,1916,1843,1,0,0,0,1916,1861,1,0,0,0,1916,1895,
        1,0,0,0,1917,103,1,0,0,0,1918,1944,3,106,53,0,1919,1920,3,106,53,
        0,1920,1921,7,16,0,0,1921,1922,3,108,54,0,1922,1944,1,0,0,0,1923,
        1924,3,108,54,0,1924,1925,5,281,0,0,1925,1930,3,108,54,0,1926,1927,
        5,281,0,0,1927,1929,3,108,54,0,1928,1926,1,0,0,0,1929,1932,1,0,0,
        0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,1944,1,0,0,0,1932,1930,
        1,0,0,0,1933,1934,3,108,54,0,1934,1935,5,54,0,0,1935,1940,3,108,
        54,0,1936,1937,5,54,0,0,1937,1939,3,108,54,0,1938,1936,1,0,0,0,1939,
        1942,1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,1944,1,0,0,
        0,1942,1940,1,0,0,0,1943,1918,1,0,0,0,1943,1919,1,0,0,0,1943,1923,
        1,0,0,0,1943,1933,1,0,0,0,1944,105,1,0,0,0,1945,1946,3,256,128,0,
        1946,107,1,0,0,0,1947,1953,3,106,53,0,1948,1949,5,2,0,0,1949,1950,
        3,104,52,0,1950,1951,5,3,0,0,1951,1953,1,0,0,0,1952,1947,1,0,0,0,
        1952,1948,1,0,0,0,1953,109,1,0,0,0,1954,1957,7,16,0,0,1955,1956,
        5,4,0,0,1956,1958,7,17,0,0,1957,1955,1,0,0,0,1957,1958,1,0,0,0,1958,
        1965,1,0,0,0,1959,1962,7,17,0,0,1960,1961,5,4,0,0,1961,1963,7,16,
        0,0,1962,1960,1,0,0,0,1962,1963,1,0,0,0,1963,1965,1,0,0,0,1964,1954,
        1,0,0,0,1964,1959,1,0,0,0,1965,111,1,0,0,0,1966,1967,3,242,121,0,
        1967,1976,5,2,0,0,1968,1973,3,114,57,0,1969,1970,5,4,0,0,1970,1972,
        3,114,57,0,1971,1969,1,0,0,0,1972,1975,1,0,0,0,1973,1971,1,0,0,0,
        1973,1974,1,0,0,0,1974,1977,1,0,0,0,1975,1973,1,0,0,0,1976,1968,
        1,0,0,0,1976,1977,1,0,0,0,1977,1987,1,0,0,0,1978,1979,5,52,0,0,1979,
        1984,3,124,62,0,1980,1981,5,4,0,0,1981,1983,3,124,62,0,1982,1980,
        1,0,0,0,1983,1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,1,0,0,0,1985,
        1988,1,0,0,0,1986,1984,1,0,0,0,1987,1978,1,0,0,0,1987,1988,1,0,0,
        0,1988,1989,1,0,0,0,1989,1990,5,3,0,0,1990,113,1,0,0,0,1991,1992,
        3,256,128,0,1992,1993,5,6,0,0,1993,1995,1,0,0,0,1994,1991,1,0,0,
        0,1994,1995,1,0,0,0,1995,1999,1,0,0,0,1996,2000,3,116,58,0,1997,
        2000,3,120,60,0,1998,2000,3,126,63,0,1999,1996,1,0,0,0,1999,1997,
        1,0,0,0,1999,1998,1,0,0,0,2000,115,1,0,0,0,2001,2019,3,118,59,0,
        2002,2003,5,201,0,0,2003,2017,5,36,0,0,2004,2013,5,2,0,0,2005,2010,
        3,126,63,0,2006,2007,5,4,0,0,2007,2009,3,126,63,0,2008,2006,1,0,
        0,0,2009,2012,1,0,0,0,2010,2008,1,0,0,0,2010,2011,1,0,0,0,2011,2014,
        1,0,0,0,2012,2010,1,0,0,0,2013,2005,1,0,0,0,2013,2014,1,0,0,0,2014,
        2015,1,0,0,0,2015,2018,5,3,0,0,2016,2018,3,126,63,0,2017,2004,1,
        0,0,0,2017,2016,1,0,0,0,2018,2020,1,0,0,0,2019,2002,1,0,0,0,2019,
        2020,1,0,0,0,2020,2027,1,0,0,0,2021,2022,5,217,0,0,2022,2023,5,300,
        0,0,2023,2028,5,85,0,0,2024,2025,5,144,0,0,2025,2026,5,300,0,0,2026,
        2028,5,85,0,0,2027,2021,1,0,0,0,2027,2024,1,0,0,0,2027,2028,1,0,
        0,0,2028,2045,1,0,0,0,2029,2030,5,195,0,0,2030,2043,5,36,0,0,2031,
        2032,5,2,0,0,2032,2037,3,46,23,0,2033,2034,5,4,0,0,2034,2036,3,46,
        23,0,2035,2033,1,0,0,0,2036,2039,1,0,0,0,2037,2035,1,0,0,0,2037,
        2038,1,0,0,0,2038,2040,1,0,0,0,2039,2037,1,0,0,0,2040,2041,5,3,0,
        0,2041,2044,1,0,0,0,2042,2044,3,46,23,0,2043,2031,1,0,0,0,2043,2042,
        1,0,0,0,2044,2046,1,0,0,0,2045,2029,1,0,0,0,2045,2046,1,0,0,0,2046,
        117,1,0,0,0,2047,2048,5,260,0,0,2048,2049,5,2,0,0,2049,2050,3,242,
        121,0,2050,2058,5,3,0,0,2051,2053,5,28,0,0,2052,2051,1,0,0,0,2052,
        2053,1,0,0,0,2053,2054,1,0,0,0,2054,2056,3,256,128,0,2055,2057,3,
        98,49,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2059,1,0,0,0,2058,
        2052,1,0,0,0,2058,2059,1,0,0,0,2059,2074,1,0,0,0,2060,2061,5,260,
        0,0,2061,2062,5,2,0,0,2062,2063,3,18,9,0,2063,2071,5,3,0,0,2064,
        2066,5,28,0,0,2065,2064,1,0,0,0,2065,2066,1,0,0,0,2066,2067,1,0,
        0,0,2067,2069,3,256,128,0,2068,2070,3,98,49,0,2069,2068,1,0,0,0,
        2069,2070,1,0,0,0,2070,2072,1,0,0,0,2071,2065,1,0,0,0,2071,2072,
        1,0,0,0,2072,2074,1,0,0,0,2073,2047,1,0,0,0,2073,2060,1,0,0,0,2074,
        119,1,0,0,0,2075,2076,5,77,0,0,2076,2077,5,2,0,0,2077,2082,3,122,
        61,0,2078,2079,5,4,0,0,2079,2081,3,122,61,0,2080,2078,1,0,0,0,2081,
        2084,1,0,0,0,2082,2080,1,0,0,0,2082,2083,1,0,0,0,2083,2085,1,0,0,
        0,2084,2082,1,0,0,0,2085,2086,5,3,0,0,2086,2094,1,0,0,0,2087,2088,
        5,41,0,0,2088,2089,5,2,0,0,2089,2090,5,183,0,0,2090,2091,5,28,0,
        0,2091,2092,5,77,0,0,2092,2094,5,3,0,0,2093,2075,1,0,0,0,2093,2087,
        1,0,0,0,2094,121,1,0,0,0,2095,2097,3,256,128,0,2096,2098,3,174,87,
        0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,123,1,0,0,0,2099,2100,
        5,2,0,0,2100,2101,3,242,121,0,2101,2102,5,4,0,0,2102,2107,3,242,
        121,0,2103,2104,5,4,0,0,2104,2106,3,242,121,0,2105,2103,1,0,0,0,
        2106,2109,1,0,0,0,2107,2105,1,0,0,0,2107,2108,1,0,0,0,2108,2110,
        1,0,0,0,2109,2107,1,0,0,0,2110,2111,5,3,0,0,2111,125,1,0,0,0,2112,
        2113,3,128,64,0,2113,127,1,0,0,0,2114,2115,6,64,-1,0,2115,2117,3,
        132,66,0,2116,2118,3,130,65,0,2117,2116,1,0,0,0,2117,2118,1,0,0,
        0,2118,2122,1,0,0,0,2119,2120,5,182,0,0,2120,2122,3,128,64,3,2121,
        2114,1,0,0,0,2121,2119,1,0,0,0,2122,2131,1,0,0,0,2123,2124,10,2,
        0,0,2124,2125,5,25,0,0,2125,2130,3,128,64,3,2126,2127,10,1,0,0,2127,
        2128,5,194,0,0,2128,2130,3,128,64,2,2129,2123,1,0,0,0,2129,2126,
        1,0,0,0,2130,2133,1,0,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,2132,
        129,1,0,0,0,2133,2131,1,0,0,0,2134,2135,3,162,81,0,2135,2136,3,132,
        66,0,2136,2196,1,0,0,0,2137,2138,3,162,81,0,2138,2139,3,164,82,0,
        2139,2140,5,2,0,0,2140,2141,3,18,9,0,2141,2142,5,3,0,0,2142,2196,
        1,0,0,0,2143,2145,5,182,0,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,
        2145,2146,1,0,0,0,2146,2147,5,34,0,0,2147,2148,3,132,66,0,2148,2149,
        5,25,0,0,2149,2150,3,132,66,0,2150,2196,1,0,0,0,2151,2153,5,182,
        0,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,2155,
        5,122,0,0,2155,2156,5,2,0,0,2156,2161,3,126,63,0,2157,2158,5,4,0,
        0,2158,2160,3,126,63,0,2159,2157,1,0,0,0,2160,2163,1,0,0,0,2161,
        2159,1,0,0,0,2161,2162,1,0,0,0,2162,2164,1,0,0,0,2163,2161,1,0,0,
        0,2164,2165,5,3,0,0,2165,2196,1,0,0,0,2166,2168,5,182,0,0,2167,2166,
        1,0,0,0,2167,2168,1,0,0,0,2168,2169,1,0,0,0,2169,2170,5,122,0,0,
        2170,2171,5,2,0,0,2171,2172,3,18,9,0,2172,2173,5,3,0,0,2173,2196,
        1,0,0,0,2174,2176,5,182,0,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,
        2176,2177,1,0,0,0,2177,2178,5,154,0,0,2178,2181,3,132,66,0,2179,
        2180,5,90,0,0,2180,2182,3,132,66,0,2181,2179,1,0,0,0,2181,2182,1,
        0,0,0,2182,2196,1,0,0,0,2183,2185,5,133,0,0,2184,2186,5,182,0,0,
        2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,2187,1,0,0,0,2187,2196,
        5,183,0,0,2188,2190,5,133,0,0,2189,2191,5,182,0,0,2190,2189,1,0,
        0,0,2190,2191,1,0,0,0,2191,2192,1,0,0,0,2192,2193,5,79,0,0,2193,
        2194,5,105,0,0,2194,2196,3,132,66,0,2195,2134,1,0,0,0,2195,2137,
        1,0,0,0,2195,2144,1,0,0,0,2195,2152,1,0,0,0,2195,2167,1,0,0,0,2195,
        2175,1,0,0,0,2195,2183,1,0,0,0,2195,2188,1,0,0,0,2196,131,1,0,0,
        0,2197,2198,6,66,-1,0,2198,2202,3,134,67,0,2199,2200,7,18,0,0,2200,
        2202,3,132,66,4,2201,2197,1,0,0,0,2201,2199,1,0,0,0,2202,2217,1,
        0,0,0,2203,2204,10,3,0,0,2204,2205,7,19,0,0,2205,2216,3,132,66,4,
        2206,2207,10,2,0,0,2207,2208,7,18,0,0,2208,2216,3,132,66,3,2209,
        2210,10,1,0,0,2210,2211,5,323,0,0,2211,2216,3,132,66,2,2212,2213,
        10,5,0,0,2213,2214,5,30,0,0,2214,2216,3,160,80,0,2215,2203,1,0,0,
        0,2215,2206,1,0,0,0,2215,2209,1,0,0,0,2215,2212,1,0,0,0,2216,2219,
        1,0,0,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,133,1,0,0,0,2219,
        2217,1,0,0,0,2220,2221,6,67,-1,0,2221,2674,5,183,0,0,2222,2674,3,
        168,84,0,2223,2224,3,256,128,0,2224,2225,3,158,79,0,2225,2674,1,
        0,0,0,2226,2227,5,82,0,0,2227,2228,5,213,0,0,2228,2674,3,158,79,
        0,2229,2674,3,258,129,0,2230,2674,3,166,83,0,2231,2674,3,158,79,
        0,2232,2674,5,328,0,0,2233,2674,5,324,0,0,2234,2235,5,211,0,0,2235,
        2236,5,2,0,0,2236,2237,3,132,66,0,2237,2238,5,122,0,0,2238,2239,
        3,132,66,0,2239,2240,5,3,0,0,2240,2674,1,0,0,0,2241,2242,5,2,0,0,
        2242,2245,3,126,63,0,2243,2244,5,4,0,0,2244,2246,3,126,63,0,2245,
        2243,1,0,0,0,2246,2247,1,0,0,0,2247,2245,1,0,0,0,2247,2248,1,0,0,
        0,2248,2249,1,0,0,0,2249,2250,5,3,0,0,2250,2674,1,0,0,0,2251,2252,
        5,239,0,0,2252,2253,5,2,0,0,2253,2258,3,126,63,0,2254,2255,5,4,0,
        0,2255,2257,3,126,63,0,2256,2254,1,0,0,0,2257,2260,1,0,0,0,2258,
        2256,1,0,0,0,2258,2259,1,0,0,0,2259,2261,1,0,0,0,2260,2258,1,0,0,
        0,2261,2262,5,3,0,0,2262,2674,1,0,0,0,2263,2264,5,156,0,0,2264,2266,
        5,2,0,0,2265,2267,3,62,31,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,
        2267,2268,1,0,0,0,2268,2271,3,126,63,0,2269,2270,5,4,0,0,2270,2272,
        3,158,79,0,2271,2269,1,0,0,0,2271,2272,1,0,0,0,2272,2276,1,0,0,0,
        2273,2274,5,190,0,0,2274,2275,5,200,0,0,2275,2277,3,78,39,0,2276,
        2273,1,0,0,0,2276,2277,1,0,0,0,2277,2278,1,0,0,0,2278,2279,5,3,0,
        0,2279,2280,5,305,0,0,2280,2281,5,114,0,0,2281,2282,5,2,0,0,2282,
        2283,5,195,0,0,2283,2284,5,36,0,0,2284,2289,3,46,23,0,2285,2286,
        5,4,0,0,2286,2288,3,46,23,0,2287,2285,1,0,0,0,2288,2291,1,0,0,0,
        2289,2287,1,0,0,0,2289,2290,1,0,0,0,2290,2292,1,0,0,0,2291,2289,
        1,0,0,0,2292,2293,5,3,0,0,2293,2295,1,0,0,0,2294,2296,3,182,91,0,
        2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2674,1,0,0,0,2297,2299,
        3,154,77,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,
        2300,2301,3,242,121,0,2301,2305,5,2,0,0,2302,2303,3,256,128,0,2303,
        2304,5,1,0,0,2304,2306,1,0,0,0,2305,2302,1,0,0,0,2305,2306,1,0,0,
        0,2306,2307,1,0,0,0,2307,2308,5,320,0,0,2308,2310,5,3,0,0,2309,2311,
        3,182,91,0,2310,2309,1,0,0,0,2310,2311,1,0,0,0,2311,2313,1,0,0,0,
        2312,2314,3,186,93,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,2314,2674,
        1,0,0,0,2315,2317,3,154,77,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,
        2317,2318,1,0,0,0,2318,2319,3,242,121,0,2319,2331,5,2,0,0,2320,2322,
        3,62,31,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,
        2323,2328,3,126,63,0,2324,2325,5,4,0,0,2325,2327,3,126,63,0,2326,
        2324,1,0,0,0,2327,2330,1,0,0,0,2328,2326,1,0,0,0,2328,2329,1,0,0,
        0,2329,2332,1,0,0,0,2330,2328,1,0,0,0,2331,2321,1,0,0,0,2331,2332,
        1,0,0,0,2332,2343,1,0,0,0,2333,2334,5,195,0,0,2334,2335,5,36,0,0,
        2335,2340,3,46,23,0,2336,2337,5,4,0,0,2337,2339,3,46,23,0,2338,2336,
        1,0,0,0,2339,2342,1,0,0,0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,
        2344,1,0,0,0,2342,2340,1,0,0,0,2343,2333,1,0,0,0,2343,2344,1,0,0,
        0,2344,2345,1,0,0,0,2345,2347,5,3,0,0,2346,2348,3,182,91,0,2347,
        2346,1,0,0,0,2347,2348,1,0,0,0,2348,2353,1,0,0,0,2349,2351,3,156,
        78,0,2350,2349,1,0,0,0,2350,2351,1,0,0,0,2351,2352,1,0,0,0,2352,
        2354,3,186,93,0,2353,2350,1,0,0,0,2353,2354,1,0,0,0,2354,2674,1,
        0,0,0,2355,2356,3,256,128,0,2356,2357,3,186,93,0,2357,2674,1,0,0,
        0,2358,2359,3,256,128,0,2359,2360,5,7,0,0,2360,2361,3,126,63,0,2361,
        2674,1,0,0,0,2362,2371,5,2,0,0,2363,2368,3,256,128,0,2364,2365,5,
        4,0,0,2365,2367,3,256,128,0,2366,2364,1,0,0,0,2367,2370,1,0,0,0,
        2368,2366,1,0,0,0,2368,2369,1,0,0,0,2369,2372,1,0,0,0,2370,2368,
        1,0,0,0,2371,2363,1,0,0,0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,
        2374,5,3,0,0,2374,2375,5,7,0,0,2375,2674,3,126,63,0,2376,2377,5,
        2,0,0,2377,2378,3,18,9,0,2378,2379,5,3,0,0,2379,2674,1,0,0,0,2380,
        2381,5,94,0,0,2381,2382,5,2,0,0,2382,2383,3,18,9,0,2383,2384,5,3,
        0,0,2384,2674,1,0,0,0,2385,2386,5,40,0,0,2386,2388,3,126,63,0,2387,
        2389,3,180,90,0,2388,2387,1,0,0,0,2389,2390,1,0,0,0,2390,2388,1,
        0,0,0,2390,2391,1,0,0,0,2391,2394,1,0,0,0,2392,2393,5,84,0,0,2393,
        2395,3,126,63,0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,2396,1,
        0,0,0,2396,2397,5,88,0,0,2397,2674,1,0,0,0,2398,2400,5,40,0,0,2399,
        2401,3,180,90,0,2400,2399,1,0,0,0,2401,2402,1,0,0,0,2402,2400,1,
        0,0,0,2402,2403,1,0,0,0,2403,2406,1,0,0,0,2404,2405,5,84,0,0,2405,
        2407,3,126,63,0,2406,2404,1,0,0,0,2406,2407,1,0,0,0,2407,2408,1,
        0,0,0,2408,2409,5,88,0,0,2409,2674,1,0,0,0,2410,2411,5,41,0,0,2411,
        2412,5,2,0,0,2412,2413,3,126,63,0,2413,2414,5,28,0,0,2414,2415,3,
        174,87,0,2415,2416,5,3,0,0,2416,2674,1,0,0,0,2417,2418,5,275,0,0,
        2418,2419,5,2,0,0,2419,2420,3,126,63,0,2420,2421,5,28,0,0,2421,2422,
        3,174,87,0,2422,2423,5,3,0,0,2423,2674,1,0,0,0,2424,2425,5,27,0,
        0,2425,2434,5,8,0,0,2426,2431,3,126,63,0,2427,2428,5,4,0,0,2428,
        2430,3,126,63,0,2429,2427,1,0,0,0,2430,2433,1,0,0,0,2431,2429,1,
        0,0,0,2431,2432,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,0,0,0,2434,
        2426,1,0,0,0,2434,2435,1,0,0,0,2435,2436,1,0,0,0,2436,2674,5,9,0,
        0,2437,2674,3,256,128,0,2438,2674,5,58,0,0,2439,2443,5,62,0,0,2440,
        2441,5,2,0,0,2441,2442,5,329,0,0,2442,2444,5,3,0,0,2443,2440,1,0,
        0,0,2443,2444,1,0,0,0,2444,2674,1,0,0,0,2445,2449,5,63,0,0,2446,
        2447,5,2,0,0,2447,2448,5,329,0,0,2448,2450,5,3,0,0,2449,2446,1,0,
        0,0,2449,2450,1,0,0,0,2450,2674,1,0,0,0,2451,2455,5,158,0,0,2452,
        2453,5,2,0,0,2453,2454,5,329,0,0,2454,2456,5,3,0,0,2455,2452,1,0,
        0,0,2455,2456,1,0,0,0,2456,2674,1,0,0,0,2457,2461,5,159,0,0,2458,
        2459,5,2,0,0,2459,2460,5,329,0,0,2460,2462,5,3,0,0,2461,2458,1,0,
        0,0,2461,2462,1,0,0,0,2462,2674,1,0,0,0,2463,2674,5,64,0,0,2464,
        2674,5,57,0,0,2465,2674,5,61,0,0,2466,2674,5,59,0,0,2467,2468,5,
        272,0,0,2468,2476,5,2,0,0,2469,2471,3,76,38,0,2470,2469,1,0,0,0,
        2470,2471,1,0,0,0,2471,2473,1,0,0,0,2472,2474,3,132,66,0,2473,2472,
        1,0,0,0,2473,2474,1,0,0,0,2474,2475,1,0,0,0,2475,2477,5,105,0,0,
        2476,2470,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2479,
        3,132,66,0,2479,2480,5,3,0,0,2480,2674,1,0,0,0,2481,2482,5,272,0,
        0,2482,2483,5,2,0,0,2483,2484,3,132,66,0,2484,2485,5,4,0,0,2485,
        2486,3,132,66,0,2486,2487,5,3,0,0,2487,2674,1,0,0,0,2488,2489,5,
        258,0,0,2489,2490,5,2,0,0,2490,2491,3,132,66,0,2491,2492,5,105,0,
        0,2492,2495,3,132,66,0,2493,2494,5,103,0,0,2494,2496,3,132,66,0,
        2495,2493,1,0,0,0,2495,2496,1,0,0,0,2496,2497,1,0,0,0,2497,2498,
        5,3,0,0,2498,2674,1,0,0,0,2499,2500,5,181,0,0,2500,2501,5,2,0,0,
        2501,2504,3,132,66,0,2502,2503,5,4,0,0,2503,2505,3,172,86,0,2504,
        2502,1,0,0,0,2504,2505,1,0,0,0,2505,2506,1,0,0,0,2506,2507,5,3,0,
        0,2507,2674,1,0,0,0,2508,2509,5,96,0,0,2509,2510,5,2,0,0,2510,2511,
        3,256,128,0,2511,2512,5,105,0,0,2512,2513,3,132,66,0,2513,2514,5,
        3,0,0,2514,2674,1,0,0,0,2515,2516,5,2,0,0,2516,2517,3,126,63,0,2517,
        2518,5,3,0,0,2518,2674,1,0,0,0,2519,2520,5,115,0,0,2520,2529,5,2,
        0,0,2521,2526,3,242,121,0,2522,2523,5,4,0,0,2523,2525,3,242,121,
        0,2524,2522,1,0,0,0,2525,2528,1,0,0,0,2526,2524,1,0,0,0,2526,2527,
        1,0,0,0,2527,2530,1,0,0,0,2528,2526,1,0,0,0,2529,2521,1,0,0,0,2529,
        2530,1,0,0,0,2530,2531,1,0,0,0,2531,2674,5,3,0,0,2532,2533,5,139,
        0,0,2533,2534,5,2,0,0,2534,2539,3,136,68,0,2535,2536,3,144,72,0,
        2536,2537,5,190,0,0,2537,2538,5,89,0,0,2538,2540,1,0,0,0,2539,2535,
        1,0,0,0,2539,2540,1,0,0,0,2540,2541,1,0,0,0,2541,2542,5,3,0,0,2542,
        2674,1,0,0,0,2543,2544,5,143,0,0,2544,2545,5,2,0,0,2545,2548,3,136,
        68,0,2546,2547,5,231,0,0,2547,2549,3,174,87,0,2548,2546,1,0,0,0,
        2548,2549,1,0,0,0,2549,2554,1,0,0,0,2550,2551,3,146,73,0,2551,2552,
        5,190,0,0,2552,2553,5,85,0,0,2553,2555,1,0,0,0,2554,2550,1,0,0,0,
        2554,2555,1,0,0,0,2555,2560,1,0,0,0,2556,2557,3,146,73,0,2557,2558,
        5,190,0,0,2558,2559,5,89,0,0,2559,2561,1,0,0,0,2560,2556,1,0,0,0,
        2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2563,5,3,0,0,2563,2674,
        1,0,0,0,2564,2565,5,141,0,0,2565,2566,5,2,0,0,2566,2573,3,136,68,
        0,2567,2568,5,231,0,0,2568,2571,3,174,87,0,2569,2570,5,104,0,0,2570,
        2572,3,140,70,0,2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,2574,1,
        0,0,0,2573,2567,1,0,0,0,2573,2574,1,0,0,0,2574,2578,1,0,0,0,2575,
        2576,3,148,74,0,2576,2577,5,308,0,0,2577,2579,1,0,0,0,2578,2575,
        1,0,0,0,2578,2579,1,0,0,0,2579,2587,1,0,0,0,2580,2581,7,15,0,0,2581,
        2585,5,218,0,0,2582,2583,5,190,0,0,2583,2584,5,242,0,0,2584,2586,
        5,264,0,0,2585,2582,1,0,0,0,2585,2586,1,0,0,0,2586,2588,1,0,0,0,
        2587,2580,1,0,0,0,2587,2588,1,0,0,0,2588,2593,1,0,0,0,2589,2590,
        3,150,75,0,2590,2591,5,190,0,0,2591,2592,5,85,0,0,2592,2594,1,0,
        0,0,2593,2589,1,0,0,0,2593,2594,1,0,0,0,2594,2599,1,0,0,0,2595,2596,
        3,150,75,0,2596,2597,5,190,0,0,2597,2598,5,89,0,0,2598,2600,1,0,
        0,0,2599,2595,1,0,0,0,2599,2600,1,0,0,0,2600,2601,1,0,0,0,2601,2602,
        5,3,0,0,2602,2674,1,0,0,0,2603,2604,5,140,0,0,2604,2633,5,2,0,0,
        2605,2610,3,152,76,0,2606,2607,5,4,0,0,2607,2609,3,152,76,0,2608,
        2606,1,0,0,0,2609,2612,1,0,0,0,2610,2608,1,0,0,0,2610,2611,1,0,0,
        0,2611,2619,1,0,0,0,2612,2610,1,0,0,0,2613,2614,5,183,0,0,2614,2615,
        5,190,0,0,2615,2620,5,183,0,0,2616,2617,5,18,0,0,2617,2618,5,190,
        0,0,2618,2620,5,183,0,0,2619,2613,1,0,0,0,2619,2616,1,0,0,0,2619,
        2620,1,0,0,0,2620,2631,1,0,0,0,2621,2622,5,304,0,0,2622,2624,5,282,
        0,0,2623,2625,5,146,0,0,2624,2623,1,0,0,0,2624,2625,1,0,0,0,2625,
        2632,1,0,0,0,2626,2627,5,306,0,0,2627,2629,5,282,0,0,2628,2630,5,
        146,0,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2632,1,0,0,0,2631,
        2621,1,0,0,0,2631,2626,1,0,0,0,2631,2632,1,0,0,0,2632,2634,1,0,0,
        0,2633,2605,1,0,0,0,2633,2634,1,0,0,0,2634,2641,1,0,0,0,2635,2636,
        5,231,0,0,2636,2639,3,174,87,0,2637,2638,5,104,0,0,2638,2640,3,140,
        70,0,2639,2637,1,0,0,0,2639,2640,1,0,0,0,2640,2642,1,0,0,0,2641,
        2635,1,0,0,0,2641,2642,1,0,0,0,2642,2643,1,0,0,0,2643,2674,5,3,0,
        0,2644,2645,5,138,0,0,2645,2662,5,2,0,0,2646,2651,3,138,69,0,2647,
        2648,5,4,0,0,2648,2650,3,138,69,0,2649,2647,1,0,0,0,2650,2653,1,
        0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,2660,1,0,0,0,2653,
        2651,1,0,0,0,2654,2655,5,183,0,0,2655,2656,5,190,0,0,2656,2661,5,
        183,0,0,2657,2658,5,18,0,0,2658,2659,5,190,0,0,2659,2661,5,183,0,
        0,2660,2654,1,0,0,0,2660,2657,1,0,0,0,2660,2661,1,0,0,0,2661,2663,
        1,0,0,0,2662,2646,1,0,0,0,2662,2663,1,0,0,0,2663,2670,1,0,0,0,2664,
        2665,5,231,0,0,2665,2668,3,174,87,0,2666,2667,5,104,0,0,2667,2669,
        3,140,70,0,2668,2666,1,0,0,0,2668,2669,1,0,0,0,2669,2671,1,0,0,0,
        2670,2664,1,0,0,0,2670,2671,1,0,0,0,2671,2672,1,0,0,0,2672,2674,
        5,3,0,0,2673,2220,1,0,0,0,2673,2222,1,0,0,0,2673,2223,1,0,0,0,2673,
        2226,1,0,0,0,2673,2229,1,0,0,0,2673,2230,1,0,0,0,2673,2231,1,0,0,
        0,2673,2232,1,0,0,0,2673,2233,1,0,0,0,2673,2234,1,0,0,0,2673,2241,
        1,0,0,0,2673,2251,1,0,0,0,2673,2263,1,0,0,0,2673,2298,1,0,0,0,2673,
        2316,1,0,0,0,2673,2355,1,0,0,0,2673,2358,1,0,0,0,2673,2362,1,0,0,
        0,2673,2376,1,0,0,0,2673,2380,1,0,0,0,2673,2385,1,0,0,0,2673,2398,
        1,0,0,0,2673,2410,1,0,0,0,2673,2417,1,0,0,0,2673,2424,1,0,0,0,2673,
        2437,1,0,0,0,2673,2438,1,0,0,0,2673,2439,1,0,0,0,2673,2445,1,0,0,
        0,2673,2451,1,0,0,0,2673,2457,1,0,0,0,2673,2463,1,0,0,0,2673,2464,
        1,0,0,0,2673,2465,1,0,0,0,2673,2466,1,0,0,0,2673,2467,1,0,0,0,2673,
        2481,1,0,0,0,2673,2488,1,0,0,0,2673,2499,1,0,0,0,2673,2508,1,0,0,
        0,2673,2515,1,0,0,0,2673,2519,1,0,0,0,2673,2532,1,0,0,0,2673,2543,
        1,0,0,0,2673,2564,1,0,0,0,2673,2603,1,0,0,0,2673,2644,1,0,0,0,2674,
        2685,1,0,0,0,2675,2676,10,24,0,0,2676,2677,5,8,0,0,2677,2678,3,132,
        66,0,2678,2679,5,9,0,0,2679,2684,1,0,0,0,2680,2681,10,22,0,0,2681,
        2682,5,1,0,0,2682,2684,3,256,128,0,2683,2675,1,0,0,0,2683,2680,1,
        0,0,0,2684,2687,1,0,0,0,2685,2683,1,0,0,0,2685,2686,1,0,0,0,2686,
        135,1,0,0,0,2687,2685,1,0,0,0,2688,2689,3,138,69,0,2689,2690,5,4,
        0,0,2690,2693,3,158,79,0,2691,2692,5,28,0,0,2692,2694,3,256,128,
        0,2693,2691,1,0,0,0,2693,2694,1,0,0,0,2694,2704,1,0,0,0,2695,2696,
        5,203,0,0,2696,2701,3,142,71,0,2697,2698,5,4,0,0,2698,2700,3,142,
        71,0,2699,2697,1,0,0,0,2700,2703,1,0,0,0,2701,2699,1,0,0,0,2701,
        2702,1,0,0,0,2702,2705,1,0,0,0,2703,2701,1,0,0,0,2704,2695,1,0,0,
        0,2704,2705,1,0,0,0,2705,137,1,0,0,0,2706,2709,3,126,63,0,2707,2708,
        5,104,0,0,2708,2710,3,140,70,0,2709,2707,1,0,0,0,2709,2710,1,0,0,
        0,2710,139,1,0,0,0,2711,2714,5,137,0,0,2712,2713,5,87,0,0,2713,2715,
        7,20,0,0,2714,2712,1,0,0,0,2714,2715,1,0,0,0,2715,141,1,0,0,0,2716,
        2717,3,138,69,0,2717,2718,5,28,0,0,2718,2719,3,256,128,0,2719,143,
        1,0,0,0,2720,2721,7,21,0,0,2721,145,1,0,0,0,2722,2727,5,89,0,0,2723,
        2727,5,183,0,0,2724,2725,5,70,0,0,2725,2727,3,126,63,0,2726,2722,
        1,0,0,0,2726,2723,1,0,0,0,2726,2724,1,0,0,0,2727,147,1,0,0,0,2728,
        2730,5,306,0,0,2729,2731,5,27,0,0,2730,2729,1,0,0,0,2730,2731,1,
        0,0,0,2731,2740,1,0,0,0,2732,2734,5,304,0,0,2733,2735,7,22,0,0,2734,
        2733,1,0,0,0,2734,2735,1,0,0,0,2735,2737,1,0,0,0,2736,2738,5,27,
        0,0,2737,2736,1,0,0,0,2737,2738,1,0,0,0,2738,2740,1,0,0,0,2739,2728,
        1,0,0,0,2739,2732,1,0,0,0,2740,149,1,0,0,0,2741,2748,5,89,0,0,2742,
        2748,5,183,0,0,2743,2744,5,85,0,0,2744,2748,5,27,0,0,2745,2746,5,
        85,0,0,2746,2748,5,186,0,0,2747,2741,1,0,0,0,2747,2742,1,0,0,0,2747,
        2743,1,0,0,0,2747,2745,1,0,0,0,2748,151,1,0,0,0,2749,2751,5,145,
        0,0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2752,1,0,0,0,2752,2753,
        3,126,63,0,2753,2754,5,295,0,0,2754,2755,3,138,69,0,2755,2761,1,
        0,0,0,2756,2757,3,126,63,0,2757,2758,5,10,0,0,2758,2759,3,138,69,
        0,2759,2761,1,0,0,0,2760,2750,1,0,0,0,2760,2756,1,0,0,0,2761,153,
        1,0,0,0,2762,2763,7,23,0,0,2763,155,1,0,0,0,2764,2765,5,120,0,0,
        2765,2769,5,185,0,0,2766,2767,5,228,0,0,2767,2769,5,185,0,0,2768,
        2764,1,0,0,0,2768,2766,1,0,0,0,2769,157,1,0,0,0,2770,2777,5,326,
        0,0,2771,2774,5,327,0,0,2772,2773,5,277,0,0,2773,2775,5,326,0,0,
        2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,2777,1,0,0,0,2776,2770,
        1,0,0,0,2776,2771,1,0,0,0,2777,159,1,0,0,0,2778,2779,5,267,0,0,2779,
        2780,5,311,0,0,2780,2785,3,168,84,0,2781,2782,5,267,0,0,2782,2783,
        5,311,0,0,2783,2785,3,158,79,0,2784,2778,1,0,0,0,2784,2781,1,0,0,
        0,2785,161,1,0,0,0,2786,2787,7,24,0,0,2787,163,1,0,0,0,2788,2789,
        7,25,0,0,2789,165,1,0,0,0,2790,2791,7,26,0,0,2791,167,1,0,0,0,2792,
        2794,5,129,0,0,2793,2795,7,18,0,0,2794,2793,1,0,0,0,2794,2795,1,
        0,0,0,2795,2796,1,0,0,0,2796,2797,3,158,79,0,2797,2800,3,170,85,
        0,2798,2799,5,269,0,0,2799,2801,3,170,85,0,2800,2798,1,0,0,0,2800,
        2801,1,0,0,0,2801,169,1,0,0,0,2802,2803,7,27,0,0,2803,171,1,0,0,
        0,2804,2805,7,28,0,0,2805,173,1,0,0,0,2806,2807,6,87,-1,0,2807,2808,
        5,239,0,0,2808,2809,5,2,0,0,2809,2814,3,176,88,0,2810,2811,5,4,0,
        0,2811,2813,3,176,88,0,2812,2810,1,0,0,0,2813,2816,1,0,0,0,2814,
        2812,1,0,0,0,2814,2815,1,0,0,0,2815,2817,1,0,0,0,2816,2814,1,0,0,
        0,2817,2818,5,3,0,0,2818,2898,1,0,0,0,2819,2820,5,129,0,0,2820,2823,
        3,170,85,0,2821,2822,5,269,0,0,2822,2824,3,170,85,0,2823,2821,1,
        0,0,0,2823,2824,1,0,0,0,2824,2898,1,0,0,0,2825,2830,5,268,0,0,2826,
        2827,5,2,0,0,2827,2828,3,178,89,0,2828,2829,5,3,0,0,2829,2831,1,
        0,0,0,2830,2826,1,0,0,0,2830,2831,1,0,0,0,2831,2835,1,0,0,0,2832,
        2833,5,306,0,0,2833,2834,5,267,0,0,2834,2836,5,311,0,0,2835,2832,
        1,0,0,0,2835,2836,1,0,0,0,2836,2898,1,0,0,0,2837,2842,5,268,0,0,
        2838,2839,5,2,0,0,2839,2840,3,178,89,0,2840,2841,5,3,0,0,2841,2843,
        1,0,0,0,2842,2838,1,0,0,0,2842,2843,1,0,0,0,2843,2844,1,0,0,0,2844,
        2845,5,304,0,0,2845,2846,5,267,0,0,2846,2898,5,311,0,0,2847,2852,
        5,267,0,0,2848,2849,5,2,0,0,2849,2850,3,178,89,0,2850,2851,5,3,0,
        0,2851,2853,1,0,0,0,2852,2848,1,0,0,0,2852,2853,1,0,0,0,2853,2857,
        1,0,0,0,2854,2855,5,306,0,0,2855,2856,5,267,0,0,2856,2858,5,311,
        0,0,2857,2854,1,0,0,0,2857,2858,1,0,0,0,2858,2898,1,0,0,0,2859,2864,
        5,267,0,0,2860,2861,5,2,0,0,2861,2862,3,178,89,0,2862,2863,5,3,0,
        0,2863,2865,1,0,0,0,2864,2860,1,0,0,0,2864,2865,1,0,0,0,2865,2866,
        1,0,0,0,2866,2867,5,304,0,0,2867,2868,5,267,0,0,2868,2898,5,311,
        0,0,2869,2870,5,82,0,0,2870,2898,5,213,0,0,2871,2872,5,27,0,0,2872,
        2873,5,314,0,0,2873,2874,3,174,87,0,2874,2875,5,316,0,0,2875,2898,
        1,0,0,0,2876,2877,5,162,0,0,2877,2878,5,314,0,0,2878,2879,3,174,
        87,0,2879,2880,5,4,0,0,2880,2881,3,174,87,0,2881,2882,5,316,0,0,
        2882,2898,1,0,0,0,2883,2895,3,256,128,0,2884,2885,5,2,0,0,2885,2890,
        3,178,89,0,2886,2887,5,4,0,0,2887,2889,3,178,89,0,2888,2886,1,0,
        0,0,2889,2892,1,0,0,0,2890,2888,1,0,0,0,2890,2891,1,0,0,0,2891,2893,
        1,0,0,0,2892,2890,1,0,0,0,2893,2894,5,3,0,0,2894,2896,1,0,0,0,2895,
        2884,1,0,0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,2806,1,0,0,
        0,2897,2819,1,0,0,0,2897,2825,1,0,0,0,2897,2837,1,0,0,0,2897,2847,
        1,0,0,0,2897,2859,1,0,0,0,2897,2869,1,0,0,0,2897,2871,1,0,0,0,2897,
        2876,1,0,0,0,2897,2883,1,0,0,0,2898,2908,1,0,0,0,2899,2900,10,2,
        0,0,2900,2904,5,27,0,0,2901,2902,5,8,0,0,2902,2903,5,329,0,0,2903,
        2905,5,9,0,0,2904,2901,1,0,0,0,2904,2905,1,0,0,0,2905,2907,1,0,0,
        0,2906,2899,1,0,0,0,2907,2910,1,0,0,0,2908,2906,1,0,0,0,2908,2909,
        1,0,0,0,2909,175,1,0,0,0,2910,2908,1,0,0,0,2911,2916,3,174,87,0,
        2912,2913,3,256,128,0,2913,2914,3,174,87,0,2914,2916,1,0,0,0,2915,
        2911,1,0,0,0,2915,2912,1,0,0,0,2916,177,1,0,0,0,2917,2920,5,329,
        0,0,2918,2920,3,174,87,0,2919,2917,1,0,0,0,2919,2918,1,0,0,0,2920,
        179,1,0,0,0,2921,2922,5,300,0,0,2922,2923,3,126,63,0,2923,2924,5,
        265,0,0,2924,2925,3,126,63,0,2925,181,1,0,0,0,2926,2927,5,99,0,0,
        2927,2928,5,2,0,0,2928,2929,5,301,0,0,2929,2930,3,128,64,0,2930,
        2931,5,3,0,0,2931,183,1,0,0,0,2932,2933,5,300,0,0,2933,2936,5,164,
        0,0,2934,2935,5,25,0,0,2935,2937,3,126,63,0,2936,2934,1,0,0,0,2936,
        2937,1,0,0,0,2937,2938,1,0,0,0,2938,2939,5,265,0,0,2939,2940,5,287,
        0,0,2940,2941,5,251,0,0,2941,2942,3,256,128,0,2942,2943,5,312,0,
        0,2943,2951,3,126,63,0,2944,2945,5,4,0,0,2945,2946,3,256,128,0,2946,
        2947,5,312,0,0,2947,2948,3,126,63,0,2948,2950,1,0,0,0,2949,2944,
        1,0,0,0,2950,2953,1,0,0,0,2951,2949,1,0,0,0,2951,2952,1,0,0,0,2952,
        2997,1,0,0,0,2953,2951,1,0,0,0,2954,2955,5,300,0,0,2955,2958,5,164,
        0,0,2956,2957,5,25,0,0,2957,2959,3,126,63,0,2958,2956,1,0,0,0,2958,
        2959,1,0,0,0,2959,2960,1,0,0,0,2960,2961,5,265,0,0,2961,2997,5,73,
        0,0,2962,2963,5,300,0,0,2963,2964,5,182,0,0,2964,2967,5,164,0,0,
        2965,2966,5,25,0,0,2966,2968,3,126,63,0,2967,2965,1,0,0,0,2967,2968,
        1,0,0,0,2968,2969,1,0,0,0,2969,2970,5,265,0,0,2970,2982,5,127,0,
        0,2971,2972,5,2,0,0,2972,2977,3,256,128,0,2973,2974,5,4,0,0,2974,
        2976,3,256,128,0,2975,2973,1,0,0,0,2976,2979,1,0,0,0,2977,2975,1,
        0,0,0,2977,2978,1,0,0,0,2978,2980,1,0,0,0,2979,2977,1,0,0,0,2980,
        2981,5,3,0,0,2981,2983,1,0,0,0,2982,2971,1,0,0,0,2982,2983,1,0,0,
        0,2983,2984,1,0,0,0,2984,2985,5,296,0,0,2985,2986,5,2,0,0,2986,2991,
        3,126,63,0,2987,2988,5,4,0,0,2988,2990,3,126,63,0,2989,2987,1,0,
        0,0,2990,2993,1,0,0,0,2991,2989,1,0,0,0,2991,2992,1,0,0,0,2992,2994,
        1,0,0,0,2993,2991,1,0,0,0,2994,2995,5,3,0,0,2995,2997,1,0,0,0,2996,
        2932,1,0,0,0,2996,2954,1,0,0,0,2996,2962,1,0,0,0,2997,185,1,0,0,
        0,2998,3004,5,199,0,0,2999,3005,3,256,128,0,3000,3001,5,2,0,0,3001,
        3002,3,58,29,0,3002,3003,5,3,0,0,3003,3005,1,0,0,0,3004,2999,1,0,
        0,0,3004,3000,1,0,0,0,3005,187,1,0,0,0,3006,3007,5,168,0,0,3007,
        3012,3,84,42,0,3008,3009,5,4,0,0,3009,3011,3,84,42,0,3010,3008,1,
        0,0,0,3011,3014,1,0,0,0,3012,3010,1,0,0,0,3012,3013,1,0,0,0,3013,
        3016,1,0,0,0,3014,3012,1,0,0,0,3015,3006,1,0,0,0,3015,3016,1,0,0,
        0,3016,3017,1,0,0,0,3017,3021,3,190,95,0,3018,3019,5,21,0,0,3019,
        3020,5,163,0,0,3020,3022,3,90,45,0,3021,3018,1,0,0,0,3021,3022,1,
        0,0,0,3022,3024,1,0,0,0,3023,3025,7,13,0,0,3024,3023,1,0,0,0,3024,
        3025,1,0,0,0,3025,3031,1,0,0,0,3026,3027,5,206,0,0,3027,3028,5,2,
        0,0,3028,3029,3,194,97,0,3029,3030,5,3,0,0,3030,3032,1,0,0,0,3031,
        3026,1,0,0,0,3031,3032,1,0,0,0,3032,3042,1,0,0,0,3033,3034,5,257,
        0,0,3034,3039,3,92,46,0,3035,3036,5,4,0,0,3036,3038,3,92,46,0,3037,
        3035,1,0,0,0,3038,3041,1,0,0,0,3039,3037,1,0,0,0,3039,3040,1,0,0,
        0,3040,3043,1,0,0,0,3041,3039,1,0,0,0,3042,3033,1,0,0,0,3042,3043,
        1,0,0,0,3043,3053,1,0,0,0,3044,3045,5,71,0,0,3045,3050,3,94,47,0,
        3046,3047,5,4,0,0,3047,3049,3,94,47,0,3048,3046,1,0,0,0,3049,3052,
        1,0,0,0,3050,3048,1,0,0,0,3050,3051,1,0,0,0,3051,3054,1,0,0,0,3052,
        3050,1,0,0,0,3053,3044,1,0,0,0,3053,3054,1,0,0,0,3054,189,1,0,0,
        0,3055,3056,5,219,0,0,3056,3080,3,192,96,0,3057,3058,5,240,0,0,3058,
        3080,3,192,96,0,3059,3060,5,116,0,0,3060,3080,3,192,96,0,3061,3062,
        5,219,0,0,3062,3063,5,34,0,0,3063,3064,3,192,96,0,3064,3065,5,25,
        0,0,3065,3066,3,192,96,0,3066,3080,1,0,0,0,3067,3068,5,240,0,0,3068,
        3069,5,34,0,0,3069,3070,3,192,96,0,3070,3071,5,25,0,0,3071,3072,
        3,192,96,0,3072,3080,1,0,0,0,3073,3074,5,116,0,0,3074,3075,5,34,
        0,0,3075,3076,3,192,96,0,3076,3077,5,25,0,0,3077,3078,3,192,96,0,
        3078,3080,1,0,0,0,3079,3055,1,0,0,0,3079,3057,1,0,0,0,3079,3059,
        1,0,0,0,3079,3061,1,0,0,0,3079,3067,1,0,0,0,3079,3073,1,0,0,0,3080,
        191,1,0,0,0,3081,3082,5,278,0,0,3082,3091,5,212,0,0,3083,3084,5,
        278,0,0,3084,3091,5,102,0,0,3085,3086,5,56,0,0,3086,3091,5,239,0,
        0,3087,3088,3,126,63,0,3088,3089,7,29,0,0,3089,3091,1,0,0,0,3090,
        3081,1,0,0,0,3090,3083,1,0,0,0,3090,3085,1,0,0,0,3090,3087,1,0,0,
        0,3091,193,1,0,0,0,3092,3093,6,97,-1,0,3093,3095,3,196,98,0,3094,
        3096,3,198,99,0,3095,3094,1,0,0,0,3095,3096,1,0,0,0,3096,3104,1,
        0,0,0,3097,3098,10,2,0,0,3098,3103,3,194,97,3,3099,3100,10,1,0,0,
        3100,3101,5,11,0,0,3101,3103,3,194,97,2,3102,3097,1,0,0,0,3102,3099,
        1,0,0,0,3103,3106,1,0,0,0,3104,3102,1,0,0,0,3104,3105,1,0,0,0,3105,
        195,1,0,0,0,3106,3104,1,0,0,0,3107,3133,3,256,128,0,3108,3109,5,
        2,0,0,3109,3133,5,3,0,0,3110,3111,5,209,0,0,3111,3112,5,2,0,0,3112,
        3117,3,194,97,0,3113,3114,5,4,0,0,3114,3116,3,194,97,0,3115,3113,
        1,0,0,0,3116,3119,1,0,0,0,3117,3115,1,0,0,0,3117,3118,1,0,0,0,3118,
        3120,1,0,0,0,3119,3117,1,0,0,0,3120,3121,5,3,0,0,3121,3133,1,0,0,
        0,3122,3123,5,2,0,0,3123,3124,3,194,97,0,3124,3125,5,3,0,0,3125,
        3133,1,0,0,0,3126,3133,5,12,0,0,3127,3133,5,13,0,0,3128,3129,5,14,
        0,0,3129,3130,3,194,97,0,3130,3131,5,15,0,0,3131,3133,1,0,0,0,3132,
        3107,1,0,0,0,3132,3108,1,0,0,0,3132,3110,1,0,0,0,3132,3122,1,0,0,
        0,3132,3126,1,0,0,0,3132,3127,1,0,0,0,3132,3128,1,0,0,0,3133,197,
        1,0,0,0,3134,3136,5,320,0,0,3135,3137,5,324,0,0,3136,3135,1,0,0,
        0,3136,3137,1,0,0,0,3137,3165,1,0,0,0,3138,3140,5,318,0,0,3139,3141,
        5,324,0,0,3140,3139,1,0,0,0,3140,3141,1,0,0,0,3141,3165,1,0,0,0,
        3142,3144,5,324,0,0,3143,3145,5,324,0,0,3144,3143,1,0,0,0,3144,3145,
        1,0,0,0,3145,3165,1,0,0,0,3146,3147,5,16,0,0,3147,3148,5,329,0,0,
        3148,3150,5,17,0,0,3149,3151,5,324,0,0,3150,3149,1,0,0,0,3150,3151,
        1,0,0,0,3151,3165,1,0,0,0,3152,3154,5,16,0,0,3153,3155,5,329,0,0,
        3154,3153,1,0,0,0,3154,3155,1,0,0,0,3155,3156,1,0,0,0,3156,3158,
        5,4,0,0,3157,3159,5,329,0,0,3158,3157,1,0,0,0,3158,3159,1,0,0,0,
        3159,3160,1,0,0,0,3160,3162,5,17,0,0,3161,3163,5,324,0,0,3162,3161,
        1,0,0,0,3162,3163,1,0,0,0,3163,3165,1,0,0,0,3164,3134,1,0,0,0,3164,
        3138,1,0,0,0,3164,3142,1,0,0,0,3164,3146,1,0,0,0,3164,3152,1,0,0,
        0,3165,199,1,0,0,0,3166,3167,3,256,128,0,3167,3168,5,312,0,0,3168,
        3169,3,126,63,0,3169,201,1,0,0,0,3170,3171,5,104,0,0,3171,3175,7,
        30,0,0,3172,3173,5,276,0,0,3173,3175,7,31,0,0,3174,3170,1,0,0,0,
        3174,3172,1,0,0,0,3175,203,1,0,0,0,3176,3177,5,134,0,0,3177,3178,
        5,153,0,0,3178,3182,3,206,103,0,3179,3180,5,220,0,0,3180,3182,7,
        32,0,0,3181,3176,1,0,0,0,3181,3179,1,0,0,0,3182,205,1,0,0,0,3183,
        3184,5,220,0,0,3184,3191,5,279,0,0,3185,3186,5,220,0,0,3186,3191,
        5,48,0,0,3187,3188,5,225,0,0,3188,3191,5,220,0,0,3189,3191,5,249,
        0,0,3190,3183,1,0,0,0,3190,3185,1,0,0,0,3190,3187,1,0,0,0,3190,3189,
        1,0,0,0,3191,207,1,0,0,0,3192,3198,3,126,63,0,3193,3194,3,256,128,
        0,3194,3195,5,6,0,0,3195,3196,3,126,63,0,3196,3198,1,0,0,0,3197,
        3192,1,0,0,0,3197,3193,1,0,0,0,3198,209,1,0,0,0,3199,3200,3,256,
        128,0,3200,3201,5,1,0,0,3201,3202,3,256,128,0,3202,3205,1,0,0,0,
        3203,3205,3,256,128,0,3204,3199,1,0,0,0,3204,3203,1,0,0,0,3205,211,
        1,0,0,0,3206,3211,3,210,105,0,3207,3208,5,4,0,0,3208,3210,3,210,
        105,0,3209,3207,1,0,0,0,3210,3213,1,0,0,0,3211,3209,1,0,0,0,3211,
        3212,1,0,0,0,3212,213,1,0,0,0,3213,3211,1,0,0,0,3214,3215,5,107,
        0,0,3215,3216,3,216,108,0,3216,3220,3,220,110,0,3217,3219,3,222,
        111,0,3218,3217,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,0,0,3220,
        3221,1,0,0,0,3221,3223,1,0,0,0,3222,3220,1,0,0,0,3223,3224,3,224,
        112,0,3224,215,1,0,0,0,3225,3226,3,242,121,0,3226,3235,5,2,0,0,3227,
        3232,3,218,109,0,3228,3229,5,4,0,0,3229,3231,3,218,109,0,3230,3228,
        1,0,0,0,3231,3234,1,0,0,0,3232,3230,1,0,0,0,3232,3233,1,0,0,0,3233,
        3236,1,0,0,0,3234,3232,1,0,0,0,3235,3227,1,0,0,0,3235,3236,1,0,0,
        0,3236,3237,1,0,0,0,3237,3238,5,3,0,0,3238,217,1,0,0,0,3239,3241,
        3,256,128,0,3240,3239,1,0,0,0,3240,3241,1,0,0,0,3241,3242,1,0,0,
        0,3242,3243,3,174,87,0,3243,219,1,0,0,0,3244,3245,5,232,0,0,3245,
        3246,3,174,87,0,3246,221,1,0,0,0,3247,3248,5,147,0,0,3248,3267,3,
        256,128,0,3249,3251,5,182,0,0,3250,3249,1,0,0,0,3250,3251,1,0,0,
        0,3251,3252,1,0,0,0,3252,3267,5,78,0,0,3253,3254,5,232,0,0,3254,
        3255,5,183,0,0,3255,3256,5,190,0,0,3256,3257,5,183,0,0,3257,3267,
        5,126,0,0,3258,3259,5,38,0,0,3259,3260,5,190,0,0,3260,3261,5,183,
        0,0,3261,3267,5,126,0,0,3262,3263,5,246,0,0,3263,3267,7,1,0,0,3264,
        3265,5,46,0,0,3265,3267,3,158,79,0,3266,3247,1,0,0,0,3266,3250,1,
        0,0,0,3266,3253,1,0,0,0,3266,3258,1,0,0,0,3266,3262,1,0,0,0,3266,
        3264,1,0,0,0,3267,223,1,0,0,0,3268,3269,5,230,0,0,3269,3368,3,132,
        66,0,3270,3271,5,251,0,0,3271,3272,3,256,128,0,3272,3273,5,312,0,
        0,3273,3274,3,126,63,0,3274,3368,1,0,0,0,3275,3276,5,40,0,0,3276,
        3278,3,126,63,0,3277,3279,3,226,113,0,3278,3277,1,0,0,0,3279,3280,
        1,0,0,0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,3283,1,0,0,0,3282,
        3284,3,230,115,0,3283,3282,1,0,0,0,3283,3284,1,0,0,0,3284,3285,1,
        0,0,0,3285,3286,5,88,0,0,3286,3287,5,40,0,0,3287,3368,1,0,0,0,3288,
        3290,5,40,0,0,3289,3291,3,226,113,0,3290,3289,1,0,0,0,3291,3292,
        1,0,0,0,3292,3290,1,0,0,0,3292,3293,1,0,0,0,3293,3295,1,0,0,0,3294,
        3296,3,230,115,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3297,1,
        0,0,0,3297,3298,5,88,0,0,3298,3299,5,40,0,0,3299,3368,1,0,0,0,3300,
        3301,5,119,0,0,3301,3302,3,126,63,0,3302,3303,5,265,0,0,3303,3307,
        3,234,117,0,3304,3306,3,228,114,0,3305,3304,1,0,0,0,3306,3309,1,
        0,0,0,3307,3305,1,0,0,0,3307,3308,1,0,0,0,3308,3311,1,0,0,0,3309,
        3307,1,0,0,0,3310,3312,3,230,115,0,3311,3310,1,0,0,0,3311,3312,1,
        0,0,0,3312,3313,1,0,0,0,3313,3314,5,88,0,0,3314,3315,5,119,0,0,3315,
        3368,1,0,0,0,3316,3317,5,135,0,0,3317,3368,3,256,128,0,3318,3319,
        5,151,0,0,3319,3368,3,256,128,0,3320,3326,5,32,0,0,3321,3322,3,232,
        116,0,3322,3323,5,325,0,0,3323,3325,1,0,0,0,3324,3321,1,0,0,0,3325,
        3328,1,0,0,0,3326,3324,1,0,0,0,3326,3327,1,0,0,0,3327,3330,1,0,0,
        0,3328,3326,1,0,0,0,3329,3331,3,234,117,0,3330,3329,1,0,0,0,3330,
        3331,1,0,0,0,3331,3332,1,0,0,0,3332,3368,5,88,0,0,3333,3334,3,256,
        128,0,3334,3335,5,10,0,0,3335,3337,1,0,0,0,3336,3333,1,0,0,0,3336,
        3337,1,0,0,0,3337,3338,1,0,0,0,3338,3339,5,161,0,0,3339,3340,3,234,
        117,0,3340,3341,5,88,0,0,3341,3342,5,161,0,0,3342,3368,1,0,0,0,3343,
        3344,3,256,128,0,3344,3345,5,10,0,0,3345,3347,1,0,0,0,3346,3343,
        1,0,0,0,3346,3347,1,0,0,0,3347,3348,1,0,0,0,3348,3349,5,302,0,0,
        3349,3350,3,126,63,0,3350,3351,5,81,0,0,3351,3352,3,234,117,0,3352,
        3353,5,88,0,0,3353,3354,5,302,0,0,3354,3368,1,0,0,0,3355,3356,3,
        256,128,0,3356,3357,5,10,0,0,3357,3359,1,0,0,0,3358,3355,1,0,0,0,
        3358,3359,1,0,0,0,3359,3360,1,0,0,0,3360,3361,5,224,0,0,3361,3362,
        3,234,117,0,3362,3363,5,286,0,0,3363,3364,3,126,63,0,3364,3365,5,
        88,0,0,3365,3366,5,224,0,0,3366,3368,1,0,0,0,3367,3268,1,0,0,0,3367,
        3270,1,0,0,0,3367,3275,1,0,0,0,3367,3288,1,0,0,0,3367,3300,1,0,0,
        0,3367,3316,1,0,0,0,3367,3318,1,0,0,0,3367,3320,1,0,0,0,3367,3336,
        1,0,0,0,3367,3346,1,0,0,0,3367,3358,1,0,0,0,3368,225,1,0,0,0,3369,
        3370,5,300,0,0,3370,3371,3,126,63,0,3371,3372,5,265,0,0,3372,3373,
        3,234,117,0,3373,227,1,0,0,0,3374,3375,5,86,0,0,3375,3376,3,126,
        63,0,3376,3377,5,265,0,0,3377,3378,3,234,117,0,3378,229,1,0,0,0,
        3379,3380,5,84,0,0,3380,3381,3,234,117,0,3381,231,1,0,0,0,3382,3383,
        5,69,0,0,3383,3388,3,256,128,0,3384,3385,5,4,0,0,3385,3387,3,256,
        128,0,3386,3384,1,0,0,0,3387,3390,1,0,0,0,3388,3386,1,0,0,0,3388,
        3389,1,0,0,0,3389,3391,1,0,0,0,3390,3388,1,0,0,0,3391,3394,3,174,
        87,0,3392,3393,5,70,0,0,3393,3395,3,132,66,0,3394,3392,1,0,0,0,3394,
        3395,1,0,0,0,3395,233,1,0,0,0,3396,3397,3,224,112,0,3397,3398,5,
        325,0,0,3398,3400,1,0,0,0,3399,3396,1,0,0,0,3400,3401,1,0,0,0,3401,
        3399,1,0,0,0,3401,3402,1,0,0,0,3402,235,1,0,0,0,3403,3410,5,53,0,
        0,3404,3410,5,248,0,0,3405,3410,5,73,0,0,3406,3410,5,127,0,0,3407,
        3410,5,287,0,0,3408,3410,3,256,128,0,3409,3403,1,0,0,0,3409,3404,
        1,0,0,0,3409,3405,1,0,0,0,3409,3406,1,0,0,0,3409,3407,1,0,0,0,3409,
        3408,1,0,0,0,3410,237,1,0,0,0,3411,3415,5,260,0,0,3412,3415,5,243,
        0,0,3413,3415,3,256,128,0,3414,3411,1,0,0,0,3414,3412,1,0,0,0,3414,
        3413,1,0,0,0,3415,239,1,0,0,0,3416,3418,3,238,119,0,3417,3416,1,
        0,0,0,3417,3418,1,0,0,0,3418,3419,1,0,0,0,3419,3420,3,242,121,0,
        3420,241,1,0,0,0,3421,3426,3,256,128,0,3422,3423,5,1,0,0,3423,3425,
        3,256,128,0,3424,3422,1,0,0,0,3425,3428,1,0,0,0,3426,3424,1,0,0,
        0,3426,3427,1,0,0,0,3427,243,1,0,0,0,3428,3426,1,0,0,0,3429,3430,
        5,103,0,0,3430,3431,3,246,123,0,3431,3432,5,28,0,0,3432,3433,5,187,
        0,0,3433,3434,3,132,66,0,3434,245,1,0,0,0,3435,3436,7,33,0,0,3436,
        247,1,0,0,0,3437,3441,3,250,125,0,3438,3441,5,64,0,0,3439,3441,5,
        60,0,0,3440,3437,1,0,0,0,3440,3438,1,0,0,0,3440,3439,1,0,0,0,3441,
        249,1,0,0,0,3442,3448,3,256,128,0,3443,3444,5,289,0,0,3444,3448,
        3,256,128,0,3445,3446,5,235,0,0,3446,3448,3,256,128,0,3447,3442,
        1,0,0,0,3447,3443,1,0,0,0,3447,3445,1,0,0,0,3448,251,1,0,0,0,3449,
        3454,3,256,128,0,3450,3451,5,4,0,0,3451,3453,3,256,128,0,3452,3450,
        1,0,0,0,3453,3456,1,0,0,0,3454,3452,1,0,0,0,3454,3455,1,0,0,0,3455,
        253,1,0,0,0,3456,3454,1,0,0,0,3457,3464,5,53,0,0,3458,3464,5,248,
        0,0,3459,3464,5,73,0,0,3460,3464,5,127,0,0,3461,3464,5,287,0,0,3462,
        3464,3,256,128,0,3463,3457,1,0,0,0,3463,3458,1,0,0,0,3463,3459,1,
        0,0,0,3463,3460,1,0,0,0,3463,3461,1,0,0,0,3463,3462,1,0,0,0,3464,
        255,1,0,0,0,3465,3471,5,332,0,0,3466,3471,5,334,0,0,3467,3471,3,
        262,131,0,3468,3471,5,335,0,0,3469,3471,5,333,0,0,3470,3465,1,0,
        0,0,3470,3466,1,0,0,0,3470,3467,1,0,0,0,3470,3468,1,0,0,0,3470,3469,
        1,0,0,0,3471,257,1,0,0,0,3472,3474,5,319,0,0,3473,3472,1,0,0,0,3473,
        3474,1,0,0,0,3474,3475,1,0,0,0,3475,3485,5,330,0,0,3476,3478,5,319,
        0,0,3477,3476,1,0,0,0,3477,3478,1,0,0,0,3478,3479,1,0,0,0,3479,3485,
        5,331,0,0,3480,3482,5,319,0,0,3481,3480,1,0,0,0,3481,3482,1,0,0,
        0,3482,3483,1,0,0,0,3483,3485,5,329,0,0,3484,3473,1,0,0,0,3484,3477,
        1,0,0,0,3484,3481,1,0,0,0,3485,259,1,0,0,0,3486,3489,3,256,128,0,
        3487,3489,3,158,79,0,3488,3486,1,0,0,0,3488,3487,1,0,0,0,3489,261,
        1,0,0,0,3490,3491,7,34,0,0,3491,263,1,0,0,0,458,295,302,306,310,
        316,320,327,332,336,342,346,365,371,375,379,383,391,395,398,403,
        409,418,424,428,434,441,450,462,471,480,486,497,505,513,520,530,
        537,545,560,595,598,601,605,611,616,623,629,633,637,645,651,655,
        669,677,696,721,724,731,738,747,751,758,766,775,781,786,790,798,
        803,812,818,825,834,840,844,850,857,862,875,880,892,896,902,911,
        916,922,946,952,954,960,966,968,976,978,988,990,1005,1010,1017,1027,
        1033,1035,1043,1045,1070,1073,1077,1081,1099,1102,1113,1116,1132,
        1142,1147,1153,1156,1165,1167,1170,1180,1184,1190,1197,1202,1208,
        1212,1216,1222,1233,1242,1252,1255,1260,1262,1269,1275,1277,1281,
        1291,1297,1300,1302,1314,1321,1325,1329,1333,1340,1349,1352,1356,
        1361,1365,1373,1376,1379,1386,1397,1400,1410,1413,1424,1429,1437,
        1440,1444,1453,1462,1465,1474,1477,1480,1484,1495,1498,1505,1508,
        1527,1531,1535,1539,1543,1547,1549,1560,1565,1574,1583,1586,1592,
        1604,1607,1616,1619,1627,1630,1633,1638,1641,1653,1656,1664,1669,
        1673,1675,1677,1692,1694,1705,1726,1736,1747,1751,1753,1761,1768,
        1781,1787,1813,1828,1833,1837,1847,1853,1859,1867,1872,1879,1881,
        1887,1893,1897,1902,1911,1916,1930,1940,1943,1952,1957,1962,1964,
        1973,1976,1984,1987,1994,1999,2010,2013,2017,2019,2027,2037,2043,
        2045,2052,2056,2058,2065,2069,2071,2073,2082,2093,2097,2107,2117,
        2121,2129,2131,2144,2152,2161,2167,2175,2181,2185,2190,2195,2201,
        2215,2217,2247,2258,2266,2271,2276,2289,2295,2298,2305,2310,2313,
        2316,2321,2328,2331,2340,2343,2347,2350,2353,2368,2371,2390,2394,
        2402,2406,2431,2434,2443,2449,2455,2461,2470,2473,2476,2495,2504,
        2526,2529,2539,2548,2554,2560,2571,2573,2578,2585,2587,2593,2599,
        2610,2619,2624,2629,2631,2633,2639,2641,2651,2660,2662,2668,2670,
        2673,2683,2685,2693,2701,2704,2709,2714,2726,2730,2734,2737,2739,
        2747,2750,2760,2768,2774,2776,2784,2794,2800,2814,2823,2830,2835,
        2842,2852,2857,2864,2890,2895,2897,2904,2908,2915,2919,2936,2951,
        2958,2967,2977,2982,2991,2996,3004,3012,3015,3021,3024,3031,3039,
        3042,3050,3053,3079,3090,3095,3102,3104,3117,3132,3136,3140,3144,
        3150,3154,3158,3162,3164,3174,3181,3190,3197,3204,3211,3220,3232,
        3235,3240,3250,3266,3280,3283,3292,3295,3307,3311,3326,3330,3336,
        3346,3358,3367,3388,3394,3401,3409,3414,3417,3426,3440,3447,3454,
        3463,3470,3473,3477,3481,3484,3488
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!TrinoSQLParser.__ATN) {
            TrinoSQLParser.__ATN = new antlr.ATNDeserializer().deserialize(TrinoSQLParser._serializedATN);
        }

        return TrinoSQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(TrinoSQLParser.literalNames, TrinoSQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return TrinoSQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = TrinoSQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_singleStatement;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_standaloneExpression;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStandaloneExpression) {
             listener.enterStandaloneExpression(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStandaloneExpression) {
             listener.exitStandaloneExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStandaloneExpression) {
            return visitor.visitStandaloneExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandalonePathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_standalonePathSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStandalonePathSpecification) {
             listener.enterStandalonePathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStandalonePathSpecification) {
             listener.exitStandalonePathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStandalonePathSpecification) {
            return visitor.visitStandalonePathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_standaloneType;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStandaloneType) {
             listener.enterStandaloneType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStandaloneType) {
             listener.exitStandaloneType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStandaloneType) {
            return visitor.visitStandaloneType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneRowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_standaloneRowPattern;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStandaloneRowPattern) {
             listener.enterStandaloneRowPattern(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStandaloneRowPattern) {
             listener.exitStandaloneRowPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStandaloneRowPattern) {
            return visitor.visitStandaloneRowPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneFunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_standaloneFunctionSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStandaloneFunctionSpecification) {
             listener.enterStandaloneFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStandaloneFunctionSpecification) {
             listener.exitStandaloneFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStandaloneFunctionSpecification) {
            return visitor.visitStandaloneFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExplain) {
             listener.enterExplain(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExplain) {
             listener.exitExplain(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrepareContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPrepare) {
             listener.enterPrepare(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPrepare) {
             listener.exitPrepare(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPrepare) {
            return visitor.visitPrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetMaterializedViewProperties) {
             listener.enterSetMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetMaterializedViewProperties) {
             listener.exitSetMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetMaterializedViewProperties) {
            return visitor.visitSetMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropNotNullConstraintContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _columnName?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode[];
    public ALTER(i: number): antlr.TerminalNode | null;
    public ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ALTER);
    	} else {
    		return this.getToken(TrinoSQLParser.ALTER, i);
    	}
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NOT, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NULL, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropNotNullConstraint) {
             listener.enterDropNotNullConstraint(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropNotNullConstraint) {
             listener.exitDropNotNullConstraint(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropNotNullConstraint) {
            return visitor.visitDropNotNullConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseContext extends StatementContext {
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.USE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUse) {
             listener.enterUse(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUse) {
             listener.exitUse(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUse) {
            return visitor.visitUse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeallocateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DEALLOCATE, 0)!;
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDeallocate) {
             listener.enterDeallocate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDeallocate) {
             listener.exitDeallocate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDeallocate) {
            return visitor.visitDeallocate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommitContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMIT, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WORK, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCommit) {
             listener.enterCommit(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCommit) {
             listener.exitCommit(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCommit) {
            return visitor.visitCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ADMIN, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.IF);
    	} else {
    		return this.getToken(TrinoSQLParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.EXISTS);
    	} else {
    		return this.getToken(TrinoSQLParser.EXISTS, i);
    	}
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropColumn) {
             listener.enterDropColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropColumn) {
             listener.exitDropColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropColumn) {
            return visitor.visitDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLES, 0)!;
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetViewAuthorizationContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetViewAuthorization) {
             listener.enterSetViewAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetViewAuthorization) {
             listener.exitSetViewAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetViewAuthorization) {
            return visitor.visitSetViewAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public CATALOGS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CATALOGS, 0)!;
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public ROLES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLES, 0)!;
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CURRENT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MERGE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MERGE, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INTO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.USING, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public mergeCase(): MergeCaseContext[];
    public mergeCase(i: number): MergeCaseContext | null;
    public mergeCase(i?: number): MergeCaseContext[] | MergeCaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeCaseContext);
        }

        return this.getRuleContext(i, MergeCaseContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMerge) {
             listener.enterMerge(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMerge) {
             listener.exitMerge(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMerge) {
            return visitor.visitMerge(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _from_?: QualifiedNameContext;
    public _to?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.IF);
    	} else {
    		return this.getToken(TrinoSQLParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.EXISTS);
    	} else {
    		return this.getToken(TrinoSQLParser.EXISTS, i);
    	}
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRenameColumn) {
             listener.enterRenameColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRenameColumn) {
             listener.exitRenameColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCommentColumn) {
             listener.enterCommentColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCommentColumn) {
             listener.exitCommentColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCommentColumn) {
            return visitor.visitCommentColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.REVOKE, 0)!;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOR, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRevokeRoles) {
             listener.enterRevokeRoles(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRevokeRoles) {
             listener.exitRevokeRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoles) {
            return visitor.visitRevokeRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SHOW, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COLUMNS, 0);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DESC, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoleGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLE, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GRANTS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: ColumnDefinitionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.IF);
    	} else {
    		return this.getToken(TrinoSQLParser.IF, i);
    	}
    }
    public EXISTS(): antlr.TerminalNode[];
    public EXISTS(i: number): antlr.TerminalNode | null;
    public EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.EXISTS);
    	} else {
    		return this.getToken(TrinoSQLParser.EXISTS, i);
    	}
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAddColumn) {
             listener.enterAddColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAddColumn) {
             listener.exitAddColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAddColumn) {
            return visitor.visitAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DenyContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DENY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DENY, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRIVILEGES, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDeny) {
             listener.enterDeny(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDeny) {
             listener.exitDeny(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDeny) {
            return visitor.visitDeny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RESET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterResetSession) {
             listener.enterResetSession(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitResetSession) {
             listener.exitResetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitResetSession) {
            return visitor.visitResetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertIntoContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INTO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSessionContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SESSION, 0)!;
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowSession) {
             listener.enterShowSession(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowSession) {
             listener.exitShowSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowSession) {
            return visitor.visitShowSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateSchema) {
             listener.enterCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateSchema) {
             listener.exitCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateSchema) {
            return visitor.visitCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SESSION, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0)!;
    }
    public authorizationUser(): AuthorizationUserContext {
        return this.getRuleContext(0, AuthorizationUserContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetSessionAuthorization) {
             listener.enterSetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetSessionAuthorization) {
             listener.exitSetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetSessionAuthorization) {
            return visitor.visitSetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainAnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXPLAIN, 0)!;
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ANALYZE, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VERBOSE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExplainAnalyze) {
             listener.enterExplainAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExplainAnalyze) {
             listener.exitExplainAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainAnalyze) {
            return visitor.visitExplainAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXECUTE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExecute) {
             listener.enterExecute(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExecute) {
             listener.exitExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExecute) {
            return visitor.visitExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRenameSchema) {
             listener.enterRenameSchema(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRenameSchema) {
             listener.exitRenameSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameSchema) {
            return visitor.visitRenameSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ANALYZE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetRoleContext extends StatementContext {
    public _role?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLE, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NONE, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CATALOG, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CASCADE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESTRICT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public GRANTS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GRANTS, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public grantObject(): GrantObjectContext | null {
        return this.getRuleContext(0, GrantObjectContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CASCADE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESTRICT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropSchema) {
             listener.enterDropSchema(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropSchema) {
             listener.exitDropSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropSchema) {
            return visitor.visitDropSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RESET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SESSION, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterResetSessionAuthorization) {
             listener.enterResetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitResetSessionAuthorization) {
             listener.exitResetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitResetSessionAuthorization) {
            return visitor.visitResetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableAuthorizationContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetTableAuthorization) {
             listener.enterSetTableAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetTableAuthorization) {
             listener.exitSetTableAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetTableAuthorization) {
            return visitor.visitSetTableAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowCreateView) {
             listener.enterShowCreateView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowCreateView) {
             listener.exitShowCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantPrivilegesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode[];
    public GRANT(i: number): antlr.TerminalNode | null;
    public GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.GRANT);
    	} else {
    		return this.getToken(TrinoSQLParser.GRANT, i);
    	}
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRIVILEGES, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OPTION, 0);
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGrantPrivileges) {
             listener.enterGrantPrivileges(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGrantPrivileges) {
             listener.exitGrantPrivileges(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantPrivileges) {
            return visitor.visitGrantPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StartTransactionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.START, 0)!;
    }
    public TRANSACTION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TRANSACTION, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStartTransaction) {
             listener.enterStartTransaction(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStartTransaction) {
             listener.exitStartTransaction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableAsSelectContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public rootQuery(): RootQueryContext | null {
        return this.getRuleContext(0, RootQueryContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.WITH);
    	} else {
    		return this.getToken(TrinoSQLParser.WITH, i);
    	}
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DATA, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NO, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateTableAsSelect) {
             listener.enterCreateTableAsSelect(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateTableAsSelect) {
             listener.exitCreateTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCommentView) {
             listener.enterCommentView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCommentView) {
             listener.exitCommentView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCommentView) {
            return visitor.visitCommentView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FOR, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowStats) {
             listener.enterShowStats(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowStats) {
             listener.exitShowStats(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowStats) {
            return visitor.visitShowStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowCreateSchema) {
             listener.enterShowCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowCreateSchema) {
             listener.exitShowCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCreateSchema) {
            return visitor.visitShowCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokePrivilegesContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.REVOKE, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRIVILEGES, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOR, 0);
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRevokePrivileges) {
             listener.enterRevokePrivileges(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRevokePrivileges) {
             listener.exitRevokePrivileges(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRevokePrivileges) {
            return visitor.visitRevokePrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FUNCTION, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends StatementContext {
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UPDATE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUpdate) {
             listener.enterUpdate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUpdate) {
             listener.exitUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExecuteContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _procedureName?: IdentifierContext;
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXECUTE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableExecute) {
             listener.enterTableExecute(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableExecute) {
             listener.exitTableExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableExecute) {
            return visitor.visitTableExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHERE, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDelete) {
             listener.enterDelete(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDelete) {
             listener.exitDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeInputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DESCRIBE, 0)!;
    }
    public INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDescribeInput) {
             listener.enterDescribeInput(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDescribeInput) {
             listener.exitDescribeInput(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDescribeInput) {
            return visitor.visitDescribeInput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsForQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.STATS, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FOR, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowStatsForQuery) {
             listener.enterShowStatsForQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowStatsForQuery) {
             listener.exitShowStatsForQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowStatsForQuery) {
            return visitor.visitShowStatsForQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetColumnTypeContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _columnName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode[];
    public ALTER(i: number): antlr.TerminalNode | null;
    public ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ALTER);
    	} else {
    		return this.getToken(TrinoSQLParser.ALTER, i);
    	}
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMN, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public DATA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DATA, 0)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TYPE, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetColumnType) {
             listener.enterSetColumnType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetColumnType) {
             listener.exitSetColumnType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetColumnType) {
            return visitor.visitSetColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ZONE, 0)!;
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LOCAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TRUNCATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public GRACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRACE, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PERIOD, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetSession) {
             listener.enterSetSession(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetSession) {
             listener.exitSetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetSession) {
            return visitor.visitSetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SECURITY, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INVOKER, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameMaterializedViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRenameMaterializedView) {
             listener.enterRenameMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRenameMaterializedView) {
             listener.exitRenameMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameMaterializedView) {
            return visitor.visitRenameMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemasContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public SCHEMAS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMAS, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowSchemas) {
             listener.enterShowSchemas(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowSchemas) {
             listener.exitShowSchemas(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowSchemas) {
            return visitor.visitShowSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DROP, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSchemaAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SCHEMA, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetSchemaAuthorization) {
             listener.enterSetSchemaAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetSchemaAuthorization) {
             listener.exitSetSchemaAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetSchemaAuthorization) {
            return visitor.visitSetSchemaAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollbackContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLBACK(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLLBACK, 0)!;
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WORK, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRollback) {
             listener.enterRollback(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRollback) {
             listener.exitRollback(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRollback) {
            return visitor.visitRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteImmediateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXECUTE, 0)!;
    }
    public IMMEDIATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IMMEDIATE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExecuteImmediate) {
             listener.enterExecuteImmediate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExecuteImmediate) {
             listener.exitExecuteImmediate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExecuteImmediate) {
            return visitor.visitExecuteImmediate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRenameView) {
             listener.enterRenameView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRenameView) {
             listener.exitRenameView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRenameView) {
            return visitor.visitRenameView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPathContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public PATH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PATH, 0)!;
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetPath) {
             listener.enterSetPath(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetPath) {
             listener.exitSetPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetPath) {
            return visitor.visitSetPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GRANT, 0)!;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TO, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OPTION, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANTED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGrantRoles) {
             listener.enterGrantRoles(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGrantRoles) {
             listener.exitGrantRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantRoles) {
            return visitor.visitGrantRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CALL, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCall) {
             listener.enterCall(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCall) {
             listener.exitCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.REFRESH, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VIEW, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public _connectorName?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CREATE, 0)!;
    }
    public CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CATALOG, 0)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.USING, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXISTS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SHOW, 0)!;
    }
    public FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FUNCTIONS, 0)!;
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeOutputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DESCRIBE, 0)!;
    }
    public OUTPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.OUTPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDescribeOutput) {
             listener.enterDescribeOutput(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDescribeOutput) {
             listener.exitDescribeOutput(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDescribeOutput) {
            return visitor.visitDescribeOutput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public PROPERTIES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RootQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public withFunction(): WithFunctionContext | null {
        return this.getRuleContext(0, WithFunctionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rootQuery;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRootQuery) {
             listener.enterRootQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRootQuery) {
             listener.exitRootQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRootQuery) {
            return visitor.visitRootQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WITH, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext[];
    public functionSpecification(i: number): FunctionSpecificationContext | null;
    public functionSpecification(i?: number): FunctionSpecificationContext[] | FunctionSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionSpecificationContext);
        }

        return this.getRuleContext(i, FunctionSpecificationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_withFunction;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWithFunction) {
             listener.enterWithFunction(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWithFunction) {
             listener.exitWithFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWithFunction) {
            return visitor.visitWithFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public with(): WithContext | null {
        return this.getRuleContext(0, WithContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_query;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RECURSIVE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_with;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWith) {
             listener.enterWith(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWith) {
             listener.exitWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWith) {
            return visitor.visitWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_tableElement;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_columnDefinition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public _optionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LIKE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PROPERTIES, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INCLUDING, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXCLUDING, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_likeClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_properties;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterProperties) {
             listener.enterProperties(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitProperties) {
             listener.exitProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitProperties) {
            return visitor.visitProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyAssignmentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_propertyAssignments;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPropertyAssignments) {
             listener.enterPropertyAssignments(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPropertyAssignments) {
             listener.exitPropertyAssignments(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPropertyAssignments) {
            return visitor.visitPropertyAssignments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EQ, 0)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_property;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_propertyValue;
    }
    public override copyFrom(ctx: PropertyValueContext): void {
        super.copyFrom(ctx);
    }
}
export class DefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DEFAULT, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDefaultPropertyValue) {
             listener.enterDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDefaultPropertyValue) {
             listener.exitDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDefaultPropertyValue) {
            return visitor.visitDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNonDefaultPropertyValue) {
             listener.enterNonDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNonDefaultPropertyValue) {
             listener.exitNonDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNonDefaultPropertyValue) {
            return visitor.visitNonDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryNoWithContext extends antlr.ParserRuleContext {
    public _offset?: RowCountContext;
    public _limit?: LimitRowCountContext;
    public _fetchFirst?: RowCountContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OFFSET, 0);
    }
    public rowCount(): RowCountContext[];
    public rowCount(i: number): RowCountContext | null;
    public rowCount(i?: number): RowCountContext[] | RowCountContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowCountContext);
        }

        return this.getRuleContext(i, RowCountContext);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIMIT, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FETCH, 0);
    }
    public limitRowCount(): LimitRowCountContext | null {
        return this.getRuleContext(0, LimitRowCountContext);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FIRST, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode[];
    public ROW(i: number): antlr.TerminalNode | null;
    public ROW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ROW);
    	} else {
    		return this.getToken(TrinoSQLParser.ROW, i);
    	}
    }
    public ROWS(): antlr.TerminalNode[];
    public ROWS(i: number): antlr.TerminalNode | null;
    public ROWS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ROWS);
    	} else {
    		return this.getToken(TrinoSQLParser.ROWS, i);
    	}
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ONLY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_queryNoWith;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQueryNoWith) {
             listener.enterQueryNoWith(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQueryNoWith) {
             listener.exitQueryNoWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryNoWith) {
            return visitor.visitQueryNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitRowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public rowCount(): RowCountContext | null {
        return this.getRuleContext(0, RowCountContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_limitRowCount;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLimitRowCount) {
             listener.enterLimitRowCount(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLimitRowCount) {
             listener.exitLimitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLimitRowCount) {
            return visitor.visitLimitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUESTION_MARK, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rowCount;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRowCount) {
             listener.enterRowCount(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRowCount) {
             listener.exitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRowCount) {
            return visitor.visitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQueryTermDefault) {
             listener.enterQueryTermDefault(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQueryTermDefault) {
             listener.exitQueryTermDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTERSECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNION, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXCEPT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetOperation) {
             listener.enterSetOperation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetOperation) {
             listener.exitSetOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQueryPrimaryDefault) {
             listener.enterQueryPrimaryDefault(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQueryPrimaryDefault) {
             listener.exitQueryPrimaryDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTable) {
             listener.enterTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTable) {
             listener.exitTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTable) {
            return visitor.visitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrdering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULLS, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_sortItem;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public _having?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SELECT, 0)!;
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHERE, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GROUP, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public groupBy(): GroupByContext | null {
        return this.getRuleContext(0, GroupByContext);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.HAVING, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WINDOW, 0);
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_querySpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_groupBy;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGroupBy) {
             listener.enterGroupBy(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGroupBy) {
             listener.exitGroupBy(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupBy) {
            return visitor.visitGroupBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_groupingElement;
    }
    public override copyFrom(ctx: GroupingElementContext): void {
        super.copyFrom(ctx);
    }
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SETS, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMultipleGroupingSets) {
             listener.enterMultipleGroupingSets(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMultipleGroupingSets) {
             listener.exitMultipleGroupingSets(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMultipleGroupingSets) {
            return visitor.visitMultipleGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleGroupingSetContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingSet(): GroupingSetContext {
        return this.getRuleContext(0, GroupingSetContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSingleGroupingSet) {
             listener.enterSingleGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSingleGroupingSet) {
             listener.exitSingleGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSingleGroupingSet) {
            return visitor.visitSingleGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CubeContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CUBE, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCube) {
             listener.enterCube(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCube) {
             listener.exitCube(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCube) {
            return visitor.visitCube(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollupContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLLUP, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRollup) {
             listener.enterRollup(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRollup) {
             listener.exitRollup(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRollup) {
            return visitor.visitRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_groupingSet;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_windowDefinition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public _existingWindowName?: IdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.BY);
    	} else {
    		return this.getToken(TrinoSQLParser.BY, i);
    	}
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_windowSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWindowSpecification) {
             listener.enterWindowSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWindowSpecification) {
             listener.exitWindowSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_namedQuery;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DISTINCT, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_setQuantifier;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_selectItem;
    }
    public override copyFrom(ctx: SelectItemContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectAllContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ASTERISK, 0)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSelectAll) {
             listener.enterSelectAll(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSelectAll) {
             listener.exitSelectAll(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectAll) {
            return visitor.visitSelectAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectSingleContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSelectSingle) {
             listener.enterSelectSingle(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSelectSingle) {
             listener.exitSelectSingle(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSelectSingle) {
            return visitor.visitSelectSingle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_relation;
    }
    public override copyFrom(ctx: RelationContext): void {
        super.copyFrom(ctx);
    }
}
export class RelationDefaultContext extends RelationContext {
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sampledRelation(): SampledRelationContext {
        return this.getRuleContext(0, SampledRelationContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRelationDefault) {
             listener.enterRelationDefault(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRelationDefault) {
             listener.exitRelationDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRelationDefault) {
            return visitor.visitRelationDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinRelationContext extends RelationContext {
    public _left?: RelationContext;
    public _right?: SampledRelationContext;
    public _rightRelation?: RelationContext;
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.JOIN, 0);
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NATURAL, 0);
    }
    public sampledRelation(): SampledRelationContext | null {
        return this.getRuleContext(0, SampledRelationContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INNER, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LEFT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OUTER, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FULL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_joinType;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.USING, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_joinCriteria;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampledRelationContext extends antlr.ParserRuleContext {
    public _percentage?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public patternRecognition(): PatternRecognitionContext {
        return this.getRuleContext(0, PatternRecognitionContext)!;
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TABLESAMPLE, 0);
    }
    public sampleType(): SampleTypeContext | null {
        return this.getRuleContext(0, SampleTypeContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_sampledRelation;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSampledRelation) {
             listener.enterSampledRelation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSampledRelation) {
             listener.exitSampledRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSampledRelation) {
            return visitor.visitSampledRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BERNOULLI, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_sampleType;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSampleType) {
             listener.enterSampleType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSampleType) {
             listener.exitSampleType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSampleType) {
            return visitor.visitSampleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRAILING, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BOTH, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_trimsSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTrimsSpecification) {
             listener.enterTrimsSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTrimsSpecification) {
             listener.exitTrimsSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTrimsSpecification) {
            return visitor.visitTrimsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggOverflowBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRUNCATE, 0);
    }
    public listaggCountIndication(): ListaggCountIndicationContext | null {
        return this.getRuleContext(0, ListaggCountIndicationContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_listAggOverflowBehavior;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterListAggOverflowBehavior) {
             listener.enterListAggOverflowBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitListAggOverflowBehavior) {
             listener.exitListAggOverflowBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitListAggOverflowBehavior) {
            return visitor.visitListAggOverflowBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListaggCountIndicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public COUNT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COUNT, 0)!;
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_listaggCountIndication;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterListaggCountIndication) {
             listener.enterListaggCountIndication(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitListaggCountIndication) {
             listener.exitListaggCountIndication(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitListaggCountIndication) {
            return visitor.visitListaggCountIndication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternRecognitionContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasedRelation(): AliasedRelationContext {
        return this.getRuleContext(0, AliasedRelationContext)!;
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCH_RECOGNIZE, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.BY);
    	} else {
    		return this.getToken(TrinoSQLParser.BY, i);
    	}
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public rowsPerMatch(): RowsPerMatchContext | null {
        return this.getRuleContext(0, RowsPerMatchContext);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SEEK, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_patternRecognition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPatternRecognition) {
             listener.enterPatternRecognition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPatternRecognition) {
             listener.exitPatternRecognition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternRecognition) {
            return visitor.visitPatternRecognition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasureDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_measureDefinition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMeasureDefinition) {
             listener.enterMeasureDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMeasureDefinition) {
             listener.exitMeasureDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMeasureDefinition) {
            return visitor.visitMeasureDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsPerMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ONE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROW, 0);
    }
    public PER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PER, 0)!;
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATCH, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROWS, 0);
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext | null {
        return this.getRuleContext(0, EmptyMatchHandlingContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rowsPerMatch;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRowsPerMatch) {
             listener.enterRowsPerMatch(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRowsPerMatch) {
             listener.exitRowsPerMatch(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRowsPerMatch) {
            return visitor.visitRowsPerMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyMatchHandlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SHOW, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCHES, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNMATCHED, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_emptyMatchHandling;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterEmptyMatchHandling) {
             listener.enterEmptyMatchHandling(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitEmptyMatchHandling) {
             listener.exitEmptyMatchHandling(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitEmptyMatchHandling) {
            return visitor.visitEmptyMatchHandling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipToContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TO, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NEXT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROW, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PAST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LAST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FIRST, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_skipTo;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSkipTo) {
             listener.enterSkipTo(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSkipTo) {
             listener.exitSkipTo(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSkipTo) {
            return visitor.visitSkipTo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubsetDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _union: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EQ, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_subsetDefinition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubsetDefinition) {
             listener.enterSubsetDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubsetDefinition) {
             listener.exitSubsetDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubsetDefinition) {
            return visitor.visitSubsetDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_variableDefinition;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterVariableDefinition) {
             listener.enterVariableDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitVariableDefinition) {
             listener.exitVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasedRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_aliasedRelation;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAliasedRelation) {
             listener.enterAliasedRelation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAliasedRelation) {
             listener.exitAliasedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAliasedRelation) {
            return visitor.visitAliasedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_columnAliases;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterColumnAliases) {
             listener.enterColumnAliases(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitColumnAliases) {
             listener.exitColumnAliases(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubqueryRelation) {
             listener.enterSubqueryRelation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubqueryRelation) {
             listener.exitSubqueryRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubqueryRelation) {
            return visitor.visitSubqueryRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonTableContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_TABLE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PLAN, 0);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFAULT, 0);
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext | null {
        return this.getRuleContext(0, JsonTableDefaultPlanContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public ERROR(): antlr.TerminalNode[];
    public ERROR(i: number): antlr.TerminalNode | null;
    public ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ERROR);
    	} else {
    		return this.getToken(TrinoSQLParser.ERROR, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonTable) {
             listener.enterJsonTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonTable) {
             listener.exitJsonTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonTable) {
            return visitor.visitJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterParenthesizedRelation) {
             listener.enterParenthesizedRelation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitParenthesizedRelation) {
             listener.exitParenthesizedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedRelation) {
            return visitor.visitParenthesizedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnnestContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNNEST(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UNNEST, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDINALITY, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnnest) {
             listener.enterUnnest(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnnest) {
             listener.exitUnnest(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnnest) {
            return visitor.visitUnnest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableFunctionInvocationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        return this.getRuleContext(0, TableFunctionCallContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableFunctionInvocation) {
             listener.enterTableFunctionInvocation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableFunctionInvocation) {
             listener.exitTableFunctionInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionInvocation) {
            return visitor.visitTableFunctionInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LATERAL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LATERAL, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLateral) {
             listener.enterLateral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLateral) {
             listener.exitLateral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLateral) {
            return visitor.visitLateral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableNameContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public queryPeriod(): QueryPeriodContext | null {
        return this.getRuleContext(0, QueryPeriodContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonTableColumn;
    }
    public override copyFrom(ctx: JsonTableColumnContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FORMAT, 0)!;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        return this.getRuleContext(0, JsonRepresentationContext)!;
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WRAPPER, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUOTES, 0);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ON);
    	} else {
    		return this.getToken(TrinoSQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEEP, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCALAR, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TEXT_STRING, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQueryColumn) {
             listener.enterQueryColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQueryColumn) {
             listener.exitQueryColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryColumn) {
            return visitor.visitQueryColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedColumnsContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NESTED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NESTED, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public COLUMNS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATH, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNestedColumns) {
             listener.enterNestedColumns(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNestedColumns) {
             listener.exitNestedColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNestedColumns) {
            return visitor.visitNestedColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValueColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ON);
    	} else {
    		return this.getToken(TrinoSQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterValueColumn) {
             listener.enterValueColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitValueColumn) {
             listener.exitValueColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitValueColumn) {
            return visitor.visitValueColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrdinalityColumnContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FOR, 0)!;
    }
    public ORDINALITY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ORDINALITY, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterOrdinalityColumn) {
             listener.enterOrdinalityColumn(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitOrdinalityColumn) {
             listener.exitOrdinalityColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitOrdinalityColumn) {
            return visitor.visitOrdinalityColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableSpecificPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonTableSpecificPlan;
    }
    public override copyFrom(ctx: JsonTableSpecificPlanContext): void {
        super.copyFrom(ctx);
    }
}
export class CrossPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public CROSS(): antlr.TerminalNode[];
    public CROSS(i: number): antlr.TerminalNode | null;
    public CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.CROSS);
    	} else {
    		return this.getToken(TrinoSQLParser.CROSS, i);
    	}
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCrossPlan) {
             listener.enterCrossPlan(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCrossPlan) {
             listener.exitCrossPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCrossPlan) {
            return visitor.visitCrossPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public planPrimary(): PlanPrimaryContext {
        return this.getRuleContext(0, PlanPrimaryContext)!;
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OUTER, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INNER, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJoinPlan) {
             listener.enterJoinPlan(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJoinPlan) {
             listener.exitJoinPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJoinPlan) {
            return visitor.visitJoinPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeafPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLeafPlan) {
             listener.enterLeafPlan(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLeafPlan) {
             listener.exitLeafPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLeafPlan) {
            return visitor.visitLeafPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnionPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.UNION);
    	} else {
    		return this.getToken(TrinoSQLParser.UNION, i);
    	}
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnionPlan) {
             listener.enterUnionPlan(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnionPlan) {
             listener.exitUnionPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnionPlan) {
            return visitor.visitUnionPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTablePathNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonTablePathName;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonTablePathName) {
             listener.enterJsonTablePathName(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonTablePathName) {
             listener.exitJsonTablePathName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonTablePathName) {
            return visitor.visitJsonTablePathName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlanPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonTablePathName(): JsonTablePathNameContext | null {
        return this.getRuleContext(0, JsonTablePathNameContext);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_planPrimary;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPlanPrimary) {
             listener.enterPlanPrimary(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPlanPrimary) {
             listener.exitPlanPrimary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPlanPrimary) {
            return visitor.visitPlanPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableDefaultPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OUTER, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INNER, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNION, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CROSS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonTableDefaultPlan;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonTableDefaultPlan) {
             listener.enterJsonTableDefaultPlan(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonTableDefaultPlan) {
             listener.exitJsonTableDefaultPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonTableDefaultPlan) {
            return visitor.visitJsonTableDefaultPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext[];
    public tableFunctionArgument(i: number): TableFunctionArgumentContext | null;
    public tableFunctionArgument(i?: number): TableFunctionArgumentContext[] | TableFunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFunctionArgumentContext);
        }

        return this.getRuleContext(i, TableFunctionArgumentContext);
    }
    public COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COPARTITION, 0);
    }
    public copartitionTables(): CopartitionTablesContext[];
    public copartitionTables(i: number): CopartitionTablesContext | null;
    public copartitionTables(i?: number): CopartitionTablesContext[] | CopartitionTablesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopartitionTablesContext);
        }

        return this.getRuleContext(i, CopartitionTablesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_tableFunctionCall;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableFunctionCall) {
             listener.enterTableFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableFunctionCall) {
             listener.exitTableFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionCall) {
            return visitor.visitTableFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgument(): TableArgumentContext | null {
        return this.getRuleContext(0, TableArgumentContext);
    }
    public descriptorArgument(): DescriptorArgumentContext | null {
        return this.getRuleContext(0, DescriptorArgumentContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_tableFunctionArgument;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableFunctionArgument) {
             listener.enterTableFunctionArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableFunctionArgument) {
             listener.exitTableFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionArgument) {
            return visitor.visitTableFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        return this.getRuleContext(0, TableArgumentRelationContext)!;
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PARTITION, 0);
    }
    public BY(): antlr.TerminalNode[];
    public BY(i: number): antlr.TerminalNode | null;
    public BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.BY);
    	} else {
    		return this.getToken(TrinoSQLParser.BY, i);
    	}
    }
    public PRUNE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRUNE, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHEN, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEEP, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_tableArgument;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableArgument) {
             listener.enterTableArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableArgument) {
             listener.exitTableArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableArgument) {
            return visitor.visitTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_tableArgumentRelation;
    }
    public override copyFrom(ctx: TableArgumentRelationContext): void {
        super.copyFrom(ctx);
    }
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableArgumentQuery) {
             listener.enterTableArgumentQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableArgumentQuery) {
             listener.exitTableArgumentQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentQuery) {
            return visitor.visitTableArgumentQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TABLE, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTableArgumentTable) {
             listener.enterTableArgumentTable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTableArgumentTable) {
             listener.exitTableArgumentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentTable) {
            return visitor.visitTableArgumentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESCRIPTOR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DESCRIPTOR, 0)!;
    }
    public descriptorField(): DescriptorFieldContext[];
    public descriptorField(i: number): DescriptorFieldContext | null;
    public descriptorField(i?: number): DescriptorFieldContext[] | DescriptorFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DescriptorFieldContext);
        }

        return this.getRuleContext(i, DescriptorFieldContext);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CAST, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_descriptorArgument;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDescriptorArgument) {
             listener.enterDescriptorArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDescriptorArgument) {
             listener.exitDescriptorArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDescriptorArgument) {
            return visitor.visitDescriptorArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_descriptorField;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDescriptorField) {
             listener.enterDescriptorField(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDescriptorField) {
             listener.exitDescriptorField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDescriptorField) {
            return visitor.visitDescriptorField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopartitionTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_copartitionTables;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCopartitionTables) {
             listener.enterCopartitionTables(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCopartitionTables) {
             listener.exitCopartitionTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCopartitionTables) {
            return visitor.visitCopartitionTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_expression;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.OR, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterOr) {
             listener.enterOr(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitOr) {
             listener.exitOr(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AND, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAnd) {
             listener.enterAnd(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAnd) {
             listener.exitAnd(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAnd) {
            return visitor.visitAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LIKE, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IS, 0)!;
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DISTINCT, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IS, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NULL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        return this.getRuleContext(0, ComparisonQuantifierContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONCAT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CONCAT, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PLUS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public AT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AT, 0)!;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        return this.getRuleContext(0, TimeZoneSpecifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDereference) {
             listener.enterDereference(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDereference) {
             listener.exitDereference(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DOUBLE, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRECISION, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTypeConstructor) {
             listener.enterTypeConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTypeConstructor) {
             listener.exitTypeConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_VALUE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ON);
    	} else {
    		return this.getToken(TrinoSQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonValue) {
             listener.enterJsonValue(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonValue) {
             listener.exitJsonValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonValue) {
            return visitor.visitJsonValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentDateContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_DATE, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentDate) {
             listener.enterCurrentDate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentDate) {
             listener.exitCurrentDate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentDate) {
            return visitor.visitCurrentDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstringContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SUBSTRING, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOR, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubstring) {
             listener.enterSubstring(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubstring) {
             listener.exitSubstring(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubstring) {
            return visitor.visitSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CAST, 0);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRY_CAST, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLambda) {
             listener.enterLambda(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLambda) {
             listener.exitLambda(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimContext extends PrimaryExpressionContext {
    public _trimChar?: ValueExpressionContext;
    public _trimSource?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TRIM, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FROM, 0);
    }
    public trimsSpecification(): TrimsSpecificationContext | null {
        return this.getRuleContext(0, TrimsSpecificationContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTrim) {
             listener.enterTrim(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTrim) {
             listener.exitTrim(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTrim) {
            return visitor.visitTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.QUESTION_MARK, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterParameter) {
             listener.enterParameter(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitParameter) {
             listener.exitParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizeContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NORMALIZE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NORMALIZE, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNormalize) {
             listener.enterNormalize(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNormalize) {
             listener.exitNormalize(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNormalize) {
            return visitor.visitNormalize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LOCALTIMESTAMP, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLocalTimestamp) {
             listener.enterLocalTimestamp(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLocalTimestamp) {
             listener.exitLocalTimestamp(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLocalTimestamp) {
            return visitor.visitLocalTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonObjectContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_OBJECT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_OBJECT, 0)!;
    }
    public jsonObjectMember(): JsonObjectMemberContext[];
    public jsonObjectMember(i: number): JsonObjectMemberContext | null;
    public jsonObjectMember(i?: number): JsonObjectMemberContext[] | JsonObjectMemberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonObjectMemberContext);
        }

        return this.getRuleContext(i, JsonObjectMemberContext);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.NULL);
    	} else {
    		return this.getToken(TrinoSQLParser.NULL, i);
    	}
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ABSENT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNIQUE, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHOUT, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEYS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonObject) {
             listener.enterJsonObject(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonObject) {
             listener.exitJsonObject(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonObject) {
            return visitor.visitJsonObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNumericLiteral) {
             listener.enterNumericLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNumericLiteral) {
             listener.exitNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonArrayContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_ARRAY, 0)!;
    }
    public jsonValueExpression(): JsonValueExpressionContext[];
    public jsonValueExpression(i: number): JsonValueExpressionContext | null;
    public jsonValueExpression(i?: number): JsonValueExpressionContext[] | JsonValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueExpressionContext);
        }

        return this.getRuleContext(i, JsonValueExpressionContext);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.NULL);
    	} else {
    		return this.getToken(TrinoSQLParser.NULL, i);
    	}
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ABSENT, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonArray) {
             listener.enterJsonArray(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonArray) {
             listener.exitJsonArray(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonArray) {
            return visitor.visitJsonArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _operand?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ELSE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NULL, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RowConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROW, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRowConstructor) {
             listener.enterRowConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRowConstructor) {
             listener.exitRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubscript) {
             listener.enterSubscript(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubscript) {
             listener.exitSubscript(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_EXISTS, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | null {
        return this.getRuleContext(0, JsonExistsErrorBehaviorContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonExists) {
             listener.enterJsonExists(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonExists) {
             listener.exitJsonExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonExists) {
            return visitor.visitJsonExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentPathContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_PATH(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_PATH, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentPath) {
             listener.enterCurrentPath(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentPath) {
             listener.exitCurrentPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentPath) {
            return visitor.visitCurrentPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_LITERAL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.BINARY_LITERAL, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBinaryLiteral) {
             listener.enterBinaryLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBinaryLiteral) {
             listener.exitBinaryLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBinaryLiteral) {
            return visitor.visitBinaryLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_TIME, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentTime) {
             listener.enterCurrentTime(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentTime) {
             listener.exitCurrentTime(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentTime) {
            return visitor.visitCurrentTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOCALTIME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LOCALTIME, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLocalTime) {
             listener.enterLocalTime(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLocalTime) {
             listener.exitLocalTime(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLocalTime) {
            return visitor.visitLocalTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_USER, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentUser) {
             listener.enterCurrentUser(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentUser) {
             listener.exitCurrentUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonQueryContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON_QUERY, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WRAPPER, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUOTES, 0);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.ON);
    	} else {
    		return this.getToken(TrinoSQLParser.ON, i);
    	}
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEEP, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCALAR, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TEXT_STRING, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonQuery) {
             listener.enterJsonQuery(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonQuery) {
             listener.exitJsonQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonQuery) {
            return visitor.visitJsonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MeasureContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public over(): OverContext {
        return this.getRuleContext(0, OverContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMeasure) {
             listener.enterMeasure(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMeasure) {
             listener.exitMeasure(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMeasure) {
            return visitor.visitMeasure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXTRACT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExtract) {
             listener.enterExtract(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExtract) {
             listener.exitExtract(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ARRAY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterArrayConstructor) {
             listener.enterArrayConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitArrayConstructor) {
             listener.exitArrayConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitArrayConstructor) {
            return visitor.visitArrayConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public _label?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ASTERISK, 0);
    }
    public processingMode(): ProcessingModeContext | null {
        return this.getRuleContext(0, ProcessingModeContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public over(): OverContext | null {
        return this.getRuleContext(0, OverContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_TIMESTAMP, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentTimestamp) {
             listener.enterCurrentTimestamp(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentTimestamp) {
             listener.exitCurrentTimestamp(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentTimestamp) {
            return visitor.visitCurrentTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_SCHEMA, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentSchema) {
             listener.enterCurrentSchema(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentSchema) {
             listener.exitCurrentSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchema) {
            return visitor.visitCurrentSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EXISTS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExists) {
             listener.enterExists(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExists) {
             listener.exitExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public POSITION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.POSITION, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.IN, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPosition) {
             listener.enterPosition(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPosition) {
             listener.exitPosition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListaggContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LISTAGG(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LISTAGG, 0)!;
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHIN, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GROUP, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ON, 0);
    }
    public OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OVERFLOW, 0);
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | null {
        return this.getRuleContext(0, ListAggOverflowBehaviorContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterListagg) {
             listener.enterListagg(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitListagg) {
             listener.exitListagg(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitListagg) {
            return visitor.visitListagg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ELSE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_CATALOG, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentCatalog) {
             listener.enterCurrentCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentCatalog) {
             listener.exitCurrentCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentCatalog) {
            return visitor.visitCurrentCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupingOperationContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GROUPING, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonPathInvocationContext extends antlr.ParserRuleContext {
    public _path?: StringContext;
    public _pathName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AS, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PASSING, 0);
    }
    public jsonArgument(): JsonArgumentContext[];
    public jsonArgument(i: number): JsonArgumentContext | null;
    public jsonArgument(i?: number): JsonArgumentContext[] | JsonArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonArgumentContext);
        }

        return this.getRuleContext(i, JsonArgumentContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonPathInvocation;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonPathInvocation) {
             listener.enterJsonPathInvocation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonPathInvocation) {
             listener.exitJsonPathInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonPathInvocation) {
            return visitor.visitJsonPathInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonValueExpression;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonValueExpression) {
             listener.enterJsonValueExpression(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonValueExpression) {
             listener.exitJsonValueExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonValueExpression) {
            return visitor.visitJsonValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonRepresentationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.JSON, 0)!;
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ENCODING, 0);
    }
    public UTF8(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF8, 0);
    }
    public UTF16(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF16, 0);
    }
    public UTF32(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF32, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonRepresentation;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonRepresentation) {
             listener.enterJsonRepresentation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonRepresentation) {
             listener.exitJsonRepresentation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonRepresentation) {
            return visitor.visitJsonRepresentation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonArgument;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonArgument) {
             listener.enterJsonArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonArgument) {
             listener.exitJsonArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonArgument) {
            return visitor.visitJsonArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonExistsErrorBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FALSE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNKNOWN, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonExistsErrorBehavior;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonExistsErrorBehavior) {
             listener.enterJsonExistsErrorBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonExistsErrorBehavior) {
             listener.exitJsonExistsErrorBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonExistsErrorBehavior) {
            return visitor.visitJsonExistsErrorBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonValueBehavior;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonValueBehavior) {
             listener.enterJsonValueBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonValueBehavior) {
             listener.exitJsonValueBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonValueBehavior) {
            return visitor.visitJsonValueBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryWrapperBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHOUT, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonQueryWrapperBehavior;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonQueryWrapperBehavior) {
             listener.enterJsonQueryWrapperBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonQueryWrapperBehavior) {
             listener.exitJsonQueryWrapperBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryWrapperBehavior) {
            return visitor.visitJsonQueryWrapperBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULL, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ARRAY, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonQueryBehavior;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonQueryBehavior) {
             listener.enterJsonQueryBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonQueryBehavior) {
             listener.exitJsonQueryBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryBehavior) {
            return visitor.visitJsonQueryBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonObjectMemberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VALUE, 0);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_jsonObjectMember;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterJsonObjectMember) {
             listener.enterJsonObjectMember(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitJsonObjectMember) {
             listener.exitJsonObjectMember(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitJsonObjectMember) {
            return visitor.visitJsonObjectMember(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcessingModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RUNNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RUNNING, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FINAL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_processingMode;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterProcessingMode) {
             listener.enterProcessingMode(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitProcessingMode) {
             listener.exitProcessingMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitProcessingMode) {
            return visitor.visitProcessingMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IGNORE, 0);
    }
    public NULLS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NULLS, 0)!;
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESPECT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_nullTreatment;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_string;
    }
    public override copyFrom(ctx: StringContext): void {
        super.copyFrom(ctx);
    }
}
export class UnicodeStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNICODE_STRING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UNICODE_STRING, 0)!;
    }
    public UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UESCAPE, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.STRING, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnicodeStringLiteral) {
             listener.enterUnicodeStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnicodeStringLiteral) {
             listener.exitUnicodeStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnicodeStringLiteral) {
            return visitor.visitUnicodeStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BasicStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.STRING, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBasicStringLiteral) {
             listener.enterBasicStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBasicStringLiteral) {
             listener.exitBasicStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBasicStringLiteral) {
            return visitor.visitBasicStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneSpecifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_timeZoneSpecifier;
    }
    public override copyFrom(ctx: TimeZoneSpecifierContext): void {
        super.copyFrom(ctx);
    }
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ZONE, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTimeZoneInterval) {
             listener.enterTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTimeZoneInterval) {
             listener.exitTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneInterval) {
            return visitor.visitTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ZONE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTimeZoneString) {
             listener.enterTimeZoneString(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTimeZoneString) {
             listener.exitTimeZoneString(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NEQ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GTE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SOME, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ANY, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_comparisonQuantifier;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterComparisonQuantifier) {
             listener.enterComparisonQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitComparisonQuantifier) {
             listener.exitComparisonQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitComparisonQuantifier) {
            return visitor.visitComparisonQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_booleanValue;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INTERVAL, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TO, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_interval;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.YEAR, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MONTH, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DAY, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.HOUR, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUTE, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SECOND, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_intervalField;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIntervalField) {
             listener.enterIntervalField(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIntervalField) {
             listener.exitIntervalField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalField) {
            return visitor.visitIntervalField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFD, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFKD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFKC, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_normalForm;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNormalForm) {
             listener.enterNormalForm(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNormalForm) {
             listener.exitNormalForm(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_type;
    }
    public override copyFrom(ctx: TypeContext): void {
        super.copyFrom(ctx);
    }
}
export class RowTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROW, 0)!;
    }
    public rowField(): RowFieldContext[];
    public rowField(i: number): RowFieldContext | null;
    public rowField(i?: number): RowFieldContext[] | RowFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFieldContext);
        }

        return this.getRuleContext(i, RowFieldContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRowType) {
             listener.enterRowType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRowType) {
             listener.exitRowType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRowType) {
            return visitor.visitRowType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalTypeContext extends TypeContext {
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INTERVAL, 0)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TO, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIntervalType) {
             listener.enterIntervalType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIntervalType) {
             listener.exitIntervalType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ARRAY, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterArrayType) {
             listener.enterArrayType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitArrayType) {
             listener.exitArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePrecisionTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DOUBLE, 0)!;
    }
    public PRECISION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PRECISION, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDoublePrecisionType) {
             listener.enterDoublePrecisionType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDoublePrecisionType) {
             listener.exitDoublePrecisionType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDoublePrecisionType) {
            return visitor.visitDoublePrecisionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ARRAY, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LT, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GT, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLegacyArrayType) {
             listener.enterLegacyArrayType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLegacyArrayType) {
             listener.exitLegacyArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLegacyArrayType) {
            return visitor.visitLegacyArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GenericTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public typeParameter(): TypeParameterContext[];
    public typeParameter(i: number): TypeParameterContext | null;
    public typeParameter(i?: number): TypeParameterContext[] | TypeParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }

        return this.getRuleContext(i, TypeParameterContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGenericType) {
             listener.enterGenericType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGenericType) {
             listener.exitGenericType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGenericType) {
            return visitor.visitGenericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateTimeTypeContext extends TypeContext {
    public _base?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIMESTAMP, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHOUT, 0);
    }
    public TIME(): antlr.TerminalNode[];
    public TIME(i: number): antlr.TerminalNode | null;
    public TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.TIME);
    	} else {
    		return this.getToken(TrinoSQLParser.TIME, i);
    	}
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ZONE, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITH, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDateTimeType) {
             listener.enterDateTimeType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDateTimeType) {
             listener.exitDateTimeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDateTimeType) {
            return visitor.visitDateTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyMapTypeContext extends TypeContext {
    public _keyType?: TypeContext;
    public _valueType?: TypeContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAP(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MAP, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LT, 0)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.GT, 0)!;
    }
    public type_(): TypeContext[];
    public type_(i: number): TypeContext | null;
    public type_(i?: number): TypeContext[] | TypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeContext);
        }

        return this.getRuleContext(i, TypeContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLegacyMapType) {
             listener.enterLegacyMapType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLegacyMapType) {
             listener.exitLegacyMapType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLegacyMapType) {
            return visitor.visitLegacyMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rowField;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRowField) {
             listener.enterRowField(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRowField) {
             listener.exitRowField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRowField) {
            return visitor.visitRowField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_typeParameter;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTypeParameter) {
             listener.enterTypeParameter(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTypeParameter) {
             listener.exitTypeParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHEN, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_whenClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FILTER, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_filter;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterFilter) {
             listener.enterFilter(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitFilter) {
             listener.exitFilter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitFilter) {
            return visitor.visitFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_mergeCase;
    }
    public override copyFrom(ctx: MergeCaseContext): void {
        super.copyFrom(ctx);
    }
}
export class MergeInsertContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHEN, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NOT, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INSERT, 0)!;
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AND, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMergeInsert) {
             listener.enterMergeInsert(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMergeInsert) {
             listener.exitMergeInsert(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeUpdateContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UPDATE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public EQ(): antlr.TerminalNode[];
    public EQ(i: number): antlr.TerminalNode | null;
    public EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.EQ);
    	} else {
    		return this.getToken(TrinoSQLParser.EQ, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AND, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMergeUpdate) {
             listener.enterMergeUpdate(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMergeUpdate) {
             listener.exitMergeUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeDeleteContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.MATCHED, 0)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DELETE, 0)!;
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterMergeDelete) {
             listener.enterMergeDelete(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitMergeDelete) {
             listener.exitMergeDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitMergeDelete) {
            return visitor.visitMergeDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverContext extends antlr.ParserRuleContext {
    public _windowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.OVER, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_over;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterOver) {
             listener.enterOver(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitOver) {
             listener.exitOver(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitOver) {
            return visitor.visitOver(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AFTER, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INITIAL, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SEEK, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_windowFrame;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RANGE, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROWS, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GROUPS, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AND, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_frameExtent;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterFrameExtent) {
             listener.enterFrameExtent(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitFrameExtent) {
             listener.exitFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_frameBound;
    }
    public override copyFrom(ctx: FrameBoundContext): void {
        super.copyFrom(ctx);
    }
}
export class BoundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOLLOWING, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBoundedFrame) {
             listener.enterBoundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBoundedFrame) {
             listener.exitBoundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBoundedFrame) {
            return visitor.visitBoundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnboundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNBOUNDED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UNBOUNDED, 0)!;
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOLLOWING, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnboundedFrame) {
             listener.enterUnboundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnboundedFrame) {
             listener.exitUnboundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnboundedFrame) {
            return visitor.visitUnboundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRowBoundContext extends FrameBoundContext {
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT, 0)!;
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROW, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentRowBound) {
             listener.enterCurrentRowBound(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentRowBound) {
             listener.exitCurrentRowBound(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentRowBound) {
            return visitor.visitCurrentRowBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rowPattern;
    }
    public override copyFrom(ctx: RowPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class QuantifiedPrimaryContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public patternPrimary(): PatternPrimaryContext {
        return this.getRuleContext(0, PatternPrimaryContext)!;
    }
    public patternQuantifier(): PatternQuantifierContext | null {
        return this.getRuleContext(0, PatternQuantifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQuantifiedPrimary) {
             listener.enterQuantifiedPrimary(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQuantifiedPrimary) {
             listener.exitQuantifiedPrimary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedPrimary) {
            return visitor.visitQuantifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternConcatenationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPatternConcatenation) {
             listener.enterPatternConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPatternConcatenation) {
             listener.exitPatternConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternConcatenation) {
            return visitor.visitPatternConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternAlternationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPatternAlternation) {
             listener.enterPatternAlternation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPatternAlternation) {
             listener.exitPatternAlternation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternAlternation) {
            return visitor.visitPatternAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_patternPrimary;
    }
    public override copyFrom(ctx: PatternPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PatternPermutationContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERMUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PERMUTE, 0)!;
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPatternPermutation) {
             listener.enterPatternPermutation(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPatternPermutation) {
             listener.exitPatternPermutation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternPermutation) {
            return visitor.visitPatternPermutation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPartitionEndAnchor) {
             listener.enterPartitionEndAnchor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPartitionEndAnchor) {
             listener.exitPartitionEndAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionEndAnchor) {
            return visitor.visitPartitionEndAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternVariableContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPatternVariable) {
             listener.enterPatternVariable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPatternVariable) {
             listener.exitPatternVariable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExcludedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExcludedPattern) {
             listener.enterExcludedPattern(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExcludedPattern) {
             listener.exitExcludedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExcludedPattern) {
            return visitor.visitExcludedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPartitionStartAnchor) {
             listener.enterPartitionStartAnchor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPartitionStartAnchor) {
             listener.exitPartitionStartAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPartitionStartAnchor) {
            return visitor.visitPartitionStartAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EmptyPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterEmptyPattern) {
             listener.enterEmptyPattern(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitEmptyPattern) {
             listener.exitEmptyPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitEmptyPattern) {
            return visitor.visitEmptyPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGroupedPattern) {
             listener.enterGroupedPattern(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGroupedPattern) {
             listener.exitGroupedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGroupedPattern) {
            return visitor.visitGroupedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_patternQuantifier;
    }
    public override copyFrom(ctx: PatternQuantifierContext): void {
        super.copyFrom(ctx);
    }
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ASTERISK, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterZeroOrMoreQuantifier) {
             listener.enterZeroOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitZeroOrMoreQuantifier) {
             listener.exitZeroOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitZeroOrMoreQuantifier) {
            return visitor.visitZeroOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.PLUS, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterOneOrMoreQuantifier) {
             listener.enterOneOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitOneOrMoreQuantifier) {
             listener.exitOneOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitOneOrMoreQuantifier) {
            return visitor.visitOneOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode[];
    public QUESTION_MARK(i: number): antlr.TerminalNode | null;
    public QUESTION_MARK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.QUESTION_MARK);
    	} else {
    		return this.getToken(TrinoSQLParser.QUESTION_MARK, i);
    	}
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterZeroOrOneQuantifier) {
             listener.enterZeroOrOneQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitZeroOrOneQuantifier) {
             listener.exitZeroOrOneQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitZeroOrOneQuantifier) {
            return visitor.visitZeroOrOneQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RangeQuantifierContext extends PatternQuantifierContext {
    public _exactly?: Token | null;
    public _reluctant?: Token | null;
    public _atLeast?: Token | null;
    public _atMost?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(TrinoSQLParser.INTEGER_VALUE, i);
    	}
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRangeQuantifier) {
             listener.enterRangeQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRangeQuantifier) {
             listener.exitRangeQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRangeQuantifier) {
            return visitor.visitRangeQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_updateAssignment;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUpdateAssignment) {
             listener.enterUpdateAssignment(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUpdateAssignment) {
             listener.exitUpdateAssignment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_explainOption;
    }
    public override copyFrom(ctx: ExplainOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainFormatContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FORMAT, 0)!;
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TEXT, 0);
    }
    public GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRAPHVIZ, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.JSON, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExplainFormat) {
             listener.enterExplainFormat(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExplainFormat) {
             listener.exitExplainFormat(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainFormat) {
            return visitor.visitExplainFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainTypeContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.TYPE, 0)!;
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LOGICAL, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DISTRIBUTED, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VALIDATE, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IO, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterExplainType) {
             listener.enterExplainType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitExplainType) {
             listener.exitExplainType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitExplainType) {
            return visitor.visitExplainType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_transactionMode;
    }
    public override copyFrom(ctx: TransactionModeContext): void {
        super.copyFrom(ctx);
    }
}
export class TransactionAccessModeContext extends TransactionModeContext {
    public _accessMode?: Token | null;
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.READ, 0)!;
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ONLY, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WRITE, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsolationLevelContext extends TransactionModeContext {
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ISOLATION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ISOLATION, 0)!;
    }
    public LEVEL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LEVEL, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_levelOfIsolation;
    }
    public override copyFrom(ctx: LevelOfIsolationContext): void {
        super.copyFrom(ctx);
    }
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.READ, 0)!;
    }
    public UNCOMMITTED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UNCOMMITTED, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterReadUncommitted) {
             listener.enterReadUncommitted(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitReadUncommitted) {
             listener.exitReadUncommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitReadUncommitted) {
            return visitor.visitReadUncommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerializableContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SERIALIZABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SERIALIZABLE, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSerializable) {
             listener.enterSerializable(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSerializable) {
             listener.exitSerializable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSerializable) {
            return visitor.visitSerializable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReadCommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.READ, 0)!;
    }
    public COMMITTED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMITTED, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterReadCommitted) {
             listener.enterReadCommitted(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitReadCommitted) {
             listener.exitReadCommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitReadCommitted) {
            return visitor.visitReadCommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatableReadContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.REPEATABLE, 0)!;
    }
    public READ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.READ, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRepeatableRead) {
             listener.enterRepeatableRead(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRepeatableRead) {
             listener.exitRepeatableRead(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRepeatableRead) {
            return visitor.visitRepeatableRead(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_callArgument;
    }
    public override copyFrom(ctx: CallArgumentContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionalArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPositionalArgument) {
             listener.enterPositionalArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPositionalArgument) {
             listener.exitPositionalArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPositionalArgument) {
            return visitor.visitPositionalArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamedArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNamedArgument) {
             listener.enterNamedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNamedArgument) {
             listener.exitNamedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNamedArgument) {
            return visitor.visitNamedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_pathElement;
    }
    public override copyFrom(ctx: PathElementContext): void {
        super.copyFrom(ctx);
    }
}
export class QualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQualifiedArgument) {
             listener.enterQualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQualifiedArgument) {
             listener.exitQualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQualifiedArgument) {
            return visitor.visitQualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnqualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnqualifiedArgument) {
             listener.enterUnqualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnqualifiedArgument) {
             listener.exitUnqualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnqualifiedArgument) {
            return visitor.visitUnqualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_pathSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPathSpecification) {
             listener.enterPathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPathSpecification) {
             listener.exitPathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPathSpecification) {
            return visitor.visitPathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FUNCTION, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public returnsClause(): ReturnsClauseContext {
        return this.getRuleContext(0, ReturnsClauseContext)!;
    }
    public controlStatement(): ControlStatementContext {
        return this.getRuleContext(0, ControlStatementContext)!;
    }
    public routineCharacteristic(): RoutineCharacteristicContext[];
    public routineCharacteristic(i: number): RoutineCharacteristicContext | null;
    public routineCharacteristic(i?: number): RoutineCharacteristicContext[] | RoutineCharacteristicContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCharacteristicContext);
        }

        return this.getRuleContext(i, RoutineCharacteristicContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_functionSpecification;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterFunctionSpecification) {
             listener.enterFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitFunctionSpecification) {
             listener.exitFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionSpecification) {
            return visitor.visitFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public parameterDeclaration(): ParameterDeclarationContext[];
    public parameterDeclaration(i: number): ParameterDeclarationContext | null;
    public parameterDeclaration(i?: number): ParameterDeclarationContext[] | ParameterDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ParameterDeclarationContext);
        }

        return this.getRuleContext(i, ParameterDeclarationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_functionDeclaration;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterFunctionDeclaration) {
             listener.enterFunctionDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitFunctionDeclaration) {
             listener.exitFunctionDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitFunctionDeclaration) {
            return visitor.visitFunctionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_parameterDeclaration;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterParameterDeclaration) {
             listener.enterParameterDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitParameterDeclaration) {
             listener.exitParameterDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitParameterDeclaration) {
            return visitor.visitParameterDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RETURNS, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_returnsClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterReturnsClause) {
             listener.enterReturnsClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitReturnsClause) {
             listener.exitReturnsClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitReturnsClause) {
            return visitor.visitReturnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCharacteristicContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_routineCharacteristic;
    }
    public override copyFrom(ctx: RoutineCharacteristicContext): void {
        super.copyFrom(ctx);
    }
}
export class ReturnsNullOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURNS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RETURNS, 0)!;
    }
    public NULL(): antlr.TerminalNode[];
    public NULL(i: number): antlr.TerminalNode | null;
    public NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.NULL);
    	} else {
    		return this.getToken(TrinoSQLParser.NULL, i);
    	}
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INPUT, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterReturnsNullOnNullInputCharacteristic) {
             listener.enterReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitReturnsNullOnNullInputCharacteristic) {
             listener.exitReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitReturnsNullOnNullInputCharacteristic) {
            return visitor.visitReturnsNullOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SecurityCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SECURITY(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SECURITY, 0)!;
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INVOKER, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSecurityCharacteristic) {
             listener.enterSecurityCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSecurityCharacteristic) {
             listener.exitSecurityCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSecurityCharacteristic) {
            return visitor.visitSecurityCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CalledOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALLED(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CALLED, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ON, 0)!;
    }
    public NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.NULL, 0)!;
    }
    public INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INPUT, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCalledOnNullInputCharacteristic) {
             listener.enterCalledOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCalledOnNullInputCharacteristic) {
             listener.exitCalledOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCalledOnNullInputCharacteristic) {
            return visitor.visitCalledOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.COMMENT, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCommentCharacteristic) {
             listener.enterCommentCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCommentCharacteristic) {
             listener.exitCommentCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCommentCharacteristic) {
            return visitor.visitCommentCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LanguageCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LANGUAGE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LANGUAGE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLanguageCharacteristic) {
             listener.enterLanguageCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLanguageCharacteristic) {
             listener.exitLanguageCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLanguageCharacteristic) {
            return visitor.visitLanguageCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeterministicCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETERMINISTIC(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DETERMINISTIC, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NOT, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDeterministicCharacteristic) {
             listener.enterDeterministicCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDeterministicCharacteristic) {
             listener.exitDeterministicCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDeterministicCharacteristic) {
            return visitor.visitDeterministicCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ControlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_controlStatement;
    }
    public override copyFrom(ctx: ControlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class WhileStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHILE(): antlr.TerminalNode[];
    public WHILE(i: number): antlr.TerminalNode | null;
    public WHILE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.WHILE);
    	} else {
    		return this.getToken(TrinoSQLParser.WHILE, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DO, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterWhileStatement) {
             listener.enterWhileStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitWhileStatement) {
             listener.exitWhileStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode[];
    public CASE(i: number): antlr.TerminalNode | null;
    public CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.CASE);
    	} else {
    		return this.getToken(TrinoSQLParser.CASE, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSimpleCaseStatement) {
             listener.enterSimpleCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSimpleCaseStatement) {
             listener.exitSimpleCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSimpleCaseStatement) {
            return visitor.visitSimpleCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEAT(): antlr.TerminalNode[];
    public REPEAT(i: number): antlr.TerminalNode | null;
    public REPEAT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.REPEAT);
    	} else {
    		return this.getToken(TrinoSQLParser.REPEAT, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public UNTIL(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.UNTIL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRepeatStatement) {
             listener.enterRepeatStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRepeatStatement) {
             listener.exitRepeatStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRepeatStatement) {
            return visitor.visitRepeatStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignmentStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.SET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterAssignmentStatement) {
             listener.enterAssignmentStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitAssignmentStatement) {
             listener.exitAssignmentStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitAssignmentStatement) {
            return visitor.visitAssignmentStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeaveStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEAVE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.LEAVE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLeaveStatement) {
             listener.enterLeaveStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLeaveStatement) {
             listener.exitLeaveStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CompoundStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BEGIN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.BEGIN, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public variableDeclaration(): VariableDeclarationContext[];
    public variableDeclaration(i: number): VariableDeclarationContext | null;
    public variableDeclaration(i?: number): VariableDeclarationContext[] | VariableDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclarationContext);
        }

        return this.getRuleContext(i, VariableDeclarationContext);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.SEMICOLON);
    	} else {
    		return this.getToken(TrinoSQLParser.SEMICOLON, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext | null {
        return this.getRuleContext(0, SqlStatementListContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCompoundStatement) {
             listener.enterCompoundStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCompoundStatement) {
             listener.exitCompoundStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IterateStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ITERATE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ITERATE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIterateStatement) {
             listener.enterIterateStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIterateStatement) {
             listener.exitIterateStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoopStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOOP(): antlr.TerminalNode[];
    public LOOP(i: number): antlr.TerminalNode | null;
    public LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.LOOP);
    	} else {
    		return this.getToken(TrinoSQLParser.LOOP, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterLoopStatement) {
             listener.enterLoopStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitLoopStatement) {
             listener.exitLoopStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitLoopStatement) {
            return visitor.visitLoopStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReturnStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.RETURN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IF(): antlr.TerminalNode[];
    public IF(i: number): antlr.TerminalNode | null;
    public IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.IF);
    	} else {
    		return this.getToken(TrinoSQLParser.IF, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public elseIfClause(): ElseIfClauseContext[];
    public elseIfClause(i: number): ElseIfClauseContext | null;
    public elseIfClause(i?: number): ElseIfClauseContext[] | ElseIfClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElseIfClauseContext);
        }

        return this.getRuleContext(i, ElseIfClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIfStatement) {
             listener.enterIfStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIfStatement) {
             listener.exitIfStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode[];
    public CASE(i: number): antlr.TerminalNode | null;
    public CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.CASE);
    	} else {
    		return this.getToken(TrinoSQLParser.CASE, i);
    	}
    }
    public END(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.END, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSearchedCaseStatement) {
             listener.enterSearchedCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSearchedCaseStatement) {
             listener.exitSearchedCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSearchedCaseStatement) {
            return visitor.visitSearchedCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.WHEN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_caseStatementWhenClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCaseStatementWhenClause) {
             listener.enterCaseStatementWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCaseStatementWhenClause) {
             listener.exitCaseStatementWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCaseStatementWhenClause) {
            return visitor.visitCaseStatementWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseIfClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSEIF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ELSEIF, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_elseIfClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterElseIfClause) {
             listener.enterElseIfClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitElseIfClause) {
             listener.exitElseIfClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitElseIfClause) {
            return visitor.visitElseIfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ELSE, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_elseClause;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterElseClause) {
             listener.enterElseClause(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitElseClause) {
             listener.exitElseClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DECLARE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFAULT, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_variableDeclaration;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterVariableDeclaration) {
             listener.enterVariableDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitVariableDeclaration) {
             listener.exitVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public controlStatement(): ControlStatementContext[];
    public controlStatement(i: number): ControlStatementContext | null;
    public controlStatement(i?: number): ControlStatementContext[] | ControlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ControlStatementContext);
        }

        return this.getRuleContext(i, ControlStatementContext);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSQLParser.SEMICOLON);
    	} else {
    		return this.getToken(TrinoSQLParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_sqlStatementList;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSqlStatementList) {
             listener.enterSqlStatementList(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSqlStatementList) {
             listener.exitSqlStatementList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSqlStatementList) {
            return visitor.visitSqlStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CREATE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SELECT, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DELETE, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INSERT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UPDATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_privilege;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EntityKindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TABLE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCHEMA, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_entityKind;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterEntityKind) {
             listener.enterEntityKind(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitEntityKind) {
             listener.exitEntityKind(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitEntityKind) {
            return visitor.visitEntityKind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public entityKind(): EntityKindContext | null {
        return this.getRuleContext(0, EntityKindContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_grantObject;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterGrantObject) {
             listener.enterGrantObject(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitGrantObject) {
             listener.exitGrantObject(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitGrantObject) {
            return visitor.visitGrantObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_qualifiedName;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPeriodContext extends antlr.ParserRuleContext {
    public _end?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.FOR, 0)!;
    }
    public rangeType(): RangeTypeContext {
        return this.getRuleContext(0, RangeTypeContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.AS, 0)!;
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.OF, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_queryPeriod;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQueryPeriod) {
             listener.enterQueryPeriod(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQueryPeriod) {
             listener.exitQueryPeriod(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQueryPeriod) {
            return visitor.visitQueryPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIMESTAMP, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VERSION, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_rangeType;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRangeType) {
             listener.enterRangeType(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRangeType) {
             listener.exitRangeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRangeType) {
            return visitor.visitRangeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_grantor;
    }
    public override copyFrom(ctx: GrantorContext): void {
        super.copyFrom(ctx);
    }
}
export class CurrentUserGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_USER, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentUserGrantor) {
             listener.enterCurrentUserGrantor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentUserGrantor) {
             listener.exitCurrentUserGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserGrantor) {
            return visitor.visitCurrentUserGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecifiedPrincipalContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterSpecifiedPrincipal) {
             listener.enterSpecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitSpecifiedPrincipal) {
             listener.exitSpecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPrincipal) {
            return visitor.visitSpecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRoleGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.CURRENT_ROLE, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterCurrentRoleGrantor) {
             listener.enterCurrentRoleGrantor(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitCurrentRoleGrantor) {
             listener.exitCurrentRoleGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitCurrentRoleGrantor) {
            return visitor.visitCurrentRoleGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_principal;
    }
    public override copyFrom(ctx: PrincipalContext): void {
        super.copyFrom(ctx);
    }
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnspecifiedPrincipal) {
             listener.enterUnspecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnspecifiedPrincipal) {
             listener.exitUnspecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnspecifiedPrincipal) {
            return visitor.visitUnspecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.USER, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUserPrincipal) {
             listener.enterUserPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUserPrincipal) {
             listener.exitUserPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUserPrincipal) {
            return visitor.visitUserPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RolePrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRolePrincipal) {
             listener.enterRolePrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRolePrincipal) {
             listener.exitRolePrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRolePrincipal) {
            return visitor.visitRolePrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_roles;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterRoles) {
             listener.enterRoles(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitRoles) {
             listener.exitRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitRoles) {
            return visitor.visitRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeOrRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CREATE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SELECT, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DELETE, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INSERT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UPDATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_privilegeOrRole;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterPrivilegeOrRole) {
             listener.enterPrivilegeOrRole(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitPrivilegeOrRole) {
             listener.exitPrivilegeOrRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeOrRole) {
            return visitor.visitPrivilegeOrRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class BackQuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.QUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DigitIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIGIT_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DIGIT_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDigitIdentifier) {
             listener.enterDigitIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDigitIdentifier) {
             listener.exitDigitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDigitIdentifier) {
            return visitor.visitDigitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IDENTIFIER, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DECIMAL_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoubleLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.DOUBLE_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterDoubleLiteral) {
             listener.enterDoubleLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitDoubleLiteral) {
             listener.exitDoubleLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIntegerLiteral) {
             listener.enterIntegerLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIntegerLiteral) {
             listener.exitIntegerLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthorizationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_authorizationUser;
    }
    public override copyFrom(ctx: AuthorizationUserContext): void {
        super.copyFrom(ctx);
    }
}
export class StringUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterStringUser) {
             listener.enterStringUser(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitStringUser) {
             listener.exitStringUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitStringUser) {
            return visitor.visitStringUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterIdentifierUser) {
             listener.enterIdentifierUser(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitIdentifierUser) {
             listener.exitIdentifierUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitIdentifierUser) {
            return visitor.visitIdentifierUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ABSENT, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ADD, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ADMIN, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AFTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ALL, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ANALYZE, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ARRAY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ASC, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AT, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.AUTHORIZATION, 0);
    }
    public BEGIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BEGIN, 0);
    }
    public BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BERNOULLI, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.BOTH, 0);
    }
    public CALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CALL, 0);
    }
    public CALLED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CALLED, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CASCADE, 0);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CATALOG, 0);
    }
    public CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CATALOGS, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COLUMN, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COLUMNS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMENT, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMIT, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COMMITTED, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CONDITIONAL, 0);
    }
    public COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COPARTITION, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.COUNT, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.CURRENT, 0);
    }
    public DATA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DATA, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DATE, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DAY, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFAULT, 0);
    }
    public DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINE, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DEFINER, 0);
    }
    public DENY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DENY, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DESC, 0);
    }
    public DESCRIPTOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DESCRIPTOR, 0);
    }
    public DETERMINISTIC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DETERMINISTIC, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DISTRIBUTED, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DO, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.DOUBLE, 0);
    }
    public ELSEIF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ELSEIF, 0);
    }
    public EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EMPTY, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ENCODING, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ERROR, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXCLUDING, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.EXPLAIN, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FETCH, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FILTER, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FIRST, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FORMAT, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FUNCTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.FUNCTIONS, 0);
    }
    public GRACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRACE, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANT, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANTED, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRANTS, 0);
    }
    public GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GRAPHVIZ, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.GROUPS, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.HOUR, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IF, 0);
    }
    public IGNORE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IGNORE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IMMEDIATE, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INCLUDING, 0);
    }
    public INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INITIAL, 0);
    }
    public INPUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INPUT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INTERVAL, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.INVOKER, 0);
    }
    public IO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.IO, 0);
    }
    public ITERATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ITERATE, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ISOLATION, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.JSON, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEEP, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEY, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.KEYS, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LANGUAGE, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LAST, 0);
    }
    public LATERAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LATERAL, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LEADING, 0);
    }
    public LEAVE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LEAVE, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LEVEL, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LIMIT, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LOCAL, 0);
    }
    public LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LOGICAL, 0);
    }
    public LOOP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.LOOP, 0);
    }
    public MAP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MAP, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCH, 0);
    }
    public MATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCHED, 0);
    }
    public MATCHES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCHES, 0);
    }
    public MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATCH_RECOGNIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MATERIALIZED, 0);
    }
    public MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MEASURES, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MERGE, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MINUTE, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.MONTH, 0);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NESTED, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NEXT, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NFKD, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NO, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NONE, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULLIF, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.NULLS, 0);
    }
    public OBJECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OBJECT, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OF, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OFFSET, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OMIT, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ONE, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ONLY, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OPTION, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ORDINALITY, 0);
    }
    public OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OUTPUT, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OVER, 0);
    }
    public OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.OVERFLOW, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PARTITION, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PARTITIONS, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PASSING, 0);
    }
    public PAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PAST, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATH, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PATTERN, 0);
    }
    public PER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PER, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PERIOD, 0);
    }
    public PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PERMUTE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PLAN, 0);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.POSITION, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRECEDING, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRECISION, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRIVILEGES, 0);
    }
    public PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PROPERTIES, 0);
    }
    public PRUNE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.PRUNE, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.QUOTES, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RANGE, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.READ, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REFRESH, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RENAME, 0);
    }
    public REPEAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPEAT, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPEATABLE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REPLACE, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESET, 0);
    }
    public RESPECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESPECT, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RESTRICT, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURN, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNING, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RETURNS, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.REVOKE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROLE, 0);
    }
    public ROLES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROLES, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROLLBACK, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ROWS, 0);
    }
    public RUNNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.RUNNING, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCALAR, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCHEMA, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SCHEMAS, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SECOND, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SECURITY, 0);
    }
    public SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SEEK, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SERIALIZABLE, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SESSION, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SET, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SETS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SHOW, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SOME, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.START, 0);
    }
    public STATS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.STATS, 0);
    }
    public SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SUBSET, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SUBSTRING, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.SYSTEM, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TABLESAMPLE, 0);
    }
    public TEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TEXT, 0);
    }
    public TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TEXT_STRING, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIES, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TIMESTAMP, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TO, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRAILING, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRANSACTION, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRUNCATE, 0);
    }
    public TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TRY_CAST, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNBOUNDED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNCOMMITTED, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNCONDITIONAL, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNKNOWN, 0);
    }
    public UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNMATCHED, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UNTIL, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.USE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.USER, 0);
    }
    public UTF16(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF16, 0);
    }
    public UTF32(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF32, 0);
    }
    public UTF8(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.UTF8, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VALIDATE, 0);
    }
    public VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VALUE, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VERBOSE, 0);
    }
    public VERSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VERSION, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.VIEW, 0);
    }
    public WHILE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WHILE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WINDOW, 0);
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHIN, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WITHOUT, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WORK, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WRAPPER, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.WRITE, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.YEAR, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSQLParser.RULE_nonReserved;
    }
    public override enterRule(listener: TrinoSQLListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: TrinoSQLListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: TrinoSQLVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
