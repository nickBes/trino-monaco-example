// Generated from ./TrinoParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { TrinoParserListener } from "./TrinoParserListener.js";
import { TrinoParserVisitor } from "./TrinoParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class TrinoParser extends antlr.Parser {
    public static readonly ABSENT_ = 1;
    public static readonly ADD_ = 2;
    public static readonly ADMIN_ = 3;
    public static readonly AFTER_ = 4;
    public static readonly ALL_ = 5;
    public static readonly ALTER_ = 6;
    public static readonly ANALYZE_ = 7;
    public static readonly AND_ = 8;
    public static readonly ANY_ = 9;
    public static readonly ARRAY_ = 10;
    public static readonly AS_ = 11;
    public static readonly ASC_ = 12;
    public static readonly AT_ = 13;
    public static readonly AUTHORIZATION_ = 14;
    public static readonly BEGIN_ = 15;
    public static readonly BERNOULLI_ = 16;
    public static readonly BETWEEN_ = 17;
    public static readonly BOTH_ = 18;
    public static readonly BY_ = 19;
    public static readonly CALL_ = 20;
    public static readonly CALLED_ = 21;
    public static readonly CASCADE_ = 22;
    public static readonly CASE_ = 23;
    public static readonly CAST_ = 24;
    public static readonly CATALOG_ = 25;
    public static readonly CATALOGS_ = 26;
    public static readonly COLUMN_ = 27;
    public static readonly COLUMNS_ = 28;
    public static readonly COMMENT_ = 29;
    public static readonly COMMIT_ = 30;
    public static readonly COMMITTED_ = 31;
    public static readonly CONDITIONAL_ = 32;
    public static readonly CONSTRAINT_ = 33;
    public static readonly COUNT_ = 34;
    public static readonly COPARTITION_ = 35;
    public static readonly CREATE_ = 36;
    public static readonly CROSS_ = 37;
    public static readonly CUBE_ = 38;
    public static readonly CURRENT_ = 39;
    public static readonly CURRENT_CATALOG_ = 40;
    public static readonly CURRENT_DATE_ = 41;
    public static readonly CURRENT_PATH_ = 42;
    public static readonly CURRENT_ROLE_ = 43;
    public static readonly CURRENT_SCHEMA_ = 44;
    public static readonly CURRENT_TIME_ = 45;
    public static readonly CURRENT_TIMESTAMP_ = 46;
    public static readonly CURRENT_USER_ = 47;
    public static readonly DATA_ = 48;
    public static readonly DATE_ = 49;
    public static readonly DAY_ = 50;
    public static readonly DEALLOCATE_ = 51;
    public static readonly DECLARE_ = 52;
    public static readonly DEFAULT_ = 53;
    public static readonly DEFINE_ = 54;
    public static readonly DEFINER_ = 55;
    public static readonly DELETE_ = 56;
    public static readonly DENY_ = 57;
    public static readonly DESC_ = 58;
    public static readonly DESCRIBE_ = 59;
    public static readonly DESCRIPTOR_ = 60;
    public static readonly DETERMINISTIC_ = 61;
    public static readonly DISTINCT_ = 62;
    public static readonly DISTRIBUTED_ = 63;
    public static readonly DO_ = 64;
    public static readonly DOUBLE_ = 65;
    public static readonly DROP_ = 66;
    public static readonly ELSE_ = 67;
    public static readonly EMPTY_ = 68;
    public static readonly ELSEIF_ = 69;
    public static readonly ENCODING_ = 70;
    public static readonly END_ = 71;
    public static readonly ERROR_ = 72;
    public static readonly ESCAPE_ = 73;
    public static readonly EXCEPT_ = 74;
    public static readonly EXCLUDING_ = 75;
    public static readonly EXECUTE_ = 76;
    public static readonly EXISTS_ = 77;
    public static readonly EXPLAIN_ = 78;
    public static readonly EXTRACT_ = 79;
    public static readonly FALSE_ = 80;
    public static readonly FETCH_ = 81;
    public static readonly FILTER_ = 82;
    public static readonly FINAL_ = 83;
    public static readonly FIRST_ = 84;
    public static readonly FOLLOWING_ = 85;
    public static readonly FOR_ = 86;
    public static readonly FORMAT_ = 87;
    public static readonly FROM_ = 88;
    public static readonly FULL_ = 89;
    public static readonly FUNCTION_ = 90;
    public static readonly FUNCTIONS_ = 91;
    public static readonly GRACE_ = 92;
    public static readonly GRANT_ = 93;
    public static readonly GRANTED_ = 94;
    public static readonly GRANTS_ = 95;
    public static readonly GRAPHVIZ_ = 96;
    public static readonly GROUP_ = 97;
    public static readonly GROUPING_ = 98;
    public static readonly GROUPS_ = 99;
    public static readonly HAVING_ = 100;
    public static readonly HOUR_ = 101;
    public static readonly IF_ = 102;
    public static readonly IGNORE_ = 103;
    public static readonly IMMEDIATE_ = 104;
    public static readonly IN_ = 105;
    public static readonly INCLUDING_ = 106;
    public static readonly INITIAL_ = 107;
    public static readonly INNER_ = 108;
    public static readonly INPUT_ = 109;
    public static readonly INSERT_ = 110;
    public static readonly INTERSECT_ = 111;
    public static readonly INTERVAL_ = 112;
    public static readonly INTO_ = 113;
    public static readonly INVOKER_ = 114;
    public static readonly IO_ = 115;
    public static readonly IS_ = 116;
    public static readonly ISOLATION_ = 117;
    public static readonly ITERATE_ = 118;
    public static readonly JOIN_ = 119;
    public static readonly JSON_ = 120;
    public static readonly JSON_ARRAY_ = 121;
    public static readonly JSON_EXISTS_ = 122;
    public static readonly JSON_OBJECT_ = 123;
    public static readonly JSON_QUERY_ = 124;
    public static readonly JSON_TABLE_ = 125;
    public static readonly JSON_VALUE_ = 126;
    public static readonly KEEP_ = 127;
    public static readonly KEY_ = 128;
    public static readonly KEYS_ = 129;
    public static readonly LANGUAGE_ = 130;
    public static readonly LAST_ = 131;
    public static readonly LATERAL_ = 132;
    public static readonly LEADING_ = 133;
    public static readonly LEAVE_ = 134;
    public static readonly LEFT_ = 135;
    public static readonly LEVEL_ = 136;
    public static readonly LIKE_ = 137;
    public static readonly LIMIT_ = 138;
    public static readonly LISTAGG_ = 139;
    public static readonly LOCAL_ = 140;
    public static readonly LOCALTIME_ = 141;
    public static readonly LOCALTIMESTAMP_ = 142;
    public static readonly LOGICAL_ = 143;
    public static readonly LOOP_ = 144;
    public static readonly MAP_ = 145;
    public static readonly MATCH_ = 146;
    public static readonly MATCHED_ = 147;
    public static readonly MATCHES_ = 148;
    public static readonly MATCH_RECOGNIZE_ = 149;
    public static readonly MATERIALIZED_ = 150;
    public static readonly MEASURES_ = 151;
    public static readonly MERGE_ = 152;
    public static readonly MINUTE_ = 153;
    public static readonly MONTH_ = 154;
    public static readonly NATURAL_ = 155;
    public static readonly NESTED_ = 156;
    public static readonly NEXT_ = 157;
    public static readonly NFC_ = 158;
    public static readonly NFD_ = 159;
    public static readonly NFKC_ = 160;
    public static readonly NFKD_ = 161;
    public static readonly NO_ = 162;
    public static readonly NONE_ = 163;
    public static readonly NORMALIZE_ = 164;
    public static readonly NOT_ = 165;
    public static readonly NULL_ = 166;
    public static readonly NULLIF_ = 167;
    public static readonly NULLS_ = 168;
    public static readonly OBJECT_ = 169;
    public static readonly OF_ = 170;
    public static readonly OFFSET_ = 171;
    public static readonly OMIT_ = 172;
    public static readonly ON_ = 173;
    public static readonly ONE_ = 174;
    public static readonly ONLY_ = 175;
    public static readonly OPTION_ = 176;
    public static readonly OR_ = 177;
    public static readonly ORDER_ = 178;
    public static readonly ORDINALITY_ = 179;
    public static readonly OUTER_ = 180;
    public static readonly OUTPUT_ = 181;
    public static readonly OVER_ = 182;
    public static readonly OVERFLOW_ = 183;
    public static readonly PARTITION_ = 184;
    public static readonly PARTITIONS_ = 185;
    public static readonly PASSING_ = 186;
    public static readonly PAST_ = 187;
    public static readonly PATH_ = 188;
    public static readonly PATTERN_ = 189;
    public static readonly PER_ = 190;
    public static readonly PERIOD_ = 191;
    public static readonly PERMUTE_ = 192;
    public static readonly PLAN_ = 193;
    public static readonly POSITION_ = 194;
    public static readonly PRECEDING_ = 195;
    public static readonly PRECISION_ = 196;
    public static readonly PREPARE_ = 197;
    public static readonly PRIVILEGES_ = 198;
    public static readonly PROPERTIES_ = 199;
    public static readonly PRUNE_ = 200;
    public static readonly QUOTES_ = 201;
    public static readonly RANGE_ = 202;
    public static readonly READ_ = 203;
    public static readonly RECURSIVE_ = 204;
    public static readonly REFRESH_ = 205;
    public static readonly RENAME_ = 206;
    public static readonly REPEAT_ = 207;
    public static readonly REPEATABLE_ = 208;
    public static readonly REPLACE_ = 209;
    public static readonly RESET_ = 210;
    public static readonly RESPECT_ = 211;
    public static readonly RESTRICT_ = 212;
    public static readonly RETURN_ = 213;
    public static readonly RETURNING_ = 214;
    public static readonly RETURNS_ = 215;
    public static readonly REVOKE_ = 216;
    public static readonly RIGHT_ = 217;
    public static readonly ROLE_ = 218;
    public static readonly ROLES_ = 219;
    public static readonly ROLLBACK_ = 220;
    public static readonly ROLLUP_ = 221;
    public static readonly ROW_ = 222;
    public static readonly ROWS_ = 223;
    public static readonly RUNNING_ = 224;
    public static readonly SCALAR_ = 225;
    public static readonly SCHEMA_ = 226;
    public static readonly SCHEMAS_ = 227;
    public static readonly SECOND_ = 228;
    public static readonly SECURITY_ = 229;
    public static readonly SEEK_ = 230;
    public static readonly SELECT_ = 231;
    public static readonly SERIALIZABLE_ = 232;
    public static readonly SESSION_ = 233;
    public static readonly SET_ = 234;
    public static readonly SETS_ = 235;
    public static readonly SHOW_ = 236;
    public static readonly SKIP_ = 237;
    public static readonly SOME_ = 238;
    public static readonly START_ = 239;
    public static readonly STATS_ = 240;
    public static readonly SUBSET_ = 241;
    public static readonly SUBSTRING_ = 242;
    public static readonly SYSTEM_ = 243;
    public static readonly TABLE_ = 244;
    public static readonly TABLES_ = 245;
    public static readonly TABLESAMPLE_ = 246;
    public static readonly TEXT_ = 247;
    public static readonly TEXT_STRING_ = 248;
    public static readonly THEN_ = 249;
    public static readonly TIES_ = 250;
    public static readonly TIME_ = 251;
    public static readonly TIMESTAMP_ = 252;
    public static readonly TO_ = 253;
    public static readonly TRAILING_ = 254;
    public static readonly TRANSACTION_ = 255;
    public static readonly TRIM_ = 256;
    public static readonly TRUE_ = 257;
    public static readonly TRUNCATE_ = 258;
    public static readonly TRY_CAST_ = 259;
    public static readonly TYPE_ = 260;
    public static readonly UESCAPE_ = 261;
    public static readonly UNBOUNDED_ = 262;
    public static readonly UNCOMMITTED_ = 263;
    public static readonly UNCONDITIONAL_ = 264;
    public static readonly UNION_ = 265;
    public static readonly UNIQUE_ = 266;
    public static readonly UNKNOWN_ = 267;
    public static readonly UNMATCHED_ = 268;
    public static readonly UNNEST_ = 269;
    public static readonly UNTIL_ = 270;
    public static readonly UPDATE_ = 271;
    public static readonly USE_ = 272;
    public static readonly USER_ = 273;
    public static readonly USING_ = 274;
    public static readonly UTF16_ = 275;
    public static readonly UTF32_ = 276;
    public static readonly UTF8_ = 277;
    public static readonly VALIDATE_ = 278;
    public static readonly VALUE_ = 279;
    public static readonly VALUES_ = 280;
    public static readonly VERBOSE_ = 281;
    public static readonly VERSION_ = 282;
    public static readonly VIEW_ = 283;
    public static readonly WHEN_ = 284;
    public static readonly WHERE_ = 285;
    public static readonly WHILE_ = 286;
    public static readonly WINDOW_ = 287;
    public static readonly WITH_ = 288;
    public static readonly WITHIN_ = 289;
    public static readonly WITHOUT_ = 290;
    public static readonly WORK_ = 291;
    public static readonly WRAPPER_ = 292;
    public static readonly WRITE_ = 293;
    public static readonly YEAR_ = 294;
    public static readonly ZONE_ = 295;
    public static readonly EQ_ = 296;
    public static readonly NEQ_ = 297;
    public static readonly LT_ = 298;
    public static readonly LTE_ = 299;
    public static readonly GT_ = 300;
    public static readonly GTE_ = 301;
    public static readonly PLUS_ = 302;
    public static readonly MINUS_ = 303;
    public static readonly ASTERISK_ = 304;
    public static readonly SLASH_ = 305;
    public static readonly PERCENT_ = 306;
    public static readonly CONCAT_ = 307;
    public static readonly QUESTION_MARK_ = 308;
    public static readonly SEMICOLON_ = 309;
    public static readonly DOT_ = 310;
    public static readonly COLON_ = 311;
    public static readonly COMMA_ = 312;
    public static readonly LPAREN_ = 313;
    public static readonly RPAREN_ = 314;
    public static readonly LSQUARE_ = 315;
    public static readonly RSQUARE_ = 316;
    public static readonly LCURLY_ = 317;
    public static readonly RCURLY_ = 318;
    public static readonly LCURLYHYPHEN_ = 319;
    public static readonly RCURLYHYPHEN_ = 320;
    public static readonly LARROW_ = 321;
    public static readonly RARROW_ = 322;
    public static readonly RDOUBLEARROW_ = 323;
    public static readonly VBAR_ = 324;
    public static readonly DOLLAR_ = 325;
    public static readonly CARET_ = 326;
    public static readonly STRING_ = 327;
    public static readonly UNICODE_STRING_ = 328;
    public static readonly BINARY_LITERAL_ = 329;
    public static readonly INTEGER_VALUE_ = 330;
    public static readonly DECIMAL_VALUE_ = 331;
    public static readonly DOUBLE_VALUE_ = 332;
    public static readonly IDENTIFIER_ = 333;
    public static readonly DIGIT_IDENTIFIER_ = 334;
    public static readonly QUOTED_IDENTIFIER_ = 335;
    public static readonly BACKQUOTED_IDENTIFIER_ = 336;
    public static readonly SIMPLE_COMMENT_ = 337;
    public static readonly BRACKETED_COMMENT_ = 338;
    public static readonly WS_ = 339;
    public static readonly UNRECOGNIZED_ = 340;
    public static readonly RULE_parse = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_singleStatement = 2;
    public static readonly RULE_standaloneExpression = 3;
    public static readonly RULE_standalonePathSpecification = 4;
    public static readonly RULE_standaloneType = 5;
    public static readonly RULE_standaloneRowPattern = 6;
    public static readonly RULE_standaloneFunctionSpecification = 7;
    public static readonly RULE_statement = 8;
    public static readonly RULE_rootQuery = 9;
    public static readonly RULE_withFunction = 10;
    public static readonly RULE_query = 11;
    public static readonly RULE_with = 12;
    public static readonly RULE_tableElement = 13;
    public static readonly RULE_columnDefinition = 14;
    public static readonly RULE_likeClause = 15;
    public static readonly RULE_properties = 16;
    public static readonly RULE_propertyAssignments = 17;
    public static readonly RULE_property = 18;
    public static readonly RULE_propertyValue = 19;
    public static readonly RULE_queryNoWith = 20;
    public static readonly RULE_limitRowCount = 21;
    public static readonly RULE_rowCount = 22;
    public static readonly RULE_queryTerm = 23;
    public static readonly RULE_queryPrimary = 24;
    public static readonly RULE_sortItem = 25;
    public static readonly RULE_querySpecification = 26;
    public static readonly RULE_groupBy = 27;
    public static readonly RULE_groupingElement = 28;
    public static readonly RULE_groupingSet = 29;
    public static readonly RULE_windowDefinition = 30;
    public static readonly RULE_windowSpecification = 31;
    public static readonly RULE_namedQuery = 32;
    public static readonly RULE_setQuantifier = 33;
    public static readonly RULE_selectItem = 34;
    public static readonly RULE_relation = 35;
    public static readonly RULE_joinType = 36;
    public static readonly RULE_joinCriteria = 37;
    public static readonly RULE_sampledRelation = 38;
    public static readonly RULE_sampleType = 39;
    public static readonly RULE_trimsSpecification = 40;
    public static readonly RULE_listAggOverflowBehavior = 41;
    public static readonly RULE_listaggCountIndication = 42;
    public static readonly RULE_patternRecognition = 43;
    public static readonly RULE_measureDefinition = 44;
    public static readonly RULE_rowsPerMatch = 45;
    public static readonly RULE_emptyMatchHandling = 46;
    public static readonly RULE_skipTo = 47;
    public static readonly RULE_subsetDefinition = 48;
    public static readonly RULE_variableDefinition = 49;
    public static readonly RULE_aliasedRelation = 50;
    public static readonly RULE_columnAliases = 51;
    public static readonly RULE_relationPrimary = 52;
    public static readonly RULE_tableFunctionCall = 53;
    public static readonly RULE_tableFunctionArgument = 54;
    public static readonly RULE_tableArgument = 55;
    public static readonly RULE_tableArgumentRelation = 56;
    public static readonly RULE_descriptorArgument = 57;
    public static readonly RULE_descriptorField = 58;
    public static readonly RULE_copartitionTables = 59;
    public static readonly RULE_expression = 60;
    public static readonly RULE_booleanExpression = 61;
    public static readonly RULE_predicate_ = 62;
    public static readonly RULE_valueExpression = 63;
    public static readonly RULE_primaryExpression = 64;
    public static readonly RULE_jsonPathInvocation = 65;
    public static readonly RULE_jsonValueExpression = 66;
    public static readonly RULE_jsonRepresentation = 67;
    public static readonly RULE_jsonArgument = 68;
    public static readonly RULE_jsonExistsErrorBehavior = 69;
    public static readonly RULE_jsonValueBehavior = 70;
    public static readonly RULE_jsonQueryWrapperBehavior = 71;
    public static readonly RULE_jsonQueryBehavior = 72;
    public static readonly RULE_jsonObjectMember = 73;
    public static readonly RULE_processingMode = 74;
    public static readonly RULE_nullTreatment = 75;
    public static readonly RULE_string_ = 76;
    public static readonly RULE_timeZoneSpecifier = 77;
    public static readonly RULE_comparisonOperator = 78;
    public static readonly RULE_comparisonQuantifier = 79;
    public static readonly RULE_booleanValue = 80;
    public static readonly RULE_interval = 81;
    public static readonly RULE_intervalField = 82;
    public static readonly RULE_normalForm = 83;
    public static readonly RULE_type = 84;
    public static readonly RULE_rowField = 85;
    public static readonly RULE_typeParameter = 86;
    public static readonly RULE_whenClause = 87;
    public static readonly RULE_filter = 88;
    public static readonly RULE_mergeCase = 89;
    public static readonly RULE_over = 90;
    public static readonly RULE_windowFrame = 91;
    public static readonly RULE_frameExtent = 92;
    public static readonly RULE_frameBound = 93;
    public static readonly RULE_rowPattern = 94;
    public static readonly RULE_patternPrimary = 95;
    public static readonly RULE_patternQuantifier = 96;
    public static readonly RULE_updateAssignment = 97;
    public static readonly RULE_explainOption = 98;
    public static readonly RULE_transactionMode = 99;
    public static readonly RULE_levelOfIsolation = 100;
    public static readonly RULE_callArgument = 101;
    public static readonly RULE_pathElement = 102;
    public static readonly RULE_pathSpecification = 103;
    public static readonly RULE_functionSpecification = 104;
    public static readonly RULE_functionDeclaration = 105;
    public static readonly RULE_parameterDeclaration = 106;
    public static readonly RULE_returnsClause = 107;
    public static readonly RULE_routineCharacteristic = 108;
    public static readonly RULE_controlStatement = 109;
    public static readonly RULE_caseStatementWhenClause = 110;
    public static readonly RULE_elseIfClause = 111;
    public static readonly RULE_elseClause = 112;
    public static readonly RULE_variableDeclaration = 113;
    public static readonly RULE_sqlStatementList = 114;
    public static readonly RULE_privilege = 115;
    public static readonly RULE_qualifiedName = 116;
    public static readonly RULE_queryPeriod = 117;
    public static readonly RULE_rangeType = 118;
    public static readonly RULE_grantor = 119;
    public static readonly RULE_principal = 120;
    public static readonly RULE_roles = 121;
    public static readonly RULE_identifier = 122;
    public static readonly RULE_number = 123;
    public static readonly RULE_authorizationUser = 124;
    public static readonly RULE_nonReserved = 125;

    public static readonly literalNames = [
        null, "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", 
        "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
        "'AUTHORIZATION'", "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", 
        "'BY'", "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", 
        "'CATALOGS'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", 
        "'COMMITTED'", "'CONDITIONAL'", "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", 
        "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", 
        "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", 
        "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", 
        "'DATE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DEFINE'", 
        "'DEFINER'", "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", 
        "'DETERMINISTIC'", "'DISTINCT'", "'DISTRIBUTED'", "'DO'", "'DOUBLE'", 
        "'DROP'", "'ELSE'", "'EMPTY'", "'ELSEIF'", "'ENCODING'", "'END'", 
        "'ERROR'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", 
        "'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
        "'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", 
        "'FUNCTION'", "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", 
        "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", 
        "'HOUR'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDING'", 
        "'INITIAL'", "'INNER'", "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", 
        "'INTO'", "'INVOKER'", "'IO'", "'IS'", "'ISOLATION'", "'ITERATE'", 
        "'JOIN'", "'JSON'", "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", 
        "'JSON_QUERY'", "'JSON_TABLE'", "'JSON_VALUE'", "'KEEP'", "'KEY'", 
        "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LEADING'", "'LEAVE'", 
        "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", 
        "'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", "'LOOP'", "'MAP'", 
        "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", "'MATERIALIZED'", 
        "'MEASURES'", "'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", 
        "'NEXT'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", 
        "'NORMALIZE'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", 
        "'OF'", "'OFFSET'", "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", 
        "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", 
        "'OVERFLOW'", "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PAST'", 
        "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", "'PERMUTE'", "'PLAN'", 
        "'POSITION'", "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
        "'PROPERTIES'", "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
        "'REFRESH'", "'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE'", 
        "'RESET'", "'RESPECT'", "'RESTRICT'", "'RETURN'", "'RETURNING'", 
        "'RETURNS'", "'REVOKE'", "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", 
        "'ROLLUP'", "'ROW'", "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", 
        "'SCHEMAS'", "'SECOND'", "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", 
        "'SESSION'", "'SET'", "'SETS'", "'SHOW'", "'SKIP'", "'SOME'", "'START'", 
        "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", 
        "'TABLESAMPLE'", "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", 
        "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", 
        "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", 
        "'UNCOMMITTED'", "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", 
        "'UNMATCHED'", "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", 
        "'USING'", "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", 
        "'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", 
        "'WHILE'", "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WORK'", 
        "'WRAPPER'", "'WRITE'", "'YEAR'", "'ZONE'", "'='", null, "'<'", 
        "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", 
        "'?'", "';'", "'.'", "'_:'", "','", "'('", "')'", "'['", "']'", 
        "'{'", "'}'", "'{-'", "'-}'", "'<-'", "'->'", "'=>'", "'|'", "'$'", 
        "'^'"
    ];

    public static readonly symbolicNames = [
        null, "ABSENT_", "ADD_", "ADMIN_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", 
        "AND_", "ANY_", "ARRAY_", "AS_", "ASC_", "AT_", "AUTHORIZATION_", 
        "BEGIN_", "BERNOULLI_", "BETWEEN_", "BOTH_", "BY_", "CALL_", "CALLED_", 
        "CASCADE_", "CASE_", "CAST_", "CATALOG_", "CATALOGS_", "COLUMN_", 
        "COLUMNS_", "COMMENT_", "COMMIT_", "COMMITTED_", "CONDITIONAL_", 
        "CONSTRAINT_", "COUNT_", "COPARTITION_", "CREATE_", "CROSS_", "CUBE_", 
        "CURRENT_", "CURRENT_CATALOG_", "CURRENT_DATE_", "CURRENT_PATH_", 
        "CURRENT_ROLE_", "CURRENT_SCHEMA_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
        "CURRENT_USER_", "DATA_", "DATE_", "DAY_", "DEALLOCATE_", "DECLARE_", 
        "DEFAULT_", "DEFINE_", "DEFINER_", "DELETE_", "DENY_", "DESC_", 
        "DESCRIBE_", "DESCRIPTOR_", "DETERMINISTIC_", "DISTINCT_", "DISTRIBUTED_", 
        "DO_", "DOUBLE_", "DROP_", "ELSE_", "EMPTY_", "ELSEIF_", "ENCODING_", 
        "END_", "ERROR_", "ESCAPE_", "EXCEPT_", "EXCLUDING_", "EXECUTE_", 
        "EXISTS_", "EXPLAIN_", "EXTRACT_", "FALSE_", "FETCH_", "FILTER_", 
        "FINAL_", "FIRST_", "FOLLOWING_", "FOR_", "FORMAT_", "FROM_", "FULL_", 
        "FUNCTION_", "FUNCTIONS_", "GRACE_", "GRANT_", "GRANTED_", "GRANTS_", 
        "GRAPHVIZ_", "GROUP_", "GROUPING_", "GROUPS_", "HAVING_", "HOUR_", 
        "IF_", "IGNORE_", "IMMEDIATE_", "IN_", "INCLUDING_", "INITIAL_", 
        "INNER_", "INPUT_", "INSERT_", "INTERSECT_", "INTERVAL_", "INTO_", 
        "INVOKER_", "IO_", "IS_", "ISOLATION_", "ITERATE_", "JOIN_", "JSON_", 
        "JSON_ARRAY_", "JSON_EXISTS_", "JSON_OBJECT_", "JSON_QUERY_", "JSON_TABLE_", 
        "JSON_VALUE_", "KEEP_", "KEY_", "KEYS_", "LANGUAGE_", "LAST_", "LATERAL_", 
        "LEADING_", "LEAVE_", "LEFT_", "LEVEL_", "LIKE_", "LIMIT_", "LISTAGG_", 
        "LOCAL_", "LOCALTIME_", "LOCALTIMESTAMP_", "LOGICAL_", "LOOP_", 
        "MAP_", "MATCH_", "MATCHED_", "MATCHES_", "MATCH_RECOGNIZE_", "MATERIALIZED_", 
        "MEASURES_", "MERGE_", "MINUTE_", "MONTH_", "NATURAL_", "NESTED_", 
        "NEXT_", "NFC_", "NFD_", "NFKC_", "NFKD_", "NO_", "NONE_", "NORMALIZE_", 
        "NOT_", "NULL_", "NULLIF_", "NULLS_", "OBJECT_", "OF_", "OFFSET_", 
        "OMIT_", "ON_", "ONE_", "ONLY_", "OPTION_", "OR_", "ORDER_", "ORDINALITY_", 
        "OUTER_", "OUTPUT_", "OVER_", "OVERFLOW_", "PARTITION_", "PARTITIONS_", 
        "PASSING_", "PAST_", "PATH_", "PATTERN_", "PER_", "PERIOD_", "PERMUTE_", 
        "PLAN_", "POSITION_", "PRECEDING_", "PRECISION_", "PREPARE_", "PRIVILEGES_", 
        "PROPERTIES_", "PRUNE_", "QUOTES_", "RANGE_", "READ_", "RECURSIVE_", 
        "REFRESH_", "RENAME_", "REPEAT_", "REPEATABLE_", "REPLACE_", "RESET_", 
        "RESPECT_", "RESTRICT_", "RETURN_", "RETURNING_", "RETURNS_", "REVOKE_", 
        "RIGHT_", "ROLE_", "ROLES_", "ROLLBACK_", "ROLLUP_", "ROW_", "ROWS_", 
        "RUNNING_", "SCALAR_", "SCHEMA_", "SCHEMAS_", "SECOND_", "SECURITY_", 
        "SEEK_", "SELECT_", "SERIALIZABLE_", "SESSION_", "SET_", "SETS_", 
        "SHOW_", "SKIP_", "SOME_", "START_", "STATS_", "SUBSET_", "SUBSTRING_", 
        "SYSTEM_", "TABLE_", "TABLES_", "TABLESAMPLE_", "TEXT_", "TEXT_STRING_", 
        "THEN_", "TIES_", "TIME_", "TIMESTAMP_", "TO_", "TRAILING_", "TRANSACTION_", 
        "TRIM_", "TRUE_", "TRUNCATE_", "TRY_CAST_", "TYPE_", "UESCAPE_", 
        "UNBOUNDED_", "UNCOMMITTED_", "UNCONDITIONAL_", "UNION_", "UNIQUE_", 
        "UNKNOWN_", "UNMATCHED_", "UNNEST_", "UNTIL_", "UPDATE_", "USE_", 
        "USER_", "USING_", "UTF16_", "UTF32_", "UTF8_", "VALIDATE_", "VALUE_", 
        "VALUES_", "VERBOSE_", "VERSION_", "VIEW_", "WHEN_", "WHERE_", "WHILE_", 
        "WINDOW_", "WITH_", "WITHIN_", "WITHOUT_", "WORK_", "WRAPPER_", 
        "WRITE_", "YEAR_", "ZONE_", "EQ_", "NEQ_", "LT_", "LTE_", "GT_", 
        "GTE_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "PERCENT_", "CONCAT_", 
        "QUESTION_MARK_", "SEMICOLON_", "DOT_", "COLON_", "COMMA_", "LPAREN_", 
        "RPAREN_", "LSQUARE_", "RSQUARE_", "LCURLY_", "RCURLY_", "LCURLYHYPHEN_", 
        "RCURLYHYPHEN_", "LARROW_", "RARROW_", "RDOUBLEARROW_", "VBAR_", 
        "DOLLAR_", "CARET_", "STRING_", "UNICODE_STRING_", "BINARY_LITERAL_", 
        "INTEGER_VALUE_", "DECIMAL_VALUE_", "DOUBLE_VALUE_", "IDENTIFIER_", 
        "DIGIT_IDENTIFIER_", "QUOTED_IDENTIFIER_", "BACKQUOTED_IDENTIFIER_", 
        "SIMPLE_COMMENT_", "BRACKETED_COMMENT_", "WS_", "UNRECOGNIZED_"
    ];
    public static readonly ruleNames = [
        "parse", "statements", "singleStatement", "standaloneExpression", 
        "standalonePathSpecification", "standaloneType", "standaloneRowPattern", 
        "standaloneFunctionSpecification", "statement", "rootQuery", "withFunction", 
        "query", "with", "tableElement", "columnDefinition", "likeClause", 
        "properties", "propertyAssignments", "property", "propertyValue", 
        "queryNoWith", "limitRowCount", "rowCount", "queryTerm", "queryPrimary", 
        "sortItem", "querySpecification", "groupBy", "groupingElement", 
        "groupingSet", "windowDefinition", "windowSpecification", "namedQuery", 
        "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", 
        "sampledRelation", "sampleType", "trimsSpecification", "listAggOverflowBehavior", 
        "listaggCountIndication", "patternRecognition", "measureDefinition", 
        "rowsPerMatch", "emptyMatchHandling", "skipTo", "subsetDefinition", 
        "variableDefinition", "aliasedRelation", "columnAliases", "relationPrimary", 
        "tableFunctionCall", "tableFunctionArgument", "tableArgument", "tableArgumentRelation", 
        "descriptorArgument", "descriptorField", "copartitionTables", "expression", 
        "booleanExpression", "predicate_", "valueExpression", "primaryExpression", 
        "jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", 
        "jsonArgument", "jsonExistsErrorBehavior", "jsonValueBehavior", 
        "jsonQueryWrapperBehavior", "jsonQueryBehavior", "jsonObjectMember", 
        "processingMode", "nullTreatment", "string_", "timeZoneSpecifier", 
        "comparisonOperator", "comparisonQuantifier", "booleanValue", "interval", 
        "intervalField", "normalForm", "type", "rowField", "typeParameter", 
        "whenClause", "filter", "mergeCase", "over", "windowFrame", "frameExtent", 
        "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
        "updateAssignment", "explainOption", "transactionMode", "levelOfIsolation", 
        "callArgument", "pathElement", "pathSpecification", "functionSpecification", 
        "functionDeclaration", "parameterDeclaration", "returnsClause", 
        "routineCharacteristic", "controlStatement", "caseStatementWhenClause", 
        "elseIfClause", "elseClause", "variableDeclaration", "sqlStatementList", 
        "privilege", "qualifiedName", "queryPeriod", "rangeType", "grantor", 
        "principal", "roles", "identifier", "number", "authorizationUser", 
        "nonReserved",
    ];

    public get grammarFileName(): string { return "TrinoParser.g4"; }
    public get literalNames(): (string | null)[] { return TrinoParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return TrinoParser.symbolicNames; }
    public get ruleNames(): string[] { return TrinoParser.ruleNames; }
    public get serializedATN(): number[] { return TrinoParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, TrinoParser._ATN, TrinoParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public parse(): ParseContext {
        let localContext = new ParseContext(this.context, this.state);
        this.enterRule(localContext, 0, TrinoParser.RULE_parse);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309630) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3221223325) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240439671) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748490733) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537855) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4261404671) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3489390047) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 2182136063) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 4095) !== 0)) {
                {
                {
                this.state = 252;
                this.statements();
                }
                }
                this.state = 257;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 258;
            this.match(TrinoParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, TrinoParser.RULE_statements);
        let _la: number;
        try {
            this.state = 269;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 260;
                this.singleStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 261;
                this.standaloneExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 262;
                this.standalonePathSpecification();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 263;
                this.standaloneType();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 264;
                this.standaloneRowPattern();
                this.state = 266;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 309) {
                    {
                    this.state = 265;
                    this.match(TrinoParser.SEMICOLON_);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 268;
                this.standaloneFunctionSpecification();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, TrinoParser.RULE_singleStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 271;
            this.statement();
            this.state = 272;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneExpression(): StandaloneExpressionContext {
        let localContext = new StandaloneExpressionContext(this.context, this.state);
        this.enterRule(localContext, 6, TrinoParser.RULE_standaloneExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 274;
            this.expression();
            this.state = 275;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standalonePathSpecification(): StandalonePathSpecificationContext {
        let localContext = new StandalonePathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 8, TrinoParser.RULE_standalonePathSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 277;
            this.pathSpecification();
            this.state = 278;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneType(): StandaloneTypeContext {
        let localContext = new StandaloneTypeContext(this.context, this.state);
        this.enterRule(localContext, 10, TrinoParser.RULE_standaloneType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 280;
            this.type_(0);
            this.state = 281;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneRowPattern(): StandaloneRowPatternContext {
        let localContext = new StandaloneRowPatternContext(this.context, this.state);
        this.enterRule(localContext, 12, TrinoParser.RULE_standaloneRowPattern);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 283;
            this.rowPattern(0);
            this.state = 284;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneFunctionSpecification(): StandaloneFunctionSpecificationContext {
        let localContext = new StandaloneFunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 14, TrinoParser.RULE_standaloneFunctionSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 286;
            this.functionSpecification();
            this.state = 287;
            this.match(TrinoParser.SEMICOLON_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 16, TrinoParser.RULE_statement);
        let _la: number;
        try {
            this.state = 1160;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 123, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 289;
                this.rootQuery();
                }
                break;
            case 2:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 290;
                this.match(TrinoParser.USE_);
                this.state = 291;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 3:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 292;
                this.match(TrinoParser.USE_);
                this.state = 293;
                (localContext as UseContext)._catalog = this.identifier();
                this.state = 294;
                this.match(TrinoParser.DOT_);
                this.state = 295;
                (localContext as UseContext)._schema = this.identifier();
                }
                break;
            case 4:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 297;
                this.match(TrinoParser.CREATE_);
                this.state = 298;
                this.match(TrinoParser.CATALOG_);
                this.state = 302;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
                case 1:
                    {
                    this.state = 299;
                    this.match(TrinoParser.IF_);
                    this.state = 300;
                    this.match(TrinoParser.NOT_);
                    this.state = 301;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 304;
                (localContext as CreateCatalogContext)._catalog = this.identifier();
                this.state = 305;
                this.match(TrinoParser.USING_);
                this.state = 306;
                (localContext as CreateCatalogContext)._connectorName = this.identifier();
                this.state = 309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 307;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 308;
                    this.string_();
                    }
                }

                this.state = 313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 14) {
                    {
                    this.state = 311;
                    this.match(TrinoParser.AUTHORIZATION_);
                    this.state = 312;
                    this.principal();
                    }
                }

                this.state = 317;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 315;
                    this.match(TrinoParser.WITH_);
                    this.state = 316;
                    this.properties();
                    }
                }

                }
                break;
            case 5:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 319;
                this.match(TrinoParser.DROP_);
                this.state = 320;
                this.match(TrinoParser.CATALOG_);
                this.state = 323;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 321;
                    this.match(TrinoParser.IF_);
                    this.state = 322;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 325;
                (localContext as DropCatalogContext)._catalog = this.identifier();
                this.state = 327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 212) {
                    {
                    this.state = 326;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 22 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 6:
                localContext = new CreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 329;
                this.match(TrinoParser.CREATE_);
                this.state = 330;
                this.match(TrinoParser.SCHEMA_);
                this.state = 334;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 331;
                    this.match(TrinoParser.IF_);
                    this.state = 332;
                    this.match(TrinoParser.NOT_);
                    this.state = 333;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 336;
                this.qualifiedName();
                this.state = 339;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 14) {
                    {
                    this.state = 337;
                    this.match(TrinoParser.AUTHORIZATION_);
                    this.state = 338;
                    this.principal();
                    }
                }

                this.state = 343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 341;
                    this.match(TrinoParser.WITH_);
                    this.state = 342;
                    this.properties();
                    }
                }

                }
                break;
            case 7:
                localContext = new DropSchemaContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 345;
                this.match(TrinoParser.DROP_);
                this.state = 346;
                this.match(TrinoParser.SCHEMA_);
                this.state = 349;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 347;
                    this.match(TrinoParser.IF_);
                    this.state = 348;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 351;
                this.qualifiedName();
                this.state = 353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 212) {
                    {
                    this.state = 352;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 22 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 8:
                localContext = new RenameSchemaContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 355;
                this.match(TrinoParser.ALTER_);
                this.state = 356;
                this.match(TrinoParser.SCHEMA_);
                this.state = 357;
                this.qualifiedName();
                this.state = 358;
                this.match(TrinoParser.RENAME_);
                this.state = 359;
                this.match(TrinoParser.TO_);
                this.state = 360;
                this.identifier();
                }
                break;
            case 9:
                localContext = new SetSchemaAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 362;
                this.match(TrinoParser.ALTER_);
                this.state = 363;
                this.match(TrinoParser.SCHEMA_);
                this.state = 364;
                this.qualifiedName();
                this.state = 365;
                this.match(TrinoParser.SET_);
                this.state = 366;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 367;
                this.principal();
                }
                break;
            case 10:
                localContext = new CreateTableAsSelectContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 369;
                this.match(TrinoParser.CREATE_);
                this.state = 372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 370;
                    this.match(TrinoParser.OR_);
                    this.state = 371;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 374;
                this.match(TrinoParser.TABLE_);
                this.state = 378;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 375;
                    this.match(TrinoParser.IF_);
                    this.state = 376;
                    this.match(TrinoParser.NOT_);
                    this.state = 377;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 380;
                this.qualifiedName();
                this.state = 382;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 381;
                    this.columnAliases();
                    }
                }

                this.state = 386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 384;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 385;
                    this.string_();
                    }
                }

                this.state = 390;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 388;
                    this.match(TrinoParser.WITH_);
                    this.state = 389;
                    this.properties();
                    }
                }

                this.state = 392;
                this.match(TrinoParser.AS_);
                this.state = 398;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 19, this.context) ) {
                case 1:
                    {
                    this.state = 393;
                    this.rootQuery();
                    }
                    break;
                case 2:
                    {
                    this.state = 394;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 395;
                    this.rootQuery();
                    this.state = 396;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 405;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 400;
                    this.match(TrinoParser.WITH_);
                    this.state = 402;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 162) {
                        {
                        this.state = 401;
                        this.match(TrinoParser.NO_);
                        }
                    }

                    this.state = 404;
                    this.match(TrinoParser.DATA_);
                    }
                }

                }
                break;
            case 11:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 407;
                this.match(TrinoParser.CREATE_);
                this.state = 410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 408;
                    this.match(TrinoParser.OR_);
                    this.state = 409;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 412;
                this.match(TrinoParser.TABLE_);
                this.state = 416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 413;
                    this.match(TrinoParser.IF_);
                    this.state = 414;
                    this.match(TrinoParser.NOT_);
                    this.state = 415;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 418;
                this.qualifiedName();
                this.state = 419;
                this.match(TrinoParser.LPAREN_);
                this.state = 420;
                this.tableElement();
                this.state = 425;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 421;
                    this.match(TrinoParser.COMMA_);
                    this.state = 422;
                    this.tableElement();
                    }
                    }
                    this.state = 427;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 428;
                this.match(TrinoParser.RPAREN_);
                this.state = 431;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 429;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 430;
                    this.string_();
                    }
                }

                this.state = 435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 433;
                    this.match(TrinoParser.WITH_);
                    this.state = 434;
                    this.properties();
                    }
                }

                }
                break;
            case 12:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 437;
                this.match(TrinoParser.DROP_);
                this.state = 438;
                this.match(TrinoParser.TABLE_);
                this.state = 441;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 439;
                    this.match(TrinoParser.IF_);
                    this.state = 440;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 443;
                this.qualifiedName();
                }
                break;
            case 13:
                localContext = new InsertIntoContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 444;
                this.match(TrinoParser.INSERT_);
                this.state = 445;
                this.match(TrinoParser.INTO_);
                this.state = 446;
                this.qualifiedName();
                this.state = 448;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 447;
                    this.columnAliases();
                    }
                    break;
                }
                this.state = 450;
                this.rootQuery();
                }
                break;
            case 14:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 452;
                this.match(TrinoParser.DELETE_);
                this.state = 453;
                this.match(TrinoParser.FROM_);
                this.state = 454;
                this.qualifiedName();
                this.state = 457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 455;
                    this.match(TrinoParser.WHERE_);
                    this.state = 456;
                    this.booleanExpression(0);
                    }
                }

                }
                break;
            case 15:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 459;
                this.match(TrinoParser.TRUNCATE_);
                this.state = 460;
                this.match(TrinoParser.TABLE_);
                this.state = 461;
                this.qualifiedName();
                }
                break;
            case 16:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 462;
                this.match(TrinoParser.COMMENT_);
                this.state = 463;
                this.match(TrinoParser.ON_);
                this.state = 464;
                this.match(TrinoParser.TABLE_);
                this.state = 465;
                this.qualifiedName();
                this.state = 466;
                this.match(TrinoParser.IS_);
                this.state = 469;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 467;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 468;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 17:
                localContext = new CommentViewContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 471;
                this.match(TrinoParser.COMMENT_);
                this.state = 472;
                this.match(TrinoParser.ON_);
                this.state = 473;
                this.match(TrinoParser.VIEW_);
                this.state = 474;
                this.qualifiedName();
                this.state = 475;
                this.match(TrinoParser.IS_);
                this.state = 478;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 476;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 477;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new CommentColumnContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 480;
                this.match(TrinoParser.COMMENT_);
                this.state = 481;
                this.match(TrinoParser.ON_);
                this.state = 482;
                this.match(TrinoParser.COLUMN_);
                this.state = 483;
                this.qualifiedName();
                this.state = 484;
                this.match(TrinoParser.IS_);
                this.state = 487;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.STRING_:
                case TrinoParser.UNICODE_STRING_:
                    {
                    this.state = 485;
                    this.string_();
                    }
                    break;
                case TrinoParser.NULL_:
                    {
                    this.state = 486;
                    this.match(TrinoParser.NULL_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 19:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 489;
                this.match(TrinoParser.ALTER_);
                this.state = 490;
                this.match(TrinoParser.TABLE_);
                this.state = 493;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 491;
                    this.match(TrinoParser.IF_);
                    this.state = 492;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 495;
                (localContext as RenameTableContext)._from_ = this.qualifiedName();
                this.state = 496;
                this.match(TrinoParser.RENAME_);
                this.state = 497;
                this.match(TrinoParser.TO_);
                this.state = 498;
                (localContext as RenameTableContext)._to = this.qualifiedName();
                }
                break;
            case 20:
                localContext = new AddColumnContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 500;
                this.match(TrinoParser.ALTER_);
                this.state = 501;
                this.match(TrinoParser.TABLE_);
                this.state = 504;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.match(TrinoParser.IF_);
                    this.state = 503;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 506;
                (localContext as AddColumnContext)._tableName = this.qualifiedName();
                this.state = 507;
                this.match(TrinoParser.ADD_);
                this.state = 508;
                this.match(TrinoParser.COLUMN_);
                this.state = 512;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 509;
                    this.match(TrinoParser.IF_);
                    this.state = 510;
                    this.match(TrinoParser.NOT_);
                    this.state = 511;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 514;
                (localContext as AddColumnContext)._column = this.columnDefinition();
                }
                break;
            case 21:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 516;
                this.match(TrinoParser.ALTER_);
                this.state = 517;
                this.match(TrinoParser.TABLE_);
                this.state = 520;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 518;
                    this.match(TrinoParser.IF_);
                    this.state = 519;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 522;
                (localContext as RenameColumnContext)._tableName = this.qualifiedName();
                this.state = 523;
                this.match(TrinoParser.RENAME_);
                this.state = 524;
                this.match(TrinoParser.COLUMN_);
                this.state = 527;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 525;
                    this.match(TrinoParser.IF_);
                    this.state = 526;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 529;
                (localContext as RenameColumnContext)._from_ = this.qualifiedName();
                this.state = 530;
                this.match(TrinoParser.TO_);
                this.state = 531;
                (localContext as RenameColumnContext)._to = this.identifier();
                }
                break;
            case 22:
                localContext = new DropColumnContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 533;
                this.match(TrinoParser.ALTER_);
                this.state = 534;
                this.match(TrinoParser.TABLE_);
                this.state = 537;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 535;
                    this.match(TrinoParser.IF_);
                    this.state = 536;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 539;
                (localContext as DropColumnContext)._tableName = this.qualifiedName();
                this.state = 540;
                this.match(TrinoParser.DROP_);
                this.state = 541;
                this.match(TrinoParser.COLUMN_);
                this.state = 544;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 542;
                    this.match(TrinoParser.IF_);
                    this.state = 543;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 546;
                (localContext as DropColumnContext)._column = this.qualifiedName();
                }
                break;
            case 23:
                localContext = new SetColumnTypeContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 548;
                this.match(TrinoParser.ALTER_);
                this.state = 549;
                this.match(TrinoParser.TABLE_);
                this.state = 552;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 550;
                    this.match(TrinoParser.IF_);
                    this.state = 551;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 554;
                (localContext as SetColumnTypeContext)._tableName = this.qualifiedName();
                this.state = 555;
                this.match(TrinoParser.ALTER_);
                this.state = 556;
                this.match(TrinoParser.COLUMN_);
                this.state = 557;
                (localContext as SetColumnTypeContext)._columnName = this.qualifiedName();
                this.state = 558;
                this.match(TrinoParser.SET_);
                this.state = 559;
                this.match(TrinoParser.DATA_);
                this.state = 560;
                this.match(TrinoParser.TYPE_);
                this.state = 561;
                this.type_(0);
                }
                break;
            case 24:
                localContext = new SetTableAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 563;
                this.match(TrinoParser.ALTER_);
                this.state = 564;
                this.match(TrinoParser.TABLE_);
                this.state = 565;
                (localContext as SetTableAuthorizationContext)._tableName = this.qualifiedName();
                this.state = 566;
                this.match(TrinoParser.SET_);
                this.state = 567;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 568;
                this.principal();
                }
                break;
            case 25:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 570;
                this.match(TrinoParser.ALTER_);
                this.state = 571;
                this.match(TrinoParser.TABLE_);
                this.state = 572;
                (localContext as SetTablePropertiesContext)._tableName = this.qualifiedName();
                this.state = 573;
                this.match(TrinoParser.SET_);
                this.state = 574;
                this.match(TrinoParser.PROPERTIES_);
                this.state = 575;
                this.propertyAssignments();
                }
                break;
            case 26:
                localContext = new TableExecuteContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 577;
                this.match(TrinoParser.ALTER_);
                this.state = 578;
                this.match(TrinoParser.TABLE_);
                this.state = 579;
                (localContext as TableExecuteContext)._tableName = this.qualifiedName();
                this.state = 580;
                this.match(TrinoParser.EXECUTE_);
                this.state = 581;
                (localContext as TableExecuteContext)._procedureName = this.identifier();
                this.state = 594;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 582;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 591;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 583;
                        this.callArgument();
                        this.state = 588;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 312) {
                            {
                            {
                            this.state = 584;
                            this.match(TrinoParser.COMMA_);
                            this.state = 585;
                            this.callArgument();
                            }
                            }
                            this.state = 590;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 593;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 598;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 596;
                    this.match(TrinoParser.WHERE_);
                    this.state = 597;
                    (localContext as TableExecuteContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 27:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 600;
                this.match(TrinoParser.ANALYZE_);
                this.state = 601;
                this.qualifiedName();
                this.state = 604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 602;
                    this.match(TrinoParser.WITH_);
                    this.state = 603;
                    this.properties();
                    }
                }

                }
                break;
            case 28:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 606;
                this.match(TrinoParser.CREATE_);
                this.state = 609;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 607;
                    this.match(TrinoParser.OR_);
                    this.state = 608;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 611;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 612;
                this.match(TrinoParser.VIEW_);
                this.state = 616;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
                case 1:
                    {
                    this.state = 613;
                    this.match(TrinoParser.IF_);
                    this.state = 614;
                    this.match(TrinoParser.NOT_);
                    this.state = 615;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 618;
                this.qualifiedName();
                this.state = 622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 619;
                    this.match(TrinoParser.GRACE_);
                    this.state = 620;
                    this.match(TrinoParser.PERIOD_);
                    this.state = 621;
                    this.interval();
                    }
                }

                this.state = 626;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 624;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 625;
                    this.string_();
                    }
                }

                this.state = 630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 628;
                    this.match(TrinoParser.WITH_);
                    this.state = 629;
                    this.properties();
                    }
                }

                this.state = 632;
                this.match(TrinoParser.AS_);
                this.state = 633;
                this.rootQuery();
                }
                break;
            case 29:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 635;
                this.match(TrinoParser.CREATE_);
                this.state = 638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 636;
                    this.match(TrinoParser.OR_);
                    this.state = 637;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 640;
                this.match(TrinoParser.VIEW_);
                this.state = 641;
                this.qualifiedName();
                this.state = 644;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29) {
                    {
                    this.state = 642;
                    this.match(TrinoParser.COMMENT_);
                    this.state = 643;
                    this.string_();
                    }
                }

                this.state = 648;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 229) {
                    {
                    this.state = 646;
                    this.match(TrinoParser.SECURITY_);
                    this.state = 647;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 55 || _la === 114)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 650;
                this.match(TrinoParser.AS_);
                this.state = 651;
                this.rootQuery();
                }
                break;
            case 30:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 653;
                this.match(TrinoParser.REFRESH_);
                this.state = 654;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 655;
                this.match(TrinoParser.VIEW_);
                this.state = 656;
                this.qualifiedName();
                }
                break;
            case 31:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 657;
                this.match(TrinoParser.DROP_);
                this.state = 658;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 659;
                this.match(TrinoParser.VIEW_);
                this.state = 662;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 660;
                    this.match(TrinoParser.IF_);
                    this.state = 661;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 664;
                this.qualifiedName();
                }
                break;
            case 32:
                localContext = new RenameMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 665;
                this.match(TrinoParser.ALTER_);
                this.state = 666;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 667;
                this.match(TrinoParser.VIEW_);
                this.state = 670;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 668;
                    this.match(TrinoParser.IF_);
                    this.state = 669;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 672;
                (localContext as RenameMaterializedViewContext)._from_ = this.qualifiedName();
                this.state = 673;
                this.match(TrinoParser.RENAME_);
                this.state = 674;
                this.match(TrinoParser.TO_);
                this.state = 675;
                (localContext as RenameMaterializedViewContext)._to = this.qualifiedName();
                }
                break;
            case 33:
                localContext = new SetMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 677;
                this.match(TrinoParser.ALTER_);
                this.state = 678;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 679;
                this.match(TrinoParser.VIEW_);
                this.state = 680;
                this.qualifiedName();
                this.state = 681;
                this.match(TrinoParser.SET_);
                this.state = 682;
                this.match(TrinoParser.PROPERTIES_);
                this.state = 683;
                this.propertyAssignments();
                }
                break;
            case 34:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 685;
                this.match(TrinoParser.DROP_);
                this.state = 686;
                this.match(TrinoParser.VIEW_);
                this.state = 689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
                case 1:
                    {
                    this.state = 687;
                    this.match(TrinoParser.IF_);
                    this.state = 688;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 691;
                this.qualifiedName();
                }
                break;
            case 35:
                localContext = new RenameViewContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 692;
                this.match(TrinoParser.ALTER_);
                this.state = 693;
                this.match(TrinoParser.VIEW_);
                this.state = 694;
                (localContext as RenameViewContext)._from_ = this.qualifiedName();
                this.state = 695;
                this.match(TrinoParser.RENAME_);
                this.state = 696;
                this.match(TrinoParser.TO_);
                this.state = 697;
                (localContext as RenameViewContext)._to = this.qualifiedName();
                }
                break;
            case 36:
                localContext = new SetViewAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 699;
                this.match(TrinoParser.ALTER_);
                this.state = 700;
                this.match(TrinoParser.VIEW_);
                this.state = 701;
                (localContext as SetViewAuthorizationContext)._from_ = this.qualifiedName();
                this.state = 702;
                this.match(TrinoParser.SET_);
                this.state = 703;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 704;
                this.principal();
                }
                break;
            case 37:
                localContext = new CallContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 706;
                this.match(TrinoParser.CALL_);
                this.state = 707;
                this.qualifiedName();
                this.state = 708;
                this.match(TrinoParser.LPAREN_);
                this.state = 717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 709;
                    this.callArgument();
                    this.state = 714;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 710;
                        this.match(TrinoParser.COMMA_);
                        this.state = 711;
                        this.callArgument();
                        }
                        }
                        this.state = 716;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 719;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 38:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 721;
                this.match(TrinoParser.CREATE_);
                this.state = 724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 722;
                    this.match(TrinoParser.OR_);
                    this.state = 723;
                    this.match(TrinoParser.REPLACE_);
                    }
                }

                this.state = 726;
                this.functionSpecification();
                }
                break;
            case 39:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 727;
                this.match(TrinoParser.DROP_);
                this.state = 728;
                this.match(TrinoParser.FUNCTION_);
                this.state = 731;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 729;
                    this.match(TrinoParser.IF_);
                    this.state = 730;
                    this.match(TrinoParser.EXISTS_);
                    }
                    break;
                }
                this.state = 733;
                this.functionDeclaration();
                }
                break;
            case 40:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 734;
                this.match(TrinoParser.CREATE_);
                this.state = 735;
                this.match(TrinoParser.ROLE_);
                this.state = 736;
                (localContext as CreateRoleContext)._name = this.identifier();
                this.state = 740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 737;
                    this.match(TrinoParser.WITH_);
                    this.state = 738;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 739;
                    this.grantor();
                    }
                }

                this.state = 744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 742;
                    this.match(TrinoParser.IN_);
                    this.state = 743;
                    (localContext as CreateRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 41:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 746;
                this.match(TrinoParser.DROP_);
                this.state = 747;
                this.match(TrinoParser.ROLE_);
                this.state = 748;
                (localContext as DropRoleContext)._name = this.identifier();
                this.state = 751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 749;
                    this.match(TrinoParser.IN_);
                    this.state = 750;
                    (localContext as DropRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 42:
                localContext = new GrantRolesContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 753;
                this.match(TrinoParser.GRANT_);
                this.state = 754;
                this.roles();
                this.state = 755;
                this.match(TrinoParser.TO_);
                this.state = 756;
                this.principal();
                this.state = 761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 757;
                    this.match(TrinoParser.COMMA_);
                    this.state = 758;
                    this.principal();
                    }
                    }
                    this.state = 763;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 764;
                    this.match(TrinoParser.WITH_);
                    this.state = 765;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 766;
                    this.match(TrinoParser.OPTION_);
                    }
                }

                this.state = 772;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 94) {
                    {
                    this.state = 769;
                    this.match(TrinoParser.GRANTED_);
                    this.state = 770;
                    this.match(TrinoParser.BY_);
                    this.state = 771;
                    this.grantor();
                    }
                }

                this.state = 776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 774;
                    this.match(TrinoParser.IN_);
                    this.state = 775;
                    (localContext as GrantRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 43:
                localContext = new RevokeRolesContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 778;
                this.match(TrinoParser.REVOKE_);
                this.state = 782;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 68, this.context) ) {
                case 1:
                    {
                    this.state = 779;
                    this.match(TrinoParser.ADMIN_);
                    this.state = 780;
                    this.match(TrinoParser.OPTION_);
                    this.state = 781;
                    this.match(TrinoParser.FOR_);
                    }
                    break;
                }
                this.state = 784;
                this.roles();
                this.state = 785;
                this.match(TrinoParser.FROM_);
                this.state = 786;
                this.principal();
                this.state = 791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 787;
                    this.match(TrinoParser.COMMA_);
                    this.state = 788;
                    this.principal();
                    }
                    }
                    this.state = 793;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 797;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 94) {
                    {
                    this.state = 794;
                    this.match(TrinoParser.GRANTED_);
                    this.state = 795;
                    this.match(TrinoParser.BY_);
                    this.state = 796;
                    this.grantor();
                    }
                }

                this.state = 801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 799;
                    this.match(TrinoParser.IN_);
                    this.state = 800;
                    (localContext as RevokeRolesContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 44:
                localContext = new SetRoleContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 803;
                this.match(TrinoParser.SET_);
                this.state = 804;
                this.match(TrinoParser.ROLE_);
                this.state = 808;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
                case 1:
                    {
                    this.state = 805;
                    this.match(TrinoParser.ALL_);
                    }
                    break;
                case 2:
                    {
                    this.state = 806;
                    this.match(TrinoParser.NONE_);
                    }
                    break;
                case 3:
                    {
                    this.state = 807;
                    (localContext as SetRoleContext)._role = this.identifier();
                    }
                    break;
                }
                this.state = 812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 810;
                    this.match(TrinoParser.IN_);
                    this.state = 811;
                    (localContext as SetRoleContext)._catalog = this.identifier();
                    }
                }

                }
                break;
            case 45:
                localContext = new GrantContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 814;
                this.match(TrinoParser.GRANT_);
                this.state = 825;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 815;
                    this.privilege();
                    this.state = 820;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 816;
                        this.match(TrinoParser.COMMA_);
                        this.state = 817;
                        this.privilege();
                        }
                        }
                        this.state = 822;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 823;
                    this.match(TrinoParser.ALL_);
                    this.state = 824;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 827;
                this.match(TrinoParser.ON_);
                this.state = 829;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 828;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 226 || _la === 244)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 831;
                this.qualifiedName();
                this.state = 832;
                this.match(TrinoParser.TO_);
                this.state = 833;
                (localContext as GrantContext)._grantee = this.principal();
                this.state = 837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288) {
                    {
                    this.state = 834;
                    this.match(TrinoParser.WITH_);
                    this.state = 835;
                    this.match(TrinoParser.GRANT_);
                    this.state = 836;
                    this.match(TrinoParser.OPTION_);
                    }
                }

                }
                break;
            case 46:
                localContext = new DenyContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 839;
                this.match(TrinoParser.DENY_);
                this.state = 850;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 840;
                    this.privilege();
                    this.state = 845;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 841;
                        this.match(TrinoParser.COMMA_);
                        this.state = 842;
                        this.privilege();
                        }
                        }
                        this.state = 847;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 848;
                    this.match(TrinoParser.ALL_);
                    this.state = 849;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 852;
                this.match(TrinoParser.ON_);
                this.state = 854;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                case 1:
                    {
                    this.state = 853;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 226 || _la === 244)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 856;
                this.qualifiedName();
                this.state = 857;
                this.match(TrinoParser.TO_);
                this.state = 858;
                (localContext as DenyContext)._grantee = this.principal();
                }
                break;
            case 47:
                localContext = new RevokeContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 860;
                this.match(TrinoParser.REVOKE_);
                this.state = 864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93) {
                    {
                    this.state = 861;
                    this.match(TrinoParser.GRANT_);
                    this.state = 862;
                    this.match(TrinoParser.OPTION_);
                    this.state = 863;
                    this.match(TrinoParser.FOR_);
                    }
                }

                this.state = 876;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.CREATE_:
                case TrinoParser.DELETE_:
                case TrinoParser.INSERT_:
                case TrinoParser.SELECT_:
                case TrinoParser.UPDATE_:
                    {
                    this.state = 866;
                    this.privilege();
                    this.state = 871;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 867;
                        this.match(TrinoParser.COMMA_);
                        this.state = 868;
                        this.privilege();
                        }
                        }
                        this.state = 873;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case TrinoParser.ALL_:
                    {
                    this.state = 874;
                    this.match(TrinoParser.ALL_);
                    this.state = 875;
                    this.match(TrinoParser.PRIVILEGES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 878;
                this.match(TrinoParser.ON_);
                this.state = 880;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 879;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 226 || _la === 244)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 882;
                this.qualifiedName();
                this.state = 883;
                this.match(TrinoParser.FROM_);
                this.state = 884;
                (localContext as RevokeContext)._grantee = this.principal();
                }
                break;
            case 48:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 886;
                this.match(TrinoParser.SHOW_);
                this.state = 887;
                this.match(TrinoParser.GRANTS_);
                this.state = 893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173) {
                    {
                    this.state = 888;
                    this.match(TrinoParser.ON_);
                    this.state = 890;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 244) {
                        {
                        this.state = 889;
                        this.match(TrinoParser.TABLE_);
                        }
                    }

                    this.state = 892;
                    this.qualifiedName();
                    }
                }

                }
                break;
            case 49:
                localContext = new ExplainContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 895;
                this.match(TrinoParser.EXPLAIN_);
                this.state = 907;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                case 1:
                    {
                    this.state = 896;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 897;
                    this.explainOption();
                    this.state = 902;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 898;
                        this.match(TrinoParser.COMMA_);
                        this.state = 899;
                        this.explainOption();
                        }
                        }
                        this.state = 904;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 905;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 909;
                this.statement();
                }
                break;
            case 50:
                localContext = new ExplainAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 910;
                this.match(TrinoParser.EXPLAIN_);
                this.state = 911;
                this.match(TrinoParser.ANALYZE_);
                this.state = 913;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 912;
                    this.match(TrinoParser.VERBOSE_);
                    }
                }

                this.state = 915;
                this.statement();
                }
                break;
            case 51:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 916;
                this.match(TrinoParser.SHOW_);
                this.state = 917;
                this.match(TrinoParser.CREATE_);
                this.state = 918;
                this.match(TrinoParser.TABLE_);
                this.state = 919;
                this.qualifiedName();
                }
                break;
            case 52:
                localContext = new ShowCreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 920;
                this.match(TrinoParser.SHOW_);
                this.state = 921;
                this.match(TrinoParser.CREATE_);
                this.state = 922;
                this.match(TrinoParser.SCHEMA_);
                this.state = 923;
                this.qualifiedName();
                }
                break;
            case 53:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 924;
                this.match(TrinoParser.SHOW_);
                this.state = 925;
                this.match(TrinoParser.CREATE_);
                this.state = 926;
                this.match(TrinoParser.VIEW_);
                this.state = 927;
                this.qualifiedName();
                }
                break;
            case 54:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 928;
                this.match(TrinoParser.SHOW_);
                this.state = 929;
                this.match(TrinoParser.CREATE_);
                this.state = 930;
                this.match(TrinoParser.MATERIALIZED_);
                this.state = 931;
                this.match(TrinoParser.VIEW_);
                this.state = 932;
                this.qualifiedName();
                }
                break;
            case 55:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 933;
                this.match(TrinoParser.SHOW_);
                this.state = 934;
                this.match(TrinoParser.TABLES_);
                this.state = 937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 935;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 936;
                    this.qualifiedName();
                    }
                }

                this.state = 945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 939;
                    this.match(TrinoParser.LIKE_);
                    this.state = 940;
                    (localContext as ShowTablesContext)._pattern = this.string_();
                    this.state = 943;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 941;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 942;
                        (localContext as ShowTablesContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 56:
                localContext = new ShowSchemasContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 947;
                this.match(TrinoParser.SHOW_);
                this.state = 948;
                this.match(TrinoParser.SCHEMAS_);
                this.state = 951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 949;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 950;
                    this.identifier();
                    }
                }

                this.state = 959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 953;
                    this.match(TrinoParser.LIKE_);
                    this.state = 954;
                    (localContext as ShowSchemasContext)._pattern = this.string_();
                    this.state = 957;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 955;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 956;
                        (localContext as ShowSchemasContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 57:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 961;
                this.match(TrinoParser.SHOW_);
                this.state = 962;
                this.match(TrinoParser.CATALOGS_);
                this.state = 969;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 963;
                    this.match(TrinoParser.LIKE_);
                    this.state = 964;
                    (localContext as ShowCatalogsContext)._pattern = this.string_();
                    this.state = 967;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 965;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 966;
                        (localContext as ShowCatalogsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 58:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 971;
                this.match(TrinoParser.SHOW_);
                this.state = 972;
                this.match(TrinoParser.COLUMNS_);
                this.state = 973;
                _la = this.tokenStream.LA(1);
                if(!(_la === 88 || _la === 105)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 974;
                    this.qualifiedName();
                    }
                }

                this.state = 983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 977;
                    this.match(TrinoParser.LIKE_);
                    this.state = 978;
                    (localContext as ShowColumnsContext)._pattern = this.string_();
                    this.state = 981;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 979;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 980;
                        (localContext as ShowColumnsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 59:
                localContext = new ShowStatsContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 985;
                this.match(TrinoParser.SHOW_);
                this.state = 986;
                this.match(TrinoParser.STATS_);
                this.state = 987;
                this.match(TrinoParser.FOR_);
                this.state = 988;
                this.qualifiedName();
                }
                break;
            case 60:
                localContext = new ShowStatsForQueryContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 989;
                this.match(TrinoParser.SHOW_);
                this.state = 990;
                this.match(TrinoParser.STATS_);
                this.state = 991;
                this.match(TrinoParser.FOR_);
                this.state = 992;
                this.match(TrinoParser.LPAREN_);
                this.state = 993;
                this.rootQuery();
                this.state = 994;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 61:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 996;
                this.match(TrinoParser.SHOW_);
                this.state = 998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39) {
                    {
                    this.state = 997;
                    this.match(TrinoParser.CURRENT_);
                    }
                }

                this.state = 1000;
                this.match(TrinoParser.ROLES_);
                this.state = 1003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1001;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1002;
                    this.identifier();
                    }
                }

                }
                break;
            case 62:
                localContext = new ShowRoleGrantsContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1005;
                this.match(TrinoParser.SHOW_);
                this.state = 1006;
                this.match(TrinoParser.ROLE_);
                this.state = 1007;
                this.match(TrinoParser.GRANTS_);
                this.state = 1010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1008;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1009;
                    this.identifier();
                    }
                }

                }
                break;
            case 63:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1012;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1013;
                this.qualifiedName();
                }
                break;
            case 64:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1014;
                this.match(TrinoParser.DESC_);
                this.state = 1015;
                this.qualifiedName();
                }
                break;
            case 65:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1016;
                this.match(TrinoParser.SHOW_);
                this.state = 1017;
                this.match(TrinoParser.FUNCTIONS_);
                this.state = 1020;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88 || _la === 105) {
                    {
                    this.state = 1018;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 88 || _la === 105)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1019;
                    this.qualifiedName();
                    }
                }

                this.state = 1028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1022;
                    this.match(TrinoParser.LIKE_);
                    this.state = 1023;
                    (localContext as ShowFunctionsContext)._pattern = this.string_();
                    this.state = 1026;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 1024;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 1025;
                        (localContext as ShowFunctionsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 66:
                localContext = new ShowSessionContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1030;
                this.match(TrinoParser.SHOW_);
                this.state = 1031;
                this.match(TrinoParser.SESSION_);
                this.state = 1038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 137) {
                    {
                    this.state = 1032;
                    this.match(TrinoParser.LIKE_);
                    this.state = 1033;
                    (localContext as ShowSessionContext)._pattern = this.string_();
                    this.state = 1036;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 73) {
                        {
                        this.state = 1034;
                        this.match(TrinoParser.ESCAPE_);
                        this.state = 1035;
                        (localContext as ShowSessionContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 67:
                localContext = new SetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1040;
                this.match(TrinoParser.SET_);
                this.state = 1041;
                this.match(TrinoParser.SESSION_);
                this.state = 1042;
                this.match(TrinoParser.AUTHORIZATION_);
                this.state = 1043;
                this.authorizationUser();
                }
                break;
            case 68:
                localContext = new ResetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1044;
                this.match(TrinoParser.RESET_);
                this.state = 1045;
                this.match(TrinoParser.SESSION_);
                this.state = 1046;
                this.match(TrinoParser.AUTHORIZATION_);
                }
                break;
            case 69:
                localContext = new SetSessionContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1047;
                this.match(TrinoParser.SET_);
                this.state = 1048;
                this.match(TrinoParser.SESSION_);
                this.state = 1049;
                this.qualifiedName();
                this.state = 1050;
                this.match(TrinoParser.EQ_);
                this.state = 1051;
                this.expression();
                }
                break;
            case 70:
                localContext = new ResetSessionContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1053;
                this.match(TrinoParser.RESET_);
                this.state = 1054;
                this.match(TrinoParser.SESSION_);
                this.state = 1055;
                this.qualifiedName();
                }
                break;
            case 71:
                localContext = new StartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1056;
                this.match(TrinoParser.START_);
                this.state = 1057;
                this.match(TrinoParser.TRANSACTION_);
                this.state = 1066;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117 || _la === 203) {
                    {
                    this.state = 1058;
                    this.transactionMode();
                    this.state = 1063;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1059;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1060;
                        this.transactionMode();
                        }
                        }
                        this.state = 1065;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 72:
                localContext = new CommitContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1068;
                this.match(TrinoParser.COMMIT_);
                this.state = 1070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1069;
                    this.match(TrinoParser.WORK_);
                    }
                }

                }
                break;
            case 73:
                localContext = new RollbackContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1072;
                this.match(TrinoParser.ROLLBACK_);
                this.state = 1074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 291) {
                    {
                    this.state = 1073;
                    this.match(TrinoParser.WORK_);
                    }
                }

                }
                break;
            case 74:
                localContext = new PrepareContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1076;
                this.match(TrinoParser.PREPARE_);
                this.state = 1077;
                this.identifier();
                this.state = 1078;
                this.match(TrinoParser.FROM_);
                this.state = 1079;
                this.statement();
                }
                break;
            case 75:
                localContext = new DeallocateContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1081;
                this.match(TrinoParser.DEALLOCATE_);
                this.state = 1082;
                this.match(TrinoParser.PREPARE_);
                this.state = 1083;
                this.identifier();
                }
                break;
            case 76:
                localContext = new ExecuteContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1084;
                this.match(TrinoParser.EXECUTE_);
                this.state = 1085;
                this.identifier();
                this.state = 1095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274) {
                    {
                    this.state = 1086;
                    this.match(TrinoParser.USING_);
                    this.state = 1087;
                    this.expression();
                    this.state = 1092;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1088;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1089;
                        this.expression();
                        }
                        }
                        this.state = 1094;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 77:
                localContext = new ExecuteImmediateContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1097;
                this.match(TrinoParser.EXECUTE_);
                this.state = 1098;
                this.match(TrinoParser.IMMEDIATE_);
                this.state = 1099;
                this.string_();
                this.state = 1109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274) {
                    {
                    this.state = 1100;
                    this.match(TrinoParser.USING_);
                    this.state = 1101;
                    this.expression();
                    this.state = 1106;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1102;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1103;
                        this.expression();
                        }
                        }
                        this.state = 1108;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 78:
                localContext = new DescribeInputContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1111;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1112;
                this.match(TrinoParser.INPUT_);
                this.state = 1113;
                this.identifier();
                }
                break;
            case 79:
                localContext = new DescribeOutputContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1114;
                this.match(TrinoParser.DESCRIBE_);
                this.state = 1115;
                this.match(TrinoParser.OUTPUT_);
                this.state = 1116;
                this.identifier();
                }
                break;
            case 80:
                localContext = new SetPathContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1117;
                this.match(TrinoParser.SET_);
                this.state = 1118;
                this.match(TrinoParser.PATH_);
                this.state = 1119;
                this.pathSpecification();
                }
                break;
            case 81:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1120;
                this.match(TrinoParser.SET_);
                this.state = 1121;
                this.match(TrinoParser.TIME_);
                this.state = 1122;
                this.match(TrinoParser.ZONE_);
                this.state = 1125;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
                case 1:
                    {
                    this.state = 1123;
                    this.match(TrinoParser.LOCAL_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1124;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 82:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1127;
                this.match(TrinoParser.UPDATE_);
                this.state = 1128;
                this.qualifiedName();
                this.state = 1129;
                this.match(TrinoParser.SET_);
                this.state = 1130;
                this.updateAssignment();
                this.state = 1135;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1131;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1132;
                    this.updateAssignment();
                    }
                    }
                    this.state = 1137;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1140;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 285) {
                    {
                    this.state = 1138;
                    this.match(TrinoParser.WHERE_);
                    this.state = 1139;
                    (localContext as UpdateContext)._where = this.booleanExpression(0);
                    }
                }

                }
                break;
            case 83:
                localContext = new MergeContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1142;
                this.match(TrinoParser.MERGE_);
                this.state = 1143;
                this.match(TrinoParser.INTO_);
                this.state = 1144;
                this.qualifiedName();
                this.state = 1149;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282056543) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 1146;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1145;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1148;
                    this.identifier();
                    }
                }

                this.state = 1151;
                this.match(TrinoParser.USING_);
                this.state = 1152;
                this.relation(0);
                this.state = 1153;
                this.match(TrinoParser.ON_);
                this.state = 1154;
                this.expression();
                this.state = 1156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1155;
                    this.mergeCase();
                    }
                    }
                    this.state = 1158;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rootQuery(): RootQueryContext {
        let localContext = new RootQueryContext(this.context, this.state);
        this.enterRule(localContext, 18, TrinoParser.RULE_rootQuery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1163;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
            case 1:
                {
                this.state = 1162;
                this.withFunction();
                }
                break;
            }
            this.state = 1165;
            this.query();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withFunction(): WithFunctionContext {
        let localContext = new WithFunctionContext(this.context, this.state);
        this.enterRule(localContext, 20, TrinoParser.RULE_withFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1167;
            this.match(TrinoParser.WITH_);
            this.state = 1168;
            this.functionSpecification();
            this.state = 1173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1169;
                this.match(TrinoParser.COMMA_);
                this.state = 1170;
                this.functionSpecification();
                }
                }
                this.state = 1175;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 22, TrinoParser.RULE_query);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1177;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1176;
                this.with_();
                }
            }

            this.state = 1179;
            this.queryNoWith();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): WithContext {
        let localContext = new WithContext(this.context, this.state);
        this.enterRule(localContext, 24, TrinoParser.RULE_with);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1181;
            this.match(TrinoParser.WITH_);
            this.state = 1183;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 204) {
                {
                this.state = 1182;
                this.match(TrinoParser.RECURSIVE_);
                }
            }

            this.state = 1185;
            this.namedQuery();
            this.state = 1190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1186;
                this.match(TrinoParser.COMMA_);
                this.state = 1187;
                this.namedQuery();
                }
                }
                this.state = 1192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 26, TrinoParser.RULE_tableElement);
        try {
            this.state = 1195;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1193;
                this.columnDefinition();
                }
                break;
            case TrinoParser.LIKE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1194;
                this.likeClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 28, TrinoParser.RULE_columnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1197;
            this.identifier();
            this.state = 1198;
            this.type_(0);
            this.state = 1201;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 165) {
                {
                this.state = 1199;
                this.match(TrinoParser.NOT_);
                this.state = 1200;
                this.match(TrinoParser.NULL_);
                }
            }

            this.state = 1205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 29) {
                {
                this.state = 1203;
                this.match(TrinoParser.COMMENT_);
                this.state = 1204;
                this.string_();
                }
            }

            this.state = 1209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 288) {
                {
                this.state = 1207;
                this.match(TrinoParser.WITH_);
                this.state = 1208;
                this.properties();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 30, TrinoParser.RULE_likeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1211;
            this.match(TrinoParser.LIKE_);
            this.state = 1212;
            this.qualifiedName();
            this.state = 1215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75 || _la === 106) {
                {
                this.state = 1213;
                localContext._optionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 75 || _la === 106)) {
                    localContext._optionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1214;
                this.match(TrinoParser.PROPERTIES_);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public properties(): PropertiesContext {
        let localContext = new PropertiesContext(this.context, this.state);
        this.enterRule(localContext, 32, TrinoParser.RULE_properties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1217;
            this.match(TrinoParser.LPAREN_);
            this.state = 1218;
            this.propertyAssignments();
            this.state = 1219;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        let localContext = new PropertyAssignmentsContext(this.context, this.state);
        this.enterRule(localContext, 34, TrinoParser.RULE_propertyAssignments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1221;
            this.property();
            this.state = 1226;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1222;
                this.match(TrinoParser.COMMA_);
                this.state = 1223;
                this.property();
                }
                }
                this.state = 1228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 36, TrinoParser.RULE_property);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1229;
            this.identifier();
            this.state = 1230;
            this.match(TrinoParser.EQ_);
            this.state = 1231;
            this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 38, TrinoParser.RULE_propertyValue);
        try {
            this.state = 1235;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 135, this.context) ) {
            case 1:
                localContext = new DefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1233;
                this.match(TrinoParser.DEFAULT_);
                }
                break;
            case 2:
                localContext = new NonDefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1234;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryNoWith(): QueryNoWithContext {
        let localContext = new QueryNoWithContext(this.context, this.state);
        this.enterRule(localContext, 40, TrinoParser.RULE_queryNoWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1237;
            this.queryTerm(0);
            this.state = 1248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1238;
                this.match(TrinoParser.ORDER_);
                this.state = 1239;
                this.match(TrinoParser.BY_);
                this.state = 1240;
                this.sortItem();
                this.state = 1245;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1241;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1242;
                    this.sortItem();
                    }
                    }
                    this.state = 1247;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1250;
                this.match(TrinoParser.OFFSET_);
                this.state = 1251;
                localContext._offset = this.rowCount();
                this.state = 1253;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 222 || _la === 223) {
                    {
                    this.state = 1252;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 222 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
            }

            this.state = 1270;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.LIMIT_:
                {
                this.state = 1257;
                this.match(TrinoParser.LIMIT_);
                this.state = 1258;
                localContext._limit = this.limitRowCount();
                }
                break;
            case TrinoParser.FETCH_:
                {
                this.state = 1259;
                this.match(TrinoParser.FETCH_);
                this.state = 1260;
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 308 || _la === 330) {
                    {
                    this.state = 1261;
                    localContext._fetchFirst = this.rowCount();
                    }
                }

                this.state = 1264;
                _la = this.tokenStream.LA(1);
                if(!(_la === 222 || _la === 223)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1268;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoParser.ONLY_:
                    {
                    this.state = 1265;
                    this.match(TrinoParser.ONLY_);
                    }
                    break;
                case TrinoParser.WITH_:
                    {
                    this.state = 1266;
                    this.match(TrinoParser.WITH_);
                    this.state = 1267;
                    this.match(TrinoParser.TIES_);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case TrinoParser.WITH_:
            case TrinoParser.SEMICOLON_:
            case TrinoParser.RPAREN_:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitRowCount(): LimitRowCountContext {
        let localContext = new LimitRowCountContext(this.context, this.state);
        this.enterRule(localContext, 42, TrinoParser.RULE_limitRowCount);
        try {
            this.state = 1274;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ALL_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1272;
                this.match(TrinoParser.ALL_);
                }
                break;
            case TrinoParser.QUESTION_MARK_:
            case TrinoParser.INTEGER_VALUE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1273;
                this.rowCount();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowCount(): RowCountContext {
        let localContext = new RowCountContext(this.context, this.state);
        this.enterRule(localContext, 44, TrinoParser.RULE_rowCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1276;
            _la = this.tokenStream.LA(1);
            if(!(_la === 308 || _la === 330)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 46;
        this.enterRecursionRule(localContext, 46, TrinoParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1279;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1295;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1293;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_queryTerm);
                        this.state = 1281;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1282;
                        (localContext as SetOperationContext)._operator = this.match(TrinoParser.INTERSECT_);
                        this.state = 1284;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 5 || _la === 62) {
                            {
                            this.state = 1283;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1286;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_queryTerm);
                        this.state = 1287;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1288;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 74 || _la === 265)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1290;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 5 || _la === 62) {
                            {
                            this.state = 1289;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1292;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1297;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 48, TrinoParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1314;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.SELECT_:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1298;
                this.querySpecification();
                }
                break;
            case TrinoParser.TABLE_:
                localContext = new TableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1299;
                this.match(TrinoParser.TABLE_);
                this.state = 1300;
                this.qualifiedName();
                }
                break;
            case TrinoParser.VALUES_:
                localContext = new InlineTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1301;
                this.match(TrinoParser.VALUES_);
                this.state = 1302;
                this.expression();
                this.state = 1307;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1303;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1304;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1309;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
                }
                }
                break;
            case TrinoParser.LPAREN_:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1310;
                this.match(TrinoParser.LPAREN_);
                this.state = 1311;
                this.queryNoWith();
                this.state = 1312;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 50, TrinoParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1316;
            this.expression();
            this.state = 1318;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 58) {
                {
                this.state = 1317;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 58)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1322;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1320;
                this.match(TrinoParser.NULLS_);
                this.state = 1321;
                localContext._nullOrdering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 131)) {
                    localContext._nullOrdering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 52, TrinoParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1324;
            this.match(TrinoParser.SELECT_);
            this.state = 1326;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
            case 1:
                {
                this.state = 1325;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1328;
            this.selectItem();
            this.state = 1333;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1329;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1330;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1335;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            }
            this.state = 1345;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 1336;
                this.match(TrinoParser.FROM_);
                this.state = 1337;
                this.relation(0);
                this.state = 1342;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1338;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1339;
                        this.relation(0);
                        }
                        }
                    }
                    this.state = 1344;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 154, this.context);
                }
                }
                break;
            }
            this.state = 1349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
            case 1:
                {
                this.state = 1347;
                this.match(TrinoParser.WHERE_);
                this.state = 1348;
                localContext._where = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1354;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
            case 1:
                {
                this.state = 1351;
                this.match(TrinoParser.GROUP_);
                this.state = 1352;
                this.match(TrinoParser.BY_);
                this.state = 1353;
                this.groupBy();
                }
                break;
            }
            this.state = 1358;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                {
                this.state = 1356;
                this.match(TrinoParser.HAVING_);
                this.state = 1357;
                localContext._having = this.booleanExpression(0);
                }
                break;
            }
            this.state = 1369;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                {
                this.state = 1360;
                this.match(TrinoParser.WINDOW_);
                this.state = 1361;
                this.windowDefinition();
                this.state = 1366;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 159, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1362;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1363;
                        this.windowDefinition();
                        }
                        }
                    }
                    this.state = 1368;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 159, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupBy(): GroupByContext {
        let localContext = new GroupByContext(this.context, this.state);
        this.enterRule(localContext, 54, TrinoParser.RULE_groupBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                {
                this.state = 1371;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1374;
            this.groupingElement();
            this.state = 1379;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 162, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1375;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1376;
                    this.groupingElement();
                    }
                    }
                }
                this.state = 1381;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 162, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 56, TrinoParser.RULE_groupingElement);
        let _la: number;
        try {
            this.state = 1422;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
            case 1:
                localContext = new SingleGroupingSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1382;
                this.groupingSet();
                }
                break;
            case 2:
                localContext = new RollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1383;
                this.match(TrinoParser.ROLLUP_);
                this.state = 1384;
                this.match(TrinoParser.LPAREN_);
                this.state = 1393;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1385;
                    this.expression();
                    this.state = 1390;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1386;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1387;
                        this.expression();
                        }
                        }
                        this.state = 1392;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1395;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new CubeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1396;
                this.match(TrinoParser.CUBE_);
                this.state = 1397;
                this.match(TrinoParser.LPAREN_);
                this.state = 1406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1398;
                    this.expression();
                    this.state = 1403;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1399;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1400;
                        this.expression();
                        }
                        }
                        this.state = 1405;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1408;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 4:
                localContext = new MultipleGroupingSetsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1409;
                this.match(TrinoParser.GROUPING_);
                this.state = 1410;
                this.match(TrinoParser.SETS_);
                this.state = 1411;
                this.match(TrinoParser.LPAREN_);
                this.state = 1412;
                this.groupingSet();
                this.state = 1417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1413;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1414;
                    this.groupingSet();
                    }
                    }
                    this.state = 1419;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1420;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 58, TrinoParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 1437;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1424;
                this.match(TrinoParser.LPAREN_);
                this.state = 1433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 1425;
                    this.expression();
                    this.state = 1430;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1426;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1427;
                        this.expression();
                        }
                        }
                        this.state = 1432;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1435;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1436;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 60, TrinoParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1439;
            localContext._name = this.identifier();
            this.state = 1440;
            this.match(TrinoParser.AS_);
            this.state = 1441;
            this.match(TrinoParser.LPAREN_);
            this.state = 1442;
            this.windowSpecification();
            this.state = 1443;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 62, TrinoParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                {
                this.state = 1445;
                localContext._existingWindowName = this.identifier();
                }
                break;
            }
            this.state = 1458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1448;
                this.match(TrinoParser.PARTITION_);
                this.state = 1449;
                this.match(TrinoParser.BY_);
                this.state = 1450;
                localContext._expression = this.expression();
                localContext._partition.push(localContext._expression);
                this.state = 1455;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1451;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1452;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    }
                    }
                    this.state = 1457;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1460;
                this.match(TrinoParser.ORDER_);
                this.state = 1461;
                this.match(TrinoParser.BY_);
                this.state = 1462;
                this.sortItem();
                this.state = 1467;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1463;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1464;
                    this.sortItem();
                    }
                    }
                    this.state = 1469;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99 || _la === 151 || _la === 202 || _la === 223) {
                {
                this.state = 1472;
                this.windowFrame();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 64, TrinoParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1475;
            localContext._name = this.identifier();
            this.state = 1477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 1476;
                this.columnAliases();
                }
            }

            this.state = 1479;
            this.match(TrinoParser.AS_);
            this.state = 1480;
            this.match(TrinoParser.LPAREN_);
            this.state = 1481;
            this.query();
            this.state = 1482;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 66, TrinoParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1484;
            _la = this.tokenStream.LA(1);
            if(!(_la === 5 || _la === 62)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 68, TrinoParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 1501;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                localContext = new SelectSingleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1486;
                this.expression();
                this.state = 1491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
                case 1:
                    {
                    this.state = 1488;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1487;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1490;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1493;
                this.primaryExpression(0);
                this.state = 1494;
                this.match(TrinoParser.DOT_);
                this.state = 1495;
                this.match(TrinoParser.ASTERISK_);
                this.state = 1498;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
                case 1:
                    {
                    this.state = 1496;
                    this.match(TrinoParser.AS_);
                    this.state = 1497;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new SelectAllContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1500;
                this.match(TrinoParser.ASTERISK_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public relation(): RelationContext;
    public relation(_p: number): RelationContext;
    public relation(_p?: number): RelationContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RelationContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 70;
        this.enterRecursionRule(localContext, 70, TrinoParser.RULE_relation, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new RelationDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1504;
            this.sampledRelation();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1524;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 184, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new JoinRelationContext(new RelationContext(parentContext, parentState));
                    (localContext as JoinRelationContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_relation);
                    this.state = 1506;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1520;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.CROSS_:
                        {
                        this.state = 1507;
                        this.match(TrinoParser.CROSS_);
                        this.state = 1508;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1509;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    case TrinoParser.FULL_:
                    case TrinoParser.INNER_:
                    case TrinoParser.JOIN_:
                    case TrinoParser.LEFT_:
                    case TrinoParser.RIGHT_:
                        {
                        this.state = 1510;
                        this.joinType();
                        this.state = 1511;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1512;
                        (localContext as JoinRelationContext)._rightRelation = this.relation(0);
                        this.state = 1513;
                        this.joinCriteria();
                        }
                        break;
                    case TrinoParser.NATURAL_:
                        {
                        this.state = 1515;
                        this.match(TrinoParser.NATURAL_);
                        this.state = 1516;
                        this.joinType();
                        this.state = 1517;
                        this.match(TrinoParser.JOIN_);
                        this.state = 1518;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 1526;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 184, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 72, TrinoParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 1534;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.INNER_:
            case TrinoParser.JOIN_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 108) {
                    {
                    this.state = 1527;
                    this.match(TrinoParser.INNER_);
                    }
                }

                }
                break;
            case TrinoParser.FULL_:
            case TrinoParser.LEFT_:
            case TrinoParser.RIGHT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1530;
                _la = this.tokenStream.LA(1);
                if(!(_la === 89 || _la === 135 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 180) {
                    {
                    this.state = 1531;
                    this.match(TrinoParser.OUTER_);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 74, TrinoParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.state = 1550;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ON_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1536;
                this.match(TrinoParser.ON_);
                this.state = 1537;
                this.booleanExpression(0);
                }
                break;
            case TrinoParser.USING_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1538;
                this.match(TrinoParser.USING_);
                this.state = 1539;
                this.match(TrinoParser.LPAREN_);
                this.state = 1540;
                this.identifier();
                this.state = 1545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1541;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1542;
                    this.identifier();
                    }
                    }
                    this.state = 1547;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1548;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampledRelation(): SampledRelationContext {
        let localContext = new SampledRelationContext(this.context, this.state);
        this.enterRule(localContext, 76, TrinoParser.RULE_sampledRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1552;
            this.patternRecognition();
            this.state = 1559;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 1553;
                this.match(TrinoParser.TABLESAMPLE_);
                this.state = 1554;
                this.sampleType();
                this.state = 1555;
                this.match(TrinoParser.LPAREN_);
                this.state = 1556;
                localContext._percentage = this.expression();
                this.state = 1557;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleType(): SampleTypeContext {
        let localContext = new SampleTypeContext(this.context, this.state);
        this.enterRule(localContext, 78, TrinoParser.RULE_sampleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1561;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 243)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimsSpecification(): TrimsSpecificationContext {
        let localContext = new TrimsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 80, TrinoParser.RULE_trimsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1563;
            _la = this.tokenStream.LA(1);
            if(!(_la === 18 || _la === 133 || _la === 254)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
        let localContext = new ListAggOverflowBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 82, TrinoParser.RULE_listAggOverflowBehavior);
        let _la: number;
        try {
            this.state = 1571;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1565;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.TRUNCATE_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1566;
                this.match(TrinoParser.TRUNCATE_);
                this.state = 1568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 327 || _la === 328) {
                    {
                    this.state = 1567;
                    this.string_();
                    }
                }

                this.state = 1570;
                this.listaggCountIndication();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listaggCountIndication(): ListaggCountIndicationContext {
        let localContext = new ListaggCountIndicationContext(this.context, this.state);
        this.enterRule(localContext, 84, TrinoParser.RULE_listaggCountIndication);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1573;
            _la = this.tokenStream.LA(1);
            if(!(_la === 288 || _la === 290)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1574;
            this.match(TrinoParser.COUNT_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternRecognition(): PatternRecognitionContext {
        let localContext = new PatternRecognitionContext(this.context, this.state);
        this.enterRule(localContext, 86, TrinoParser.RULE_patternRecognition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1576;
            this.aliasedRelation();
            this.state = 1659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                {
                this.state = 1577;
                this.match(TrinoParser.MATCH_RECOGNIZE_);
                this.state = 1578;
                this.match(TrinoParser.LPAREN_);
                this.state = 1589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1579;
                    this.match(TrinoParser.PARTITION_);
                    this.state = 1580;
                    this.match(TrinoParser.BY_);
                    this.state = 1581;
                    localContext._expression = this.expression();
                    localContext._partition.push(localContext._expression);
                    this.state = 1586;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1582;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1583;
                        localContext._expression = this.expression();
                        localContext._partition.push(localContext._expression);
                        }
                        }
                        this.state = 1588;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 1591;
                    this.match(TrinoParser.ORDER_);
                    this.state = 1592;
                    this.match(TrinoParser.BY_);
                    this.state = 1593;
                    this.sortItem();
                    this.state = 1598;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1594;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1595;
                        this.sortItem();
                        }
                        }
                        this.state = 1600;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1612;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 1603;
                    this.match(TrinoParser.MEASURES_);
                    this.state = 1604;
                    this.measureDefinition();
                    this.state = 1609;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1605;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1606;
                        this.measureDefinition();
                        }
                        }
                        this.state = 1611;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1615;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5 || _la === 174) {
                    {
                    this.state = 1614;
                    this.rowsPerMatch();
                    }
                }

                this.state = 1620;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4) {
                    {
                    this.state = 1617;
                    this.match(TrinoParser.AFTER_);
                    this.state = 1618;
                    this.match(TrinoParser.MATCH_);
                    this.state = 1619;
                    this.skipTo();
                    }
                }

                this.state = 1623;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107 || _la === 230) {
                    {
                    this.state = 1622;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 107 || _la === 230)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1625;
                this.match(TrinoParser.PATTERN_);
                this.state = 1626;
                this.match(TrinoParser.LPAREN_);
                this.state = 1627;
                this.rowPattern(0);
                this.state = 1628;
                this.match(TrinoParser.RPAREN_);
                this.state = 1638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 241) {
                    {
                    this.state = 1629;
                    this.match(TrinoParser.SUBSET_);
                    this.state = 1630;
                    this.subsetDefinition();
                    this.state = 1635;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1631;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1632;
                        this.subsetDefinition();
                        }
                        }
                        this.state = 1637;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1640;
                this.match(TrinoParser.DEFINE_);
                this.state = 1641;
                this.variableDefinition();
                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1642;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1643;
                    this.variableDefinition();
                    }
                    }
                    this.state = 1648;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1649;
                this.match(TrinoParser.RPAREN_);
                this.state = 1657;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 207, this.context) ) {
                case 1:
                    {
                    this.state = 1651;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1650;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1653;
                    this.identifier();
                    this.state = 1655;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
                    case 1:
                        {
                        this.state = 1654;
                        this.columnAliases();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measureDefinition(): MeasureDefinitionContext {
        let localContext = new MeasureDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 88, TrinoParser.RULE_measureDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1661;
            this.expression();
            this.state = 1662;
            this.match(TrinoParser.AS_);
            this.state = 1663;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsPerMatch(): RowsPerMatchContext {
        let localContext = new RowsPerMatchContext(this.context, this.state);
        this.enterRule(localContext, 90, TrinoParser.RULE_rowsPerMatch);
        let _la: number;
        try {
            this.state = 1676;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ONE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1665;
                this.match(TrinoParser.ONE_);
                this.state = 1666;
                this.match(TrinoParser.ROW_);
                this.state = 1667;
                this.match(TrinoParser.PER_);
                this.state = 1668;
                this.match(TrinoParser.MATCH_);
                }
                break;
            case TrinoParser.ALL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1669;
                this.match(TrinoParser.ALL_);
                this.state = 1670;
                this.match(TrinoParser.ROWS_);
                this.state = 1671;
                this.match(TrinoParser.PER_);
                this.state = 1672;
                this.match(TrinoParser.MATCH_);
                this.state = 1674;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 172 || _la === 236 || _la === 288) {
                    {
                    this.state = 1673;
                    this.emptyMatchHandling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext {
        let localContext = new EmptyMatchHandlingContext(this.context, this.state);
        this.enterRule(localContext, 92, TrinoParser.RULE_emptyMatchHandling);
        try {
            this.state = 1687;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.SHOW_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1678;
                this.match(TrinoParser.SHOW_);
                this.state = 1679;
                this.match(TrinoParser.EMPTY_);
                this.state = 1680;
                this.match(TrinoParser.MATCHES_);
                }
                break;
            case TrinoParser.OMIT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1681;
                this.match(TrinoParser.OMIT_);
                this.state = 1682;
                this.match(TrinoParser.EMPTY_);
                this.state = 1683;
                this.match(TrinoParser.MATCHES_);
                }
                break;
            case TrinoParser.WITH_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1684;
                this.match(TrinoParser.WITH_);
                this.state = 1685;
                this.match(TrinoParser.UNMATCHED_);
                this.state = 1686;
                this.match(TrinoParser.ROWS_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipTo(): SkipToContext {
        let localContext = new SkipToContext(this.context, this.state);
        this.enterRule(localContext, 94, TrinoParser.RULE_skipTo);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1689;
            this.match(TrinoParser.SKIP_);
            this.state = 1702;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.TO_:
                {
                this.state = 1690;
                this.match(TrinoParser.TO_);
                this.state = 1697;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
                case 1:
                    {
                    this.state = 1691;
                    this.match(TrinoParser.NEXT_);
                    this.state = 1692;
                    this.match(TrinoParser.ROW_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1694;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 212, this.context) ) {
                    case 1:
                        {
                        this.state = 1693;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 84 || _la === 131)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                        break;
                    }
                    this.state = 1696;
                    this.identifier();
                    }
                    break;
                }
                }
                break;
            case TrinoParser.PAST_:
                {
                this.state = 1699;
                this.match(TrinoParser.PAST_);
                this.state = 1700;
                this.match(TrinoParser.LAST_);
                this.state = 1701;
                this.match(TrinoParser.ROW_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subsetDefinition(): SubsetDefinitionContext {
        let localContext = new SubsetDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 96, TrinoParser.RULE_subsetDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1704;
            localContext._name = this.identifier();
            this.state = 1705;
            this.match(TrinoParser.EQ_);
            this.state = 1706;
            this.match(TrinoParser.LPAREN_);
            this.state = 1707;
            localContext._identifier = this.identifier();
            localContext._union.push(localContext._identifier);
            this.state = 1712;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1708;
                this.match(TrinoParser.COMMA_);
                this.state = 1709;
                localContext._identifier = this.identifier();
                localContext._union.push(localContext._identifier);
                }
                }
                this.state = 1714;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1715;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefinition(): VariableDefinitionContext {
        let localContext = new VariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 98, TrinoParser.RULE_variableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1717;
            this.identifier();
            this.state = 1718;
            this.match(TrinoParser.AS_);
            this.state = 1719;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasedRelation(): AliasedRelationContext {
        let localContext = new AliasedRelationContext(this.context, this.state);
        this.enterRule(localContext, 100, TrinoParser.RULE_aliasedRelation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1721;
            this.relationPrimary();
            this.state = 1729;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
            case 1:
                {
                this.state = 1723;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11) {
                    {
                    this.state = 1722;
                    this.match(TrinoParser.AS_);
                    }
                }

                this.state = 1725;
                this.identifier();
                this.state = 1727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
                case 1:
                    {
                    this.state = 1726;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 102, TrinoParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1731;
            this.match(TrinoParser.LPAREN_);
            this.state = 1732;
            this.identifier();
            this.state = 1737;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1733;
                this.match(TrinoParser.COMMA_);
                this.state = 1734;
                this.identifier();
                }
                }
                this.state = 1739;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1740;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 104, TrinoParser.RULE_relationPrimary);
        let _la: number;
        try {
            this.state = 1779;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                localContext = new TableNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1742;
                this.qualifiedName();
                this.state = 1744;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 220, this.context) ) {
                case 1:
                    {
                    this.state = 1743;
                    this.queryPeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new SubqueryRelationContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1746;
                this.match(TrinoParser.LPAREN_);
                this.state = 1747;
                this.query();
                this.state = 1748;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new UnnestContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1750;
                this.match(TrinoParser.UNNEST_);
                this.state = 1751;
                this.match(TrinoParser.LPAREN_);
                this.state = 1752;
                this.expression();
                this.state = 1757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1753;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1754;
                    this.expression();
                    }
                    }
                    this.state = 1759;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1760;
                this.match(TrinoParser.RPAREN_);
                this.state = 1763;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
                case 1:
                    {
                    this.state = 1761;
                    this.match(TrinoParser.WITH_);
                    this.state = 1762;
                    this.match(TrinoParser.ORDINALITY_);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new LateralContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1765;
                this.match(TrinoParser.LATERAL_);
                this.state = 1766;
                this.match(TrinoParser.LPAREN_);
                this.state = 1767;
                this.query();
                this.state = 1768;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new TableFunctionInvocationContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1770;
                this.match(TrinoParser.TABLE_);
                this.state = 1771;
                this.match(TrinoParser.LPAREN_);
                this.state = 1772;
                this.tableFunctionCall();
                this.state = 1773;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 6:
                localContext = new ParenthesizedRelationContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1775;
                this.match(TrinoParser.LPAREN_);
                this.state = 1776;
                this.relation(0);
                this.state = 1777;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        let localContext = new TableFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 106, TrinoParser.RULE_tableFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1781;
            this.qualifiedName();
            this.state = 1782;
            this.match(TrinoParser.LPAREN_);
            this.state = 1791;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 1783;
                this.tableFunctionArgument();
                this.state = 1788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1784;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1785;
                    this.tableFunctionArgument();
                    }
                    }
                    this.state = 1790;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 1802;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35) {
                {
                this.state = 1793;
                this.match(TrinoParser.COPARTITION_);
                this.state = 1794;
                this.copartitionTables();
                this.state = 1799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1795;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1796;
                    this.copartitionTables();
                    }
                    }
                    this.state = 1801;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1804;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext {
        let localContext = new TableFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 108, TrinoParser.RULE_tableFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1809;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                {
                this.state = 1806;
                this.identifier();
                this.state = 1807;
                this.match(TrinoParser.RDOUBLEARROW_);
                }
                break;
            }
            this.state = 1814;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
            case 1:
                {
                this.state = 1811;
                this.tableArgument();
                }
                break;
            case 2:
                {
                this.state = 1812;
                this.descriptorArgument();
                }
                break;
            case 3:
                {
                this.state = 1813;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgument(): TableArgumentContext {
        let localContext = new TableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 110, TrinoParser.RULE_tableArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1816;
            this.tableArgumentRelation();
            this.state = 1834;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1817;
                this.match(TrinoParser.PARTITION_);
                this.state = 1818;
                this.match(TrinoParser.BY_);
                this.state = 1832;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
                case 1:
                    {
                    this.state = 1819;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 1828;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 1820;
                        this.expression();
                        this.state = 1825;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 312) {
                            {
                            {
                            this.state = 1821;
                            this.match(TrinoParser.COMMA_);
                            this.state = 1822;
                            this.expression();
                            }
                            }
                            this.state = 1827;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 1830;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1831;
                    this.expression();
                    }
                    break;
                }
                }
            }

            this.state = 1842;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.PRUNE_:
                {
                this.state = 1836;
                this.match(TrinoParser.PRUNE_);
                this.state = 1837;
                this.match(TrinoParser.WHEN_);
                this.state = 1838;
                this.match(TrinoParser.EMPTY_);
                }
                break;
            case TrinoParser.KEEP_:
                {
                this.state = 1839;
                this.match(TrinoParser.KEEP_);
                this.state = 1840;
                this.match(TrinoParser.WHEN_);
                this.state = 1841;
                this.match(TrinoParser.EMPTY_);
                }
                break;
            case TrinoParser.COPARTITION_:
            case TrinoParser.ORDER_:
            case TrinoParser.COMMA_:
            case TrinoParser.RPAREN_:
                break;
            default:
                break;
            }
            this.state = 1860;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 1844;
                this.match(TrinoParser.ORDER_);
                this.state = 1845;
                this.match(TrinoParser.BY_);
                this.state = 1858;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
                case 1:
                    {
                    this.state = 1846;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 1847;
                    this.sortItem();
                    this.state = 1852;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 1848;
                        this.match(TrinoParser.COMMA_);
                        this.state = 1849;
                        this.sortItem();
                        }
                        }
                        this.state = 1854;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 1855;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                case 2:
                    {
                    this.state = 1857;
                    this.sortItem();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        let localContext = new TableArgumentRelationContext(this.context, this.state);
        this.enterRule(localContext, 112, TrinoParser.RULE_tableArgumentRelation);
        let _la: number;
        try {
            this.state = 1888;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                localContext = new TableArgumentTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1862;
                this.match(TrinoParser.TABLE_);
                this.state = 1863;
                this.match(TrinoParser.LPAREN_);
                this.state = 1864;
                this.qualifiedName();
                this.state = 1865;
                this.match(TrinoParser.RPAREN_);
                this.state = 1873;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
                case 1:
                    {
                    this.state = 1867;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1866;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1869;
                    this.identifier();
                    this.state = 1871;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 313) {
                        {
                        this.state = 1870;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableArgumentQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1875;
                this.match(TrinoParser.TABLE_);
                this.state = 1876;
                this.match(TrinoParser.LPAREN_);
                this.state = 1877;
                this.query();
                this.state = 1878;
                this.match(TrinoParser.RPAREN_);
                this.state = 1886;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
                case 1:
                    {
                    this.state = 1880;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 11) {
                        {
                        this.state = 1879;
                        this.match(TrinoParser.AS_);
                        }
                    }

                    this.state = 1882;
                    this.identifier();
                    this.state = 1884;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 313) {
                        {
                        this.state = 1883;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorArgument(): DescriptorArgumentContext {
        let localContext = new DescriptorArgumentContext(this.context, this.state);
        this.enterRule(localContext, 114, TrinoParser.RULE_descriptorArgument);
        let _la: number;
        try {
            this.state = 1908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.DESCRIPTOR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1890;
                this.match(TrinoParser.DESCRIPTOR_);
                this.state = 1891;
                this.match(TrinoParser.LPAREN_);
                this.state = 1892;
                this.descriptorField();
                this.state = 1897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1893;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1894;
                    this.descriptorField();
                    }
                    }
                    this.state = 1899;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1900;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case TrinoParser.CAST_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1902;
                this.match(TrinoParser.CAST_);
                this.state = 1903;
                this.match(TrinoParser.LPAREN_);
                this.state = 1904;
                this.match(TrinoParser.NULL_);
                this.state = 1905;
                this.match(TrinoParser.AS_);
                this.state = 1906;
                this.match(TrinoParser.DESCRIPTOR_);
                this.state = 1907;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorField(): DescriptorFieldContext {
        let localContext = new DescriptorFieldContext(this.context, this.state);
        this.enterRule(localContext, 116, TrinoParser.RULE_descriptorField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1910;
            this.identifier();
            this.state = 1912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                {
                this.state = 1911;
                this.type_(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copartitionTables(): CopartitionTablesContext {
        let localContext = new CopartitionTablesContext(this.context, this.state);
        this.enterRule(localContext, 118, TrinoParser.RULE_copartitionTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1914;
            this.match(TrinoParser.LPAREN_);
            this.state = 1915;
            this.qualifiedName();
            this.state = 1916;
            this.match(TrinoParser.COMMA_);
            this.state = 1917;
            this.qualifiedName();
            this.state = 1922;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 1918;
                this.match(TrinoParser.COMMA_);
                this.state = 1919;
                this.qualifiedName();
                }
                }
                this.state = 1924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1925;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 120, TrinoParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1927;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 122;
        this.enterRecursionRule(localContext, 122, TrinoParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1936;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CASE_:
            case TrinoParser.CAST_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.CURRENT_CATALOG_:
            case TrinoParser.CURRENT_DATE_:
            case TrinoParser.CURRENT_PATH_:
            case TrinoParser.CURRENT_SCHEMA_:
            case TrinoParser.CURRENT_TIME_:
            case TrinoParser.CURRENT_TIMESTAMP_:
            case TrinoParser.CURRENT_USER_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXISTS_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.EXTRACT_:
            case TrinoParser.FALSE_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPING_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.JSON_ARRAY_:
            case TrinoParser.JSON_EXISTS_:
            case TrinoParser.JSON_OBJECT_:
            case TrinoParser.JSON_QUERY_:
            case TrinoParser.JSON_VALUE_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LISTAGG_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOCALTIME_:
            case TrinoParser.LOCALTIMESTAMP_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NORMALIZE_:
            case TrinoParser.NULL_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRIM_:
            case TrinoParser.TRUE_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.PLUS_:
            case TrinoParser.MINUS_:
            case TrinoParser.QUESTION_MARK_:
            case TrinoParser.LPAREN_:
            case TrinoParser.STRING_:
            case TrinoParser.UNICODE_STRING_:
            case TrinoParser.BINARY_LITERAL_:
            case TrinoParser.INTEGER_VALUE_:
            case TrinoParser.DECIMAL_VALUE_:
            case TrinoParser.DOUBLE_VALUE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1930;
                this.valueExpression(0);
                this.state = 1932;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
                case 1:
                    {
                    this.state = 1931;
                    this.predicate_();
                    }
                    break;
                }
                }
                break;
            case TrinoParser.NOT_:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1934;
                this.match(TrinoParser.NOT_);
                this.state = 1935;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1946;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 252, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1944;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
                    case 1:
                        {
                        localContext = new AndContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_booleanExpression);
                        this.state = 1938;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1939;
                        this.match(TrinoParser.AND_);
                        this.state = 1940;
                        this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new OrContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_booleanExpression);
                        this.state = 1941;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1942;
                        this.match(TrinoParser.OR_);
                        this.state = 1943;
                        this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1948;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 252, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate_(): Predicate_Context {
        let localContext = new Predicate_Context(this.context, this.state);
        this.enterRule(localContext, 124, TrinoParser.RULE_predicate_);
        let _la: number;
        try {
            this.state = 2010;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1949;
                this.comparisonOperator();
                this.state = 1950;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1952;
                this.comparisonOperator();
                this.state = 1953;
                this.comparisonQuantifier();
                this.state = 1954;
                this.match(TrinoParser.LPAREN_);
                this.state = 1955;
                this.query();
                this.state = 1956;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1958;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1961;
                this.match(TrinoParser.BETWEEN_);
                this.state = 1962;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 1963;
                this.match(TrinoParser.AND_);
                this.state = 1964;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1966;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1969;
                this.match(TrinoParser.IN_);
                this.state = 1970;
                this.match(TrinoParser.LPAREN_);
                this.state = 1971;
                this.expression();
                this.state = 1976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 1972;
                    this.match(TrinoParser.COMMA_);
                    this.state = 1973;
                    this.expression();
                    }
                    }
                    this.state = 1978;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1979;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1981;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1984;
                this.match(TrinoParser.IN_);
                this.state = 1985;
                this.match(TrinoParser.LPAREN_);
                this.state = 1986;
                this.query();
                this.state = 1987;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1990;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1989;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 1992;
                this.match(TrinoParser.LIKE_);
                this.state = 1993;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 1996;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
                case 1:
                    {
                    this.state = 1994;
                    this.match(TrinoParser.ESCAPE_);
                    this.state = 1995;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1998;
                this.match(TrinoParser.IS_);
                this.state = 2000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 1999;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2002;
                this.match(TrinoParser.NULL_);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2003;
                this.match(TrinoParser.IS_);
                this.state = 2005;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 2004;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 2007;
                this.match(TrinoParser.DISTINCT_);
                this.state = 2008;
                this.match(TrinoParser.FROM_);
                this.state = 2009;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 126;
        this.enterRecursionRule(localContext, 126, TrinoParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2016;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2013;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2014;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2015;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2032;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 264, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2030;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 263, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2018;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2019;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2020;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2021;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2022;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 302 || _la === 303)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2023;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2024;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2025;
                        this.match(TrinoParser.CONCAT_);
                        this.state = 2026;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_valueExpression);
                        this.state = 2027;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2028;
                        this.match(TrinoParser.AT_);
                        this.state = 2029;
                        this.timeZoneSpecifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2034;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 264, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 128;
        this.enterRecursionRule(localContext, 128, TrinoParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2488;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
            case 1:
                {
                localContext = new NullLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2036;
                this.match(TrinoParser.NULL_);
                }
                break;
            case 2:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2037;
                this.interval();
                }
                break;
            case 3:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2038;
                this.identifier();
                this.state = 2039;
                this.string_();
                }
                break;
            case 4:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2041;
                this.match(TrinoParser.DOUBLE_);
                this.state = 2042;
                this.match(TrinoParser.PRECISION_);
                this.state = 2043;
                this.string_();
                }
                break;
            case 5:
                {
                localContext = new NumericLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2044;
                this.number_();
                }
                break;
            case 6:
                {
                localContext = new BooleanLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2045;
                this.booleanValue();
                }
                break;
            case 7:
                {
                localContext = new StringLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2046;
                this.string_();
                }
                break;
            case 8:
                {
                localContext = new BinaryLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2047;
                this.match(TrinoParser.BINARY_LITERAL_);
                }
                break;
            case 9:
                {
                localContext = new ParameterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2048;
                this.match(TrinoParser.QUESTION_MARK_);
                }
                break;
            case 10:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2049;
                this.match(TrinoParser.POSITION_);
                this.state = 2050;
                this.match(TrinoParser.LPAREN_);
                this.state = 2051;
                this.valueExpression(0);
                this.state = 2052;
                this.match(TrinoParser.IN_);
                this.state = 2053;
                this.valueExpression(0);
                this.state = 2054;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 11:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2056;
                this.match(TrinoParser.LPAREN_);
                this.state = 2057;
                this.expression();
                this.state = 2060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2058;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2059;
                    this.expression();
                    }
                    }
                    this.state = 2062;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 312);
                this.state = 2064;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 12:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2066;
                this.match(TrinoParser.ROW_);
                this.state = 2067;
                this.match(TrinoParser.LPAREN_);
                this.state = 2068;
                this.expression();
                this.state = 2073;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2069;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2070;
                    this.expression();
                    }
                    }
                    this.state = 2075;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2076;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 13:
                {
                localContext = new ListaggContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2078;
                (localContext as ListaggContext)._name = this.match(TrinoParser.LISTAGG_);
                this.state = 2079;
                this.match(TrinoParser.LPAREN_);
                this.state = 2081;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
                case 1:
                    {
                    this.state = 2080;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2083;
                this.expression();
                this.state = 2086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 2084;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2085;
                    this.string_();
                    }
                }

                this.state = 2091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 173) {
                    {
                    this.state = 2088;
                    this.match(TrinoParser.ON_);
                    this.state = 2089;
                    this.match(TrinoParser.OVERFLOW_);
                    this.state = 2090;
                    this.listAggOverflowBehavior();
                    }
                }

                this.state = 2093;
                this.match(TrinoParser.RPAREN_);
                {
                this.state = 2094;
                this.match(TrinoParser.WITHIN_);
                this.state = 2095;
                this.match(TrinoParser.GROUP_);
                this.state = 2096;
                this.match(TrinoParser.LPAREN_);
                this.state = 2097;
                this.match(TrinoParser.ORDER_);
                this.state = 2098;
                this.match(TrinoParser.BY_);
                this.state = 2099;
                this.sortItem();
                this.state = 2104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2100;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2101;
                    this.sortItem();
                    }
                    }
                    this.state = 2106;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2107;
                this.match(TrinoParser.RPAREN_);
                }
                this.state = 2110;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
                case 1:
                    {
                    this.state = 2109;
                    this.filter();
                    }
                    break;
                }
                }
                break;
            case 14:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
                case 1:
                    {
                    this.state = 2112;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2115;
                this.qualifiedName();
                this.state = 2116;
                this.match(TrinoParser.LPAREN_);
                this.state = 2120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2117;
                    (localContext as FunctionCallContext)._label = this.identifier();
                    this.state = 2118;
                    this.match(TrinoParser.DOT_);
                    }
                }

                this.state = 2122;
                this.match(TrinoParser.ASTERISK_);
                this.state = 2123;
                this.match(TrinoParser.RPAREN_);
                this.state = 2125;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
                case 1:
                    {
                    this.state = 2124;
                    this.filter();
                    }
                    break;
                }
                this.state = 2128;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
                case 1:
                    {
                    this.state = 2127;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2131;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
                case 1:
                    {
                    this.state = 2130;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2133;
                this.qualifiedName();
                this.state = 2134;
                this.match(TrinoParser.LPAREN_);
                this.state = 2146;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4143445901) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 2136;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
                    case 1:
                        {
                        this.state = 2135;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2138;
                    this.expression();
                    this.state = 2143;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2139;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2140;
                        this.expression();
                        }
                        }
                        this.state = 2145;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2148;
                    this.match(TrinoParser.ORDER_);
                    this.state = 2149;
                    this.match(TrinoParser.BY_);
                    this.state = 2150;
                    this.sortItem();
                    this.state = 2155;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2151;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2152;
                        this.sortItem();
                        }
                        }
                        this.state = 2157;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2160;
                this.match(TrinoParser.RPAREN_);
                this.state = 2162;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
                case 1:
                    {
                    this.state = 2161;
                    this.filter();
                    }
                    break;
                }
                this.state = 2168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
                case 1:
                    {
                    this.state = 2165;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103 || _la === 211) {
                        {
                        this.state = 2164;
                        this.nullTreatment();
                        }
                    }

                    this.state = 2167;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 16:
                {
                localContext = new MeasureContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2170;
                this.identifier();
                this.state = 2171;
                this.over();
                }
                break;
            case 17:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2173;
                this.identifier();
                this.state = 2174;
                this.match(TrinoParser.RARROW_);
                this.state = 2175;
                this.expression();
                }
                break;
            case 18:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2177;
                this.match(TrinoParser.LPAREN_);
                this.state = 2186;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2178;
                    this.identifier();
                    this.state = 2183;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2179;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2180;
                        this.identifier();
                        }
                        }
                        this.state = 2185;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2188;
                this.match(TrinoParser.RPAREN_);
                this.state = 2189;
                this.match(TrinoParser.RARROW_);
                this.state = 2190;
                this.expression();
                }
                break;
            case 19:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2191;
                this.match(TrinoParser.LPAREN_);
                this.state = 2192;
                this.query();
                this.state = 2193;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 20:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2195;
                this.match(TrinoParser.EXISTS_);
                this.state = 2196;
                this.match(TrinoParser.LPAREN_);
                this.state = 2197;
                this.query();
                this.state = 2198;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 21:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2200;
                this.match(TrinoParser.CASE_);
                this.state = 2201;
                (localContext as SimpleCaseContext)._operand = this.expression();
                this.state = 2203;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2202;
                    this.whenClause();
                    }
                    }
                    this.state = 2205;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 2209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 2207;
                    this.match(TrinoParser.ELSE_);
                    this.state = 2208;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2211;
                this.match(TrinoParser.END_);
                }
                break;
            case 22:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2213;
                this.match(TrinoParser.CASE_);
                this.state = 2215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2214;
                    this.whenClause();
                    }
                    }
                    this.state = 2217;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 2221;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 2219;
                    this.match(TrinoParser.ELSE_);
                    this.state = 2220;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2223;
                this.match(TrinoParser.END_);
                }
                break;
            case 23:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2225;
                this.match(TrinoParser.CAST_);
                this.state = 2226;
                this.match(TrinoParser.LPAREN_);
                this.state = 2227;
                this.expression();
                this.state = 2228;
                this.match(TrinoParser.AS_);
                this.state = 2229;
                this.type_(0);
                this.state = 2230;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 24:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2232;
                this.match(TrinoParser.TRY_CAST_);
                this.state = 2233;
                this.match(TrinoParser.LPAREN_);
                this.state = 2234;
                this.expression();
                this.state = 2235;
                this.match(TrinoParser.AS_);
                this.state = 2236;
                this.type_(0);
                this.state = 2237;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 25:
                {
                localContext = new ArrayConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2239;
                this.match(TrinoParser.ARRAY_);
                this.state = 2240;
                this.match(TrinoParser.LSQUARE_);
                this.state = 2249;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517311) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                    {
                    this.state = 2241;
                    this.expression();
                    this.state = 2246;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2242;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2243;
                        this.expression();
                        }
                        }
                        this.state = 2248;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2251;
                this.match(TrinoParser.RSQUARE_);
                }
                break;
            case 26:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2252;
                this.identifier();
                }
                break;
            case 27:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2253;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_DATE_);
                }
                break;
            case 28:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2254;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_TIME_);
                this.state = 2258;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 2255;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2256;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2257;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 29:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2260;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.CURRENT_TIMESTAMP_);
                this.state = 2264;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
                case 1:
                    {
                    this.state = 2261;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2262;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2263;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 30:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2266;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.LOCALTIME_);
                this.state = 2270;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
                case 1:
                    {
                    this.state = 2267;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2268;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2269;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 31:
                {
                localContext = new SpecialDateTimeFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2272;
                (localContext as SpecialDateTimeFunctionContext)._name = this.match(TrinoParser.LOCALTIMESTAMP_);
                this.state = 2276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
                case 1:
                    {
                    this.state = 2273;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2274;
                    (localContext as SpecialDateTimeFunctionContext)._precision = this.match(TrinoParser.INTEGER_VALUE_);
                    this.state = 2275;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            case 32:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2278;
                (localContext as CurrentUserContext)._name = this.match(TrinoParser.CURRENT_USER_);
                }
                break;
            case 33:
                {
                localContext = new CurrentCatalogContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2279;
                (localContext as CurrentCatalogContext)._name = this.match(TrinoParser.CURRENT_CATALOG_);
                }
                break;
            case 34:
                {
                localContext = new CurrentSchemaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2280;
                (localContext as CurrentSchemaContext)._name = this.match(TrinoParser.CURRENT_SCHEMA_);
                }
                break;
            case 35:
                {
                localContext = new CurrentPathContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2281;
                (localContext as CurrentPathContext)._name = this.match(TrinoParser.CURRENT_PATH_);
                }
                break;
            case 36:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2282;
                this.match(TrinoParser.TRIM_);
                this.state = 2283;
                this.match(TrinoParser.LPAREN_);
                this.state = 2291;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
                case 1:
                    {
                    this.state = 2285;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                    case 1:
                        {
                        this.state = 2284;
                        this.trimsSpecification();
                        }
                        break;
                    }
                    this.state = 2288;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294309566) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 3069704077) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4240435571) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3748474349) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4160748927) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4293517279) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 3724537823) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4260355967) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 3472612831) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 17326207) !== 0) || ((((_la - 327)) & ~0x1F) === 0 && ((1 << (_la - 327)) & 1023) !== 0)) {
                        {
                        this.state = 2287;
                        (localContext as TrimContext)._trimChar = this.valueExpression(0);
                        }
                    }

                    this.state = 2290;
                    this.match(TrinoParser.FROM_);
                    }
                    break;
                }
                this.state = 2293;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2294;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 37:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2296;
                this.match(TrinoParser.TRIM_);
                this.state = 2297;
                this.match(TrinoParser.LPAREN_);
                this.state = 2298;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2299;
                this.match(TrinoParser.COMMA_);
                this.state = 2300;
                (localContext as TrimContext)._trimChar = this.valueExpression(0);
                this.state = 2301;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 38:
                {
                localContext = new SubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2303;
                this.match(TrinoParser.SUBSTRING_);
                this.state = 2304;
                this.match(TrinoParser.LPAREN_);
                this.state = 2305;
                this.valueExpression(0);
                this.state = 2306;
                this.match(TrinoParser.FROM_);
                this.state = 2307;
                this.valueExpression(0);
                this.state = 2310;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 86) {
                    {
                    this.state = 2308;
                    this.match(TrinoParser.FOR_);
                    this.state = 2309;
                    this.valueExpression(0);
                    }
                }

                this.state = 2312;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 39:
                {
                localContext = new NormalizeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2314;
                this.match(TrinoParser.NORMALIZE_);
                this.state = 2315;
                this.match(TrinoParser.LPAREN_);
                this.state = 2316;
                this.valueExpression(0);
                this.state = 2319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 2317;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2318;
                    this.normalForm();
                    }
                }

                this.state = 2321;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 40:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2323;
                this.match(TrinoParser.EXTRACT_);
                this.state = 2324;
                this.match(TrinoParser.LPAREN_);
                this.state = 2325;
                this.identifier();
                this.state = 2326;
                this.match(TrinoParser.FROM_);
                this.state = 2327;
                this.valueExpression(0);
                this.state = 2328;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 41:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2330;
                this.match(TrinoParser.LPAREN_);
                this.state = 2331;
                this.expression();
                this.state = 2332;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 42:
                {
                localContext = new GroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2334;
                this.match(TrinoParser.GROUPING_);
                this.state = 2335;
                this.match(TrinoParser.LPAREN_);
                this.state = 2344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 2336;
                    this.qualifiedName();
                    this.state = 2341;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2337;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2338;
                        this.qualifiedName();
                        }
                        }
                        this.state = 2343;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2346;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 43:
                {
                localContext = new JsonExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2347;
                this.match(TrinoParser.JSON_EXISTS_);
                this.state = 2348;
                this.match(TrinoParser.LPAREN_);
                this.state = 2349;
                this.jsonPathInvocation();
                this.state = 2354;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72 || _la === 80 || _la === 257 || _la === 267) {
                    {
                    this.state = 2350;
                    this.jsonExistsErrorBehavior();
                    this.state = 2351;
                    this.match(TrinoParser.ON_);
                    this.state = 2352;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2356;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 44:
                {
                localContext = new JsonValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2358;
                this.match(TrinoParser.JSON_VALUE_);
                this.state = 2359;
                this.match(TrinoParser.LPAREN_);
                this.state = 2360;
                this.jsonPathInvocation();
                this.state = 2363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2361;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2362;
                    this.type_(0);
                    }
                }

                this.state = 2369;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
                case 1:
                    {
                    this.state = 2365;
                    (localContext as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 2366;
                    this.match(TrinoParser.ON_);
                    this.state = 2367;
                    this.match(TrinoParser.EMPTY_);
                    }
                    break;
                }
                this.state = 2375;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 72 || _la === 166) {
                    {
                    this.state = 2371;
                    (localContext as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 2372;
                    this.match(TrinoParser.ON_);
                    this.state = 2373;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2377;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 45:
                {
                localContext = new JsonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2379;
                this.match(TrinoParser.JSON_QUERY_);
                this.state = 2380;
                this.match(TrinoParser.LPAREN_);
                this.state = 2381;
                this.jsonPathInvocation();
                this.state = 2388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2382;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2383;
                    this.type_(0);
                    this.state = 2386;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2384;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2385;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2393;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 288 || _la === 290) {
                    {
                    this.state = 2390;
                    this.jsonQueryWrapperBehavior();
                    this.state = 2391;
                    this.match(TrinoParser.WRAPPER_);
                    }
                }

                this.state = 2402;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127 || _la === 172) {
                    {
                    this.state = 2395;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 127 || _la === 172)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2396;
                    this.match(TrinoParser.QUOTES_);
                    this.state = 2400;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 173) {
                        {
                        this.state = 2397;
                        this.match(TrinoParser.ON_);
                        this.state = 2398;
                        this.match(TrinoParser.SCALAR_);
                        this.state = 2399;
                        this.match(TrinoParser.TEXT_STRING_);
                        }
                    }

                    }
                }

                this.state = 2408;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 2404;
                    (localContext as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2405;
                    this.match(TrinoParser.ON_);
                    this.state = 2406;
                    this.match(TrinoParser.EMPTY_);
                    }
                    break;
                }
                this.state = 2414;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 72 || _la === 166) {
                    {
                    this.state = 2410;
                    (localContext as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2411;
                    this.match(TrinoParser.ON_);
                    this.state = 2412;
                    this.match(TrinoParser.ERROR_);
                    }
                }

                this.state = 2416;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 46:
                {
                localContext = new JsonObjectContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2418;
                this.match(TrinoParser.JSON_OBJECT_);
                this.state = 2419;
                this.match(TrinoParser.LPAREN_);
                this.state = 2448;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
                case 1:
                    {
                    this.state = 2420;
                    this.jsonObjectMember();
                    this.state = 2425;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2421;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2422;
                        this.jsonObjectMember();
                        }
                        }
                        this.state = 2427;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2434;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.NULL_:
                        {
                        this.state = 2428;
                        this.match(TrinoParser.NULL_);
                        this.state = 2429;
                        this.match(TrinoParser.ON_);
                        this.state = 2430;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.ABSENT_:
                        {
                        this.state = 2431;
                        this.match(TrinoParser.ABSENT_);
                        this.state = 2432;
                        this.match(TrinoParser.ON_);
                        this.state = 2433;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.WITH_:
                    case TrinoParser.WITHOUT_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    this.state = 2446;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.WITH_:
                        {
                        this.state = 2436;
                        this.match(TrinoParser.WITH_);
                        this.state = 2437;
                        this.match(TrinoParser.UNIQUE_);
                        this.state = 2439;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 129) {
                            {
                            this.state = 2438;
                            this.match(TrinoParser.KEYS_);
                            }
                        }

                        }
                        break;
                    case TrinoParser.WITHOUT_:
                        {
                        this.state = 2441;
                        this.match(TrinoParser.WITHOUT_);
                        this.state = 2442;
                        this.match(TrinoParser.UNIQUE_);
                        this.state = 2444;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 129) {
                            {
                            this.state = 2443;
                            this.match(TrinoParser.KEYS_);
                            }
                        }

                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2450;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2451;
                    this.type_(0);
                    this.state = 2454;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2452;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2453;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2458;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 47:
                {
                localContext = new JsonArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2459;
                this.match(TrinoParser.JSON_ARRAY_);
                this.state = 2460;
                this.match(TrinoParser.LPAREN_);
                this.state = 2477;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
                case 1:
                    {
                    this.state = 2461;
                    this.jsonValueExpression();
                    this.state = 2466;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2462;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2463;
                        this.jsonValueExpression();
                        }
                        }
                        this.state = 2468;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2475;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoParser.NULL_:
                        {
                        this.state = 2469;
                        this.match(TrinoParser.NULL_);
                        this.state = 2470;
                        this.match(TrinoParser.ON_);
                        this.state = 2471;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.ABSENT_:
                        {
                        this.state = 2472;
                        this.match(TrinoParser.ABSENT_);
                        this.state = 2473;
                        this.match(TrinoParser.ON_);
                        this.state = 2474;
                        this.match(TrinoParser.NULL_);
                        }
                        break;
                    case TrinoParser.RETURNING_:
                    case TrinoParser.RPAREN_:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2479;
                    this.match(TrinoParser.RETURNING_);
                    this.state = 2480;
                    this.type_(0);
                    this.state = 2483;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 87) {
                        {
                        this.state = 2481;
                        this.match(TrinoParser.FORMAT_);
                        this.state = 2482;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2487;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2500;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 330, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2498;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                    case 1:
                        {
                        localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as SubscriptContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_primaryExpression);
                        this.state = 2490;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 2491;
                        this.match(TrinoParser.LSQUARE_);
                        this.state = 2492;
                        (localContext as SubscriptContext)._index = this.valueExpression(0);
                        this.state = 2493;
                        this.match(TrinoParser.RSQUARE_);
                        }
                        break;
                    case 2:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base_ = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_primaryExpression);
                        this.state = 2495;
                        if (!(this.precpred(this.context, 22))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 22)");
                        }
                        this.state = 2496;
                        this.match(TrinoParser.DOT_);
                        this.state = 2497;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2502;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 330, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        let localContext = new JsonPathInvocationContext(this.context, this.state);
        this.enterRule(localContext, 130, TrinoParser.RULE_jsonPathInvocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2503;
            this.jsonValueExpression();
            this.state = 2504;
            this.match(TrinoParser.COMMA_);
            this.state = 2505;
            localContext._path = this.string_();
            this.state = 2515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 186) {
                {
                this.state = 2506;
                this.match(TrinoParser.PASSING_);
                this.state = 2507;
                this.jsonArgument();
                this.state = 2512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2508;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2509;
                    this.jsonArgument();
                    }
                    }
                    this.state = 2514;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        let localContext = new JsonValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 132, TrinoParser.RULE_jsonValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2517;
            this.expression();
            this.state = 2520;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 2518;
                this.match(TrinoParser.FORMAT_);
                this.state = 2519;
                this.jsonRepresentation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        let localContext = new JsonRepresentationContext(this.context, this.state);
        this.enterRule(localContext, 134, TrinoParser.RULE_jsonRepresentation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2522;
            this.match(TrinoParser.JSON_);
            this.state = 2525;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 70) {
                {
                this.state = 2523;
                this.match(TrinoParser.ENCODING_);
                this.state = 2524;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 275)) & ~0x1F) === 0 && ((1 << (_la - 275)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonArgument(): JsonArgumentContext {
        let localContext = new JsonArgumentContext(this.context, this.state);
        this.enterRule(localContext, 136, TrinoParser.RULE_jsonArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2527;
            this.jsonValueExpression();
            this.state = 2528;
            this.match(TrinoParser.AS_);
            this.state = 2529;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
        let localContext = new JsonExistsErrorBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 138, TrinoParser.RULE_jsonExistsErrorBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2531;
            _la = this.tokenStream.LA(1);
            if(!(_la === 72 || _la === 80 || _la === 257 || _la === 267)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueBehavior(): JsonValueBehaviorContext {
        let localContext = new JsonValueBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 140, TrinoParser.RULE_jsonValueBehavior);
        try {
            this.state = 2537;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2533;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.NULL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2534;
                this.match(TrinoParser.NULL_);
                }
                break;
            case TrinoParser.DEFAULT_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2535;
                this.match(TrinoParser.DEFAULT_);
                this.state = 2536;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
        let localContext = new JsonQueryWrapperBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 142, TrinoParser.RULE_jsonQueryWrapperBehavior);
        let _la: number;
        try {
            this.state = 2550;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.WITHOUT_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2539;
                this.match(TrinoParser.WITHOUT_);
                this.state = 2541;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10) {
                    {
                    this.state = 2540;
                    this.match(TrinoParser.ARRAY_);
                    }
                }

                }
                break;
            case TrinoParser.WITH_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2543;
                this.match(TrinoParser.WITH_);
                this.state = 2545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 32 || _la === 264) {
                    {
                    this.state = 2544;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 32 || _la === 264)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10) {
                    {
                    this.state = 2547;
                    this.match(TrinoParser.ARRAY_);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext {
        let localContext = new JsonQueryBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 144, TrinoParser.RULE_jsonQueryBehavior);
        let _la: number;
        try {
            this.state = 2556;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ERROR_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2552;
                this.match(TrinoParser.ERROR_);
                }
                break;
            case TrinoParser.NULL_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2553;
                this.match(TrinoParser.NULL_);
                }
                break;
            case TrinoParser.EMPTY_:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2554;
                this.match(TrinoParser.EMPTY_);
                this.state = 2555;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 169)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonObjectMember(): JsonObjectMemberContext {
        let localContext = new JsonObjectMemberContext(this.context, this.state);
        this.enterRule(localContext, 146, TrinoParser.RULE_jsonObjectMember);
        try {
            this.state = 2569;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 342, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2559;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
                case 1:
                    {
                    this.state = 2558;
                    this.match(TrinoParser.KEY_);
                    }
                    break;
                }
                this.state = 2561;
                this.expression();
                this.state = 2562;
                this.match(TrinoParser.VALUE_);
                this.state = 2563;
                this.jsonValueExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2565;
                this.expression();
                this.state = 2566;
                this.match(TrinoParser.COLON_);
                this.state = 2567;
                this.jsonValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public processingMode(): ProcessingModeContext {
        let localContext = new ProcessingModeContext(this.context, this.state);
        this.enterRule(localContext, 148, TrinoParser.RULE_processingMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2571;
            _la = this.tokenStream.LA(1);
            if(!(_la === 83 || _la === 224)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 150, TrinoParser.RULE_nullTreatment);
        try {
            this.state = 2577;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.IGNORE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2573;
                this.match(TrinoParser.IGNORE_);
                this.state = 2574;
                this.match(TrinoParser.NULLS_);
                }
                break;
            case TrinoParser.RESPECT_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2575;
                this.match(TrinoParser.RESPECT_);
                this.state = 2576;
                this.match(TrinoParser.NULLS_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): String_Context {
        let localContext = new String_Context(this.context, this.state);
        this.enterRule(localContext, 152, TrinoParser.RULE_string_);
        try {
            this.state = 2585;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.STRING_:
                localContext = new BasicStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2579;
                this.match(TrinoParser.STRING_);
                }
                break;
            case TrinoParser.UNICODE_STRING_:
                localContext = new UnicodeStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2580;
                this.match(TrinoParser.UNICODE_STRING_);
                this.state = 2583;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
                case 1:
                    {
                    this.state = 2581;
                    this.match(TrinoParser.UESCAPE_);
                    this.state = 2582;
                    this.match(TrinoParser.STRING_);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        let localContext = new TimeZoneSpecifierContext(this.context, this.state);
        this.enterRule(localContext, 154, TrinoParser.RULE_timeZoneSpecifier);
        try {
            this.state = 2593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
            case 1:
                localContext = new TimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2587;
                this.match(TrinoParser.TIME_);
                this.state = 2588;
                this.match(TrinoParser.ZONE_);
                this.state = 2589;
                this.interval();
                }
                break;
            case 2:
                localContext = new TimeZoneStringContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2590;
                this.match(TrinoParser.TIME_);
                this.state = 2591;
                this.match(TrinoParser.ZONE_);
                this.state = 2592;
                this.string_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 156, TrinoParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2595;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        let localContext = new ComparisonQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 158, TrinoParser.RULE_comparisonQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2597;
            _la = this.tokenStream.LA(1);
            if(!(_la === 5 || _la === 9 || _la === 238)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 160, TrinoParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2599;
            _la = this.tokenStream.LA(1);
            if(!(_la === 80 || _la === 257)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 162, TrinoParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2601;
            this.match(TrinoParser.INTERVAL_);
            this.state = 2603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 302 || _la === 303) {
                {
                this.state = 2602;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 302 || _la === 303)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2605;
            this.string_();
            this.state = 2606;
            localContext._from_ = this.intervalField();
            this.state = 2609;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 348, this.context) ) {
            case 1:
                {
                this.state = 2607;
                this.match(TrinoParser.TO_);
                this.state = 2608;
                localContext._to = this.intervalField();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalField(): IntervalFieldContext {
        let localContext = new IntervalFieldContext(this.context, this.state);
        this.enterRule(localContext, 164, TrinoParser.RULE_intervalField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2611;
            _la = this.tokenStream.LA(1);
            if(!(_la === 50 || _la === 101 || _la === 153 || _la === 154 || _la === 228 || _la === 294)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 166, TrinoParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2613;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public type_(): TypeContext;
    public type_(_p: number): TypeContext;
    public type_(_p?: number): TypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 168;
        this.enterRecursionRule(localContext, 168, TrinoParser.RULE_type, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2706;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
            case 1:
                {
                localContext = new RowTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2616;
                this.match(TrinoParser.ROW_);
                this.state = 2617;
                this.match(TrinoParser.LPAREN_);
                this.state = 2618;
                this.rowField();
                this.state = 2623;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2619;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2620;
                    this.rowField();
                    }
                    }
                    this.state = 2625;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2626;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 2:
                {
                localContext = new IntervalTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2628;
                this.match(TrinoParser.INTERVAL_);
                this.state = 2629;
                (localContext as IntervalTypeContext)._from_ = this.intervalField();
                this.state = 2632;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 2630;
                    this.match(TrinoParser.TO_);
                    this.state = 2631;
                    (localContext as IntervalTypeContext)._to = this.intervalField();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2634;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIMESTAMP_);
                this.state = 2639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 2635;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2636;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2637;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 2644;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 352, this.context) ) {
                case 1:
                    {
                    this.state = 2641;
                    this.match(TrinoParser.WITHOUT_);
                    this.state = 2642;
                    this.match(TrinoParser.TIME_);
                    this.state = 2643;
                    this.match(TrinoParser.ZONE_);
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2646;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIMESTAMP_);
                this.state = 2651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2647;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2648;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2649;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2653;
                this.match(TrinoParser.WITH_);
                this.state = 2654;
                this.match(TrinoParser.TIME_);
                this.state = 2655;
                this.match(TrinoParser.ZONE_);
                }
                break;
            case 5:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2656;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIME_);
                this.state = 2661;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
                case 1:
                    {
                    this.state = 2657;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2658;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2659;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                this.state = 2666;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2663;
                    this.match(TrinoParser.WITHOUT_);
                    this.state = 2664;
                    this.match(TrinoParser.TIME_);
                    this.state = 2665;
                    this.match(TrinoParser.ZONE_);
                    }
                    break;
                }
                }
                break;
            case 6:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2668;
                (localContext as DateTimeTypeContext)._base_ = this.match(TrinoParser.TIME_);
                this.state = 2673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2669;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2670;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2671;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2675;
                this.match(TrinoParser.WITH_);
                this.state = 2676;
                this.match(TrinoParser.TIME_);
                this.state = 2677;
                this.match(TrinoParser.ZONE_);
                }
                break;
            case 7:
                {
                localContext = new DoublePrecisionTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2678;
                this.match(TrinoParser.DOUBLE_);
                this.state = 2679;
                this.match(TrinoParser.PRECISION_);
                }
                break;
            case 8:
                {
                localContext = new LegacyArrayTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2680;
                this.match(TrinoParser.ARRAY_);
                this.state = 2681;
                this.match(TrinoParser.LT_);
                this.state = 2682;
                this.type_(0);
                this.state = 2683;
                this.match(TrinoParser.GT_);
                }
                break;
            case 9:
                {
                localContext = new LegacyMapTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2685;
                this.match(TrinoParser.MAP_);
                this.state = 2686;
                this.match(TrinoParser.LT_);
                this.state = 2687;
                (localContext as LegacyMapTypeContext)._keyType = this.type_(0);
                this.state = 2688;
                this.match(TrinoParser.COMMA_);
                this.state = 2689;
                (localContext as LegacyMapTypeContext)._valueType = this.type_(0);
                this.state = 2690;
                this.match(TrinoParser.GT_);
                }
                break;
            case 10:
                {
                localContext = new GenericTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2692;
                this.identifier();
                this.state = 2704;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
                case 1:
                    {
                    this.state = 2693;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2694;
                    this.typeParameter();
                    this.state = 2699;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2695;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2696;
                        this.typeParameter();
                        }
                        }
                        this.state = 2701;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2702;
                    this.match(TrinoParser.RPAREN_);
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2717;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 361, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ArrayTypeContext(new TypeContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_type);
                    this.state = 2708;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 2709;
                    this.match(TrinoParser.ARRAY_);
                    this.state = 2713;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 360, this.context) ) {
                    case 1:
                        {
                        this.state = 2710;
                        this.match(TrinoParser.LSQUARE_);
                        this.state = 2711;
                        this.match(TrinoParser.INTEGER_VALUE_);
                        this.state = 2712;
                        this.match(TrinoParser.RSQUARE_);
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 2719;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 361, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowField(): RowFieldContext {
        let localContext = new RowFieldContext(this.context, this.state);
        this.enterRule(localContext, 170, TrinoParser.RULE_rowField);
        try {
            this.state = 2724;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2720;
                this.type_(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2721;
                this.identifier();
                this.state = 2722;
                this.type_(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeParameter(): TypeParameterContext {
        let localContext = new TypeParameterContext(this.context, this.state);
        this.enterRule(localContext, 172, TrinoParser.RULE_typeParameter);
        try {
            this.state = 2728;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.INTEGER_VALUE_:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2726;
                this.match(TrinoParser.INTEGER_VALUE_);
                }
                break;
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2727;
                this.type_(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, TrinoParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2730;
            this.match(TrinoParser.WHEN_);
            this.state = 2731;
            localContext._condition = this.expression();
            this.state = 2732;
            this.match(TrinoParser.THEN_);
            this.state = 2733;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter(): FilterContext {
        let localContext = new FilterContext(this.context, this.state);
        this.enterRule(localContext, 176, TrinoParser.RULE_filter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2735;
            this.match(TrinoParser.FILTER_);
            this.state = 2736;
            this.match(TrinoParser.LPAREN_);
            this.state = 2737;
            this.match(TrinoParser.WHERE_);
            this.state = 2738;
            this.booleanExpression(0);
            this.state = 2739;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeCase(): MergeCaseContext {
        let localContext = new MergeCaseContext(this.context, this.state);
        this.enterRule(localContext, 178, TrinoParser.RULE_mergeCase);
        let _la: number;
        try {
            this.state = 2805;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
            case 1:
                localContext = new MergeUpdateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2741;
                this.match(TrinoParser.WHEN_);
                this.state = 2742;
                this.match(TrinoParser.MATCHED_);
                this.state = 2745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2743;
                    this.match(TrinoParser.AND_);
                    this.state = 2744;
                    (localContext as MergeUpdateContext)._condition = this.expression();
                    }
                }

                this.state = 2747;
                this.match(TrinoParser.THEN_);
                this.state = 2748;
                this.match(TrinoParser.UPDATE_);
                this.state = 2749;
                this.match(TrinoParser.SET_);
                this.state = 2750;
                (localContext as MergeUpdateContext)._identifier = this.identifier();
                (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                this.state = 2751;
                this.match(TrinoParser.EQ_);
                this.state = 2752;
                (localContext as MergeUpdateContext)._expression = this.expression();
                (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                this.state = 2760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2753;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2754;
                    (localContext as MergeUpdateContext)._identifier = this.identifier();
                    (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                    this.state = 2755;
                    this.match(TrinoParser.EQ_);
                    this.state = 2756;
                    (localContext as MergeUpdateContext)._expression = this.expression();
                    (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                    }
                    }
                    this.state = 2762;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new MergeDeleteContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2763;
                this.match(TrinoParser.WHEN_);
                this.state = 2764;
                this.match(TrinoParser.MATCHED_);
                this.state = 2767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2765;
                    this.match(TrinoParser.AND_);
                    this.state = 2766;
                    (localContext as MergeDeleteContext)._condition = this.expression();
                    }
                }

                this.state = 2769;
                this.match(TrinoParser.THEN_);
                this.state = 2770;
                this.match(TrinoParser.DELETE_);
                }
                break;
            case 3:
                localContext = new MergeInsertContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2771;
                this.match(TrinoParser.WHEN_);
                this.state = 2772;
                this.match(TrinoParser.NOT_);
                this.state = 2773;
                this.match(TrinoParser.MATCHED_);
                this.state = 2776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 8) {
                    {
                    this.state = 2774;
                    this.match(TrinoParser.AND_);
                    this.state = 2775;
                    (localContext as MergeInsertContext)._condition = this.expression();
                    }
                }

                this.state = 2778;
                this.match(TrinoParser.THEN_);
                this.state = 2779;
                this.match(TrinoParser.INSERT_);
                this.state = 2791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 313) {
                    {
                    this.state = 2780;
                    this.match(TrinoParser.LPAREN_);
                    this.state = 2781;
                    (localContext as MergeInsertContext)._identifier = this.identifier();
                    (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                    this.state = 2786;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 312) {
                        {
                        {
                        this.state = 2782;
                        this.match(TrinoParser.COMMA_);
                        this.state = 2783;
                        (localContext as MergeInsertContext)._identifier = this.identifier();
                        (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                        }
                        }
                        this.state = 2788;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2789;
                    this.match(TrinoParser.RPAREN_);
                    }
                }

                this.state = 2793;
                this.match(TrinoParser.VALUES_);
                this.state = 2794;
                this.match(TrinoParser.LPAREN_);
                this.state = 2795;
                (localContext as MergeInsertContext)._expression = this.expression();
                (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                this.state = 2800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2796;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2797;
                    (localContext as MergeInsertContext)._expression = this.expression();
                    (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                    }
                    }
                    this.state = 2802;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2803;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over(): OverContext {
        let localContext = new OverContext(this.context, this.state);
        this.enterRule(localContext, 180, TrinoParser.RULE_over);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2807;
            this.match(TrinoParser.OVER_);
            this.state = 2813;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                {
                this.state = 2808;
                localContext._windowName = this.identifier();
                }
                break;
            case TrinoParser.LPAREN_:
                {
                this.state = 2809;
                this.match(TrinoParser.LPAREN_);
                this.state = 2810;
                this.windowSpecification();
                this.state = 2811;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 182, TrinoParser.RULE_windowFrame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2824;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151) {
                {
                this.state = 2815;
                this.match(TrinoParser.MEASURES_);
                this.state = 2816;
                this.measureDefinition();
                this.state = 2821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2817;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2818;
                    this.measureDefinition();
                    }
                    }
                    this.state = 2823;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2826;
            this.frameExtent();
            this.state = 2830;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4) {
                {
                this.state = 2827;
                this.match(TrinoParser.AFTER_);
                this.state = 2828;
                this.match(TrinoParser.MATCH_);
                this.state = 2829;
                this.skipTo();
                }
            }

            this.state = 2833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 107 || _la === 230) {
                {
                this.state = 2832;
                _la = this.tokenStream.LA(1);
                if(!(_la === 107 || _la === 230)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2840;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189) {
                {
                this.state = 2835;
                this.match(TrinoParser.PATTERN_);
                this.state = 2836;
                this.match(TrinoParser.LPAREN_);
                this.state = 2837;
                this.rowPattern(0);
                this.state = 2838;
                this.match(TrinoParser.RPAREN_);
                }
            }

            this.state = 2851;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 241) {
                {
                this.state = 2842;
                this.match(TrinoParser.SUBSET_);
                this.state = 2843;
                this.subsetDefinition();
                this.state = 2848;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2844;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2845;
                    this.subsetDefinition();
                    }
                    }
                    this.state = 2850;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 2853;
                this.match(TrinoParser.DEFINE_);
                this.state = 2854;
                this.variableDefinition();
                this.state = 2859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2855;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2856;
                    this.variableDefinition();
                    }
                    }
                    this.state = 2861;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 184, TrinoParser.RULE_frameExtent);
        try {
            this.state = 2888;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2864;
                localContext._frameType = this.match(TrinoParser.RANGE_);
                this.state = 2865;
                localContext._start_ = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2866;
                localContext._frameType = this.match(TrinoParser.ROWS_);
                this.state = 2867;
                localContext._start_ = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2868;
                localContext._frameType = this.match(TrinoParser.GROUPS_);
                this.state = 2869;
                localContext._start_ = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2870;
                localContext._frameType = this.match(TrinoParser.RANGE_);
                this.state = 2871;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2872;
                localContext._start_ = this.frameBound();
                this.state = 2873;
                this.match(TrinoParser.AND_);
                this.state = 2874;
                localContext._end_ = this.frameBound();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2876;
                localContext._frameType = this.match(TrinoParser.ROWS_);
                this.state = 2877;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2878;
                localContext._start_ = this.frameBound();
                this.state = 2879;
                this.match(TrinoParser.AND_);
                this.state = 2880;
                localContext._end_ = this.frameBound();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2882;
                localContext._frameType = this.match(TrinoParser.GROUPS_);
                this.state = 2883;
                this.match(TrinoParser.BETWEEN_);
                this.state = 2884;
                localContext._start_ = this.frameBound();
                this.state = 2885;
                this.match(TrinoParser.AND_);
                this.state = 2886;
                localContext._end_ = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 186, TrinoParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 2899;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2890;
                this.match(TrinoParser.UNBOUNDED_);
                this.state = 2891;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoParser.PRECEDING_);
                }
                break;
            case 2:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2892;
                this.match(TrinoParser.UNBOUNDED_);
                this.state = 2893;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoParser.FOLLOWING_);
                }
                break;
            case 3:
                localContext = new CurrentRowBoundContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2894;
                this.match(TrinoParser.CURRENT_);
                this.state = 2895;
                this.match(TrinoParser.ROW_);
                }
                break;
            case 4:
                localContext = new BoundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2896;
                this.expression();
                this.state = 2897;
                (localContext as BoundedFrameContext)._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 85 || _la === 195)) {
                    (localContext as BoundedFrameContext)._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public rowPattern(): RowPatternContext;
    public rowPattern(_p: number): RowPatternContext;
    public rowPattern(_p?: number): RowPatternContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RowPatternContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 188;
        this.enterRecursionRule(localContext, 188, TrinoParser.RULE_rowPattern, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QuantifiedPrimaryContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 2902;
            this.patternPrimary();
            this.state = 2904;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
            case 1:
                {
                this.state = 2903;
                this.patternQuantifier();
                }
                break;
            }
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2913;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2911;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
                    case 1:
                        {
                        localContext = new PatternConcatenationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_rowPattern);
                        this.state = 2906;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2907;
                        this.rowPattern(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PatternAlternationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoParser.RULE_rowPattern);
                        this.state = 2908;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2909;
                        this.match(TrinoParser.VBAR_);
                        this.state = 2910;
                        this.rowPattern(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2915;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 386, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public patternPrimary(): PatternPrimaryContext {
        let localContext = new PatternPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 190, TrinoParser.RULE_patternPrimary);
        let _la: number;
        try {
            this.state = 2941;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
            case 1:
                localContext = new PatternVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2916;
                this.identifier();
                }
                break;
            case 2:
                localContext = new EmptyPatternContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2917;
                this.match(TrinoParser.LPAREN_);
                this.state = 2918;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 3:
                localContext = new PatternPermutationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2919;
                this.match(TrinoParser.PERMUTE_);
                this.state = 2920;
                this.match(TrinoParser.LPAREN_);
                this.state = 2921;
                this.rowPattern(0);
                this.state = 2926;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 2922;
                    this.match(TrinoParser.COMMA_);
                    this.state = 2923;
                    this.rowPattern(0);
                    }
                    }
                    this.state = 2928;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2929;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 4:
                localContext = new GroupedPatternContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2931;
                this.match(TrinoParser.LPAREN_);
                this.state = 2932;
                this.rowPattern(0);
                this.state = 2933;
                this.match(TrinoParser.RPAREN_);
                }
                break;
            case 5:
                localContext = new PartitionStartAnchorContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2935;
                this.match(TrinoParser.CARET_);
                }
                break;
            case 6:
                localContext = new PartitionEndAnchorContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2936;
                this.match(TrinoParser.DOLLAR_);
                }
                break;
            case 7:
                localContext = new ExcludedPatternContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2937;
                this.match(TrinoParser.LCURLYHYPHEN_);
                this.state = 2938;
                this.rowPattern(0);
                this.state = 2939;
                this.match(TrinoParser.RCURLYHYPHEN_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternQuantifier(): PatternQuantifierContext {
        let localContext = new PatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 192, TrinoParser.RULE_patternQuantifier);
        let _la: number;
        try {
            this.state = 2973;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                localContext = new ZeroOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2943;
                this.match(TrinoParser.ASTERISK_);
                this.state = 2945;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
                case 1:
                    {
                    this.state = 2944;
                    (localContext as ZeroOrMoreQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new OneOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2947;
                this.match(TrinoParser.PLUS_);
                this.state = 2949;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 390, this.context) ) {
                case 1:
                    {
                    this.state = 2948;
                    (localContext as OneOrMoreQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ZeroOrOneQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2951;
                this.match(TrinoParser.QUESTION_MARK_);
                this.state = 2953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
                case 1:
                    {
                    this.state = 2952;
                    (localContext as ZeroOrOneQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2955;
                this.match(TrinoParser.LCURLY_);
                this.state = 2956;
                (localContext as RangeQuantifierContext)._exactly = this.match(TrinoParser.INTEGER_VALUE_);
                this.state = 2957;
                this.match(TrinoParser.RCURLY_);
                this.state = 2959;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 392, this.context) ) {
                case 1:
                    {
                    this.state = 2958;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2961;
                this.match(TrinoParser.LCURLY_);
                this.state = 2963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 330) {
                    {
                    this.state = 2962;
                    (localContext as RangeQuantifierContext)._atLeast = this.match(TrinoParser.INTEGER_VALUE_);
                    }
                }

                this.state = 2965;
                this.match(TrinoParser.COMMA_);
                this.state = 2967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 330) {
                    {
                    this.state = 2966;
                    (localContext as RangeQuantifierContext)._atMost = this.match(TrinoParser.INTEGER_VALUE_);
                    }
                }

                this.state = 2969;
                this.match(TrinoParser.RCURLY_);
                this.state = 2971;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 395, this.context) ) {
                case 1:
                    {
                    this.state = 2970;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoParser.QUESTION_MARK_);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 194, TrinoParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2975;
            this.identifier();
            this.state = 2976;
            this.match(TrinoParser.EQ_);
            this.state = 2977;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 196, TrinoParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 2983;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.FORMAT_:
                localContext = new ExplainFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2979;
                this.match(TrinoParser.FORMAT_);
                this.state = 2980;
                (localContext as ExplainFormatContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 96 || _la === 120 || _la === 247)) {
                    (localContext as ExplainFormatContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoParser.TYPE_:
                localContext = new ExplainTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2981;
                this.match(TrinoParser.TYPE_);
                this.state = 2982;
                (localContext as ExplainTypeContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 63 || _la === 115 || _la === 143 || _la === 278)) {
                    (localContext as ExplainTypeContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 198, TrinoParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 2990;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ISOLATION_:
                localContext = new IsolationLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2985;
                this.match(TrinoParser.ISOLATION_);
                this.state = 2986;
                this.match(TrinoParser.LEVEL_);
                this.state = 2987;
                this.levelOfIsolation();
                }
                break;
            case TrinoParser.READ_:
                localContext = new TransactionAccessModeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2988;
                this.match(TrinoParser.READ_);
                this.state = 2989;
                (localContext as TransactionAccessModeContext)._accessMode = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 175 || _la === 293)) {
                    (localContext as TransactionAccessModeContext)._accessMode = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 200, TrinoParser.RULE_levelOfIsolation);
        try {
            this.state = 2999;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                localContext = new ReadUncommittedContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2992;
                this.match(TrinoParser.READ_);
                this.state = 2993;
                this.match(TrinoParser.UNCOMMITTED_);
                }
                break;
            case 2:
                localContext = new ReadCommittedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2994;
                this.match(TrinoParser.READ_);
                this.state = 2995;
                this.match(TrinoParser.COMMITTED_);
                }
                break;
            case 3:
                localContext = new RepeatableReadContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2996;
                this.match(TrinoParser.REPEATABLE_);
                this.state = 2997;
                this.match(TrinoParser.READ_);
                }
                break;
            case 4:
                localContext = new SerializableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2998;
                this.match(TrinoParser.SERIALIZABLE_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callArgument(): CallArgumentContext {
        let localContext = new CallArgumentContext(this.context, this.state);
        this.enterRule(localContext, 202, TrinoParser.RULE_callArgument);
        try {
            this.state = 3006;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                localContext = new PositionalArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3001;
                this.expression();
                }
                break;
            case 2:
                localContext = new NamedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3002;
                this.identifier();
                this.state = 3003;
                this.match(TrinoParser.RDOUBLEARROW_);
                this.state = 3004;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 204, TrinoParser.RULE_pathElement);
        try {
            this.state = 3013;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
            case 1:
                localContext = new QualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3008;
                this.identifier();
                this.state = 3009;
                this.match(TrinoParser.DOT_);
                this.state = 3010;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UnqualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3012;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSpecification(): PathSpecificationContext {
        let localContext = new PathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 206, TrinoParser.RULE_pathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3015;
            this.pathElement();
            this.state = 3020;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3016;
                this.match(TrinoParser.COMMA_);
                this.state = 3017;
                this.pathElement();
                }
                }
                this.state = 3022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSpecification(): FunctionSpecificationContext {
        let localContext = new FunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 208, TrinoParser.RULE_functionSpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3023;
            this.match(TrinoParser.FUNCTION_);
            this.state = 3024;
            this.functionDeclaration();
            this.state = 3025;
            this.returnsClause();
            this.state = 3029;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 403, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3026;
                    this.routineCharacteristic();
                    }
                    }
                }
                this.state = 3031;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 403, this.context);
            }
            this.state = 3032;
            this.controlStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        let localContext = new FunctionDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 210, TrinoParser.RULE_functionDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3034;
            this.qualifiedName();
            this.state = 3035;
            this.match(TrinoParser.LPAREN_);
            this.state = 3044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                {
                this.state = 3036;
                this.parameterDeclaration();
                this.state = 3041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 312) {
                    {
                    {
                    this.state = 3037;
                    this.match(TrinoParser.COMMA_);
                    this.state = 3038;
                    this.parameterDeclaration();
                    }
                    }
                    this.state = 3043;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3046;
            this.match(TrinoParser.RPAREN_);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterDeclaration(): ParameterDeclarationContext {
        let localContext = new ParameterDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 212, TrinoParser.RULE_parameterDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3049;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                {
                this.state = 3048;
                this.identifier();
                }
                break;
            }
            this.state = 3051;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnsClause(): ReturnsClauseContext {
        let localContext = new ReturnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, TrinoParser.RULE_returnsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3053;
            this.match(TrinoParser.RETURNS_);
            this.state = 3054;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineCharacteristic(): RoutineCharacteristicContext {
        let localContext = new RoutineCharacteristicContext(this.context, this.state);
        this.enterRule(localContext, 216, TrinoParser.RULE_routineCharacteristic);
        let _la: number;
        try {
            this.state = 3075;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.LANGUAGE_:
                localContext = new LanguageCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3056;
                this.match(TrinoParser.LANGUAGE_);
                this.state = 3057;
                this.identifier();
                }
                break;
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.NOT_:
                localContext = new DeterministicCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 3058;
                    this.match(TrinoParser.NOT_);
                    }
                }

                this.state = 3061;
                this.match(TrinoParser.DETERMINISTIC_);
                }
                break;
            case TrinoParser.RETURNS_:
                localContext = new ReturnsNullOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3062;
                this.match(TrinoParser.RETURNS_);
                this.state = 3063;
                this.match(TrinoParser.NULL_);
                this.state = 3064;
                this.match(TrinoParser.ON_);
                this.state = 3065;
                this.match(TrinoParser.NULL_);
                this.state = 3066;
                this.match(TrinoParser.INPUT_);
                }
                break;
            case TrinoParser.CALLED_:
                localContext = new CalledOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3067;
                this.match(TrinoParser.CALLED_);
                this.state = 3068;
                this.match(TrinoParser.ON_);
                this.state = 3069;
                this.match(TrinoParser.NULL_);
                this.state = 3070;
                this.match(TrinoParser.INPUT_);
                }
                break;
            case TrinoParser.SECURITY_:
                localContext = new SecurityCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3071;
                this.match(TrinoParser.SECURITY_);
                this.state = 3072;
                _la = this.tokenStream.LA(1);
                if(!(_la === 55 || _la === 114)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoParser.COMMENT_:
                localContext = new CommentCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3073;
                this.match(TrinoParser.COMMENT_);
                this.state = 3074;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public controlStatement(): ControlStatementContext {
        let localContext = new ControlStatementContext(this.context, this.state);
        this.enterRule(localContext, 218, TrinoParser.RULE_controlStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
            case 1:
                localContext = new ReturnStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3077;
                this.match(TrinoParser.RETURN_);
                this.state = 3078;
                this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new AssignmentStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3079;
                this.match(TrinoParser.SET_);
                this.state = 3080;
                this.identifier();
                this.state = 3081;
                this.match(TrinoParser.EQ_);
                this.state = 3082;
                this.expression();
                }
                break;
            case 3:
                localContext = new SimpleCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3084;
                this.match(TrinoParser.CASE_);
                this.state = 3085;
                this.expression();
                this.state = 3087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3086;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3089;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 3092;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3091;
                    this.elseClause();
                    }
                }

                this.state = 3094;
                this.match(TrinoParser.END_);
                this.state = 3095;
                this.match(TrinoParser.CASE_);
                }
                break;
            case 4:
                localContext = new SearchedCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3097;
                this.match(TrinoParser.CASE_);
                this.state = 3099;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3098;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3101;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 284);
                this.state = 3104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3103;
                    this.elseClause();
                    }
                }

                this.state = 3106;
                this.match(TrinoParser.END_);
                this.state = 3107;
                this.match(TrinoParser.CASE_);
                }
                break;
            case 5:
                localContext = new IfStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3109;
                this.match(TrinoParser.IF_);
                this.state = 3110;
                this.expression();
                this.state = 3111;
                this.match(TrinoParser.THEN_);
                this.state = 3112;
                this.sqlStatementList();
                this.state = 3116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 69) {
                    {
                    {
                    this.state = 3113;
                    this.elseIfClause();
                    }
                    }
                    this.state = 3118;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 3119;
                    this.elseClause();
                    }
                }

                this.state = 3122;
                this.match(TrinoParser.END_);
                this.state = 3123;
                this.match(TrinoParser.IF_);
                }
                break;
            case 6:
                localContext = new IterateStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3125;
                this.match(TrinoParser.ITERATE_);
                this.state = 3126;
                this.identifier();
                }
                break;
            case 7:
                localContext = new LeaveStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3127;
                this.match(TrinoParser.LEAVE_);
                this.state = 3128;
                this.identifier();
                }
                break;
            case 8:
                localContext = new CompoundStatementContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3129;
                this.match(TrinoParser.BEGIN_);
                this.state = 3135;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3130;
                        this.variableDeclaration();
                        this.state = 3131;
                        this.match(TrinoParser.SEMICOLON_);
                        }
                        }
                    }
                    this.state = 3137;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
                }
                this.state = 3139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4286249823) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0) || ((((_la - 333)) & ~0x1F) === 0 && ((1 << (_la - 333)) & 15) !== 0)) {
                    {
                    this.state = 3138;
                    this.sqlStatementList();
                    }
                }

                this.state = 3141;
                this.match(TrinoParser.END_);
                }
                break;
            case 9:
                localContext = new LoopStatementContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3145;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
                case 1:
                    {
                    this.state = 3142;
                    (localContext as LoopStatementContext)._label = this.identifier();
                    this.state = 3143;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3147;
                this.match(TrinoParser.LOOP_);
                this.state = 3148;
                this.sqlStatementList();
                this.state = 3149;
                this.match(TrinoParser.END_);
                this.state = 3150;
                this.match(TrinoParser.LOOP_);
                }
                break;
            case 10:
                localContext = new WhileStatementContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 3152;
                    (localContext as WhileStatementContext)._label = this.identifier();
                    this.state = 3153;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3157;
                this.match(TrinoParser.WHILE_);
                this.state = 3158;
                this.expression();
                this.state = 3159;
                this.match(TrinoParser.DO_);
                this.state = 3160;
                this.sqlStatementList();
                this.state = 3161;
                this.match(TrinoParser.END_);
                this.state = 3162;
                this.match(TrinoParser.WHILE_);
                }
                break;
            case 11:
                localContext = new RepeatStatementContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3167;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
                case 1:
                    {
                    this.state = 3164;
                    (localContext as RepeatStatementContext)._label = this.identifier();
                    this.state = 3165;
                    this.match(TrinoParser.COLON_);
                    }
                    break;
                }
                this.state = 3169;
                this.match(TrinoParser.REPEAT_);
                this.state = 3170;
                this.sqlStatementList();
                this.state = 3171;
                this.match(TrinoParser.UNTIL_);
                this.state = 3172;
                this.expression();
                this.state = 3173;
                this.match(TrinoParser.END_);
                this.state = 3174;
                this.match(TrinoParser.REPEAT_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext {
        let localContext = new CaseStatementWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 220, TrinoParser.RULE_caseStatementWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3178;
            this.match(TrinoParser.WHEN_);
            this.state = 3179;
            this.expression();
            this.state = 3180;
            this.match(TrinoParser.THEN_);
            this.state = 3181;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseIfClause(): ElseIfClauseContext {
        let localContext = new ElseIfClauseContext(this.context, this.state);
        this.enterRule(localContext, 222, TrinoParser.RULE_elseIfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3183;
            this.match(TrinoParser.ELSEIF_);
            this.state = 3184;
            this.expression();
            this.state = 3185;
            this.match(TrinoParser.THEN_);
            this.state = 3186;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseClause(): ElseClauseContext {
        let localContext = new ElseClauseContext(this.context, this.state);
        this.enterRule(localContext, 224, TrinoParser.RULE_elseClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3188;
            this.match(TrinoParser.ELSE_);
            this.state = 3189;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localContext = new VariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 226, TrinoParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3191;
            this.match(TrinoParser.DECLARE_);
            this.state = 3192;
            this.identifier();
            this.state = 3197;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3193;
                this.match(TrinoParser.COMMA_);
                this.state = 3194;
                this.identifier();
                }
                }
                this.state = 3199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3200;
            this.type_(0);
            this.state = 3203;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 3201;
                this.match(TrinoParser.DEFAULT_);
                this.state = 3202;
                this.valueExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatementList(): SqlStatementListContext {
        let localContext = new SqlStatementListContext(this.context, this.state);
        this.enterRule(localContext, 228, TrinoParser.RULE_sqlStatementList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3208;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3205;
                    this.controlStatement();
                    this.state = 3206;
                    this.match(TrinoParser.SEMICOLON_);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3210;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 423, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 230, TrinoParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3212;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 56 || _la === 110 || _la === 231 || _la === 271)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 232, TrinoParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3214;
            this.identifier();
            this.state = 3219;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 424, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3215;
                    this.match(TrinoParser.DOT_);
                    this.state = 3216;
                    this.identifier();
                    }
                    }
                }
                this.state = 3221;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 424, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPeriod(): QueryPeriodContext {
        let localContext = new QueryPeriodContext(this.context, this.state);
        this.enterRule(localContext, 234, TrinoParser.RULE_queryPeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3222;
            this.match(TrinoParser.FOR_);
            this.state = 3223;
            this.rangeType();
            this.state = 3224;
            this.match(TrinoParser.AS_);
            this.state = 3225;
            this.match(TrinoParser.OF_);
            this.state = 3226;
            localContext._end = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeType(): RangeTypeContext {
        let localContext = new RangeTypeContext(this.context, this.state);
        this.enterRule(localContext, 236, TrinoParser.RULE_rangeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3228;
            _la = this.tokenStream.LA(1);
            if(!(_la === 252 || _la === 282)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantor(): GrantorContext {
        let localContext = new GrantorContext(this.context, this.state);
        this.enterRule(localContext, 238, TrinoParser.RULE_grantor);
        try {
            this.state = 3233;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new SpecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3230;
                this.principal();
                }
                break;
            case TrinoParser.CURRENT_USER_:
                localContext = new CurrentUserGrantorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3231;
                this.match(TrinoParser.CURRENT_USER_);
                }
                break;
            case TrinoParser.CURRENT_ROLE_:
                localContext = new CurrentRoleGrantorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3232;
                this.match(TrinoParser.CURRENT_ROLE_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principal(): PrincipalContext {
        let localContext = new PrincipalContext(this.context, this.state);
        this.enterRule(localContext, 240, TrinoParser.RULE_principal);
        try {
            this.state = 3240;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
            case 1:
                localContext = new UnspecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3235;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UserPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3236;
                this.match(TrinoParser.USER_);
                this.state = 3237;
                this.identifier();
                }
                break;
            case 3:
                localContext = new RolePrincipalContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3238;
                this.match(TrinoParser.ROLE_);
                this.state = 3239;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roles(): RolesContext {
        let localContext = new RolesContext(this.context, this.state);
        this.enterRule(localContext, 242, TrinoParser.RULE_roles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3242;
            this.identifier();
            this.state = 3247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 312) {
                {
                {
                this.state = 3243;
                this.match(TrinoParser.COMMA_);
                this.state = 3244;
                this.identifier();
                }
                }
                this.state = 3249;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 244, TrinoParser.RULE_identifier);
        try {
            this.state = 3255;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.IDENTIFIER_:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3250;
                this.match(TrinoParser.IDENTIFIER_);
                }
                break;
            case TrinoParser.QUOTED_IDENTIFIER_:
                localContext = new QuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3251;
                this.match(TrinoParser.QUOTED_IDENTIFIER_);
                }
                break;
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3252;
                this.nonReserved();
                }
                break;
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new BackQuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3253;
                this.match(TrinoParser.BACKQUOTED_IDENTIFIER_);
                }
                break;
            case TrinoParser.DIGIT_IDENTIFIER_:
                localContext = new DigitIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3254;
                this.match(TrinoParser.DIGIT_IDENTIFIER_);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 246, TrinoParser.RULE_number);
        let _la: number;
        try {
            this.state = 3269;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
            case 1:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3257;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3260;
                this.match(TrinoParser.DECIMAL_VALUE_);
                }
                break;
            case 2:
                localContext = new DoubleLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3261;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3264;
                this.match(TrinoParser.DOUBLE_VALUE_);
                }
                break;
            case 3:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3266;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 3265;
                    this.match(TrinoParser.MINUS_);
                    }
                }

                this.state = 3268;
                this.match(TrinoParser.INTEGER_VALUE_);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authorizationUser(): AuthorizationUserContext {
        let localContext = new AuthorizationUserContext(this.context, this.state);
        this.enterRule(localContext, 248, TrinoParser.RULE_authorizationUser);
        try {
            this.state = 3273;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoParser.ABSENT_:
            case TrinoParser.ADD_:
            case TrinoParser.ADMIN_:
            case TrinoParser.AFTER_:
            case TrinoParser.ALL_:
            case TrinoParser.ANALYZE_:
            case TrinoParser.ANY_:
            case TrinoParser.ARRAY_:
            case TrinoParser.ASC_:
            case TrinoParser.AT_:
            case TrinoParser.AUTHORIZATION_:
            case TrinoParser.BEGIN_:
            case TrinoParser.BERNOULLI_:
            case TrinoParser.BOTH_:
            case TrinoParser.CALL_:
            case TrinoParser.CALLED_:
            case TrinoParser.CASCADE_:
            case TrinoParser.CATALOG_:
            case TrinoParser.CATALOGS_:
            case TrinoParser.COLUMN_:
            case TrinoParser.COLUMNS_:
            case TrinoParser.COMMENT_:
            case TrinoParser.COMMIT_:
            case TrinoParser.COMMITTED_:
            case TrinoParser.CONDITIONAL_:
            case TrinoParser.COUNT_:
            case TrinoParser.COPARTITION_:
            case TrinoParser.CURRENT_:
            case TrinoParser.DATA_:
            case TrinoParser.DATE_:
            case TrinoParser.DAY_:
            case TrinoParser.DECLARE_:
            case TrinoParser.DEFAULT_:
            case TrinoParser.DEFINE_:
            case TrinoParser.DEFINER_:
            case TrinoParser.DENY_:
            case TrinoParser.DESC_:
            case TrinoParser.DESCRIPTOR_:
            case TrinoParser.DETERMINISTIC_:
            case TrinoParser.DISTRIBUTED_:
            case TrinoParser.DO_:
            case TrinoParser.DOUBLE_:
            case TrinoParser.EMPTY_:
            case TrinoParser.ELSEIF_:
            case TrinoParser.ENCODING_:
            case TrinoParser.ERROR_:
            case TrinoParser.EXCLUDING_:
            case TrinoParser.EXPLAIN_:
            case TrinoParser.FETCH_:
            case TrinoParser.FILTER_:
            case TrinoParser.FINAL_:
            case TrinoParser.FIRST_:
            case TrinoParser.FOLLOWING_:
            case TrinoParser.FORMAT_:
            case TrinoParser.FUNCTION_:
            case TrinoParser.FUNCTIONS_:
            case TrinoParser.GRACE_:
            case TrinoParser.GRANT_:
            case TrinoParser.GRANTED_:
            case TrinoParser.GRANTS_:
            case TrinoParser.GRAPHVIZ_:
            case TrinoParser.GROUPS_:
            case TrinoParser.HOUR_:
            case TrinoParser.IF_:
            case TrinoParser.IGNORE_:
            case TrinoParser.IMMEDIATE_:
            case TrinoParser.INCLUDING_:
            case TrinoParser.INITIAL_:
            case TrinoParser.INPUT_:
            case TrinoParser.INTERVAL_:
            case TrinoParser.INVOKER_:
            case TrinoParser.IO_:
            case TrinoParser.ISOLATION_:
            case TrinoParser.ITERATE_:
            case TrinoParser.JSON_:
            case TrinoParser.KEEP_:
            case TrinoParser.KEY_:
            case TrinoParser.KEYS_:
            case TrinoParser.LANGUAGE_:
            case TrinoParser.LAST_:
            case TrinoParser.LATERAL_:
            case TrinoParser.LEADING_:
            case TrinoParser.LEAVE_:
            case TrinoParser.LEVEL_:
            case TrinoParser.LIMIT_:
            case TrinoParser.LOCAL_:
            case TrinoParser.LOGICAL_:
            case TrinoParser.LOOP_:
            case TrinoParser.MAP_:
            case TrinoParser.MATCH_:
            case TrinoParser.MATCHED_:
            case TrinoParser.MATCHES_:
            case TrinoParser.MATCH_RECOGNIZE_:
            case TrinoParser.MATERIALIZED_:
            case TrinoParser.MEASURES_:
            case TrinoParser.MERGE_:
            case TrinoParser.MINUTE_:
            case TrinoParser.MONTH_:
            case TrinoParser.NESTED_:
            case TrinoParser.NEXT_:
            case TrinoParser.NFC_:
            case TrinoParser.NFD_:
            case TrinoParser.NFKC_:
            case TrinoParser.NFKD_:
            case TrinoParser.NO_:
            case TrinoParser.NONE_:
            case TrinoParser.NULLIF_:
            case TrinoParser.NULLS_:
            case TrinoParser.OBJECT_:
            case TrinoParser.OF_:
            case TrinoParser.OFFSET_:
            case TrinoParser.OMIT_:
            case TrinoParser.ONE_:
            case TrinoParser.ONLY_:
            case TrinoParser.OPTION_:
            case TrinoParser.ORDINALITY_:
            case TrinoParser.OUTPUT_:
            case TrinoParser.OVER_:
            case TrinoParser.OVERFLOW_:
            case TrinoParser.PARTITION_:
            case TrinoParser.PARTITIONS_:
            case TrinoParser.PASSING_:
            case TrinoParser.PAST_:
            case TrinoParser.PATH_:
            case TrinoParser.PATTERN_:
            case TrinoParser.PER_:
            case TrinoParser.PERIOD_:
            case TrinoParser.PERMUTE_:
            case TrinoParser.PLAN_:
            case TrinoParser.POSITION_:
            case TrinoParser.PRECEDING_:
            case TrinoParser.PRECISION_:
            case TrinoParser.PRIVILEGES_:
            case TrinoParser.PROPERTIES_:
            case TrinoParser.PRUNE_:
            case TrinoParser.QUOTES_:
            case TrinoParser.RANGE_:
            case TrinoParser.READ_:
            case TrinoParser.REFRESH_:
            case TrinoParser.RENAME_:
            case TrinoParser.REPEAT_:
            case TrinoParser.REPEATABLE_:
            case TrinoParser.REPLACE_:
            case TrinoParser.RESET_:
            case TrinoParser.RESPECT_:
            case TrinoParser.RESTRICT_:
            case TrinoParser.RETURN_:
            case TrinoParser.RETURNING_:
            case TrinoParser.RETURNS_:
            case TrinoParser.REVOKE_:
            case TrinoParser.ROLE_:
            case TrinoParser.ROLES_:
            case TrinoParser.ROLLBACK_:
            case TrinoParser.ROW_:
            case TrinoParser.ROWS_:
            case TrinoParser.RUNNING_:
            case TrinoParser.SCALAR_:
            case TrinoParser.SCHEMA_:
            case TrinoParser.SCHEMAS_:
            case TrinoParser.SECOND_:
            case TrinoParser.SECURITY_:
            case TrinoParser.SEEK_:
            case TrinoParser.SERIALIZABLE_:
            case TrinoParser.SESSION_:
            case TrinoParser.SET_:
            case TrinoParser.SETS_:
            case TrinoParser.SHOW_:
            case TrinoParser.SOME_:
            case TrinoParser.START_:
            case TrinoParser.STATS_:
            case TrinoParser.SUBSET_:
            case TrinoParser.SUBSTRING_:
            case TrinoParser.SYSTEM_:
            case TrinoParser.TABLES_:
            case TrinoParser.TABLESAMPLE_:
            case TrinoParser.TEXT_:
            case TrinoParser.TEXT_STRING_:
            case TrinoParser.TIES_:
            case TrinoParser.TIME_:
            case TrinoParser.TIMESTAMP_:
            case TrinoParser.TO_:
            case TrinoParser.TRAILING_:
            case TrinoParser.TRANSACTION_:
            case TrinoParser.TRUNCATE_:
            case TrinoParser.TRY_CAST_:
            case TrinoParser.TYPE_:
            case TrinoParser.UNBOUNDED_:
            case TrinoParser.UNCOMMITTED_:
            case TrinoParser.UNCONDITIONAL_:
            case TrinoParser.UNIQUE_:
            case TrinoParser.UNKNOWN_:
            case TrinoParser.UNMATCHED_:
            case TrinoParser.UNTIL_:
            case TrinoParser.UPDATE_:
            case TrinoParser.USE_:
            case TrinoParser.USER_:
            case TrinoParser.UTF16_:
            case TrinoParser.UTF32_:
            case TrinoParser.UTF8_:
            case TrinoParser.VALIDATE_:
            case TrinoParser.VALUE_:
            case TrinoParser.VERBOSE_:
            case TrinoParser.VERSION_:
            case TrinoParser.VIEW_:
            case TrinoParser.WHILE_:
            case TrinoParser.WINDOW_:
            case TrinoParser.WITHIN_:
            case TrinoParser.WITHOUT_:
            case TrinoParser.WORK_:
            case TrinoParser.WRAPPER_:
            case TrinoParser.WRITE_:
            case TrinoParser.YEAR_:
            case TrinoParser.ZONE_:
            case TrinoParser.IDENTIFIER_:
            case TrinoParser.DIGIT_IDENTIFIER_:
            case TrinoParser.QUOTED_IDENTIFIER_:
            case TrinoParser.BACKQUOTED_IDENTIFIER_:
                localContext = new IdentifierUserContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3271;
                this.identifier();
                }
                break;
            case TrinoParser.STRING_:
            case TrinoParser.UNICODE_STRING_:
                localContext = new StringUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3272;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 250, TrinoParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3275;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4282055519) !== 0) || ((((_la - 34)) & ~0x1F) === 0 && ((1 << (_la - 34)) & 3988635683) !== 0) || ((((_la - 68)) & ~0x1F) === 0 && ((1 << (_la - 68)) & 2680939671) !== 0) || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4228606319) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 2143288491) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & 3221214143) !== 0) || ((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & 4290510815) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 3707629535) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4274977757) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 23:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 35:
            return this.relation_sempred(localContext as RelationContext, predIndex);
        case 61:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 63:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 64:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 84:
            return this.type_sempred(localContext as TypeContext, predIndex);
        case 94:
            return this.rowPattern_sempred(localContext as RowPatternContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private relation_sempred(localContext: RelationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 2);
        case 7:
            return this.precpred(this.context, 1);
        case 8:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 24);
        case 10:
            return this.precpred(this.context, 22);
        }
        return true;
    }
    private type_sempred(localContext: TypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private rowPattern_sempred(localContext: RowPatternContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,340,3278,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        1,0,5,0,254,8,0,10,0,12,0,257,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,267,8,1,1,1,3,1,270,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,303,8,8,1,8,1,8,1,8,1,8,1,8,3,8,310,
        8,8,1,8,1,8,3,8,314,8,8,1,8,1,8,3,8,318,8,8,1,8,1,8,1,8,1,8,3,8,
        324,8,8,1,8,1,8,3,8,328,8,8,1,8,1,8,1,8,1,8,1,8,3,8,335,8,8,1,8,
        1,8,1,8,3,8,340,8,8,1,8,1,8,3,8,344,8,8,1,8,1,8,1,8,1,8,3,8,350,
        8,8,1,8,1,8,3,8,354,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,373,8,8,1,8,1,8,1,8,1,8,3,8,379,
        8,8,1,8,1,8,3,8,383,8,8,1,8,1,8,3,8,387,8,8,1,8,1,8,3,8,391,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,399,8,8,1,8,1,8,3,8,403,8,8,1,8,3,8,
        406,8,8,1,8,1,8,1,8,3,8,411,8,8,1,8,1,8,1,8,1,8,3,8,417,8,8,1,8,
        1,8,1,8,1,8,1,8,5,8,424,8,8,10,8,12,8,427,9,8,1,8,1,8,1,8,3,8,432,
        8,8,1,8,1,8,3,8,436,8,8,1,8,1,8,1,8,1,8,3,8,442,8,8,1,8,1,8,1,8,
        1,8,1,8,3,8,449,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,458,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,470,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,479,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,488,8,8,
        1,8,1,8,1,8,1,8,3,8,494,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,505,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,513,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,521,8,8,1,8,1,8,1,8,1,8,1,8,3,8,528,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,538,8,8,1,8,1,8,1,8,1,8,1,8,3,8,545,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,553,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,587,8,8,10,8,12,8,590,9,
        8,3,8,592,8,8,1,8,3,8,595,8,8,1,8,1,8,3,8,599,8,8,1,8,1,8,1,8,1,
        8,3,8,605,8,8,1,8,1,8,1,8,3,8,610,8,8,1,8,1,8,1,8,1,8,1,8,3,8,617,
        8,8,1,8,1,8,1,8,1,8,3,8,623,8,8,1,8,1,8,3,8,627,8,8,1,8,1,8,3,8,
        631,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,639,8,8,1,8,1,8,1,8,1,8,3,8,
        645,8,8,1,8,1,8,3,8,649,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,663,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,671,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,690,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,713,8,8,10,8,12,8,716,9,8,3,
        8,718,8,8,1,8,1,8,1,8,1,8,1,8,3,8,725,8,8,1,8,1,8,1,8,1,8,1,8,3,
        8,732,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,741,8,8,1,8,1,8,3,8,745,
        8,8,1,8,1,8,1,8,1,8,1,8,3,8,752,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,
        760,8,8,10,8,12,8,763,9,8,1,8,1,8,1,8,3,8,768,8,8,1,8,1,8,1,8,3,
        8,773,8,8,1,8,1,8,3,8,777,8,8,1,8,1,8,1,8,1,8,3,8,783,8,8,1,8,1,
        8,1,8,1,8,1,8,5,8,790,8,8,10,8,12,8,793,9,8,1,8,1,8,1,8,3,8,798,
        8,8,1,8,1,8,3,8,802,8,8,1,8,1,8,1,8,1,8,1,8,3,8,809,8,8,1,8,1,8,
        3,8,813,8,8,1,8,1,8,1,8,1,8,5,8,819,8,8,10,8,12,8,822,9,8,1,8,1,
        8,3,8,826,8,8,1,8,1,8,3,8,830,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,838,
        8,8,1,8,1,8,1,8,1,8,5,8,844,8,8,10,8,12,8,847,9,8,1,8,1,8,3,8,851,
        8,8,1,8,1,8,3,8,855,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,865,
        8,8,1,8,1,8,1,8,5,8,870,8,8,10,8,12,8,873,9,8,1,8,1,8,3,8,877,8,
        8,1,8,1,8,3,8,881,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,891,8,
        8,1,8,3,8,894,8,8,1,8,1,8,1,8,1,8,1,8,5,8,901,8,8,10,8,12,8,904,
        9,8,1,8,1,8,3,8,908,8,8,1,8,1,8,1,8,1,8,3,8,914,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,938,8,8,1,8,1,8,1,8,1,8,3,8,944,8,8,3,8,946,8,8,
        1,8,1,8,1,8,1,8,3,8,952,8,8,1,8,1,8,1,8,1,8,3,8,958,8,8,3,8,960,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,968,8,8,3,8,970,8,8,1,8,1,8,1,8,
        1,8,3,8,976,8,8,1,8,1,8,1,8,1,8,3,8,982,8,8,3,8,984,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,999,8,8,1,8,1,8,
        1,8,3,8,1004,8,8,1,8,1,8,1,8,1,8,1,8,3,8,1011,8,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,3,8,1021,8,8,1,8,1,8,1,8,1,8,3,8,1027,8,8,3,8,
        1029,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1037,8,8,3,8,1039,8,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,5,8,1062,8,8,10,8,12,8,1065,9,8,3,8,1067,8,8,1,8,1,
        8,3,8,1071,8,8,1,8,1,8,3,8,1075,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1091,8,8,10,8,12,8,1094,9,8,3,8,
        1096,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1105,8,8,10,8,12,8,1108,
        9,8,3,8,1110,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,1126,8,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1134,8,8,10,8,12,
        8,1137,9,8,1,8,1,8,3,8,1141,8,8,1,8,1,8,1,8,1,8,3,8,1147,8,8,1,8,
        3,8,1150,8,8,1,8,1,8,1,8,1,8,1,8,4,8,1157,8,8,11,8,12,8,1158,3,8,
        1161,8,8,1,9,3,9,1164,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,1172,
        8,10,10,10,12,10,1175,9,10,1,11,3,11,1178,8,11,1,11,1,11,1,12,1,
        12,3,12,1184,8,12,1,12,1,12,1,12,5,12,1189,8,12,10,12,12,12,1192,
        9,12,1,13,1,13,3,13,1196,8,13,1,14,1,14,1,14,1,14,3,14,1202,8,14,
        1,14,1,14,3,14,1206,8,14,1,14,1,14,3,14,1210,8,14,1,15,1,15,1,15,
        1,15,3,15,1216,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,1225,
        8,17,10,17,12,17,1228,9,17,1,18,1,18,1,18,1,18,1,19,1,19,3,19,1236,
        8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,1244,8,20,10,20,12,20,1247,
        9,20,3,20,1249,8,20,1,20,1,20,1,20,3,20,1254,8,20,3,20,1256,8,20,
        1,20,1,20,1,20,1,20,1,20,3,20,1263,8,20,1,20,1,20,1,20,1,20,3,20,
        1269,8,20,3,20,1271,8,20,1,21,1,21,3,21,1275,8,21,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,23,3,23,1285,8,23,1,23,1,23,1,23,1,23,3,23,
        1291,8,23,1,23,5,23,1294,8,23,10,23,12,23,1297,9,23,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,5,24,1306,8,24,10,24,12,24,1309,9,24,1,24,
        1,24,1,24,1,24,3,24,1315,8,24,1,25,1,25,3,25,1319,8,25,1,25,1,25,
        3,25,1323,8,25,1,26,1,26,3,26,1327,8,26,1,26,1,26,1,26,5,26,1332,
        8,26,10,26,12,26,1335,9,26,1,26,1,26,1,26,1,26,5,26,1341,8,26,10,
        26,12,26,1344,9,26,3,26,1346,8,26,1,26,1,26,3,26,1350,8,26,1,26,
        1,26,1,26,3,26,1355,8,26,1,26,1,26,3,26,1359,8,26,1,26,1,26,1,26,
        1,26,5,26,1365,8,26,10,26,12,26,1368,9,26,3,26,1370,8,26,1,27,3,
        27,1373,8,27,1,27,1,27,1,27,5,27,1378,8,27,10,27,12,27,1381,9,27,
        1,28,1,28,1,28,1,28,1,28,1,28,5,28,1389,8,28,10,28,12,28,1392,9,
        28,3,28,1394,8,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,1402,8,28,10,
        28,12,28,1405,9,28,3,28,1407,8,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,5,28,1416,8,28,10,28,12,28,1419,9,28,1,28,1,28,3,28,1423,8,
        28,1,29,1,29,1,29,1,29,5,29,1429,8,29,10,29,12,29,1432,9,29,3,29,
        1434,8,29,1,29,1,29,3,29,1438,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,31,3,31,1447,8,31,1,31,1,31,1,31,1,31,1,31,5,31,1454,8,31,10,31,
        12,31,1457,9,31,3,31,1459,8,31,1,31,1,31,1,31,1,31,1,31,5,31,1466,
        8,31,10,31,12,31,1469,9,31,3,31,1471,8,31,1,31,3,31,1474,8,31,1,
        32,1,32,3,32,1478,8,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,
        34,3,34,1489,8,34,1,34,3,34,1492,8,34,1,34,1,34,1,34,1,34,1,34,3,
        34,1499,8,34,1,34,3,34,1502,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1521,8,
        35,5,35,1523,8,35,10,35,12,35,1526,9,35,1,36,3,36,1529,8,36,1,36,
        1,36,3,36,1533,8,36,3,36,1535,8,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,5,37,1544,8,37,10,37,12,37,1547,9,37,1,37,1,37,3,37,1551,8,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1560,8,38,1,39,1,39,1,
        40,1,40,1,41,1,41,1,41,3,41,1569,8,41,1,41,3,41,1572,8,41,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1585,8,43,10,
        43,12,43,1588,9,43,3,43,1590,8,43,1,43,1,43,1,43,1,43,1,43,5,43,
        1597,8,43,10,43,12,43,1600,9,43,3,43,1602,8,43,1,43,1,43,1,43,1,
        43,5,43,1608,8,43,10,43,12,43,1611,9,43,3,43,1613,8,43,1,43,3,43,
        1616,8,43,1,43,1,43,1,43,3,43,1621,8,43,1,43,3,43,1624,8,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,1634,8,43,10,43,12,43,1637,
        9,43,3,43,1639,8,43,1,43,1,43,1,43,1,43,5,43,1645,8,43,10,43,12,
        43,1648,9,43,1,43,1,43,3,43,1652,8,43,1,43,1,43,3,43,1656,8,43,3,
        43,1658,8,43,3,43,1660,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,3,45,1675,8,45,3,45,1677,8,45,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1688,8,46,1,47,1,47,1,
        47,1,47,1,47,3,47,1695,8,47,1,47,3,47,1698,8,47,1,47,1,47,1,47,3,
        47,1703,8,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,1711,8,48,10,48,
        12,48,1714,9,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,3,50,1724,
        8,50,1,50,1,50,3,50,1728,8,50,3,50,1730,8,50,1,51,1,51,1,51,1,51,
        5,51,1736,8,51,10,51,12,51,1739,9,51,1,51,1,51,1,52,1,52,3,52,1745,
        8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1756,8,52,
        10,52,12,52,1759,9,52,1,52,1,52,1,52,3,52,1764,8,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1780,
        8,52,1,53,1,53,1,53,1,53,1,53,5,53,1787,8,53,10,53,12,53,1790,9,
        53,3,53,1792,8,53,1,53,1,53,1,53,1,53,5,53,1798,8,53,10,53,12,53,
        1801,9,53,3,53,1803,8,53,1,53,1,53,1,54,1,54,1,54,3,54,1810,8,54,
        1,54,1,54,1,54,3,54,1815,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,1824,8,55,10,55,12,55,1827,9,55,3,55,1829,8,55,1,55,1,55,3,
        55,1833,8,55,3,55,1835,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1843,
        8,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1851,8,55,10,55,12,55,1854,
        9,55,1,55,1,55,1,55,3,55,1859,8,55,3,55,1861,8,55,1,56,1,56,1,56,
        1,56,1,56,3,56,1868,8,56,1,56,1,56,3,56,1872,8,56,3,56,1874,8,56,
        1,56,1,56,1,56,1,56,1,56,3,56,1881,8,56,1,56,1,56,3,56,1885,8,56,
        3,56,1887,8,56,3,56,1889,8,56,1,57,1,57,1,57,1,57,1,57,5,57,1896,
        8,57,10,57,12,57,1899,9,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,3,57,1909,8,57,1,58,1,58,3,58,1913,8,58,1,59,1,59,1,59,1,59,1,
        59,1,59,5,59,1921,8,59,10,59,12,59,1924,9,59,1,59,1,59,1,60,1,60,
        1,61,1,61,1,61,3,61,1933,8,61,1,61,1,61,3,61,1937,8,61,1,61,1,61,
        1,61,1,61,1,61,1,61,5,61,1945,8,61,10,61,12,61,1948,9,61,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1960,8,62,1,62,1,
        62,1,62,1,62,1,62,1,62,3,62,1968,8,62,1,62,1,62,1,62,1,62,1,62,5,
        62,1975,8,62,10,62,12,62,1978,9,62,1,62,1,62,1,62,3,62,1983,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,3,62,1991,8,62,1,62,1,62,1,62,1,62,
        3,62,1997,8,62,1,62,1,62,3,62,2001,8,62,1,62,1,62,1,62,3,62,2006,
        8,62,1,62,1,62,1,62,3,62,2011,8,62,1,63,1,63,1,63,1,63,3,63,2017,
        8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        5,63,2031,8,63,10,63,12,63,2034,9,63,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2061,8,64,11,64,12,64,2062,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2072,8,64,10,64,12,64,2075,
        9,64,1,64,1,64,1,64,1,64,1,64,3,64,2082,8,64,1,64,1,64,1,64,3,64,
        2087,8,64,1,64,1,64,1,64,3,64,2092,8,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,5,64,2103,8,64,10,64,12,64,2106,9,64,1,64,1,
        64,1,64,3,64,2111,8,64,1,64,3,64,2114,8,64,1,64,1,64,1,64,1,64,1,
        64,3,64,2121,8,64,1,64,1,64,1,64,3,64,2126,8,64,1,64,3,64,2129,8,
        64,1,64,3,64,2132,8,64,1,64,1,64,1,64,3,64,2137,8,64,1,64,1,64,1,
        64,5,64,2142,8,64,10,64,12,64,2145,9,64,3,64,2147,8,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2154,8,64,10,64,12,64,2157,9,64,3,64,2159,8,
        64,1,64,1,64,3,64,2163,8,64,1,64,3,64,2166,8,64,1,64,3,64,2169,8,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2182,
        8,64,10,64,12,64,2185,9,64,3,64,2187,8,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,4,64,2204,8,
        64,11,64,12,64,2205,1,64,1,64,3,64,2210,8,64,1,64,1,64,1,64,1,64,
        4,64,2216,8,64,11,64,12,64,2217,1,64,1,64,3,64,2222,8,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2245,8,64,10,64,12,64,2248,
        9,64,3,64,2250,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2259,
        8,64,1,64,1,64,1,64,1,64,3,64,2265,8,64,1,64,1,64,1,64,1,64,3,64,
        2271,8,64,1,64,1,64,1,64,1,64,3,64,2277,8,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,3,64,2286,8,64,1,64,3,64,2289,8,64,1,64,3,64,2292,
        8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,2311,8,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,2320,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2340,8,64,
        10,64,12,64,2343,9,64,3,64,2345,8,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,3,64,2355,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,2364,8,64,1,64,1,64,1,64,1,64,3,64,2370,8,64,1,64,1,64,1,64,1,
        64,3,64,2376,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,
        64,2387,8,64,3,64,2389,8,64,1,64,1,64,1,64,3,64,2394,8,64,1,64,1,
        64,1,64,1,64,1,64,3,64,2401,8,64,3,64,2403,8,64,1,64,1,64,1,64,1,
        64,3,64,2409,8,64,1,64,1,64,1,64,1,64,3,64,2415,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,5,64,2424,8,64,10,64,12,64,2427,9,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,2435,8,64,1,64,1,64,1,64,3,64,2440,
        8,64,1,64,1,64,1,64,3,64,2445,8,64,3,64,2447,8,64,3,64,2449,8,64,
        1,64,1,64,1,64,1,64,3,64,2455,8,64,3,64,2457,8,64,1,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2465,8,64,10,64,12,64,2468,9,64,1,64,1,64,1,
        64,1,64,1,64,1,64,3,64,2476,8,64,3,64,2478,8,64,1,64,1,64,1,64,1,
        64,3,64,2484,8,64,3,64,2486,8,64,1,64,3,64,2489,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,5,64,2499,8,64,10,64,12,64,2502,9,64,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,2511,8,65,10,65,12,65,2514,
        9,65,3,65,2516,8,65,1,66,1,66,1,66,3,66,2521,8,66,1,67,1,67,1,67,
        3,67,2526,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,
        3,70,2538,8,70,1,71,1,71,3,71,2542,8,71,1,71,1,71,3,71,2546,8,71,
        1,71,3,71,2549,8,71,3,71,2551,8,71,1,72,1,72,1,72,1,72,3,72,2557,
        8,72,1,73,3,73,2560,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2570,8,73,1,74,1,74,1,75,1,75,1,75,1,75,3,75,2578,8,75,1,76,
        1,76,1,76,1,76,3,76,2584,8,76,3,76,2586,8,76,1,77,1,77,1,77,1,77,
        1,77,1,77,3,77,2594,8,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,
        3,81,2604,8,81,1,81,1,81,1,81,1,81,3,81,2610,8,81,1,82,1,82,1,83,
        1,83,1,84,1,84,1,84,1,84,1,84,1,84,5,84,2622,8,84,10,84,12,84,2625,
        9,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2633,8,84,1,84,1,84,1,84,
        1,84,1,84,3,84,2640,8,84,1,84,1,84,1,84,3,84,2645,8,84,1,84,1,84,
        1,84,1,84,1,84,3,84,2652,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,3,84,2662,8,84,1,84,1,84,1,84,3,84,2667,8,84,1,84,1,84,1,84,
        1,84,1,84,3,84,2674,8,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,5,84,2698,8,84,10,84,12,84,2701,9,84,1,84,1,84,3,84,2705,8,
        84,3,84,2707,8,84,1,84,1,84,1,84,1,84,1,84,3,84,2714,8,84,5,84,2716,
        8,84,10,84,12,84,2719,9,84,1,85,1,85,1,85,1,85,3,85,2725,8,85,1,
        86,1,86,3,86,2729,8,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,
        88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,2746,8,89,1,89,1,89,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,2759,8,89,10,89,12,89,
        2762,9,89,1,89,1,89,1,89,1,89,3,89,2768,8,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,3,89,2777,8,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,
        2785,8,89,10,89,12,89,2788,9,89,1,89,1,89,3,89,2792,8,89,1,89,1,
        89,1,89,1,89,1,89,5,89,2799,8,89,10,89,12,89,2802,9,89,1,89,1,89,
        3,89,2806,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2814,8,90,1,91,
        1,91,1,91,1,91,5,91,2820,8,91,10,91,12,91,2823,9,91,3,91,2825,8,
        91,1,91,1,91,1,91,1,91,3,91,2831,8,91,1,91,3,91,2834,8,91,1,91,1,
        91,1,91,1,91,1,91,3,91,2841,8,91,1,91,1,91,1,91,1,91,5,91,2847,8,
        91,10,91,12,91,2850,9,91,3,91,2852,8,91,1,91,1,91,1,91,1,91,5,91,
        2858,8,91,10,91,12,91,2861,9,91,3,91,2863,8,91,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2889,8,92,1,93,1,93,1,
        93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2900,8,93,1,94,1,94,1,94,3,
        94,2905,8,94,1,94,1,94,1,94,1,94,1,94,5,94,2912,8,94,10,94,12,94,
        2915,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,2925,8,95,
        10,95,12,95,2928,9,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,2942,8,95,1,96,1,96,3,96,2946,8,96,1,96,1,
        96,3,96,2950,8,96,1,96,1,96,3,96,2954,8,96,1,96,1,96,1,96,1,96,3,
        96,2960,8,96,1,96,1,96,3,96,2964,8,96,1,96,1,96,3,96,2968,8,96,1,
        96,1,96,3,96,2972,8,96,3,96,2974,8,96,1,97,1,97,1,97,1,97,1,98,1,
        98,1,98,1,98,3,98,2984,8,98,1,99,1,99,1,99,1,99,1,99,3,99,2991,8,
        99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3000,8,100,1,
        101,1,101,1,101,1,101,1,101,3,101,3007,8,101,1,102,1,102,1,102,1,
        102,1,102,3,102,3014,8,102,1,103,1,103,1,103,5,103,3019,8,103,10,
        103,12,103,3022,9,103,1,104,1,104,1,104,1,104,5,104,3028,8,104,10,
        104,12,104,3031,9,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,
        5,105,3040,8,105,10,105,12,105,3043,9,105,3,105,3045,8,105,1,105,
        1,105,1,106,3,106,3050,8,106,1,106,1,106,1,107,1,107,1,107,1,108,
        1,108,1,108,3,108,3060,8,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3076,8,108,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,4,109,
        3088,8,109,11,109,12,109,3089,1,109,3,109,3093,8,109,1,109,1,109,
        1,109,1,109,1,109,4,109,3100,8,109,11,109,12,109,3101,1,109,3,109,
        3105,8,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,5,109,
        3115,8,109,10,109,12,109,3118,9,109,1,109,3,109,3121,8,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,5,109,
        3134,8,109,10,109,12,109,3137,9,109,1,109,3,109,3140,8,109,1,109,
        1,109,1,109,1,109,3,109,3146,8,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,3,109,3156,8,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,3,109,3168,8,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,3177,8,109,1,110,1,110,1,110,1,110,
        1,110,1,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,113,1,113,
        1,113,1,113,5,113,3196,8,113,10,113,12,113,3199,9,113,1,113,1,113,
        1,113,3,113,3204,8,113,1,114,1,114,1,114,4,114,3209,8,114,11,114,
        12,114,3210,1,115,1,115,1,116,1,116,1,116,5,116,3218,8,116,10,116,
        12,116,3221,9,116,1,117,1,117,1,117,1,117,1,117,1,117,1,118,1,118,
        1,119,1,119,1,119,3,119,3234,8,119,1,120,1,120,1,120,1,120,1,120,
        3,120,3241,8,120,1,121,1,121,1,121,5,121,3246,8,121,10,121,12,121,
        3249,9,121,1,122,1,122,1,122,1,122,1,122,3,122,3256,8,122,1,123,
        3,123,3259,8,123,1,123,1,123,3,123,3263,8,123,1,123,1,123,3,123,
        3267,8,123,1,123,3,123,3270,8,123,1,124,1,124,3,124,3274,8,124,1,
        125,1,125,1,125,0,7,46,70,122,126,128,168,188,126,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,0,37,2,0,22,22,212,212,
        2,0,55,55,114,114,2,0,226,226,244,244,2,0,88,88,105,105,2,0,75,75,
        106,106,1,0,222,223,2,0,84,84,157,157,2,0,308,308,330,330,2,0,74,
        74,265,265,2,0,12,12,58,58,2,0,84,84,131,131,2,0,5,5,62,62,3,0,89,
        89,135,135,217,217,2,0,16,16,243,243,3,0,18,18,133,133,254,254,2,
        0,288,288,290,290,2,0,107,107,230,230,1,0,302,303,1,0,304,306,2,
        0,127,127,172,172,1,0,275,277,4,0,72,72,80,80,257,257,267,267,2,
        0,32,32,264,264,2,0,10,10,169,169,2,0,83,83,224,224,1,0,296,301,
        3,0,5,5,9,9,238,238,2,0,80,80,257,257,5,0,50,50,101,101,153,154,
        228,228,294,294,1,0,158,161,2,0,85,85,195,195,3,0,96,96,120,120,
        247,247,4,0,63,63,115,115,143,143,278,278,2,0,175,175,293,293,5,
        0,36,36,56,56,110,110,231,231,271,271,2,0,252,252,282,282,55,0,1,
        5,7,7,9,10,12,16,18,18,20,22,25,32,34,35,39,39,48,50,52,55,57,58,
        60,61,63,65,68,70,72,72,75,75,78,78,81,85,87,87,90,96,99,99,101,
        104,106,107,109,109,112,112,114,115,117,118,120,120,127,134,136,
        136,138,138,140,140,143,154,156,163,167,172,174,176,179,179,181,
        196,198,203,205,216,218,220,222,230,232,236,238,243,245,248,250,
        255,258,260,262,264,266,268,270,273,275,279,281,283,286,287,289,
        295,3787,0,255,1,0,0,0,2,269,1,0,0,0,4,271,1,0,0,0,6,274,1,0,0,0,
        8,277,1,0,0,0,10,280,1,0,0,0,12,283,1,0,0,0,14,286,1,0,0,0,16,1160,
        1,0,0,0,18,1163,1,0,0,0,20,1167,1,0,0,0,22,1177,1,0,0,0,24,1181,
        1,0,0,0,26,1195,1,0,0,0,28,1197,1,0,0,0,30,1211,1,0,0,0,32,1217,
        1,0,0,0,34,1221,1,0,0,0,36,1229,1,0,0,0,38,1235,1,0,0,0,40,1237,
        1,0,0,0,42,1274,1,0,0,0,44,1276,1,0,0,0,46,1278,1,0,0,0,48,1314,
        1,0,0,0,50,1316,1,0,0,0,52,1324,1,0,0,0,54,1372,1,0,0,0,56,1422,
        1,0,0,0,58,1437,1,0,0,0,60,1439,1,0,0,0,62,1446,1,0,0,0,64,1475,
        1,0,0,0,66,1484,1,0,0,0,68,1501,1,0,0,0,70,1503,1,0,0,0,72,1534,
        1,0,0,0,74,1550,1,0,0,0,76,1552,1,0,0,0,78,1561,1,0,0,0,80,1563,
        1,0,0,0,82,1571,1,0,0,0,84,1573,1,0,0,0,86,1576,1,0,0,0,88,1661,
        1,0,0,0,90,1676,1,0,0,0,92,1687,1,0,0,0,94,1689,1,0,0,0,96,1704,
        1,0,0,0,98,1717,1,0,0,0,100,1721,1,0,0,0,102,1731,1,0,0,0,104,1779,
        1,0,0,0,106,1781,1,0,0,0,108,1809,1,0,0,0,110,1816,1,0,0,0,112,1888,
        1,0,0,0,114,1908,1,0,0,0,116,1910,1,0,0,0,118,1914,1,0,0,0,120,1927,
        1,0,0,0,122,1936,1,0,0,0,124,2010,1,0,0,0,126,2016,1,0,0,0,128,2488,
        1,0,0,0,130,2503,1,0,0,0,132,2517,1,0,0,0,134,2522,1,0,0,0,136,2527,
        1,0,0,0,138,2531,1,0,0,0,140,2537,1,0,0,0,142,2550,1,0,0,0,144,2556,
        1,0,0,0,146,2569,1,0,0,0,148,2571,1,0,0,0,150,2577,1,0,0,0,152,2585,
        1,0,0,0,154,2593,1,0,0,0,156,2595,1,0,0,0,158,2597,1,0,0,0,160,2599,
        1,0,0,0,162,2601,1,0,0,0,164,2611,1,0,0,0,166,2613,1,0,0,0,168,2706,
        1,0,0,0,170,2724,1,0,0,0,172,2728,1,0,0,0,174,2730,1,0,0,0,176,2735,
        1,0,0,0,178,2805,1,0,0,0,180,2807,1,0,0,0,182,2824,1,0,0,0,184,2888,
        1,0,0,0,186,2899,1,0,0,0,188,2901,1,0,0,0,190,2941,1,0,0,0,192,2973,
        1,0,0,0,194,2975,1,0,0,0,196,2983,1,0,0,0,198,2990,1,0,0,0,200,2999,
        1,0,0,0,202,3006,1,0,0,0,204,3013,1,0,0,0,206,3015,1,0,0,0,208,3023,
        1,0,0,0,210,3034,1,0,0,0,212,3049,1,0,0,0,214,3053,1,0,0,0,216,3075,
        1,0,0,0,218,3176,1,0,0,0,220,3178,1,0,0,0,222,3183,1,0,0,0,224,3188,
        1,0,0,0,226,3191,1,0,0,0,228,3208,1,0,0,0,230,3212,1,0,0,0,232,3214,
        1,0,0,0,234,3222,1,0,0,0,236,3228,1,0,0,0,238,3233,1,0,0,0,240,3240,
        1,0,0,0,242,3242,1,0,0,0,244,3255,1,0,0,0,246,3269,1,0,0,0,248,3273,
        1,0,0,0,250,3275,1,0,0,0,252,254,3,2,1,0,253,252,1,0,0,0,254,257,
        1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,
        1,0,0,0,258,259,5,0,0,1,259,1,1,0,0,0,260,270,3,4,2,0,261,270,3,
        6,3,0,262,270,3,8,4,0,263,270,3,10,5,0,264,266,3,12,6,0,265,267,
        5,309,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,270,1,0,0,0,268,270,
        3,14,7,0,269,260,1,0,0,0,269,261,1,0,0,0,269,262,1,0,0,0,269,263,
        1,0,0,0,269,264,1,0,0,0,269,268,1,0,0,0,270,3,1,0,0,0,271,272,3,
        16,8,0,272,273,5,309,0,0,273,5,1,0,0,0,274,275,3,120,60,0,275,276,
        5,309,0,0,276,7,1,0,0,0,277,278,3,206,103,0,278,279,5,309,0,0,279,
        9,1,0,0,0,280,281,3,168,84,0,281,282,5,309,0,0,282,11,1,0,0,0,283,
        284,3,188,94,0,284,285,5,309,0,0,285,13,1,0,0,0,286,287,3,208,104,
        0,287,288,5,309,0,0,288,15,1,0,0,0,289,1161,3,18,9,0,290,291,5,272,
        0,0,291,1161,3,244,122,0,292,293,5,272,0,0,293,294,3,244,122,0,294,
        295,5,310,0,0,295,296,3,244,122,0,296,1161,1,0,0,0,297,298,5,36,
        0,0,298,302,5,25,0,0,299,300,5,102,0,0,300,301,5,165,0,0,301,303,
        5,77,0,0,302,299,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,
        3,244,122,0,305,306,5,274,0,0,306,309,3,244,122,0,307,308,5,29,0,
        0,308,310,3,152,76,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,
        0,0,311,312,5,14,0,0,312,314,3,240,120,0,313,311,1,0,0,0,313,314,
        1,0,0,0,314,317,1,0,0,0,315,316,5,288,0,0,316,318,3,32,16,0,317,
        315,1,0,0,0,317,318,1,0,0,0,318,1161,1,0,0,0,319,320,5,66,0,0,320,
        323,5,25,0,0,321,322,5,102,0,0,322,324,5,77,0,0,323,321,1,0,0,0,
        323,324,1,0,0,0,324,325,1,0,0,0,325,327,3,244,122,0,326,328,7,0,
        0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,1161,1,0,0,0,329,330,5,36,
        0,0,330,334,5,226,0,0,331,332,5,102,0,0,332,333,5,165,0,0,333,335,
        5,77,0,0,334,331,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,339,
        3,232,116,0,337,338,5,14,0,0,338,340,3,240,120,0,339,337,1,0,0,0,
        339,340,1,0,0,0,340,343,1,0,0,0,341,342,5,288,0,0,342,344,3,32,16,
        0,343,341,1,0,0,0,343,344,1,0,0,0,344,1161,1,0,0,0,345,346,5,66,
        0,0,346,349,5,226,0,0,347,348,5,102,0,0,348,350,5,77,0,0,349,347,
        1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,3,232,116,0,352,
        354,7,0,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,1161,1,0,0,0,355,
        356,5,6,0,0,356,357,5,226,0,0,357,358,3,232,116,0,358,359,5,206,
        0,0,359,360,5,253,0,0,360,361,3,244,122,0,361,1161,1,0,0,0,362,363,
        5,6,0,0,363,364,5,226,0,0,364,365,3,232,116,0,365,366,5,234,0,0,
        366,367,5,14,0,0,367,368,3,240,120,0,368,1161,1,0,0,0,369,372,5,
        36,0,0,370,371,5,177,0,0,371,373,5,209,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,374,1,0,0,0,374,378,5,244,0,0,375,376,5,102,0,0,376,
        377,5,165,0,0,377,379,5,77,0,0,378,375,1,0,0,0,378,379,1,0,0,0,379,
        380,1,0,0,0,380,382,3,232,116,0,381,383,3,102,51,0,382,381,1,0,0,
        0,382,383,1,0,0,0,383,386,1,0,0,0,384,385,5,29,0,0,385,387,3,152,
        76,0,386,384,1,0,0,0,386,387,1,0,0,0,387,390,1,0,0,0,388,389,5,288,
        0,0,389,391,3,32,16,0,390,388,1,0,0,0,390,391,1,0,0,0,391,392,1,
        0,0,0,392,398,5,11,0,0,393,399,3,18,9,0,394,395,5,313,0,0,395,396,
        3,18,9,0,396,397,5,314,0,0,397,399,1,0,0,0,398,393,1,0,0,0,398,394,
        1,0,0,0,399,405,1,0,0,0,400,402,5,288,0,0,401,403,5,162,0,0,402,
        401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,5,48,0,0,405,
        400,1,0,0,0,405,406,1,0,0,0,406,1161,1,0,0,0,407,410,5,36,0,0,408,
        409,5,177,0,0,409,411,5,209,0,0,410,408,1,0,0,0,410,411,1,0,0,0,
        411,412,1,0,0,0,412,416,5,244,0,0,413,414,5,102,0,0,414,415,5,165,
        0,0,415,417,5,77,0,0,416,413,1,0,0,0,416,417,1,0,0,0,417,418,1,0,
        0,0,418,419,3,232,116,0,419,420,5,313,0,0,420,425,3,26,13,0,421,
        422,5,312,0,0,422,424,3,26,13,0,423,421,1,0,0,0,424,427,1,0,0,0,
        425,423,1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,
        428,431,5,314,0,0,429,430,5,29,0,0,430,432,3,152,76,0,431,429,1,
        0,0,0,431,432,1,0,0,0,432,435,1,0,0,0,433,434,5,288,0,0,434,436,
        3,32,16,0,435,433,1,0,0,0,435,436,1,0,0,0,436,1161,1,0,0,0,437,438,
        5,66,0,0,438,441,5,244,0,0,439,440,5,102,0,0,440,442,5,77,0,0,441,
        439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,1161,3,232,116,0,
        444,445,5,110,0,0,445,446,5,113,0,0,446,448,3,232,116,0,447,449,
        3,102,51,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,451,
        3,18,9,0,451,1161,1,0,0,0,452,453,5,56,0,0,453,454,5,88,0,0,454,
        457,3,232,116,0,455,456,5,285,0,0,456,458,3,122,61,0,457,455,1,0,
        0,0,457,458,1,0,0,0,458,1161,1,0,0,0,459,460,5,258,0,0,460,461,5,
        244,0,0,461,1161,3,232,116,0,462,463,5,29,0,0,463,464,5,173,0,0,
        464,465,5,244,0,0,465,466,3,232,116,0,466,469,5,116,0,0,467,470,
        3,152,76,0,468,470,5,166,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,
        1161,1,0,0,0,471,472,5,29,0,0,472,473,5,173,0,0,473,474,5,283,0,
        0,474,475,3,232,116,0,475,478,5,116,0,0,476,479,3,152,76,0,477,479,
        5,166,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,1161,1,0,0,0,480,481,
        5,29,0,0,481,482,5,173,0,0,482,483,5,27,0,0,483,484,3,232,116,0,
        484,487,5,116,0,0,485,488,3,152,76,0,486,488,5,166,0,0,487,485,1,
        0,0,0,487,486,1,0,0,0,488,1161,1,0,0,0,489,490,5,6,0,0,490,493,5,
        244,0,0,491,492,5,102,0,0,492,494,5,77,0,0,493,491,1,0,0,0,493,494,
        1,0,0,0,494,495,1,0,0,0,495,496,3,232,116,0,496,497,5,206,0,0,497,
        498,5,253,0,0,498,499,3,232,116,0,499,1161,1,0,0,0,500,501,5,6,0,
        0,501,504,5,244,0,0,502,503,5,102,0,0,503,505,5,77,0,0,504,502,1,
        0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,3,232,116,0,507,508,
        5,2,0,0,508,512,5,27,0,0,509,510,5,102,0,0,510,511,5,165,0,0,511,
        513,5,77,0,0,512,509,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,
        515,3,28,14,0,515,1161,1,0,0,0,516,517,5,6,0,0,517,520,5,244,0,0,
        518,519,5,102,0,0,519,521,5,77,0,0,520,518,1,0,0,0,520,521,1,0,0,
        0,521,522,1,0,0,0,522,523,3,232,116,0,523,524,5,206,0,0,524,527,
        5,27,0,0,525,526,5,102,0,0,526,528,5,77,0,0,527,525,1,0,0,0,527,
        528,1,0,0,0,528,529,1,0,0,0,529,530,3,232,116,0,530,531,5,253,0,
        0,531,532,3,244,122,0,532,1161,1,0,0,0,533,534,5,6,0,0,534,537,5,
        244,0,0,535,536,5,102,0,0,536,538,5,77,0,0,537,535,1,0,0,0,537,538,
        1,0,0,0,538,539,1,0,0,0,539,540,3,232,116,0,540,541,5,66,0,0,541,
        544,5,27,0,0,542,543,5,102,0,0,543,545,5,77,0,0,544,542,1,0,0,0,
        544,545,1,0,0,0,545,546,1,0,0,0,546,547,3,232,116,0,547,1161,1,0,
        0,0,548,549,5,6,0,0,549,552,5,244,0,0,550,551,5,102,0,0,551,553,
        5,77,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,555,
        3,232,116,0,555,556,5,6,0,0,556,557,5,27,0,0,557,558,3,232,116,0,
        558,559,5,234,0,0,559,560,5,48,0,0,560,561,5,260,0,0,561,562,3,168,
        84,0,562,1161,1,0,0,0,563,564,5,6,0,0,564,565,5,244,0,0,565,566,
        3,232,116,0,566,567,5,234,0,0,567,568,5,14,0,0,568,569,3,240,120,
        0,569,1161,1,0,0,0,570,571,5,6,0,0,571,572,5,244,0,0,572,573,3,232,
        116,0,573,574,5,234,0,0,574,575,5,199,0,0,575,576,3,34,17,0,576,
        1161,1,0,0,0,577,578,5,6,0,0,578,579,5,244,0,0,579,580,3,232,116,
        0,580,581,5,76,0,0,581,594,3,244,122,0,582,591,5,313,0,0,583,588,
        3,202,101,0,584,585,5,312,0,0,585,587,3,202,101,0,586,584,1,0,0,
        0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,
        0,590,588,1,0,0,0,591,583,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,
        0,593,595,5,314,0,0,594,582,1,0,0,0,594,595,1,0,0,0,595,598,1,0,
        0,0,596,597,5,285,0,0,597,599,3,122,61,0,598,596,1,0,0,0,598,599,
        1,0,0,0,599,1161,1,0,0,0,600,601,5,7,0,0,601,604,3,232,116,0,602,
        603,5,288,0,0,603,605,3,32,16,0,604,602,1,0,0,0,604,605,1,0,0,0,
        605,1161,1,0,0,0,606,609,5,36,0,0,607,608,5,177,0,0,608,610,5,209,
        0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,611,1,0,0,0,611,612,5,150,
        0,0,612,616,5,283,0,0,613,614,5,102,0,0,614,615,5,165,0,0,615,617,
        5,77,0,0,616,613,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,622,
        3,232,116,0,619,620,5,92,0,0,620,621,5,191,0,0,621,623,3,162,81,
        0,622,619,1,0,0,0,622,623,1,0,0,0,623,626,1,0,0,0,624,625,5,29,0,
        0,625,627,3,152,76,0,626,624,1,0,0,0,626,627,1,0,0,0,627,630,1,0,
        0,0,628,629,5,288,0,0,629,631,3,32,16,0,630,628,1,0,0,0,630,631,
        1,0,0,0,631,632,1,0,0,0,632,633,5,11,0,0,633,634,3,18,9,0,634,1161,
        1,0,0,0,635,638,5,36,0,0,636,637,5,177,0,0,637,639,5,209,0,0,638,
        636,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,283,0,0,641,
        644,3,232,116,0,642,643,5,29,0,0,643,645,3,152,76,0,644,642,1,0,
        0,0,644,645,1,0,0,0,645,648,1,0,0,0,646,647,5,229,0,0,647,649,7,
        1,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,
        11,0,0,651,652,3,18,9,0,652,1161,1,0,0,0,653,654,5,205,0,0,654,655,
        5,150,0,0,655,656,5,283,0,0,656,1161,3,232,116,0,657,658,5,66,0,
        0,658,659,5,150,0,0,659,662,5,283,0,0,660,661,5,102,0,0,661,663,
        5,77,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,1161,
        3,232,116,0,665,666,5,6,0,0,666,667,5,150,0,0,667,670,5,283,0,0,
        668,669,5,102,0,0,669,671,5,77,0,0,670,668,1,0,0,0,670,671,1,0,0,
        0,671,672,1,0,0,0,672,673,3,232,116,0,673,674,5,206,0,0,674,675,
        5,253,0,0,675,676,3,232,116,0,676,1161,1,0,0,0,677,678,5,6,0,0,678,
        679,5,150,0,0,679,680,5,283,0,0,680,681,3,232,116,0,681,682,5,234,
        0,0,682,683,5,199,0,0,683,684,3,34,17,0,684,1161,1,0,0,0,685,686,
        5,66,0,0,686,689,5,283,0,0,687,688,5,102,0,0,688,690,5,77,0,0,689,
        687,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,1161,3,232,116,0,
        692,693,5,6,0,0,693,694,5,283,0,0,694,695,3,232,116,0,695,696,5,
        206,0,0,696,697,5,253,0,0,697,698,3,232,116,0,698,1161,1,0,0,0,699,
        700,5,6,0,0,700,701,5,283,0,0,701,702,3,232,116,0,702,703,5,234,
        0,0,703,704,5,14,0,0,704,705,3,240,120,0,705,1161,1,0,0,0,706,707,
        5,20,0,0,707,708,3,232,116,0,708,717,5,313,0,0,709,714,3,202,101,
        0,710,711,5,312,0,0,711,713,3,202,101,0,712,710,1,0,0,0,713,716,
        1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,718,1,0,0,0,716,714,
        1,0,0,0,717,709,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,
        5,314,0,0,720,1161,1,0,0,0,721,724,5,36,0,0,722,723,5,177,0,0,723,
        725,5,209,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
        1161,3,208,104,0,727,728,5,66,0,0,728,731,5,90,0,0,729,730,5,102,
        0,0,730,732,5,77,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,733,1,0,
        0,0,733,1161,3,210,105,0,734,735,5,36,0,0,735,736,5,218,0,0,736,
        740,3,244,122,0,737,738,5,288,0,0,738,739,5,3,0,0,739,741,3,238,
        119,0,740,737,1,0,0,0,740,741,1,0,0,0,741,744,1,0,0,0,742,743,5,
        105,0,0,743,745,3,244,122,0,744,742,1,0,0,0,744,745,1,0,0,0,745,
        1161,1,0,0,0,746,747,5,66,0,0,747,748,5,218,0,0,748,751,3,244,122,
        0,749,750,5,105,0,0,750,752,3,244,122,0,751,749,1,0,0,0,751,752,
        1,0,0,0,752,1161,1,0,0,0,753,754,5,93,0,0,754,755,3,242,121,0,755,
        756,5,253,0,0,756,761,3,240,120,0,757,758,5,312,0,0,758,760,3,240,
        120,0,759,757,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,
        0,0,0,762,767,1,0,0,0,763,761,1,0,0,0,764,765,5,288,0,0,765,766,
        5,3,0,0,766,768,5,176,0,0,767,764,1,0,0,0,767,768,1,0,0,0,768,772,
        1,0,0,0,769,770,5,94,0,0,770,771,5,19,0,0,771,773,3,238,119,0,772,
        769,1,0,0,0,772,773,1,0,0,0,773,776,1,0,0,0,774,775,5,105,0,0,775,
        777,3,244,122,0,776,774,1,0,0,0,776,777,1,0,0,0,777,1161,1,0,0,0,
        778,782,5,216,0,0,779,780,5,3,0,0,780,781,5,176,0,0,781,783,5,86,
        0,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,3,242,
        121,0,785,786,5,88,0,0,786,791,3,240,120,0,787,788,5,312,0,0,788,
        790,3,240,120,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,
        791,792,1,0,0,0,792,797,1,0,0,0,793,791,1,0,0,0,794,795,5,94,0,0,
        795,796,5,19,0,0,796,798,3,238,119,0,797,794,1,0,0,0,797,798,1,0,
        0,0,798,801,1,0,0,0,799,800,5,105,0,0,800,802,3,244,122,0,801,799,
        1,0,0,0,801,802,1,0,0,0,802,1161,1,0,0,0,803,804,5,234,0,0,804,808,
        5,218,0,0,805,809,5,5,0,0,806,809,5,163,0,0,807,809,3,244,122,0,
        808,805,1,0,0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,812,1,0,0,0,
        810,811,5,105,0,0,811,813,3,244,122,0,812,810,1,0,0,0,812,813,1,
        0,0,0,813,1161,1,0,0,0,814,825,5,93,0,0,815,820,3,230,115,0,816,
        817,5,312,0,0,817,819,3,230,115,0,818,816,1,0,0,0,819,822,1,0,0,
        0,820,818,1,0,0,0,820,821,1,0,0,0,821,826,1,0,0,0,822,820,1,0,0,
        0,823,824,5,5,0,0,824,826,5,198,0,0,825,815,1,0,0,0,825,823,1,0,
        0,0,826,827,1,0,0,0,827,829,5,173,0,0,828,830,7,2,0,0,829,828,1,
        0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,3,232,116,0,832,833,
        5,253,0,0,833,837,3,240,120,0,834,835,5,288,0,0,835,836,5,93,0,0,
        836,838,5,176,0,0,837,834,1,0,0,0,837,838,1,0,0,0,838,1161,1,0,0,
        0,839,850,5,57,0,0,840,845,3,230,115,0,841,842,5,312,0,0,842,844,
        3,230,115,0,843,841,1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,845,
        846,1,0,0,0,846,851,1,0,0,0,847,845,1,0,0,0,848,849,5,5,0,0,849,
        851,5,198,0,0,850,840,1,0,0,0,850,848,1,0,0,0,851,852,1,0,0,0,852,
        854,5,173,0,0,853,855,7,2,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,
        856,1,0,0,0,856,857,3,232,116,0,857,858,5,253,0,0,858,859,3,240,
        120,0,859,1161,1,0,0,0,860,864,5,216,0,0,861,862,5,93,0,0,862,863,
        5,176,0,0,863,865,5,86,0,0,864,861,1,0,0,0,864,865,1,0,0,0,865,876,
        1,0,0,0,866,871,3,230,115,0,867,868,5,312,0,0,868,870,3,230,115,
        0,869,867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,
        0,872,877,1,0,0,0,873,871,1,0,0,0,874,875,5,5,0,0,875,877,5,198,
        0,0,876,866,1,0,0,0,876,874,1,0,0,0,877,878,1,0,0,0,878,880,5,173,
        0,0,879,881,7,2,0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,882,1,0,
        0,0,882,883,3,232,116,0,883,884,5,88,0,0,884,885,3,240,120,0,885,
        1161,1,0,0,0,886,887,5,236,0,0,887,893,5,95,0,0,888,890,5,173,0,
        0,889,891,5,244,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,
        0,0,892,894,3,232,116,0,893,888,1,0,0,0,893,894,1,0,0,0,894,1161,
        1,0,0,0,895,907,5,78,0,0,896,897,5,313,0,0,897,902,3,196,98,0,898,
        899,5,312,0,0,899,901,3,196,98,0,900,898,1,0,0,0,901,904,1,0,0,0,
        902,900,1,0,0,0,902,903,1,0,0,0,903,905,1,0,0,0,904,902,1,0,0,0,
        905,906,5,314,0,0,906,908,1,0,0,0,907,896,1,0,0,0,907,908,1,0,0,
        0,908,909,1,0,0,0,909,1161,3,16,8,0,910,911,5,78,0,0,911,913,5,7,
        0,0,912,914,5,281,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,
        0,0,0,915,1161,3,16,8,0,916,917,5,236,0,0,917,918,5,36,0,0,918,919,
        5,244,0,0,919,1161,3,232,116,0,920,921,5,236,0,0,921,922,5,36,0,
        0,922,923,5,226,0,0,923,1161,3,232,116,0,924,925,5,236,0,0,925,926,
        5,36,0,0,926,927,5,283,0,0,927,1161,3,232,116,0,928,929,5,236,0,
        0,929,930,5,36,0,0,930,931,5,150,0,0,931,932,5,283,0,0,932,1161,
        3,232,116,0,933,934,5,236,0,0,934,937,5,245,0,0,935,936,7,3,0,0,
        936,938,3,232,116,0,937,935,1,0,0,0,937,938,1,0,0,0,938,945,1,0,
        0,0,939,940,5,137,0,0,940,943,3,152,76,0,941,942,5,73,0,0,942,944,
        3,152,76,0,943,941,1,0,0,0,943,944,1,0,0,0,944,946,1,0,0,0,945,939,
        1,0,0,0,945,946,1,0,0,0,946,1161,1,0,0,0,947,948,5,236,0,0,948,951,
        5,227,0,0,949,950,7,3,0,0,950,952,3,244,122,0,951,949,1,0,0,0,951,
        952,1,0,0,0,952,959,1,0,0,0,953,954,5,137,0,0,954,957,3,152,76,0,
        955,956,5,73,0,0,956,958,3,152,76,0,957,955,1,0,0,0,957,958,1,0,
        0,0,958,960,1,0,0,0,959,953,1,0,0,0,959,960,1,0,0,0,960,1161,1,0,
        0,0,961,962,5,236,0,0,962,969,5,26,0,0,963,964,5,137,0,0,964,967,
        3,152,76,0,965,966,5,73,0,0,966,968,3,152,76,0,967,965,1,0,0,0,967,
        968,1,0,0,0,968,970,1,0,0,0,969,963,1,0,0,0,969,970,1,0,0,0,970,
        1161,1,0,0,0,971,972,5,236,0,0,972,973,5,28,0,0,973,975,7,3,0,0,
        974,976,3,232,116,0,975,974,1,0,0,0,975,976,1,0,0,0,976,983,1,0,
        0,0,977,978,5,137,0,0,978,981,3,152,76,0,979,980,5,73,0,0,980,982,
        3,152,76,0,981,979,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,977,
        1,0,0,0,983,984,1,0,0,0,984,1161,1,0,0,0,985,986,5,236,0,0,986,987,
        5,240,0,0,987,988,5,86,0,0,988,1161,3,232,116,0,989,990,5,236,0,
        0,990,991,5,240,0,0,991,992,5,86,0,0,992,993,5,313,0,0,993,994,3,
        18,9,0,994,995,5,314,0,0,995,1161,1,0,0,0,996,998,5,236,0,0,997,
        999,5,39,0,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,
        1003,5,219,0,0,1001,1002,7,3,0,0,1002,1004,3,244,122,0,1003,1001,
        1,0,0,0,1003,1004,1,0,0,0,1004,1161,1,0,0,0,1005,1006,5,236,0,0,
        1006,1007,5,218,0,0,1007,1010,5,95,0,0,1008,1009,7,3,0,0,1009,1011,
        3,244,122,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1161,1,0,0,
        0,1012,1013,5,59,0,0,1013,1161,3,232,116,0,1014,1015,5,58,0,0,1015,
        1161,3,232,116,0,1016,1017,5,236,0,0,1017,1020,5,91,0,0,1018,1019,
        7,3,0,0,1019,1021,3,232,116,0,1020,1018,1,0,0,0,1020,1021,1,0,0,
        0,1021,1028,1,0,0,0,1022,1023,5,137,0,0,1023,1026,3,152,76,0,1024,
        1025,5,73,0,0,1025,1027,3,152,76,0,1026,1024,1,0,0,0,1026,1027,1,
        0,0,0,1027,1029,1,0,0,0,1028,1022,1,0,0,0,1028,1029,1,0,0,0,1029,
        1161,1,0,0,0,1030,1031,5,236,0,0,1031,1038,5,233,0,0,1032,1033,5,
        137,0,0,1033,1036,3,152,76,0,1034,1035,5,73,0,0,1035,1037,3,152,
        76,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,
        1032,1,0,0,0,1038,1039,1,0,0,0,1039,1161,1,0,0,0,1040,1041,5,234,
        0,0,1041,1042,5,233,0,0,1042,1043,5,14,0,0,1043,1161,3,248,124,0,
        1044,1045,5,210,0,0,1045,1046,5,233,0,0,1046,1161,5,14,0,0,1047,
        1048,5,234,0,0,1048,1049,5,233,0,0,1049,1050,3,232,116,0,1050,1051,
        5,296,0,0,1051,1052,3,120,60,0,1052,1161,1,0,0,0,1053,1054,5,210,
        0,0,1054,1055,5,233,0,0,1055,1161,3,232,116,0,1056,1057,5,239,0,
        0,1057,1066,5,255,0,0,1058,1063,3,198,99,0,1059,1060,5,312,0,0,1060,
        1062,3,198,99,0,1061,1059,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,
        0,0,0,1063,1064,1,0,0,0,1064,1067,1,0,0,0,1065,1063,1,0,0,0,1066,
        1058,1,0,0,0,1066,1067,1,0,0,0,1067,1161,1,0,0,0,1068,1070,5,30,
        0,0,1069,1071,5,291,0,0,1070,1069,1,0,0,0,1070,1071,1,0,0,0,1071,
        1161,1,0,0,0,1072,1074,5,220,0,0,1073,1075,5,291,0,0,1074,1073,1,
        0,0,0,1074,1075,1,0,0,0,1075,1161,1,0,0,0,1076,1077,5,197,0,0,1077,
        1078,3,244,122,0,1078,1079,5,88,0,0,1079,1080,3,16,8,0,1080,1161,
        1,0,0,0,1081,1082,5,51,0,0,1082,1083,5,197,0,0,1083,1161,3,244,122,
        0,1084,1085,5,76,0,0,1085,1095,3,244,122,0,1086,1087,5,274,0,0,1087,
        1092,3,120,60,0,1088,1089,5,312,0,0,1089,1091,3,120,60,0,1090,1088,
        1,0,0,0,1091,1094,1,0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,
        1096,1,0,0,0,1094,1092,1,0,0,0,1095,1086,1,0,0,0,1095,1096,1,0,0,
        0,1096,1161,1,0,0,0,1097,1098,5,76,0,0,1098,1099,5,104,0,0,1099,
        1109,3,152,76,0,1100,1101,5,274,0,0,1101,1106,3,120,60,0,1102,1103,
        5,312,0,0,1103,1105,3,120,60,0,1104,1102,1,0,0,0,1105,1108,1,0,0,
        0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1110,1,0,0,0,1108,1106,
        1,0,0,0,1109,1100,1,0,0,0,1109,1110,1,0,0,0,1110,1161,1,0,0,0,1111,
        1112,5,59,0,0,1112,1113,5,109,0,0,1113,1161,3,244,122,0,1114,1115,
        5,59,0,0,1115,1116,5,181,0,0,1116,1161,3,244,122,0,1117,1118,5,234,
        0,0,1118,1119,5,188,0,0,1119,1161,3,206,103,0,1120,1121,5,234,0,
        0,1121,1122,5,251,0,0,1122,1125,5,295,0,0,1123,1126,5,140,0,0,1124,
        1126,3,120,60,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,1161,1,
        0,0,0,1127,1128,5,271,0,0,1128,1129,3,232,116,0,1129,1130,5,234,
        0,0,1130,1135,3,194,97,0,1131,1132,5,312,0,0,1132,1134,3,194,97,
        0,1133,1131,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,
        1,0,0,0,1136,1140,1,0,0,0,1137,1135,1,0,0,0,1138,1139,5,285,0,0,
        1139,1141,3,122,61,0,1140,1138,1,0,0,0,1140,1141,1,0,0,0,1141,1161,
        1,0,0,0,1142,1143,5,152,0,0,1143,1144,5,113,0,0,1144,1149,3,232,
        116,0,1145,1147,5,11,0,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,
        1148,1,0,0,0,1148,1150,3,244,122,0,1149,1146,1,0,0,0,1149,1150,1,
        0,0,0,1150,1151,1,0,0,0,1151,1152,5,274,0,0,1152,1153,3,70,35,0,
        1153,1154,5,173,0,0,1154,1156,3,120,60,0,1155,1157,3,178,89,0,1156,
        1155,1,0,0,0,1157,1158,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,
        0,1159,1161,1,0,0,0,1160,289,1,0,0,0,1160,290,1,0,0,0,1160,292,1,
        0,0,0,1160,297,1,0,0,0,1160,319,1,0,0,0,1160,329,1,0,0,0,1160,345,
        1,0,0,0,1160,355,1,0,0,0,1160,362,1,0,0,0,1160,369,1,0,0,0,1160,
        407,1,0,0,0,1160,437,1,0,0,0,1160,444,1,0,0,0,1160,452,1,0,0,0,1160,
        459,1,0,0,0,1160,462,1,0,0,0,1160,471,1,0,0,0,1160,480,1,0,0,0,1160,
        489,1,0,0,0,1160,500,1,0,0,0,1160,516,1,0,0,0,1160,533,1,0,0,0,1160,
        548,1,0,0,0,1160,563,1,0,0,0,1160,570,1,0,0,0,1160,577,1,0,0,0,1160,
        600,1,0,0,0,1160,606,1,0,0,0,1160,635,1,0,0,0,1160,653,1,0,0,0,1160,
        657,1,0,0,0,1160,665,1,0,0,0,1160,677,1,0,0,0,1160,685,1,0,0,0,1160,
        692,1,0,0,0,1160,699,1,0,0,0,1160,706,1,0,0,0,1160,721,1,0,0,0,1160,
        727,1,0,0,0,1160,734,1,0,0,0,1160,746,1,0,0,0,1160,753,1,0,0,0,1160,
        778,1,0,0,0,1160,803,1,0,0,0,1160,814,1,0,0,0,1160,839,1,0,0,0,1160,
        860,1,0,0,0,1160,886,1,0,0,0,1160,895,1,0,0,0,1160,910,1,0,0,0,1160,
        916,1,0,0,0,1160,920,1,0,0,0,1160,924,1,0,0,0,1160,928,1,0,0,0,1160,
        933,1,0,0,0,1160,947,1,0,0,0,1160,961,1,0,0,0,1160,971,1,0,0,0,1160,
        985,1,0,0,0,1160,989,1,0,0,0,1160,996,1,0,0,0,1160,1005,1,0,0,0,
        1160,1012,1,0,0,0,1160,1014,1,0,0,0,1160,1016,1,0,0,0,1160,1030,
        1,0,0,0,1160,1040,1,0,0,0,1160,1044,1,0,0,0,1160,1047,1,0,0,0,1160,
        1053,1,0,0,0,1160,1056,1,0,0,0,1160,1068,1,0,0,0,1160,1072,1,0,0,
        0,1160,1076,1,0,0,0,1160,1081,1,0,0,0,1160,1084,1,0,0,0,1160,1097,
        1,0,0,0,1160,1111,1,0,0,0,1160,1114,1,0,0,0,1160,1117,1,0,0,0,1160,
        1120,1,0,0,0,1160,1127,1,0,0,0,1160,1142,1,0,0,0,1161,17,1,0,0,0,
        1162,1164,3,20,10,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,1165,
        1,0,0,0,1165,1166,3,22,11,0,1166,19,1,0,0,0,1167,1168,5,288,0,0,
        1168,1173,3,208,104,0,1169,1170,5,312,0,0,1170,1172,3,208,104,0,
        1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,
        1,0,0,0,1174,21,1,0,0,0,1175,1173,1,0,0,0,1176,1178,3,24,12,0,1177,
        1176,1,0,0,0,1177,1178,1,0,0,0,1178,1179,1,0,0,0,1179,1180,3,40,
        20,0,1180,23,1,0,0,0,1181,1183,5,288,0,0,1182,1184,5,204,0,0,1183,
        1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1190,3,64,
        32,0,1186,1187,5,312,0,0,1187,1189,3,64,32,0,1188,1186,1,0,0,0,1189,
        1192,1,0,0,0,1190,1188,1,0,0,0,1190,1191,1,0,0,0,1191,25,1,0,0,0,
        1192,1190,1,0,0,0,1193,1196,3,28,14,0,1194,1196,3,30,15,0,1195,1193,
        1,0,0,0,1195,1194,1,0,0,0,1196,27,1,0,0,0,1197,1198,3,244,122,0,
        1198,1201,3,168,84,0,1199,1200,5,165,0,0,1200,1202,5,166,0,0,1201,
        1199,1,0,0,0,1201,1202,1,0,0,0,1202,1205,1,0,0,0,1203,1204,5,29,
        0,0,1204,1206,3,152,76,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,
        1209,1,0,0,0,1207,1208,5,288,0,0,1208,1210,3,32,16,0,1209,1207,1,
        0,0,0,1209,1210,1,0,0,0,1210,29,1,0,0,0,1211,1212,5,137,0,0,1212,
        1215,3,232,116,0,1213,1214,7,4,0,0,1214,1216,5,199,0,0,1215,1213,
        1,0,0,0,1215,1216,1,0,0,0,1216,31,1,0,0,0,1217,1218,5,313,0,0,1218,
        1219,3,34,17,0,1219,1220,5,314,0,0,1220,33,1,0,0,0,1221,1226,3,36,
        18,0,1222,1223,5,312,0,0,1223,1225,3,36,18,0,1224,1222,1,0,0,0,1225,
        1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,0,0,1227,35,1,0,0,0,
        1228,1226,1,0,0,0,1229,1230,3,244,122,0,1230,1231,5,296,0,0,1231,
        1232,3,38,19,0,1232,37,1,0,0,0,1233,1236,5,53,0,0,1234,1236,3,120,
        60,0,1235,1233,1,0,0,0,1235,1234,1,0,0,0,1236,39,1,0,0,0,1237,1248,
        3,46,23,0,1238,1239,5,178,0,0,1239,1240,5,19,0,0,1240,1245,3,50,
        25,0,1241,1242,5,312,0,0,1242,1244,3,50,25,0,1243,1241,1,0,0,0,1244,
        1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1249,1,0,0,
        0,1247,1245,1,0,0,0,1248,1238,1,0,0,0,1248,1249,1,0,0,0,1249,1255,
        1,0,0,0,1250,1251,5,171,0,0,1251,1253,3,44,22,0,1252,1254,7,5,0,
        0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1256,1,0,0,0,1255,1250,
        1,0,0,0,1255,1256,1,0,0,0,1256,1270,1,0,0,0,1257,1258,5,138,0,0,
        1258,1271,3,42,21,0,1259,1260,5,81,0,0,1260,1262,7,6,0,0,1261,1263,
        3,44,22,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,
        1264,1268,7,5,0,0,1265,1269,5,175,0,0,1266,1267,5,288,0,0,1267,1269,
        5,250,0,0,1268,1265,1,0,0,0,1268,1266,1,0,0,0,1269,1271,1,0,0,0,
        1270,1257,1,0,0,0,1270,1259,1,0,0,0,1270,1271,1,0,0,0,1271,41,1,
        0,0,0,1272,1275,5,5,0,0,1273,1275,3,44,22,0,1274,1272,1,0,0,0,1274,
        1273,1,0,0,0,1275,43,1,0,0,0,1276,1277,7,7,0,0,1277,45,1,0,0,0,1278,
        1279,6,23,-1,0,1279,1280,3,48,24,0,1280,1295,1,0,0,0,1281,1282,10,
        2,0,0,1282,1284,5,111,0,0,1283,1285,3,66,33,0,1284,1283,1,0,0,0,
        1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1294,3,46,23,3,1287,1288,
        10,1,0,0,1288,1290,7,8,0,0,1289,1291,3,66,33,0,1290,1289,1,0,0,0,
        1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,3,46,23,2,1293,1281,
        1,0,0,0,1293,1287,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,0,0,1295,
        1296,1,0,0,0,1296,47,1,0,0,0,1297,1295,1,0,0,0,1298,1315,3,52,26,
        0,1299,1300,5,244,0,0,1300,1315,3,232,116,0,1301,1302,5,280,0,0,
        1302,1307,3,120,60,0,1303,1304,5,312,0,0,1304,1306,3,120,60,0,1305,
        1303,1,0,0,0,1306,1309,1,0,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,
        0,1308,1315,1,0,0,0,1309,1307,1,0,0,0,1310,1311,5,313,0,0,1311,1312,
        3,40,20,0,1312,1313,5,314,0,0,1313,1315,1,0,0,0,1314,1298,1,0,0,
        0,1314,1299,1,0,0,0,1314,1301,1,0,0,0,1314,1310,1,0,0,0,1315,49,
        1,0,0,0,1316,1318,3,120,60,0,1317,1319,7,9,0,0,1318,1317,1,0,0,0,
        1318,1319,1,0,0,0,1319,1322,1,0,0,0,1320,1321,5,168,0,0,1321,1323,
        7,10,0,0,1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,51,1,0,0,0,1324,
        1326,5,231,0,0,1325,1327,3,66,33,0,1326,1325,1,0,0,0,1326,1327,1,
        0,0,0,1327,1328,1,0,0,0,1328,1333,3,68,34,0,1329,1330,5,312,0,0,
        1330,1332,3,68,34,0,1331,1329,1,0,0,0,1332,1335,1,0,0,0,1333,1331,
        1,0,0,0,1333,1334,1,0,0,0,1334,1345,1,0,0,0,1335,1333,1,0,0,0,1336,
        1337,5,88,0,0,1337,1342,3,70,35,0,1338,1339,5,312,0,0,1339,1341,
        3,70,35,0,1340,1338,1,0,0,0,1341,1344,1,0,0,0,1342,1340,1,0,0,0,
        1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1342,1,0,0,0,1345,1336,
        1,0,0,0,1345,1346,1,0,0,0,1346,1349,1,0,0,0,1347,1348,5,285,0,0,
        1348,1350,3,122,61,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1354,
        1,0,0,0,1351,1352,5,97,0,0,1352,1353,5,19,0,0,1353,1355,3,54,27,
        0,1354,1351,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,0,1356,1357,
        5,100,0,0,1357,1359,3,122,61,0,1358,1356,1,0,0,0,1358,1359,1,0,0,
        0,1359,1369,1,0,0,0,1360,1361,5,287,0,0,1361,1366,3,60,30,0,1362,
        1363,5,312,0,0,1363,1365,3,60,30,0,1364,1362,1,0,0,0,1365,1368,1,
        0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,1370,1,0,0,0,1368,
        1366,1,0,0,0,1369,1360,1,0,0,0,1369,1370,1,0,0,0,1370,53,1,0,0,0,
        1371,1373,3,66,33,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1374,
        1,0,0,0,1374,1379,3,56,28,0,1375,1376,5,312,0,0,1376,1378,3,56,28,
        0,1377,1375,1,0,0,0,1378,1381,1,0,0,0,1379,1377,1,0,0,0,1379,1380,
        1,0,0,0,1380,55,1,0,0,0,1381,1379,1,0,0,0,1382,1423,3,58,29,0,1383,
        1384,5,221,0,0,1384,1393,5,313,0,0,1385,1390,3,120,60,0,1386,1387,
        5,312,0,0,1387,1389,3,120,60,0,1388,1386,1,0,0,0,1389,1392,1,0,0,
        0,1390,1388,1,0,0,0,1390,1391,1,0,0,0,1391,1394,1,0,0,0,1392,1390,
        1,0,0,0,1393,1385,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,
        1423,5,314,0,0,1396,1397,5,38,0,0,1397,1406,5,313,0,0,1398,1403,
        3,120,60,0,1399,1400,5,312,0,0,1400,1402,3,120,60,0,1401,1399,1,
        0,0,0,1402,1405,1,0,0,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,1404,
        1407,1,0,0,0,1405,1403,1,0,0,0,1406,1398,1,0,0,0,1406,1407,1,0,0,
        0,1407,1408,1,0,0,0,1408,1423,5,314,0,0,1409,1410,5,98,0,0,1410,
        1411,5,235,0,0,1411,1412,5,313,0,0,1412,1417,3,58,29,0,1413,1414,
        5,312,0,0,1414,1416,3,58,29,0,1415,1413,1,0,0,0,1416,1419,1,0,0,
        0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,1417,
        1,0,0,0,1420,1421,5,314,0,0,1421,1423,1,0,0,0,1422,1382,1,0,0,0,
        1422,1383,1,0,0,0,1422,1396,1,0,0,0,1422,1409,1,0,0,0,1423,57,1,
        0,0,0,1424,1433,5,313,0,0,1425,1430,3,120,60,0,1426,1427,5,312,0,
        0,1427,1429,3,120,60,0,1428,1426,1,0,0,0,1429,1432,1,0,0,0,1430,
        1428,1,0,0,0,1430,1431,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,
        0,1433,1425,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1438,
        5,314,0,0,1436,1438,3,120,60,0,1437,1424,1,0,0,0,1437,1436,1,0,0,
        0,1438,59,1,0,0,0,1439,1440,3,244,122,0,1440,1441,5,11,0,0,1441,
        1442,5,313,0,0,1442,1443,3,62,31,0,1443,1444,5,314,0,0,1444,61,1,
        0,0,0,1445,1447,3,244,122,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,
        1447,1458,1,0,0,0,1448,1449,5,184,0,0,1449,1450,5,19,0,0,1450,1455,
        3,120,60,0,1451,1452,5,312,0,0,1452,1454,3,120,60,0,1453,1451,1,
        0,0,0,1454,1457,1,0,0,0,1455,1453,1,0,0,0,1455,1456,1,0,0,0,1456,
        1459,1,0,0,0,1457,1455,1,0,0,0,1458,1448,1,0,0,0,1458,1459,1,0,0,
        0,1459,1470,1,0,0,0,1460,1461,5,178,0,0,1461,1462,5,19,0,0,1462,
        1467,3,50,25,0,1463,1464,5,312,0,0,1464,1466,3,50,25,0,1465,1463,
        1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,
        1471,1,0,0,0,1469,1467,1,0,0,0,1470,1460,1,0,0,0,1470,1471,1,0,0,
        0,1471,1473,1,0,0,0,1472,1474,3,182,91,0,1473,1472,1,0,0,0,1473,
        1474,1,0,0,0,1474,63,1,0,0,0,1475,1477,3,244,122,0,1476,1478,3,102,
        51,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
        1480,5,11,0,0,1480,1481,5,313,0,0,1481,1482,3,22,11,0,1482,1483,
        5,314,0,0,1483,65,1,0,0,0,1484,1485,7,11,0,0,1485,67,1,0,0,0,1486,
        1491,3,120,60,0,1487,1489,5,11,0,0,1488,1487,1,0,0,0,1488,1489,1,
        0,0,0,1489,1490,1,0,0,0,1490,1492,3,244,122,0,1491,1488,1,0,0,0,
        1491,1492,1,0,0,0,1492,1502,1,0,0,0,1493,1494,3,128,64,0,1494,1495,
        5,310,0,0,1495,1498,5,304,0,0,1496,1497,5,11,0,0,1497,1499,3,102,
        51,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,
        1502,5,304,0,0,1501,1486,1,0,0,0,1501,1493,1,0,0,0,1501,1500,1,0,
        0,0,1502,69,1,0,0,0,1503,1504,6,35,-1,0,1504,1505,3,76,38,0,1505,
        1524,1,0,0,0,1506,1520,10,2,0,0,1507,1508,5,37,0,0,1508,1509,5,119,
        0,0,1509,1521,3,76,38,0,1510,1511,3,72,36,0,1511,1512,5,119,0,0,
        1512,1513,3,70,35,0,1513,1514,3,74,37,0,1514,1521,1,0,0,0,1515,1516,
        5,155,0,0,1516,1517,3,72,36,0,1517,1518,5,119,0,0,1518,1519,3,76,
        38,0,1519,1521,1,0,0,0,1520,1507,1,0,0,0,1520,1510,1,0,0,0,1520,
        1515,1,0,0,0,1521,1523,1,0,0,0,1522,1506,1,0,0,0,1523,1526,1,0,0,
        0,1524,1522,1,0,0,0,1524,1525,1,0,0,0,1525,71,1,0,0,0,1526,1524,
        1,0,0,0,1527,1529,5,108,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,
        1529,1535,1,0,0,0,1530,1532,7,12,0,0,1531,1533,5,180,0,0,1532,1531,
        1,0,0,0,1532,1533,1,0,0,0,1533,1535,1,0,0,0,1534,1528,1,0,0,0,1534,
        1530,1,0,0,0,1535,73,1,0,0,0,1536,1537,5,173,0,0,1537,1551,3,122,
        61,0,1538,1539,5,274,0,0,1539,1540,5,313,0,0,1540,1545,3,244,122,
        0,1541,1542,5,312,0,0,1542,1544,3,244,122,0,1543,1541,1,0,0,0,1544,
        1547,1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1548,1,0,0,
        0,1547,1545,1,0,0,0,1548,1549,5,314,0,0,1549,1551,1,0,0,0,1550,1536,
        1,0,0,0,1550,1538,1,0,0,0,1551,75,1,0,0,0,1552,1559,3,86,43,0,1553,
        1554,5,246,0,0,1554,1555,3,78,39,0,1555,1556,5,313,0,0,1556,1557,
        3,120,60,0,1557,1558,5,314,0,0,1558,1560,1,0,0,0,1559,1553,1,0,0,
        0,1559,1560,1,0,0,0,1560,77,1,0,0,0,1561,1562,7,13,0,0,1562,79,1,
        0,0,0,1563,1564,7,14,0,0,1564,81,1,0,0,0,1565,1572,5,72,0,0,1566,
        1568,5,258,0,0,1567,1569,3,152,76,0,1568,1567,1,0,0,0,1568,1569,
        1,0,0,0,1569,1570,1,0,0,0,1570,1572,3,84,42,0,1571,1565,1,0,0,0,
        1571,1566,1,0,0,0,1572,83,1,0,0,0,1573,1574,7,15,0,0,1574,1575,5,
        34,0,0,1575,85,1,0,0,0,1576,1659,3,100,50,0,1577,1578,5,149,0,0,
        1578,1589,5,313,0,0,1579,1580,5,184,0,0,1580,1581,5,19,0,0,1581,
        1586,3,120,60,0,1582,1583,5,312,0,0,1583,1585,3,120,60,0,1584,1582,
        1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,
        1590,1,0,0,0,1588,1586,1,0,0,0,1589,1579,1,0,0,0,1589,1590,1,0,0,
        0,1590,1601,1,0,0,0,1591,1592,5,178,0,0,1592,1593,5,19,0,0,1593,
        1598,3,50,25,0,1594,1595,5,312,0,0,1595,1597,3,50,25,0,1596,1594,
        1,0,0,0,1597,1600,1,0,0,0,1598,1596,1,0,0,0,1598,1599,1,0,0,0,1599,
        1602,1,0,0,0,1600,1598,1,0,0,0,1601,1591,1,0,0,0,1601,1602,1,0,0,
        0,1602,1612,1,0,0,0,1603,1604,5,151,0,0,1604,1609,3,88,44,0,1605,
        1606,5,312,0,0,1606,1608,3,88,44,0,1607,1605,1,0,0,0,1608,1611,1,
        0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1613,1,0,0,0,1611,
        1609,1,0,0,0,1612,1603,1,0,0,0,1612,1613,1,0,0,0,1613,1615,1,0,0,
        0,1614,1616,3,90,45,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1620,
        1,0,0,0,1617,1618,5,4,0,0,1618,1619,5,146,0,0,1619,1621,3,94,47,
        0,1620,1617,1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1624,
        7,16,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,
        1626,5,189,0,0,1626,1627,5,313,0,0,1627,1628,3,188,94,0,1628,1638,
        5,314,0,0,1629,1630,5,241,0,0,1630,1635,3,96,48,0,1631,1632,5,312,
        0,0,1632,1634,3,96,48,0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,
        1633,1,0,0,0,1635,1636,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,
        0,1638,1629,1,0,0,0,1638,1639,1,0,0,0,1639,1640,1,0,0,0,1640,1641,
        5,54,0,0,1641,1646,3,98,49,0,1642,1643,5,312,0,0,1643,1645,3,98,
        49,0,1644,1642,1,0,0,0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,
        1647,1,0,0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,0,1649,1657,5,314,
        0,0,1650,1652,5,11,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,0,1652,
        1653,1,0,0,0,1653,1655,3,244,122,0,1654,1656,3,102,51,0,1655,1654,
        1,0,0,0,1655,1656,1,0,0,0,1656,1658,1,0,0,0,1657,1651,1,0,0,0,1657,
        1658,1,0,0,0,1658,1660,1,0,0,0,1659,1577,1,0,0,0,1659,1660,1,0,0,
        0,1660,87,1,0,0,0,1661,1662,3,120,60,0,1662,1663,5,11,0,0,1663,1664,
        3,244,122,0,1664,89,1,0,0,0,1665,1666,5,174,0,0,1666,1667,5,222,
        0,0,1667,1668,5,190,0,0,1668,1677,5,146,0,0,1669,1670,5,5,0,0,1670,
        1671,5,223,0,0,1671,1672,5,190,0,0,1672,1674,5,146,0,0,1673,1675,
        3,92,46,0,1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1677,1,0,0,0,
        1676,1665,1,0,0,0,1676,1669,1,0,0,0,1677,91,1,0,0,0,1678,1679,5,
        236,0,0,1679,1680,5,68,0,0,1680,1688,5,148,0,0,1681,1682,5,172,0,
        0,1682,1683,5,68,0,0,1683,1688,5,148,0,0,1684,1685,5,288,0,0,1685,
        1686,5,268,0,0,1686,1688,5,223,0,0,1687,1678,1,0,0,0,1687,1681,1,
        0,0,0,1687,1684,1,0,0,0,1688,93,1,0,0,0,1689,1702,5,237,0,0,1690,
        1697,5,253,0,0,1691,1692,5,157,0,0,1692,1698,5,222,0,0,1693,1695,
        7,10,0,0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1696,1,0,0,0,1696,
        1698,3,244,122,0,1697,1691,1,0,0,0,1697,1694,1,0,0,0,1698,1703,1,
        0,0,0,1699,1700,5,187,0,0,1700,1701,5,131,0,0,1701,1703,5,222,0,
        0,1702,1690,1,0,0,0,1702,1699,1,0,0,0,1703,95,1,0,0,0,1704,1705,
        3,244,122,0,1705,1706,5,296,0,0,1706,1707,5,313,0,0,1707,1712,3,
        244,122,0,1708,1709,5,312,0,0,1709,1711,3,244,122,0,1710,1708,1,
        0,0,0,1711,1714,1,0,0,0,1712,1710,1,0,0,0,1712,1713,1,0,0,0,1713,
        1715,1,0,0,0,1714,1712,1,0,0,0,1715,1716,5,314,0,0,1716,97,1,0,0,
        0,1717,1718,3,244,122,0,1718,1719,5,11,0,0,1719,1720,3,120,60,0,
        1720,99,1,0,0,0,1721,1729,3,104,52,0,1722,1724,5,11,0,0,1723,1722,
        1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,1727,3,244,122,
        0,1726,1728,3,102,51,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,
        1730,1,0,0,0,1729,1723,1,0,0,0,1729,1730,1,0,0,0,1730,101,1,0,0,
        0,1731,1732,5,313,0,0,1732,1737,3,244,122,0,1733,1734,5,312,0,0,
        1734,1736,3,244,122,0,1735,1733,1,0,0,0,1736,1739,1,0,0,0,1737,1735,
        1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,0,0,1739,1737,1,0,0,0,1740,
        1741,5,314,0,0,1741,103,1,0,0,0,1742,1744,3,232,116,0,1743,1745,
        3,234,117,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1780,1,0,0,
        0,1746,1747,5,313,0,0,1747,1748,3,22,11,0,1748,1749,5,314,0,0,1749,
        1780,1,0,0,0,1750,1751,5,269,0,0,1751,1752,5,313,0,0,1752,1757,3,
        120,60,0,1753,1754,5,312,0,0,1754,1756,3,120,60,0,1755,1753,1,0,
        0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,1758,1760,
        1,0,0,0,1759,1757,1,0,0,0,1760,1763,5,314,0,0,1761,1762,5,288,0,
        0,1762,1764,5,179,0,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,1780,
        1,0,0,0,1765,1766,5,132,0,0,1766,1767,5,313,0,0,1767,1768,3,22,11,
        0,1768,1769,5,314,0,0,1769,1780,1,0,0,0,1770,1771,5,244,0,0,1771,
        1772,5,313,0,0,1772,1773,3,106,53,0,1773,1774,5,314,0,0,1774,1780,
        1,0,0,0,1775,1776,5,313,0,0,1776,1777,3,70,35,0,1777,1778,5,314,
        0,0,1778,1780,1,0,0,0,1779,1742,1,0,0,0,1779,1746,1,0,0,0,1779,1750,
        1,0,0,0,1779,1765,1,0,0,0,1779,1770,1,0,0,0,1779,1775,1,0,0,0,1780,
        105,1,0,0,0,1781,1782,3,232,116,0,1782,1791,5,313,0,0,1783,1788,
        3,108,54,0,1784,1785,5,312,0,0,1785,1787,3,108,54,0,1786,1784,1,
        0,0,0,1787,1790,1,0,0,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,
        1792,1,0,0,0,1790,1788,1,0,0,0,1791,1783,1,0,0,0,1791,1792,1,0,0,
        0,1792,1802,1,0,0,0,1793,1794,5,35,0,0,1794,1799,3,118,59,0,1795,
        1796,5,312,0,0,1796,1798,3,118,59,0,1797,1795,1,0,0,0,1798,1801,
        1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1803,1,0,0,0,1801,
        1799,1,0,0,0,1802,1793,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,
        0,1804,1805,5,314,0,0,1805,107,1,0,0,0,1806,1807,3,244,122,0,1807,
        1808,5,323,0,0,1808,1810,1,0,0,0,1809,1806,1,0,0,0,1809,1810,1,0,
        0,0,1810,1814,1,0,0,0,1811,1815,3,110,55,0,1812,1815,3,114,57,0,
        1813,1815,3,120,60,0,1814,1811,1,0,0,0,1814,1812,1,0,0,0,1814,1813,
        1,0,0,0,1815,109,1,0,0,0,1816,1834,3,112,56,0,1817,1818,5,184,0,
        0,1818,1832,5,19,0,0,1819,1828,5,313,0,0,1820,1825,3,120,60,0,1821,
        1822,5,312,0,0,1822,1824,3,120,60,0,1823,1821,1,0,0,0,1824,1827,
        1,0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,0,1826,1829,1,0,0,0,1827,
        1825,1,0,0,0,1828,1820,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,
        0,1830,1833,5,314,0,0,1831,1833,3,120,60,0,1832,1819,1,0,0,0,1832,
        1831,1,0,0,0,1833,1835,1,0,0,0,1834,1817,1,0,0,0,1834,1835,1,0,0,
        0,1835,1842,1,0,0,0,1836,1837,5,200,0,0,1837,1838,5,284,0,0,1838,
        1843,5,68,0,0,1839,1840,5,127,0,0,1840,1841,5,284,0,0,1841,1843,
        5,68,0,0,1842,1836,1,0,0,0,1842,1839,1,0,0,0,1842,1843,1,0,0,0,1843,
        1860,1,0,0,0,1844,1845,5,178,0,0,1845,1858,5,19,0,0,1846,1847,5,
        313,0,0,1847,1852,3,50,25,0,1848,1849,5,312,0,0,1849,1851,3,50,25,
        0,1850,1848,1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,
        1,0,0,0,1853,1855,1,0,0,0,1854,1852,1,0,0,0,1855,1856,5,314,0,0,
        1856,1859,1,0,0,0,1857,1859,3,50,25,0,1858,1846,1,0,0,0,1858,1857,
        1,0,0,0,1859,1861,1,0,0,0,1860,1844,1,0,0,0,1860,1861,1,0,0,0,1861,
        111,1,0,0,0,1862,1863,5,244,0,0,1863,1864,5,313,0,0,1864,1865,3,
        232,116,0,1865,1873,5,314,0,0,1866,1868,5,11,0,0,1867,1866,1,0,0,
        0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,1871,3,244,122,0,1870,
        1872,3,102,51,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,
        0,0,0,1873,1867,1,0,0,0,1873,1874,1,0,0,0,1874,1889,1,0,0,0,1875,
        1876,5,244,0,0,1876,1877,5,313,0,0,1877,1878,3,22,11,0,1878,1886,
        5,314,0,0,1879,1881,5,11,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,
        1881,1882,1,0,0,0,1882,1884,3,244,122,0,1883,1885,3,102,51,0,1884,
        1883,1,0,0,0,1884,1885,1,0,0,0,1885,1887,1,0,0,0,1886,1880,1,0,0,
        0,1886,1887,1,0,0,0,1887,1889,1,0,0,0,1888,1862,1,0,0,0,1888,1875,
        1,0,0,0,1889,113,1,0,0,0,1890,1891,5,60,0,0,1891,1892,5,313,0,0,
        1892,1897,3,116,58,0,1893,1894,5,312,0,0,1894,1896,3,116,58,0,1895,
        1893,1,0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,1898,1,0,0,
        0,1898,1900,1,0,0,0,1899,1897,1,0,0,0,1900,1901,5,314,0,0,1901,1909,
        1,0,0,0,1902,1903,5,24,0,0,1903,1904,5,313,0,0,1904,1905,5,166,0,
        0,1905,1906,5,11,0,0,1906,1907,5,60,0,0,1907,1909,5,314,0,0,1908,
        1890,1,0,0,0,1908,1902,1,0,0,0,1909,115,1,0,0,0,1910,1912,3,244,
        122,0,1911,1913,3,168,84,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,
        117,1,0,0,0,1914,1915,5,313,0,0,1915,1916,3,232,116,0,1916,1917,
        5,312,0,0,1917,1922,3,232,116,0,1918,1919,5,312,0,0,1919,1921,3,
        232,116,0,1920,1918,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,
        1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1922,1,0,0,0,1925,1926,
        5,314,0,0,1926,119,1,0,0,0,1927,1928,3,122,61,0,1928,121,1,0,0,0,
        1929,1930,6,61,-1,0,1930,1932,3,126,63,0,1931,1933,3,124,62,0,1932,
        1931,1,0,0,0,1932,1933,1,0,0,0,1933,1937,1,0,0,0,1934,1935,5,165,
        0,0,1935,1937,3,122,61,3,1936,1929,1,0,0,0,1936,1934,1,0,0,0,1937,
        1946,1,0,0,0,1938,1939,10,2,0,0,1939,1940,5,8,0,0,1940,1945,3,122,
        61,3,1941,1942,10,1,0,0,1942,1943,5,177,0,0,1943,1945,3,122,61,2,
        1944,1938,1,0,0,0,1944,1941,1,0,0,0,1945,1948,1,0,0,0,1946,1944,
        1,0,0,0,1946,1947,1,0,0,0,1947,123,1,0,0,0,1948,1946,1,0,0,0,1949,
        1950,3,156,78,0,1950,1951,3,126,63,0,1951,2011,1,0,0,0,1952,1953,
        3,156,78,0,1953,1954,3,158,79,0,1954,1955,5,313,0,0,1955,1956,3,
        22,11,0,1956,1957,5,314,0,0,1957,2011,1,0,0,0,1958,1960,5,165,0,
        0,1959,1958,1,0,0,0,1959,1960,1,0,0,0,1960,1961,1,0,0,0,1961,1962,
        5,17,0,0,1962,1963,3,126,63,0,1963,1964,5,8,0,0,1964,1965,3,126,
        63,0,1965,2011,1,0,0,0,1966,1968,5,165,0,0,1967,1966,1,0,0,0,1967,
        1968,1,0,0,0,1968,1969,1,0,0,0,1969,1970,5,105,0,0,1970,1971,5,313,
        0,0,1971,1976,3,120,60,0,1972,1973,5,312,0,0,1973,1975,3,120,60,
        0,1974,1972,1,0,0,0,1975,1978,1,0,0,0,1976,1974,1,0,0,0,1976,1977,
        1,0,0,0,1977,1979,1,0,0,0,1978,1976,1,0,0,0,1979,1980,5,314,0,0,
        1980,2011,1,0,0,0,1981,1983,5,165,0,0,1982,1981,1,0,0,0,1982,1983,
        1,0,0,0,1983,1984,1,0,0,0,1984,1985,5,105,0,0,1985,1986,5,313,0,
        0,1986,1987,3,22,11,0,1987,1988,5,314,0,0,1988,2011,1,0,0,0,1989,
        1991,5,165,0,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,1992,1,0,
        0,0,1992,1993,5,137,0,0,1993,1996,3,126,63,0,1994,1995,5,73,0,0,
        1995,1997,3,126,63,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,2011,
        1,0,0,0,1998,2000,5,116,0,0,1999,2001,5,165,0,0,2000,1999,1,0,0,
        0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2011,5,166,0,0,2003,2005,
        5,116,0,0,2004,2006,5,165,0,0,2005,2004,1,0,0,0,2005,2006,1,0,0,
        0,2006,2007,1,0,0,0,2007,2008,5,62,0,0,2008,2009,5,88,0,0,2009,2011,
        3,126,63,0,2010,1949,1,0,0,0,2010,1952,1,0,0,0,2010,1959,1,0,0,0,
        2010,1967,1,0,0,0,2010,1982,1,0,0,0,2010,1990,1,0,0,0,2010,1998,
        1,0,0,0,2010,2003,1,0,0,0,2011,125,1,0,0,0,2012,2013,6,63,-1,0,2013,
        2017,3,128,64,0,2014,2015,7,17,0,0,2015,2017,3,126,63,4,2016,2012,
        1,0,0,0,2016,2014,1,0,0,0,2017,2032,1,0,0,0,2018,2019,10,3,0,0,2019,
        2020,7,18,0,0,2020,2031,3,126,63,4,2021,2022,10,2,0,0,2022,2023,
        7,17,0,0,2023,2031,3,126,63,3,2024,2025,10,1,0,0,2025,2026,5,307,
        0,0,2026,2031,3,126,63,2,2027,2028,10,5,0,0,2028,2029,5,13,0,0,2029,
        2031,3,154,77,0,2030,2018,1,0,0,0,2030,2021,1,0,0,0,2030,2024,1,
        0,0,0,2030,2027,1,0,0,0,2031,2034,1,0,0,0,2032,2030,1,0,0,0,2032,
        2033,1,0,0,0,2033,127,1,0,0,0,2034,2032,1,0,0,0,2035,2036,6,64,-1,
        0,2036,2489,5,166,0,0,2037,2489,3,162,81,0,2038,2039,3,244,122,0,
        2039,2040,3,152,76,0,2040,2489,1,0,0,0,2041,2042,5,65,0,0,2042,2043,
        5,196,0,0,2043,2489,3,152,76,0,2044,2489,3,246,123,0,2045,2489,3,
        160,80,0,2046,2489,3,152,76,0,2047,2489,5,329,0,0,2048,2489,5,308,
        0,0,2049,2050,5,194,0,0,2050,2051,5,313,0,0,2051,2052,3,126,63,0,
        2052,2053,5,105,0,0,2053,2054,3,126,63,0,2054,2055,5,314,0,0,2055,
        2489,1,0,0,0,2056,2057,5,313,0,0,2057,2060,3,120,60,0,2058,2059,
        5,312,0,0,2059,2061,3,120,60,0,2060,2058,1,0,0,0,2061,2062,1,0,0,
        0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,0,0,0,2064,2065,
        5,314,0,0,2065,2489,1,0,0,0,2066,2067,5,222,0,0,2067,2068,5,313,
        0,0,2068,2073,3,120,60,0,2069,2070,5,312,0,0,2070,2072,3,120,60,
        0,2071,2069,1,0,0,0,2072,2075,1,0,0,0,2073,2071,1,0,0,0,2073,2074,
        1,0,0,0,2074,2076,1,0,0,0,2075,2073,1,0,0,0,2076,2077,5,314,0,0,
        2077,2489,1,0,0,0,2078,2079,5,139,0,0,2079,2081,5,313,0,0,2080,2082,
        3,66,33,0,2081,2080,1,0,0,0,2081,2082,1,0,0,0,2082,2083,1,0,0,0,
        2083,2086,3,120,60,0,2084,2085,5,312,0,0,2085,2087,3,152,76,0,2086,
        2084,1,0,0,0,2086,2087,1,0,0,0,2087,2091,1,0,0,0,2088,2089,5,173,
        0,0,2089,2090,5,183,0,0,2090,2092,3,82,41,0,2091,2088,1,0,0,0,2091,
        2092,1,0,0,0,2092,2093,1,0,0,0,2093,2094,5,314,0,0,2094,2095,5,289,
        0,0,2095,2096,5,97,0,0,2096,2097,5,313,0,0,2097,2098,5,178,0,0,2098,
        2099,5,19,0,0,2099,2104,3,50,25,0,2100,2101,5,312,0,0,2101,2103,
        3,50,25,0,2102,2100,1,0,0,0,2103,2106,1,0,0,0,2104,2102,1,0,0,0,
        2104,2105,1,0,0,0,2105,2107,1,0,0,0,2106,2104,1,0,0,0,2107,2108,
        5,314,0,0,2108,2110,1,0,0,0,2109,2111,3,176,88,0,2110,2109,1,0,0,
        0,2110,2111,1,0,0,0,2111,2489,1,0,0,0,2112,2114,3,148,74,0,2113,
        2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2116,3,232,
        116,0,2116,2120,5,313,0,0,2117,2118,3,244,122,0,2118,2119,5,310,
        0,0,2119,2121,1,0,0,0,2120,2117,1,0,0,0,2120,2121,1,0,0,0,2121,2122,
        1,0,0,0,2122,2123,5,304,0,0,2123,2125,5,314,0,0,2124,2126,3,176,
        88,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,2128,1,0,0,0,2127,
        2129,3,180,90,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2489,1,
        0,0,0,2130,2132,3,148,74,0,2131,2130,1,0,0,0,2131,2132,1,0,0,0,2132,
        2133,1,0,0,0,2133,2134,3,232,116,0,2134,2146,5,313,0,0,2135,2137,
        3,66,33,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,2138,1,0,0,0,
        2138,2143,3,120,60,0,2139,2140,5,312,0,0,2140,2142,3,120,60,0,2141,
        2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,2143,2144,1,0,0,
        0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2146,2136,1,0,0,0,2146,2147,
        1,0,0,0,2147,2158,1,0,0,0,2148,2149,5,178,0,0,2149,2150,5,19,0,0,
        2150,2155,3,50,25,0,2151,2152,5,312,0,0,2152,2154,3,50,25,0,2153,
        2151,1,0,0,0,2154,2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,
        0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,2158,2148,1,0,0,0,2158,2159,
        1,0,0,0,2159,2160,1,0,0,0,2160,2162,5,314,0,0,2161,2163,3,176,88,
        0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2168,1,0,0,0,2164,2166,
        3,150,75,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,
        2167,2169,3,180,90,0,2168,2165,1,0,0,0,2168,2169,1,0,0,0,2169,2489,
        1,0,0,0,2170,2171,3,244,122,0,2171,2172,3,180,90,0,2172,2489,1,0,
        0,0,2173,2174,3,244,122,0,2174,2175,5,322,0,0,2175,2176,3,120,60,
        0,2176,2489,1,0,0,0,2177,2186,5,313,0,0,2178,2183,3,244,122,0,2179,
        2180,5,312,0,0,2180,2182,3,244,122,0,2181,2179,1,0,0,0,2182,2185,
        1,0,0,0,2183,2181,1,0,0,0,2183,2184,1,0,0,0,2184,2187,1,0,0,0,2185,
        2183,1,0,0,0,2186,2178,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,
        0,2188,2189,5,314,0,0,2189,2190,5,322,0,0,2190,2489,3,120,60,0,2191,
        2192,5,313,0,0,2192,2193,3,22,11,0,2193,2194,5,314,0,0,2194,2489,
        1,0,0,0,2195,2196,5,77,0,0,2196,2197,5,313,0,0,2197,2198,3,22,11,
        0,2198,2199,5,314,0,0,2199,2489,1,0,0,0,2200,2201,5,23,0,0,2201,
        2203,3,120,60,0,2202,2204,3,174,87,0,2203,2202,1,0,0,0,2204,2205,
        1,0,0,0,2205,2203,1,0,0,0,2205,2206,1,0,0,0,2206,2209,1,0,0,0,2207,
        2208,5,67,0,0,2208,2210,3,120,60,0,2209,2207,1,0,0,0,2209,2210,1,
        0,0,0,2210,2211,1,0,0,0,2211,2212,5,71,0,0,2212,2489,1,0,0,0,2213,
        2215,5,23,0,0,2214,2216,3,174,87,0,2215,2214,1,0,0,0,2216,2217,1,
        0,0,0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,2221,1,0,0,0,2219,
        2220,5,67,0,0,2220,2222,3,120,60,0,2221,2219,1,0,0,0,2221,2222,1,
        0,0,0,2222,2223,1,0,0,0,2223,2224,5,71,0,0,2224,2489,1,0,0,0,2225,
        2226,5,24,0,0,2226,2227,5,313,0,0,2227,2228,3,120,60,0,2228,2229,
        5,11,0,0,2229,2230,3,168,84,0,2230,2231,5,314,0,0,2231,2489,1,0,
        0,0,2232,2233,5,259,0,0,2233,2234,5,313,0,0,2234,2235,3,120,60,0,
        2235,2236,5,11,0,0,2236,2237,3,168,84,0,2237,2238,5,314,0,0,2238,
        2489,1,0,0,0,2239,2240,5,10,0,0,2240,2249,5,315,0,0,2241,2246,3,
        120,60,0,2242,2243,5,312,0,0,2243,2245,3,120,60,0,2244,2242,1,0,
        0,0,2245,2248,1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,2250,
        1,0,0,0,2248,2246,1,0,0,0,2249,2241,1,0,0,0,2249,2250,1,0,0,0,2250,
        2251,1,0,0,0,2251,2489,5,316,0,0,2252,2489,3,244,122,0,2253,2489,
        5,41,0,0,2254,2258,5,45,0,0,2255,2256,5,313,0,0,2256,2257,5,330,
        0,0,2257,2259,5,314,0,0,2258,2255,1,0,0,0,2258,2259,1,0,0,0,2259,
        2489,1,0,0,0,2260,2264,5,46,0,0,2261,2262,5,313,0,0,2262,2263,5,
        330,0,0,2263,2265,5,314,0,0,2264,2261,1,0,0,0,2264,2265,1,0,0,0,
        2265,2489,1,0,0,0,2266,2270,5,141,0,0,2267,2268,5,313,0,0,2268,2269,
        5,330,0,0,2269,2271,5,314,0,0,2270,2267,1,0,0,0,2270,2271,1,0,0,
        0,2271,2489,1,0,0,0,2272,2276,5,142,0,0,2273,2274,5,313,0,0,2274,
        2275,5,330,0,0,2275,2277,5,314,0,0,2276,2273,1,0,0,0,2276,2277,1,
        0,0,0,2277,2489,1,0,0,0,2278,2489,5,47,0,0,2279,2489,5,40,0,0,2280,
        2489,5,44,0,0,2281,2489,5,42,0,0,2282,2283,5,256,0,0,2283,2291,5,
        313,0,0,2284,2286,3,80,40,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,
        2286,2288,1,0,0,0,2287,2289,3,126,63,0,2288,2287,1,0,0,0,2288,2289,
        1,0,0,0,2289,2290,1,0,0,0,2290,2292,5,88,0,0,2291,2285,1,0,0,0,2291,
        2292,1,0,0,0,2292,2293,1,0,0,0,2293,2294,3,126,63,0,2294,2295,5,
        314,0,0,2295,2489,1,0,0,0,2296,2297,5,256,0,0,2297,2298,5,313,0,
        0,2298,2299,3,126,63,0,2299,2300,5,312,0,0,2300,2301,3,126,63,0,
        2301,2302,5,314,0,0,2302,2489,1,0,0,0,2303,2304,5,242,0,0,2304,2305,
        5,313,0,0,2305,2306,3,126,63,0,2306,2307,5,88,0,0,2307,2310,3,126,
        63,0,2308,2309,5,86,0,0,2309,2311,3,126,63,0,2310,2308,1,0,0,0,2310,
        2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,5,314,0,0,2313,2489,1,0,
        0,0,2314,2315,5,164,0,0,2315,2316,5,313,0,0,2316,2319,3,126,63,0,
        2317,2318,5,312,0,0,2318,2320,3,166,83,0,2319,2317,1,0,0,0,2319,
        2320,1,0,0,0,2320,2321,1,0,0,0,2321,2322,5,314,0,0,2322,2489,1,0,
        0,0,2323,2324,5,79,0,0,2324,2325,5,313,0,0,2325,2326,3,244,122,0,
        2326,2327,5,88,0,0,2327,2328,3,126,63,0,2328,2329,5,314,0,0,2329,
        2489,1,0,0,0,2330,2331,5,313,0,0,2331,2332,3,120,60,0,2332,2333,
        5,314,0,0,2333,2489,1,0,0,0,2334,2335,5,98,0,0,2335,2344,5,313,0,
        0,2336,2341,3,232,116,0,2337,2338,5,312,0,0,2338,2340,3,232,116,
        0,2339,2337,1,0,0,0,2340,2343,1,0,0,0,2341,2339,1,0,0,0,2341,2342,
        1,0,0,0,2342,2345,1,0,0,0,2343,2341,1,0,0,0,2344,2336,1,0,0,0,2344,
        2345,1,0,0,0,2345,2346,1,0,0,0,2346,2489,5,314,0,0,2347,2348,5,122,
        0,0,2348,2349,5,313,0,0,2349,2354,3,130,65,0,2350,2351,3,138,69,
        0,2351,2352,5,173,0,0,2352,2353,5,72,0,0,2353,2355,1,0,0,0,2354,
        2350,1,0,0,0,2354,2355,1,0,0,0,2355,2356,1,0,0,0,2356,2357,5,314,
        0,0,2357,2489,1,0,0,0,2358,2359,5,126,0,0,2359,2360,5,313,0,0,2360,
        2363,3,130,65,0,2361,2362,5,214,0,0,2362,2364,3,168,84,0,2363,2361,
        1,0,0,0,2363,2364,1,0,0,0,2364,2369,1,0,0,0,2365,2366,3,140,70,0,
        2366,2367,5,173,0,0,2367,2368,5,68,0,0,2368,2370,1,0,0,0,2369,2365,
        1,0,0,0,2369,2370,1,0,0,0,2370,2375,1,0,0,0,2371,2372,3,140,70,0,
        2372,2373,5,173,0,0,2373,2374,5,72,0,0,2374,2376,1,0,0,0,2375,2371,
        1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2378,5,314,0,0,
        2378,2489,1,0,0,0,2379,2380,5,124,0,0,2380,2381,5,313,0,0,2381,2388,
        3,130,65,0,2382,2383,5,214,0,0,2383,2386,3,168,84,0,2384,2385,5,
        87,0,0,2385,2387,3,134,67,0,2386,2384,1,0,0,0,2386,2387,1,0,0,0,
        2387,2389,1,0,0,0,2388,2382,1,0,0,0,2388,2389,1,0,0,0,2389,2393,
        1,0,0,0,2390,2391,3,142,71,0,2391,2392,5,292,0,0,2392,2394,1,0,0,
        0,2393,2390,1,0,0,0,2393,2394,1,0,0,0,2394,2402,1,0,0,0,2395,2396,
        7,19,0,0,2396,2400,5,201,0,0,2397,2398,5,173,0,0,2398,2399,5,225,
        0,0,2399,2401,5,248,0,0,2400,2397,1,0,0,0,2400,2401,1,0,0,0,2401,
        2403,1,0,0,0,2402,2395,1,0,0,0,2402,2403,1,0,0,0,2403,2408,1,0,0,
        0,2404,2405,3,144,72,0,2405,2406,5,173,0,0,2406,2407,5,68,0,0,2407,
        2409,1,0,0,0,2408,2404,1,0,0,0,2408,2409,1,0,0,0,2409,2414,1,0,0,
        0,2410,2411,3,144,72,0,2411,2412,5,173,0,0,2412,2413,5,72,0,0,2413,
        2415,1,0,0,0,2414,2410,1,0,0,0,2414,2415,1,0,0,0,2415,2416,1,0,0,
        0,2416,2417,5,314,0,0,2417,2489,1,0,0,0,2418,2419,5,123,0,0,2419,
        2448,5,313,0,0,2420,2425,3,146,73,0,2421,2422,5,312,0,0,2422,2424,
        3,146,73,0,2423,2421,1,0,0,0,2424,2427,1,0,0,0,2425,2423,1,0,0,0,
        2425,2426,1,0,0,0,2426,2434,1,0,0,0,2427,2425,1,0,0,0,2428,2429,
        5,166,0,0,2429,2430,5,173,0,0,2430,2435,5,166,0,0,2431,2432,5,1,
        0,0,2432,2433,5,173,0,0,2433,2435,5,166,0,0,2434,2428,1,0,0,0,2434,
        2431,1,0,0,0,2434,2435,1,0,0,0,2435,2446,1,0,0,0,2436,2437,5,288,
        0,0,2437,2439,5,266,0,0,2438,2440,5,129,0,0,2439,2438,1,0,0,0,2439,
        2440,1,0,0,0,2440,2447,1,0,0,0,2441,2442,5,290,0,0,2442,2444,5,266,
        0,0,2443,2445,5,129,0,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,
        2447,1,0,0,0,2446,2436,1,0,0,0,2446,2441,1,0,0,0,2446,2447,1,0,0,
        0,2447,2449,1,0,0,0,2448,2420,1,0,0,0,2448,2449,1,0,0,0,2449,2456,
        1,0,0,0,2450,2451,5,214,0,0,2451,2454,3,168,84,0,2452,2453,5,87,
        0,0,2453,2455,3,134,67,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,
        2457,1,0,0,0,2456,2450,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,
        0,2458,2489,5,314,0,0,2459,2460,5,121,0,0,2460,2477,5,313,0,0,2461,
        2466,3,132,66,0,2462,2463,5,312,0,0,2463,2465,3,132,66,0,2464,2462,
        1,0,0,0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,
        2475,1,0,0,0,2468,2466,1,0,0,0,2469,2470,5,166,0,0,2470,2471,5,173,
        0,0,2471,2476,5,166,0,0,2472,2473,5,1,0,0,2473,2474,5,173,0,0,2474,
        2476,5,166,0,0,2475,2469,1,0,0,0,2475,2472,1,0,0,0,2475,2476,1,0,
        0,0,2476,2478,1,0,0,0,2477,2461,1,0,0,0,2477,2478,1,0,0,0,2478,2485,
        1,0,0,0,2479,2480,5,214,0,0,2480,2483,3,168,84,0,2481,2482,5,87,
        0,0,2482,2484,3,134,67,0,2483,2481,1,0,0,0,2483,2484,1,0,0,0,2484,
        2486,1,0,0,0,2485,2479,1,0,0,0,2485,2486,1,0,0,0,2486,2487,1,0,0,
        0,2487,2489,5,314,0,0,2488,2035,1,0,0,0,2488,2037,1,0,0,0,2488,2038,
        1,0,0,0,2488,2041,1,0,0,0,2488,2044,1,0,0,0,2488,2045,1,0,0,0,2488,
        2046,1,0,0,0,2488,2047,1,0,0,0,2488,2048,1,0,0,0,2488,2049,1,0,0,
        0,2488,2056,1,0,0,0,2488,2066,1,0,0,0,2488,2078,1,0,0,0,2488,2113,
        1,0,0,0,2488,2131,1,0,0,0,2488,2170,1,0,0,0,2488,2173,1,0,0,0,2488,
        2177,1,0,0,0,2488,2191,1,0,0,0,2488,2195,1,0,0,0,2488,2200,1,0,0,
        0,2488,2213,1,0,0,0,2488,2225,1,0,0,0,2488,2232,1,0,0,0,2488,2239,
        1,0,0,0,2488,2252,1,0,0,0,2488,2253,1,0,0,0,2488,2254,1,0,0,0,2488,
        2260,1,0,0,0,2488,2266,1,0,0,0,2488,2272,1,0,0,0,2488,2278,1,0,0,
        0,2488,2279,1,0,0,0,2488,2280,1,0,0,0,2488,2281,1,0,0,0,2488,2282,
        1,0,0,0,2488,2296,1,0,0,0,2488,2303,1,0,0,0,2488,2314,1,0,0,0,2488,
        2323,1,0,0,0,2488,2330,1,0,0,0,2488,2334,1,0,0,0,2488,2347,1,0,0,
        0,2488,2358,1,0,0,0,2488,2379,1,0,0,0,2488,2418,1,0,0,0,2488,2459,
        1,0,0,0,2489,2500,1,0,0,0,2490,2491,10,24,0,0,2491,2492,5,315,0,
        0,2492,2493,3,126,63,0,2493,2494,5,316,0,0,2494,2499,1,0,0,0,2495,
        2496,10,22,0,0,2496,2497,5,310,0,0,2497,2499,3,244,122,0,2498,2490,
        1,0,0,0,2498,2495,1,0,0,0,2499,2502,1,0,0,0,2500,2498,1,0,0,0,2500,
        2501,1,0,0,0,2501,129,1,0,0,0,2502,2500,1,0,0,0,2503,2504,3,132,
        66,0,2504,2505,5,312,0,0,2505,2515,3,152,76,0,2506,2507,5,186,0,
        0,2507,2512,3,136,68,0,2508,2509,5,312,0,0,2509,2511,3,136,68,0,
        2510,2508,1,0,0,0,2511,2514,1,0,0,0,2512,2510,1,0,0,0,2512,2513,
        1,0,0,0,2513,2516,1,0,0,0,2514,2512,1,0,0,0,2515,2506,1,0,0,0,2515,
        2516,1,0,0,0,2516,131,1,0,0,0,2517,2520,3,120,60,0,2518,2519,5,87,
        0,0,2519,2521,3,134,67,0,2520,2518,1,0,0,0,2520,2521,1,0,0,0,2521,
        133,1,0,0,0,2522,2525,5,120,0,0,2523,2524,5,70,0,0,2524,2526,7,20,
        0,0,2525,2523,1,0,0,0,2525,2526,1,0,0,0,2526,135,1,0,0,0,2527,2528,
        3,132,66,0,2528,2529,5,11,0,0,2529,2530,3,244,122,0,2530,137,1,0,
        0,0,2531,2532,7,21,0,0,2532,139,1,0,0,0,2533,2538,5,72,0,0,2534,
        2538,5,166,0,0,2535,2536,5,53,0,0,2536,2538,3,120,60,0,2537,2533,
        1,0,0,0,2537,2534,1,0,0,0,2537,2535,1,0,0,0,2538,141,1,0,0,0,2539,
        2541,5,290,0,0,2540,2542,5,10,0,0,2541,2540,1,0,0,0,2541,2542,1,
        0,0,0,2542,2551,1,0,0,0,2543,2545,5,288,0,0,2544,2546,7,22,0,0,2545,
        2544,1,0,0,0,2545,2546,1,0,0,0,2546,2548,1,0,0,0,2547,2549,5,10,
        0,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,2551,1,0,0,0,2550,2539,
        1,0,0,0,2550,2543,1,0,0,0,2551,143,1,0,0,0,2552,2557,5,72,0,0,2553,
        2557,5,166,0,0,2554,2555,5,68,0,0,2555,2557,7,23,0,0,2556,2552,1,
        0,0,0,2556,2553,1,0,0,0,2556,2554,1,0,0,0,2557,145,1,0,0,0,2558,
        2560,5,128,0,0,2559,2558,1,0,0,0,2559,2560,1,0,0,0,2560,2561,1,0,
        0,0,2561,2562,3,120,60,0,2562,2563,5,279,0,0,2563,2564,3,132,66,
        0,2564,2570,1,0,0,0,2565,2566,3,120,60,0,2566,2567,5,311,0,0,2567,
        2568,3,132,66,0,2568,2570,1,0,0,0,2569,2559,1,0,0,0,2569,2565,1,
        0,0,0,2570,147,1,0,0,0,2571,2572,7,24,0,0,2572,149,1,0,0,0,2573,
        2574,5,103,0,0,2574,2578,5,168,0,0,2575,2576,5,211,0,0,2576,2578,
        5,168,0,0,2577,2573,1,0,0,0,2577,2575,1,0,0,0,2578,151,1,0,0,0,2579,
        2586,5,327,0,0,2580,2583,5,328,0,0,2581,2582,5,261,0,0,2582,2584,
        5,327,0,0,2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,0,0,
        2585,2579,1,0,0,0,2585,2580,1,0,0,0,2586,153,1,0,0,0,2587,2588,5,
        251,0,0,2588,2589,5,295,0,0,2589,2594,3,162,81,0,2590,2591,5,251,
        0,0,2591,2592,5,295,0,0,2592,2594,3,152,76,0,2593,2587,1,0,0,0,2593,
        2590,1,0,0,0,2594,155,1,0,0,0,2595,2596,7,25,0,0,2596,157,1,0,0,
        0,2597,2598,7,26,0,0,2598,159,1,0,0,0,2599,2600,7,27,0,0,2600,161,
        1,0,0,0,2601,2603,5,112,0,0,2602,2604,7,17,0,0,2603,2602,1,0,0,0,
        2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2606,3,152,76,0,2606,2609,
        3,164,82,0,2607,2608,5,253,0,0,2608,2610,3,164,82,0,2609,2607,1,
        0,0,0,2609,2610,1,0,0,0,2610,163,1,0,0,0,2611,2612,7,28,0,0,2612,
        165,1,0,0,0,2613,2614,7,29,0,0,2614,167,1,0,0,0,2615,2616,6,84,-1,
        0,2616,2617,5,222,0,0,2617,2618,5,313,0,0,2618,2623,3,170,85,0,2619,
        2620,5,312,0,0,2620,2622,3,170,85,0,2621,2619,1,0,0,0,2622,2625,
        1,0,0,0,2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,2626,1,0,0,0,2625,
        2623,1,0,0,0,2626,2627,5,314,0,0,2627,2707,1,0,0,0,2628,2629,5,112,
        0,0,2629,2632,3,164,82,0,2630,2631,5,253,0,0,2631,2633,3,164,82,
        0,2632,2630,1,0,0,0,2632,2633,1,0,0,0,2633,2707,1,0,0,0,2634,2639,
        5,252,0,0,2635,2636,5,313,0,0,2636,2637,3,172,86,0,2637,2638,5,314,
        0,0,2638,2640,1,0,0,0,2639,2635,1,0,0,0,2639,2640,1,0,0,0,2640,2644,
        1,0,0,0,2641,2642,5,290,0,0,2642,2643,5,251,0,0,2643,2645,5,295,
        0,0,2644,2641,1,0,0,0,2644,2645,1,0,0,0,2645,2707,1,0,0,0,2646,2651,
        5,252,0,0,2647,2648,5,313,0,0,2648,2649,3,172,86,0,2649,2650,5,314,
        0,0,2650,2652,1,0,0,0,2651,2647,1,0,0,0,2651,2652,1,0,0,0,2652,2653,
        1,0,0,0,2653,2654,5,288,0,0,2654,2655,5,251,0,0,2655,2707,5,295,
        0,0,2656,2661,5,251,0,0,2657,2658,5,313,0,0,2658,2659,3,172,86,0,
        2659,2660,5,314,0,0,2660,2662,1,0,0,0,2661,2657,1,0,0,0,2661,2662,
        1,0,0,0,2662,2666,1,0,0,0,2663,2664,5,290,0,0,2664,2665,5,251,0,
        0,2665,2667,5,295,0,0,2666,2663,1,0,0,0,2666,2667,1,0,0,0,2667,2707,
        1,0,0,0,2668,2673,5,251,0,0,2669,2670,5,313,0,0,2670,2671,3,172,
        86,0,2671,2672,5,314,0,0,2672,2674,1,0,0,0,2673,2669,1,0,0,0,2673,
        2674,1,0,0,0,2674,2675,1,0,0,0,2675,2676,5,288,0,0,2676,2677,5,251,
        0,0,2677,2707,5,295,0,0,2678,2679,5,65,0,0,2679,2707,5,196,0,0,2680,
        2681,5,10,0,0,2681,2682,5,298,0,0,2682,2683,3,168,84,0,2683,2684,
        5,300,0,0,2684,2707,1,0,0,0,2685,2686,5,145,0,0,2686,2687,5,298,
        0,0,2687,2688,3,168,84,0,2688,2689,5,312,0,0,2689,2690,3,168,84,
        0,2690,2691,5,300,0,0,2691,2707,1,0,0,0,2692,2704,3,244,122,0,2693,
        2694,5,313,0,0,2694,2699,3,172,86,0,2695,2696,5,312,0,0,2696,2698,
        3,172,86,0,2697,2695,1,0,0,0,2698,2701,1,0,0,0,2699,2697,1,0,0,0,
        2699,2700,1,0,0,0,2700,2702,1,0,0,0,2701,2699,1,0,0,0,2702,2703,
        5,314,0,0,2703,2705,1,0,0,0,2704,2693,1,0,0,0,2704,2705,1,0,0,0,
        2705,2707,1,0,0,0,2706,2615,1,0,0,0,2706,2628,1,0,0,0,2706,2634,
        1,0,0,0,2706,2646,1,0,0,0,2706,2656,1,0,0,0,2706,2668,1,0,0,0,2706,
        2678,1,0,0,0,2706,2680,1,0,0,0,2706,2685,1,0,0,0,2706,2692,1,0,0,
        0,2707,2717,1,0,0,0,2708,2709,10,2,0,0,2709,2713,5,10,0,0,2710,2711,
        5,315,0,0,2711,2712,5,330,0,0,2712,2714,5,316,0,0,2713,2710,1,0,
        0,0,2713,2714,1,0,0,0,2714,2716,1,0,0,0,2715,2708,1,0,0,0,2716,2719,
        1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,169,1,0,0,0,2719,
        2717,1,0,0,0,2720,2725,3,168,84,0,2721,2722,3,244,122,0,2722,2723,
        3,168,84,0,2723,2725,1,0,0,0,2724,2720,1,0,0,0,2724,2721,1,0,0,0,
        2725,171,1,0,0,0,2726,2729,5,330,0,0,2727,2729,3,168,84,0,2728,2726,
        1,0,0,0,2728,2727,1,0,0,0,2729,173,1,0,0,0,2730,2731,5,284,0,0,2731,
        2732,3,120,60,0,2732,2733,5,249,0,0,2733,2734,3,120,60,0,2734,175,
        1,0,0,0,2735,2736,5,82,0,0,2736,2737,5,313,0,0,2737,2738,5,285,0,
        0,2738,2739,3,122,61,0,2739,2740,5,314,0,0,2740,177,1,0,0,0,2741,
        2742,5,284,0,0,2742,2745,5,147,0,0,2743,2744,5,8,0,0,2744,2746,3,
        120,60,0,2745,2743,1,0,0,0,2745,2746,1,0,0,0,2746,2747,1,0,0,0,2747,
        2748,5,249,0,0,2748,2749,5,271,0,0,2749,2750,5,234,0,0,2750,2751,
        3,244,122,0,2751,2752,5,296,0,0,2752,2760,3,120,60,0,2753,2754,5,
        312,0,0,2754,2755,3,244,122,0,2755,2756,5,296,0,0,2756,2757,3,120,
        60,0,2757,2759,1,0,0,0,2758,2753,1,0,0,0,2759,2762,1,0,0,0,2760,
        2758,1,0,0,0,2760,2761,1,0,0,0,2761,2806,1,0,0,0,2762,2760,1,0,0,
        0,2763,2764,5,284,0,0,2764,2767,5,147,0,0,2765,2766,5,8,0,0,2766,
        2768,3,120,60,0,2767,2765,1,0,0,0,2767,2768,1,0,0,0,2768,2769,1,
        0,0,0,2769,2770,5,249,0,0,2770,2806,5,56,0,0,2771,2772,5,284,0,0,
        2772,2773,5,165,0,0,2773,2776,5,147,0,0,2774,2775,5,8,0,0,2775,2777,
        3,120,60,0,2776,2774,1,0,0,0,2776,2777,1,0,0,0,2777,2778,1,0,0,0,
        2778,2779,5,249,0,0,2779,2791,5,110,0,0,2780,2781,5,313,0,0,2781,
        2786,3,244,122,0,2782,2783,5,312,0,0,2783,2785,3,244,122,0,2784,
        2782,1,0,0,0,2785,2788,1,0,0,0,2786,2784,1,0,0,0,2786,2787,1,0,0,
        0,2787,2789,1,0,0,0,2788,2786,1,0,0,0,2789,2790,5,314,0,0,2790,2792,
        1,0,0,0,2791,2780,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,
        2794,5,280,0,0,2794,2795,5,313,0,0,2795,2800,3,120,60,0,2796,2797,
        5,312,0,0,2797,2799,3,120,60,0,2798,2796,1,0,0,0,2799,2802,1,0,0,
        0,2800,2798,1,0,0,0,2800,2801,1,0,0,0,2801,2803,1,0,0,0,2802,2800,
        1,0,0,0,2803,2804,5,314,0,0,2804,2806,1,0,0,0,2805,2741,1,0,0,0,
        2805,2763,1,0,0,0,2805,2771,1,0,0,0,2806,179,1,0,0,0,2807,2813,5,
        182,0,0,2808,2814,3,244,122,0,2809,2810,5,313,0,0,2810,2811,3,62,
        31,0,2811,2812,5,314,0,0,2812,2814,1,0,0,0,2813,2808,1,0,0,0,2813,
        2809,1,0,0,0,2814,181,1,0,0,0,2815,2816,5,151,0,0,2816,2821,3,88,
        44,0,2817,2818,5,312,0,0,2818,2820,3,88,44,0,2819,2817,1,0,0,0,2820,
        2823,1,0,0,0,2821,2819,1,0,0,0,2821,2822,1,0,0,0,2822,2825,1,0,0,
        0,2823,2821,1,0,0,0,2824,2815,1,0,0,0,2824,2825,1,0,0,0,2825,2826,
        1,0,0,0,2826,2830,3,184,92,0,2827,2828,5,4,0,0,2828,2829,5,146,0,
        0,2829,2831,3,94,47,0,2830,2827,1,0,0,0,2830,2831,1,0,0,0,2831,2833,
        1,0,0,0,2832,2834,7,16,0,0,2833,2832,1,0,0,0,2833,2834,1,0,0,0,2834,
        2840,1,0,0,0,2835,2836,5,189,0,0,2836,2837,5,313,0,0,2837,2838,3,
        188,94,0,2838,2839,5,314,0,0,2839,2841,1,0,0,0,2840,2835,1,0,0,0,
        2840,2841,1,0,0,0,2841,2851,1,0,0,0,2842,2843,5,241,0,0,2843,2848,
        3,96,48,0,2844,2845,5,312,0,0,2845,2847,3,96,48,0,2846,2844,1,0,
        0,0,2847,2850,1,0,0,0,2848,2846,1,0,0,0,2848,2849,1,0,0,0,2849,2852,
        1,0,0,0,2850,2848,1,0,0,0,2851,2842,1,0,0,0,2851,2852,1,0,0,0,2852,
        2862,1,0,0,0,2853,2854,5,54,0,0,2854,2859,3,98,49,0,2855,2856,5,
        312,0,0,2856,2858,3,98,49,0,2857,2855,1,0,0,0,2858,2861,1,0,0,0,
        2859,2857,1,0,0,0,2859,2860,1,0,0,0,2860,2863,1,0,0,0,2861,2859,
        1,0,0,0,2862,2853,1,0,0,0,2862,2863,1,0,0,0,2863,183,1,0,0,0,2864,
        2865,5,202,0,0,2865,2889,3,186,93,0,2866,2867,5,223,0,0,2867,2889,
        3,186,93,0,2868,2869,5,99,0,0,2869,2889,3,186,93,0,2870,2871,5,202,
        0,0,2871,2872,5,17,0,0,2872,2873,3,186,93,0,2873,2874,5,8,0,0,2874,
        2875,3,186,93,0,2875,2889,1,0,0,0,2876,2877,5,223,0,0,2877,2878,
        5,17,0,0,2878,2879,3,186,93,0,2879,2880,5,8,0,0,2880,2881,3,186,
        93,0,2881,2889,1,0,0,0,2882,2883,5,99,0,0,2883,2884,5,17,0,0,2884,
        2885,3,186,93,0,2885,2886,5,8,0,0,2886,2887,3,186,93,0,2887,2889,
        1,0,0,0,2888,2864,1,0,0,0,2888,2866,1,0,0,0,2888,2868,1,0,0,0,2888,
        2870,1,0,0,0,2888,2876,1,0,0,0,2888,2882,1,0,0,0,2889,185,1,0,0,
        0,2890,2891,5,262,0,0,2891,2900,5,195,0,0,2892,2893,5,262,0,0,2893,
        2900,5,85,0,0,2894,2895,5,39,0,0,2895,2900,5,222,0,0,2896,2897,3,
        120,60,0,2897,2898,7,30,0,0,2898,2900,1,0,0,0,2899,2890,1,0,0,0,
        2899,2892,1,0,0,0,2899,2894,1,0,0,0,2899,2896,1,0,0,0,2900,187,1,
        0,0,0,2901,2902,6,94,-1,0,2902,2904,3,190,95,0,2903,2905,3,192,96,
        0,2904,2903,1,0,0,0,2904,2905,1,0,0,0,2905,2913,1,0,0,0,2906,2907,
        10,2,0,0,2907,2912,3,188,94,3,2908,2909,10,1,0,0,2909,2910,5,324,
        0,0,2910,2912,3,188,94,2,2911,2906,1,0,0,0,2911,2908,1,0,0,0,2912,
        2915,1,0,0,0,2913,2911,1,0,0,0,2913,2914,1,0,0,0,2914,189,1,0,0,
        0,2915,2913,1,0,0,0,2916,2942,3,244,122,0,2917,2918,5,313,0,0,2918,
        2942,5,314,0,0,2919,2920,5,192,0,0,2920,2921,5,313,0,0,2921,2926,
        3,188,94,0,2922,2923,5,312,0,0,2923,2925,3,188,94,0,2924,2922,1,
        0,0,0,2925,2928,1,0,0,0,2926,2924,1,0,0,0,2926,2927,1,0,0,0,2927,
        2929,1,0,0,0,2928,2926,1,0,0,0,2929,2930,5,314,0,0,2930,2942,1,0,
        0,0,2931,2932,5,313,0,0,2932,2933,3,188,94,0,2933,2934,5,314,0,0,
        2934,2942,1,0,0,0,2935,2942,5,326,0,0,2936,2942,5,325,0,0,2937,2938,
        5,319,0,0,2938,2939,3,188,94,0,2939,2940,5,320,0,0,2940,2942,1,0,
        0,0,2941,2916,1,0,0,0,2941,2917,1,0,0,0,2941,2919,1,0,0,0,2941,2931,
        1,0,0,0,2941,2935,1,0,0,0,2941,2936,1,0,0,0,2941,2937,1,0,0,0,2942,
        191,1,0,0,0,2943,2945,5,304,0,0,2944,2946,5,308,0,0,2945,2944,1,
        0,0,0,2945,2946,1,0,0,0,2946,2974,1,0,0,0,2947,2949,5,302,0,0,2948,
        2950,5,308,0,0,2949,2948,1,0,0,0,2949,2950,1,0,0,0,2950,2974,1,0,
        0,0,2951,2953,5,308,0,0,2952,2954,5,308,0,0,2953,2952,1,0,0,0,2953,
        2954,1,0,0,0,2954,2974,1,0,0,0,2955,2956,5,317,0,0,2956,2957,5,330,
        0,0,2957,2959,5,318,0,0,2958,2960,5,308,0,0,2959,2958,1,0,0,0,2959,
        2960,1,0,0,0,2960,2974,1,0,0,0,2961,2963,5,317,0,0,2962,2964,5,330,
        0,0,2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,2965,1,0,0,0,2965,2967,
        5,312,0,0,2966,2968,5,330,0,0,2967,2966,1,0,0,0,2967,2968,1,0,0,
        0,2968,2969,1,0,0,0,2969,2971,5,318,0,0,2970,2972,5,308,0,0,2971,
        2970,1,0,0,0,2971,2972,1,0,0,0,2972,2974,1,0,0,0,2973,2943,1,0,0,
        0,2973,2947,1,0,0,0,2973,2951,1,0,0,0,2973,2955,1,0,0,0,2973,2961,
        1,0,0,0,2974,193,1,0,0,0,2975,2976,3,244,122,0,2976,2977,5,296,0,
        0,2977,2978,3,120,60,0,2978,195,1,0,0,0,2979,2980,5,87,0,0,2980,
        2984,7,31,0,0,2981,2982,5,260,0,0,2982,2984,7,32,0,0,2983,2979,1,
        0,0,0,2983,2981,1,0,0,0,2984,197,1,0,0,0,2985,2986,5,117,0,0,2986,
        2987,5,136,0,0,2987,2991,3,200,100,0,2988,2989,5,203,0,0,2989,2991,
        7,33,0,0,2990,2985,1,0,0,0,2990,2988,1,0,0,0,2991,199,1,0,0,0,2992,
        2993,5,203,0,0,2993,3000,5,263,0,0,2994,2995,5,203,0,0,2995,3000,
        5,31,0,0,2996,2997,5,208,0,0,2997,3000,5,203,0,0,2998,3000,5,232,
        0,0,2999,2992,1,0,0,0,2999,2994,1,0,0,0,2999,2996,1,0,0,0,2999,2998,
        1,0,0,0,3000,201,1,0,0,0,3001,3007,3,120,60,0,3002,3003,3,244,122,
        0,3003,3004,5,323,0,0,3004,3005,3,120,60,0,3005,3007,1,0,0,0,3006,
        3001,1,0,0,0,3006,3002,1,0,0,0,3007,203,1,0,0,0,3008,3009,3,244,
        122,0,3009,3010,5,310,0,0,3010,3011,3,244,122,0,3011,3014,1,0,0,
        0,3012,3014,3,244,122,0,3013,3008,1,0,0,0,3013,3012,1,0,0,0,3014,
        205,1,0,0,0,3015,3020,3,204,102,0,3016,3017,5,312,0,0,3017,3019,
        3,204,102,0,3018,3016,1,0,0,0,3019,3022,1,0,0,0,3020,3018,1,0,0,
        0,3020,3021,1,0,0,0,3021,207,1,0,0,0,3022,3020,1,0,0,0,3023,3024,
        5,90,0,0,3024,3025,3,210,105,0,3025,3029,3,214,107,0,3026,3028,3,
        216,108,0,3027,3026,1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,0,
        3029,3030,1,0,0,0,3030,3032,1,0,0,0,3031,3029,1,0,0,0,3032,3033,
        3,218,109,0,3033,209,1,0,0,0,3034,3035,3,232,116,0,3035,3044,5,313,
        0,0,3036,3041,3,212,106,0,3037,3038,5,312,0,0,3038,3040,3,212,106,
        0,3039,3037,1,0,0,0,3040,3043,1,0,0,0,3041,3039,1,0,0,0,3041,3042,
        1,0,0,0,3042,3045,1,0,0,0,3043,3041,1,0,0,0,3044,3036,1,0,0,0,3044,
        3045,1,0,0,0,3045,3046,1,0,0,0,3046,3047,5,314,0,0,3047,211,1,0,
        0,0,3048,3050,3,244,122,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,
        3051,1,0,0,0,3051,3052,3,168,84,0,3052,213,1,0,0,0,3053,3054,5,215,
        0,0,3054,3055,3,168,84,0,3055,215,1,0,0,0,3056,3057,5,130,0,0,3057,
        3076,3,244,122,0,3058,3060,5,165,0,0,3059,3058,1,0,0,0,3059,3060,
        1,0,0,0,3060,3061,1,0,0,0,3061,3076,5,61,0,0,3062,3063,5,215,0,0,
        3063,3064,5,166,0,0,3064,3065,5,173,0,0,3065,3066,5,166,0,0,3066,
        3076,5,109,0,0,3067,3068,5,21,0,0,3068,3069,5,173,0,0,3069,3070,
        5,166,0,0,3070,3076,5,109,0,0,3071,3072,5,229,0,0,3072,3076,7,1,
        0,0,3073,3074,5,29,0,0,3074,3076,3,152,76,0,3075,3056,1,0,0,0,3075,
        3059,1,0,0,0,3075,3062,1,0,0,0,3075,3067,1,0,0,0,3075,3071,1,0,0,
        0,3075,3073,1,0,0,0,3076,217,1,0,0,0,3077,3078,5,213,0,0,3078,3177,
        3,126,63,0,3079,3080,5,234,0,0,3080,3081,3,244,122,0,3081,3082,5,
        296,0,0,3082,3083,3,120,60,0,3083,3177,1,0,0,0,3084,3085,5,23,0,
        0,3085,3087,3,120,60,0,3086,3088,3,220,110,0,3087,3086,1,0,0,0,3088,
        3089,1,0,0,0,3089,3087,1,0,0,0,3089,3090,1,0,0,0,3090,3092,1,0,0,
        0,3091,3093,3,224,112,0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,
        3094,1,0,0,0,3094,3095,5,71,0,0,3095,3096,5,23,0,0,3096,3177,1,0,
        0,0,3097,3099,5,23,0,0,3098,3100,3,220,110,0,3099,3098,1,0,0,0,3100,
        3101,1,0,0,0,3101,3099,1,0,0,0,3101,3102,1,0,0,0,3102,3104,1,0,0,
        0,3103,3105,3,224,112,0,3104,3103,1,0,0,0,3104,3105,1,0,0,0,3105,
        3106,1,0,0,0,3106,3107,5,71,0,0,3107,3108,5,23,0,0,3108,3177,1,0,
        0,0,3109,3110,5,102,0,0,3110,3111,3,120,60,0,3111,3112,5,249,0,0,
        3112,3116,3,228,114,0,3113,3115,3,222,111,0,3114,3113,1,0,0,0,3115,
        3118,1,0,0,0,3116,3114,1,0,0,0,3116,3117,1,0,0,0,3117,3120,1,0,0,
        0,3118,3116,1,0,0,0,3119,3121,3,224,112,0,3120,3119,1,0,0,0,3120,
        3121,1,0,0,0,3121,3122,1,0,0,0,3122,3123,5,71,0,0,3123,3124,5,102,
        0,0,3124,3177,1,0,0,0,3125,3126,5,118,0,0,3126,3177,3,244,122,0,
        3127,3128,5,134,0,0,3128,3177,3,244,122,0,3129,3135,5,15,0,0,3130,
        3131,3,226,113,0,3131,3132,5,309,0,0,3132,3134,1,0,0,0,3133,3130,
        1,0,0,0,3134,3137,1,0,0,0,3135,3133,1,0,0,0,3135,3136,1,0,0,0,3136,
        3139,1,0,0,0,3137,3135,1,0,0,0,3138,3140,3,228,114,0,3139,3138,1,
        0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,3141,3177,5,71,0,0,3142,
        3143,3,244,122,0,3143,3144,5,311,0,0,3144,3146,1,0,0,0,3145,3142,
        1,0,0,0,3145,3146,1,0,0,0,3146,3147,1,0,0,0,3147,3148,5,144,0,0,
        3148,3149,3,228,114,0,3149,3150,5,71,0,0,3150,3151,5,144,0,0,3151,
        3177,1,0,0,0,3152,3153,3,244,122,0,3153,3154,5,311,0,0,3154,3156,
        1,0,0,0,3155,3152,1,0,0,0,3155,3156,1,0,0,0,3156,3157,1,0,0,0,3157,
        3158,5,286,0,0,3158,3159,3,120,60,0,3159,3160,5,64,0,0,3160,3161,
        3,228,114,0,3161,3162,5,71,0,0,3162,3163,5,286,0,0,3163,3177,1,0,
        0,0,3164,3165,3,244,122,0,3165,3166,5,311,0,0,3166,3168,1,0,0,0,
        3167,3164,1,0,0,0,3167,3168,1,0,0,0,3168,3169,1,0,0,0,3169,3170,
        5,207,0,0,3170,3171,3,228,114,0,3171,3172,5,270,0,0,3172,3173,3,
        120,60,0,3173,3174,5,71,0,0,3174,3175,5,207,0,0,3175,3177,1,0,0,
        0,3176,3077,1,0,0,0,3176,3079,1,0,0,0,3176,3084,1,0,0,0,3176,3097,
        1,0,0,0,3176,3109,1,0,0,0,3176,3125,1,0,0,0,3176,3127,1,0,0,0,3176,
        3129,1,0,0,0,3176,3145,1,0,0,0,3176,3155,1,0,0,0,3176,3167,1,0,0,
        0,3177,219,1,0,0,0,3178,3179,5,284,0,0,3179,3180,3,120,60,0,3180,
        3181,5,249,0,0,3181,3182,3,228,114,0,3182,221,1,0,0,0,3183,3184,
        5,69,0,0,3184,3185,3,120,60,0,3185,3186,5,249,0,0,3186,3187,3,228,
        114,0,3187,223,1,0,0,0,3188,3189,5,67,0,0,3189,3190,3,228,114,0,
        3190,225,1,0,0,0,3191,3192,5,52,0,0,3192,3197,3,244,122,0,3193,3194,
        5,312,0,0,3194,3196,3,244,122,0,3195,3193,1,0,0,0,3196,3199,1,0,
        0,0,3197,3195,1,0,0,0,3197,3198,1,0,0,0,3198,3200,1,0,0,0,3199,3197,
        1,0,0,0,3200,3203,3,168,84,0,3201,3202,5,53,0,0,3202,3204,3,126,
        63,0,3203,3201,1,0,0,0,3203,3204,1,0,0,0,3204,227,1,0,0,0,3205,3206,
        3,218,109,0,3206,3207,5,309,0,0,3207,3209,1,0,0,0,3208,3205,1,0,
        0,0,3209,3210,1,0,0,0,3210,3208,1,0,0,0,3210,3211,1,0,0,0,3211,229,
        1,0,0,0,3212,3213,7,34,0,0,3213,231,1,0,0,0,3214,3219,3,244,122,
        0,3215,3216,5,310,0,0,3216,3218,3,244,122,0,3217,3215,1,0,0,0,3218,
        3221,1,0,0,0,3219,3217,1,0,0,0,3219,3220,1,0,0,0,3220,233,1,0,0,
        0,3221,3219,1,0,0,0,3222,3223,5,86,0,0,3223,3224,3,236,118,0,3224,
        3225,5,11,0,0,3225,3226,5,170,0,0,3226,3227,3,126,63,0,3227,235,
        1,0,0,0,3228,3229,7,35,0,0,3229,237,1,0,0,0,3230,3234,3,240,120,
        0,3231,3234,5,47,0,0,3232,3234,5,43,0,0,3233,3230,1,0,0,0,3233,3231,
        1,0,0,0,3233,3232,1,0,0,0,3234,239,1,0,0,0,3235,3241,3,244,122,0,
        3236,3237,5,273,0,0,3237,3241,3,244,122,0,3238,3239,5,218,0,0,3239,
        3241,3,244,122,0,3240,3235,1,0,0,0,3240,3236,1,0,0,0,3240,3238,1,
        0,0,0,3241,241,1,0,0,0,3242,3247,3,244,122,0,3243,3244,5,312,0,0,
        3244,3246,3,244,122,0,3245,3243,1,0,0,0,3246,3249,1,0,0,0,3247,3245,
        1,0,0,0,3247,3248,1,0,0,0,3248,243,1,0,0,0,3249,3247,1,0,0,0,3250,
        3256,5,333,0,0,3251,3256,5,335,0,0,3252,3256,3,250,125,0,3253,3256,
        5,336,0,0,3254,3256,5,334,0,0,3255,3250,1,0,0,0,3255,3251,1,0,0,
        0,3255,3252,1,0,0,0,3255,3253,1,0,0,0,3255,3254,1,0,0,0,3256,245,
        1,0,0,0,3257,3259,5,303,0,0,3258,3257,1,0,0,0,3258,3259,1,0,0,0,
        3259,3260,1,0,0,0,3260,3270,5,331,0,0,3261,3263,5,303,0,0,3262,3261,
        1,0,0,0,3262,3263,1,0,0,0,3263,3264,1,0,0,0,3264,3270,5,332,0,0,
        3265,3267,5,303,0,0,3266,3265,1,0,0,0,3266,3267,1,0,0,0,3267,3268,
        1,0,0,0,3268,3270,5,330,0,0,3269,3258,1,0,0,0,3269,3262,1,0,0,0,
        3269,3266,1,0,0,0,3270,247,1,0,0,0,3271,3274,3,244,122,0,3272,3274,
        3,152,76,0,3273,3271,1,0,0,0,3273,3272,1,0,0,0,3274,249,1,0,0,0,
        3275,3276,7,36,0,0,3276,251,1,0,0,0,434,255,266,269,302,309,313,
        317,323,327,334,339,343,349,353,372,378,382,386,390,398,402,405,
        410,416,425,431,435,441,448,457,469,478,487,493,504,512,520,527,
        537,544,552,588,591,594,598,604,609,616,622,626,630,638,644,648,
        662,670,689,714,717,724,731,740,744,751,761,767,772,776,782,791,
        797,801,808,812,820,825,829,837,845,850,854,864,871,876,880,890,
        893,902,907,913,937,943,945,951,957,959,967,969,975,981,983,998,
        1003,1010,1020,1026,1028,1036,1038,1063,1066,1070,1074,1092,1095,
        1106,1109,1125,1135,1140,1146,1149,1158,1160,1163,1173,1177,1183,
        1190,1195,1201,1205,1209,1215,1226,1235,1245,1248,1253,1255,1262,
        1268,1270,1274,1284,1290,1293,1295,1307,1314,1318,1322,1326,1333,
        1342,1345,1349,1354,1358,1366,1369,1372,1379,1390,1393,1403,1406,
        1417,1422,1430,1433,1437,1446,1455,1458,1467,1470,1473,1477,1488,
        1491,1498,1501,1520,1524,1528,1532,1534,1545,1550,1559,1568,1571,
        1586,1589,1598,1601,1609,1612,1615,1620,1623,1635,1638,1646,1651,
        1655,1657,1659,1674,1676,1687,1694,1697,1702,1712,1723,1727,1729,
        1737,1744,1757,1763,1779,1788,1791,1799,1802,1809,1814,1825,1828,
        1832,1834,1842,1852,1858,1860,1867,1871,1873,1880,1884,1886,1888,
        1897,1908,1912,1922,1932,1936,1944,1946,1959,1967,1976,1982,1990,
        1996,2000,2005,2010,2016,2030,2032,2062,2073,2081,2086,2091,2104,
        2110,2113,2120,2125,2128,2131,2136,2143,2146,2155,2158,2162,2165,
        2168,2183,2186,2205,2209,2217,2221,2246,2249,2258,2264,2270,2276,
        2285,2288,2291,2310,2319,2341,2344,2354,2363,2369,2375,2386,2388,
        2393,2400,2402,2408,2414,2425,2434,2439,2444,2446,2448,2454,2456,
        2466,2475,2477,2483,2485,2488,2498,2500,2512,2515,2520,2525,2537,
        2541,2545,2548,2550,2556,2559,2569,2577,2583,2585,2593,2603,2609,
        2623,2632,2639,2644,2651,2661,2666,2673,2699,2704,2706,2713,2717,
        2724,2728,2745,2760,2767,2776,2786,2791,2800,2805,2813,2821,2824,
        2830,2833,2840,2848,2851,2859,2862,2888,2899,2904,2911,2913,2926,
        2941,2945,2949,2953,2959,2963,2967,2971,2973,2983,2990,2999,3006,
        3013,3020,3029,3041,3044,3049,3059,3075,3089,3092,3101,3104,3116,
        3120,3135,3139,3145,3155,3167,3176,3197,3203,3210,3219,3233,3240,
        3247,3255,3258,3262,3266,3269,3273
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!TrinoParser.__ATN) {
            TrinoParser.__ATN = new antlr.ATNDeserializer().deserialize(TrinoParser._serializedATN);
        }

        return TrinoParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(TrinoParser.literalNames, TrinoParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return TrinoParser.vocabulary;
    }

    private static readonly decisionsToDFA = TrinoParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ParseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EOF, 0)!;
    }
    public statements(): StatementsContext[];
    public statements(i: number): StatementsContext | null;
    public statements(i?: number): StatementsContext[] | StatementsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementsContext);
        }

        return this.getRuleContext(i, StatementsContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_parse;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterParse) {
             listener.enterParse(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitParse) {
             listener.exitParse(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParse) {
            return visitor.visitParse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleStatement(): SingleStatementContext | null {
        return this.getRuleContext(0, SingleStatementContext);
    }
    public standaloneExpression(): StandaloneExpressionContext | null {
        return this.getRuleContext(0, StandaloneExpressionContext);
    }
    public standalonePathSpecification(): StandalonePathSpecificationContext | null {
        return this.getRuleContext(0, StandalonePathSpecificationContext);
    }
    public standaloneType(): StandaloneTypeContext | null {
        return this.getRuleContext(0, StandaloneTypeContext);
    }
    public standaloneRowPattern(): StandaloneRowPatternContext | null {
        return this.getRuleContext(0, StandaloneRowPatternContext);
    }
    public SEMICOLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEMICOLON_, 0);
    }
    public standaloneFunctionSpecification(): StandaloneFunctionSpecificationContext | null {
        return this.getRuleContext(0, StandaloneFunctionSpecificationContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_statements;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStatements) {
             listener.enterStatements(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStatements) {
             listener.exitStatements(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_singleStatement;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_standaloneExpression;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStandaloneExpression) {
             listener.enterStandaloneExpression(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStandaloneExpression) {
             listener.exitStandaloneExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStandaloneExpression) {
            return visitor.visitStandaloneExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandalonePathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_standalonePathSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStandalonePathSpecification) {
             listener.enterStandalonePathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStandalonePathSpecification) {
             listener.exitStandalonePathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStandalonePathSpecification) {
            return visitor.visitStandalonePathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_standaloneType;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStandaloneType) {
             listener.enterStandaloneType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStandaloneType) {
             listener.exitStandaloneType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStandaloneType) {
            return visitor.visitStandaloneType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneRowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_standaloneRowPattern;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStandaloneRowPattern) {
             listener.enterStandaloneRowPattern(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStandaloneRowPattern) {
             listener.exitStandaloneRowPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStandaloneRowPattern) {
            return visitor.visitStandaloneRowPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneFunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public SEMICOLON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SEMICOLON_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_standaloneFunctionSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStandaloneFunctionSpecification) {
             listener.enterStandaloneFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStandaloneFunctionSpecification) {
             listener.exitStandaloneFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStandaloneFunctionSpecification) {
            return visitor.visitStandaloneFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXPLAIN_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExplain) {
             listener.enterExplain(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExplain) {
             listener.exitExplain(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrepareContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PREPARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PREPARE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPrepare) {
             listener.enterPrepare(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPrepare) {
             listener.exitPrepare(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPrepare) {
            return visitor.visitPrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PROPERTIES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PROPERTIES_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetMaterializedViewProperties) {
             listener.enterSetMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetMaterializedViewProperties) {
             listener.exitSetMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetMaterializedViewProperties) {
            return visitor.visitSetMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseContext extends StatementContext {
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USE_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUse) {
             listener.enterUse(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUse) {
             listener.exitUse(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUse) {
            return visitor.visitUse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeallocateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEALLOCATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DEALLOCATE_, 0)!;
    }
    public PREPARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PREPARE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDeallocate) {
             listener.enterDeallocate(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDeallocate) {
             listener.exitDeallocate(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeallocate) {
            return visitor.visitDeallocate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommitContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMIT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMIT_, 0)!;
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCommit) {
             listener.enterCommit(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCommit) {
             listener.exitCommit(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommit) {
            return visitor.visitCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropColumn) {
             listener.enterDropColumn(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropColumn) {
             listener.exitDropColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropColumn) {
            return visitor.visitDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public TABLES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLES_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetViewAuthorizationContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetViewAuthorization) {
             listener.enterSetViewAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetViewAuthorization) {
             listener.exitSetViewAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetViewAuthorization) {
            return visitor.visitSetViewAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CATALOGS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOGS_, 0)!;
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public ROLES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLES_, 0)!;
    }
    public CURRENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MERGE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MERGE_, 0)!;
    }
    public INTO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public USING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USING_, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public mergeCase(): MergeCaseContext[];
    public mergeCase(i: number): MergeCaseContext | null;
    public mergeCase(i?: number): MergeCaseContext[] | MergeCaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeCaseContext);
        }

        return this.getRuleContext(i, MergeCaseContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMerge) {
             listener.enterMerge(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMerge) {
             listener.exitMerge(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMerge) {
            return visitor.visitMerge(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _from_?: QualifiedNameContext;
    public _to?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRenameColumn) {
             listener.enterRenameColumn(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRenameColumn) {
             listener.exitRenameColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCommentColumn) {
             listener.enterCommentColumn(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCommentColumn) {
             listener.exitCommentColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentColumn) {
            return visitor.visitCommentColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REVOKE_, 0)!;
    }
    public roles(): RolesContext {
        return this.getRuleContext(0, RolesContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRevokeRoles) {
             listener.enterRevokeRoles(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRevokeRoles) {
             listener.exitRevokeRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoles) {
            return visitor.visitRevokeRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public COLUMNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMNS_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public DESCRIBE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESCRIBE_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoleGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public GRANTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANTS_, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _column?: ColumnDefinitionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public ADD_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ADD_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public EXISTS_(): antlr.TerminalNode[];
    public EXISTS_(i: number): antlr.TerminalNode | null;
    public EXISTS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EXISTS_);
    	} else {
    		return this.getToken(TrinoParser.EXISTS_, i);
    	}
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAddColumn) {
             listener.enterAddColumn(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAddColumn) {
             listener.exitAddColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAddColumn) {
            return visitor.visitAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DenyContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DENY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DENY_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDeny) {
             listener.enterDeny(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDeny) {
             listener.exitDeny(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeny) {
            return visitor.visitDeny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RESET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterResetSession) {
             listener.enterResetSession(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitResetSession) {
             listener.exitResetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitResetSession) {
            return visitor.visitResetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertIntoContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INSERT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INSERT_, 0)!;
    }
    public INTO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSessionContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowSession) {
             listener.enterShowSession(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowSession) {
             listener.exitShowSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowSession) {
            return visitor.visitShowSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateSchema) {
             listener.enterCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateSchema) {
             listener.exitCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSchema) {
            return visitor.visitCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public authorizationUser(): AuthorizationUserContext {
        return this.getRuleContext(0, AuthorizationUserContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetSessionAuthorization) {
             listener.enterSetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetSessionAuthorization) {
             listener.exitSetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSessionAuthorization) {
            return visitor.visitSetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainAnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXPLAIN_, 0)!;
    }
    public ANALYZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ANALYZE_, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public VERBOSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERBOSE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExplainAnalyze) {
             listener.enterExplainAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExplainAnalyze) {
             listener.exitExplainAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainAnalyze) {
            return visitor.visitExplainAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExecute) {
             listener.enterExecute(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExecute) {
             listener.exitExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExecute) {
            return visitor.visitExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRenameSchema) {
             listener.enterRenameSchema(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRenameSchema) {
             listener.exitRenameSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameSchema) {
            return visitor.visitRenameSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ANALYZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ANALYZE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetRoleContext extends StatementContext {
    public _role?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public NONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NONE_, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOG_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public GRANTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANTS_, 0)!;
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropSchema) {
             listener.enterDropSchema(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropSchema) {
             listener.exitDropSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropSchema) {
            return visitor.visitDropSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RESET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RESET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterResetSessionAuthorization) {
             listener.enterResetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitResetSessionAuthorization) {
             listener.exitResetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitResetSessionAuthorization) {
            return visitor.visitResetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableAuthorizationContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetTableAuthorization) {
             listener.enterSetTableAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetTableAuthorization) {
             listener.exitSetTableAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableAuthorization) {
            return visitor.visitSetTableAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowCreateView) {
             listener.enterShowCreateView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowCreateView) {
             listener.exitShowCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StartTransactionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public START_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.START_, 0)!;
    }
    public TRANSACTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRANSACTION_, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStartTransaction) {
             listener.enterStartTransaction(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStartTransaction) {
             listener.exitStartTransaction(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableAsSelectContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext | null {
        return this.getRuleContext(0, RootQueryContext);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode[];
    public WITH_(i: number): antlr.TerminalNode | null;
    public WITH_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.WITH_);
    	} else {
    		return this.getToken(TrinoParser.WITH_, i);
    	}
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public DATA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATA_, 0);
    }
    public NO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NO_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateTableAsSelect) {
             listener.enterCreateTableAsSelect(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateTableAsSelect) {
             listener.exitCreateTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCommentView) {
             listener.enterCommentView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCommentView) {
             listener.exitCommentView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentView) {
            return visitor.visitCommentView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public STATS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STATS_, 0)!;
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowStats) {
             listener.enterShowStats(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowStats) {
             listener.exitShowStats(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowStats) {
            return visitor.visitShowStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowCreateSchema) {
             listener.enterShowCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowCreateSchema) {
             listener.exitShowCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateSchema) {
            return visitor.visitShowCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public FUNCTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTION_, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REVOKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REVOKE_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public GRANT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANT_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRevoke) {
             listener.enterRevoke(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRevoke) {
             listener.exitRevoke(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRevoke) {
            return visitor.visitRevoke(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends StatementContext {
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UPDATE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUpdate) {
             listener.enterUpdate(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUpdate) {
             listener.exitUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExecuteContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _procedureName?: IdentifierContext;
    public _where?: BooleanExpressionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableExecute) {
             listener.enterTableExecute(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableExecute) {
             listener.exitTableExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableExecute) {
            return visitor.visitTableExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DELETE_, 0)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDelete) {
             listener.enterDelete(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDelete) {
             listener.exitDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeInputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIBE_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDescribeInput) {
             listener.enterDescribeInput(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDescribeInput) {
             listener.exitDescribeInput(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeInput) {
            return visitor.visitDescribeInput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsForQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public STATS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STATS_, 0)!;
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowStatsForQuery) {
             listener.enterShowStatsForQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowStatsForQuery) {
             listener.exitShowStatsForQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowStatsForQuery) {
            return visitor.visitShowStatsForQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetColumnTypeContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public _columnName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode[];
    public ALTER_(i: number): antlr.TerminalNode | null;
    public ALTER_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ALTER_);
    	} else {
    		return this.getToken(TrinoParser.ALTER_, i);
    	}
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public COLUMN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COLUMN_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public DATA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DATA_, 0)!;
    }
    public TYPE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TYPE_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetColumnType) {
             listener.enterSetColumnType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetColumnType) {
             listener.exitSetColumnType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetColumnType) {
            return visitor.visitSetColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public LOCAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCAL_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRUNCATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRUNCATE_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public GRACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRACE_, 0);
    }
    public PERIOD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERIOD_, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public SESSION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SESSION_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetSession) {
             listener.enterSetSession(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetSession) {
             listener.exitSetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSession) {
            return visitor.visitSetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public OR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OR_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public SECURITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECURITY_, 0);
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameMaterializedViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRenameMaterializedView) {
             listener.enterRenameMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRenameMaterializedView) {
             listener.exitRenameMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameMaterializedView) {
            return visitor.visitRenameMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemasContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public SCHEMAS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMAS_, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowSchemas) {
             listener.enterShowSchemas(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowSchemas) {
             listener.exitShowSchemas(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowSchemas) {
            return visitor.visitShowSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DROP_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSchemaAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SCHEMA_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public AUTHORIZATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetSchemaAuthorization) {
             listener.enterSetSchemaAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetSchemaAuthorization) {
             listener.exitSetSchemaAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetSchemaAuthorization) {
            return visitor.visitSetSchemaAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollbackContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLBACK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLLBACK_, 0)!;
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRollback) {
             listener.enterRollback(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRollback) {
             listener.exitRollback(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRollback) {
            return visitor.visitRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteImmediateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXECUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXECUTE_, 0)!;
    }
    public IMMEDIATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IMMEDIATE_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExecuteImmediate) {
             listener.enterExecuteImmediate(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExecuteImmediate) {
             listener.exitExecuteImmediate(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExecuteImmediate) {
            return visitor.visitExecuteImmediate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameViewContext extends StatementContext {
    public _from_?: QualifiedNameContext;
    public _to?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public RENAME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RENAME_, 0)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRenameView) {
             listener.enterRenameView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRenameView) {
             listener.exitRenameView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRenameView) {
            return visitor.visitRenameView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPathContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PATH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PATH_, 0)!;
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetPath) {
             listener.enterSetPath(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetPath) {
             listener.exitSetPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetPath) {
            return visitor.visitSetPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRolesContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GRANT_, 0)!;
    }
    public roles(): RolesContext {
        return this.getRuleContext(0, RolesContext)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGrantRoles) {
             listener.enterGrantRoles(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGrantRoles) {
             listener.exitGrantRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGrantRoles) {
            return visitor.visitGrantRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CALL_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCall) {
             listener.enterCall(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCall) {
             listener.exitCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REFRESH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REFRESH_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public MATERIALIZED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATERIALIZED_, 0)!;
    }
    public VIEW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VIEW_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends StatementContext {
    public _catalog?: IdentifierContext;
    public _connectorName?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CREATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CREATE_, 0)!;
    }
    public CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CATALOG_, 0)!;
    }
    public USING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USING_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public EXISTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXISTS_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _pattern?: String_Context;
    public _escape?: String_Context;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SHOW_, 0)!;
    }
    public FUNCTIONS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTIONS_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public LIKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIKE_, 0);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public IN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IN_, 0);
    }
    public string_(): String_Context[];
    public string_(i: number): String_Context | null;
    public string_(i?: number): String_Context[] | String_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(String_Context);
        }

        return this.getRuleContext(i, String_Context);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeOutputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DESCRIBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIBE_, 0)!;
    }
    public OUTPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OUTPUT_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDescribeOutput) {
             listener.enterDescribeOutput(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDescribeOutput) {
             listener.exitDescribeOutput(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeOutput) {
            return visitor.visitDescribeOutput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GRANT_(): antlr.TerminalNode[];
    public GRANT_(i: number): antlr.TerminalNode | null;
    public GRANT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.GRANT_);
    	} else {
    		return this.getToken(TrinoParser.GRANT_, i);
    	}
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public TO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TO_, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public TABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLE_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGrant) {
             listener.enterGrant(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGrant) {
             listener.exitGrant(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGrant) {
            return visitor.visitGrant(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public _tableName?: QualifiedNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ALTER_, 0)!;
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public PROPERTIES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PROPERTIES_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RootQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public withFunction(): WithFunctionContext | null {
        return this.getRuleContext(0, WithFunctionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rootQuery;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRootQuery) {
             listener.enterRootQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRootQuery) {
             listener.exitRootQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRootQuery) {
            return visitor.visitRootQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WITH_, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext[];
    public functionSpecification(i: number): FunctionSpecificationContext | null;
    public functionSpecification(i?: number): FunctionSpecificationContext[] | FunctionSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionSpecificationContext);
        }

        return this.getRuleContext(i, FunctionSpecificationContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_withFunction;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWithFunction) {
             listener.enterWithFunction(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWithFunction) {
             listener.exitWithFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWithFunction) {
            return visitor.visitWithFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public with(): WithContext | null {
        return this.getRuleContext(0, WithContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_query;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQuery) {
             listener.enterQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQuery) {
             listener.exitQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuery) {
            return visitor.visitQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WITH_, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public RECURSIVE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RECURSIVE_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_with;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWith) {
             listener.enterWith(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWith) {
             listener.exitWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWith) {
            return visitor.visitWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableElement;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_columnDefinition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public _optionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LIKE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public PROPERTIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PROPERTIES_, 0);
    }
    public INCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INCLUDING_, 0);
    }
    public EXCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCLUDING_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_likeClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_properties;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterProperties) {
             listener.enterProperties(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitProperties) {
             listener.exitProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProperties) {
            return visitor.visitProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyAssignmentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_propertyAssignments;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPropertyAssignments) {
             listener.enterPropertyAssignments(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPropertyAssignments) {
             listener.exitPropertyAssignments(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPropertyAssignments) {
            return visitor.visitPropertyAssignments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_property;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_propertyValue;
    }
    public override copyFrom(ctx: PropertyValueContext): void {
        super.copyFrom(ctx);
    }
}
export class DefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DEFAULT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DEFAULT_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDefaultPropertyValue) {
             listener.enterDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDefaultPropertyValue) {
             listener.exitDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultPropertyValue) {
            return visitor.visitDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNonDefaultPropertyValue) {
             listener.enterNonDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNonDefaultPropertyValue) {
             listener.exitNonDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNonDefaultPropertyValue) {
            return visitor.visitNonDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryNoWithContext extends antlr.ParserRuleContext {
    public _offset?: RowCountContext;
    public _limit?: LimitRowCountContext;
    public _fetchFirst?: RowCountContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public OFFSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OFFSET_, 0);
    }
    public LIMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIMIT_, 0);
    }
    public FETCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FETCH_, 0);
    }
    public rowCount(): RowCountContext[];
    public rowCount(i: number): RowCountContext | null;
    public rowCount(i?: number): RowCountContext[] | RowCountContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowCountContext);
        }

        return this.getRuleContext(i, RowCountContext);
    }
    public limitRowCount(): LimitRowCountContext | null {
        return this.getRuleContext(0, LimitRowCountContext);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public ROW_(): antlr.TerminalNode[];
    public ROW_(i: number): antlr.TerminalNode | null;
    public ROW_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ROW_);
    	} else {
    		return this.getToken(TrinoParser.ROW_, i);
    	}
    }
    public ROWS_(): antlr.TerminalNode[];
    public ROWS_(i: number): antlr.TerminalNode | null;
    public ROWS_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ROWS_);
    	} else {
    		return this.getToken(TrinoParser.ROWS_, i);
    	}
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public TIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIES_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryNoWith;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQueryNoWith) {
             listener.enterQueryNoWith(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQueryNoWith) {
             listener.exitQueryNoWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryNoWith) {
            return visitor.visitQueryNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitRowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public rowCount(): RowCountContext | null {
        return this.getRuleContext(0, RowCountContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_limitRowCount;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLimitRowCount) {
             listener.enterLimitRowCount(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLimitRowCount) {
             listener.exitLimitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLimitRowCount) {
            return visitor.visitLimitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowCount;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRowCount) {
             listener.enterRowCount(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRowCount) {
             listener.exitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowCount) {
            return visitor.visitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQueryTermDefault) {
             listener.enterQueryTermDefault(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQueryTermDefault) {
             listener.exitQueryTermDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public INTERSECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTERSECT_, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public UNION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNION_, 0);
    }
    public EXCEPT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCEPT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetOperation) {
             listener.enterSetOperation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetOperation) {
             listener.exitSetOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQueryPrimaryDefault) {
             listener.enterQueryPrimaryDefault(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQueryPrimaryDefault) {
             listener.exitQueryPrimaryDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTable) {
             listener.enterTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTable) {
             listener.exitTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTable) {
            return visitor.visitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public VALUES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VALUES_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrdering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public NULLS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLS_, 0);
    }
    public ASC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASC_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sortItem;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public _having?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SELECT_, 0)!;
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public WHERE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHERE_, 0);
    }
    public GROUP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUP_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public groupBy(): GroupByContext | null {
        return this.getRuleContext(0, GroupByContext);
    }
    public HAVING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HAVING_, 0);
    }
    public WINDOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WINDOW_, 0);
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_querySpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupBy;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGroupBy) {
             listener.enterGroupBy(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGroupBy) {
             listener.exitGroupBy(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupBy) {
            return visitor.visitGroupBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupingElement;
    }
    public override copyFrom(ctx: GroupingElementContext): void {
        super.copyFrom(ctx);
    }
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GROUPING_, 0)!;
    }
    public SETS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SETS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMultipleGroupingSets) {
             listener.enterMultipleGroupingSets(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMultipleGroupingSets) {
             listener.exitMultipleGroupingSets(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMultipleGroupingSets) {
            return visitor.visitMultipleGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleGroupingSetContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingSet(): GroupingSetContext {
        return this.getRuleContext(0, GroupingSetContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSingleGroupingSet) {
             listener.enterSingleGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSingleGroupingSet) {
             listener.exitSingleGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSingleGroupingSet) {
            return visitor.visitSingleGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CubeContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CUBE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CUBE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCube) {
             listener.enterCube(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCube) {
             listener.exitCube(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCube) {
            return visitor.visitCube(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollupContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLLUP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLLUP_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRollup) {
             listener.enterRollup(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRollup) {
             listener.exitRollup(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRollup) {
            return visitor.visitRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_groupingSet;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowDefinition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public _existingWindowName?: IdentifierContext;
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWindowSpecification) {
             listener.enterWindowSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWindowSpecification) {
             listener.exitWindowSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_namedQuery;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTINCT_, 0);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_setQuantifier;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_selectItem;
    }
    public override copyFrom(ctx: SelectItemContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectAllContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public ASTERISK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ASTERISK_, 0)!;
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSelectAll) {
             listener.enterSelectAll(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSelectAll) {
             listener.exitSelectAll(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSelectAll) {
            return visitor.visitSelectAll(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SelectSingleContext extends SelectItemContext {
    public constructor(ctx: SelectItemContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSelectSingle) {
             listener.enterSelectSingle(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSelectSingle) {
             listener.exitSelectSingle(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSelectSingle) {
            return visitor.visitSelectSingle(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_relation;
    }
    public override copyFrom(ctx: RelationContext): void {
        super.copyFrom(ctx);
    }
}
export class RelationDefaultContext extends RelationContext {
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sampledRelation(): SampledRelationContext {
        return this.getRuleContext(0, SampledRelationContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRelationDefault) {
             listener.enterRelationDefault(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRelationDefault) {
             listener.exitRelationDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRelationDefault) {
            return visitor.visitRelationDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinRelationContext extends RelationContext {
    public _left?: RelationContext;
    public _right?: SampledRelationContext;
    public _rightRelation?: RelationContext;
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public CROSS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CROSS_, 0);
    }
    public JOIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JOIN_, 0);
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public NATURAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NATURAL_, 0);
    }
    public sampledRelation(): SampledRelationContext | null {
        return this.getRuleContext(0, SampledRelationContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INNER_, 0);
    }
    public LEFT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEFT_, 0);
    }
    public RIGHT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RIGHT_, 0);
    }
    public FULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FULL_, 0);
    }
    public OUTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OUTER_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_joinType;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public USING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USING_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_joinCriteria;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampledRelationContext extends antlr.ParserRuleContext {
    public _percentage?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public patternRecognition(): PatternRecognitionContext {
        return this.getRuleContext(0, PatternRecognitionContext)!;
    }
    public TABLESAMPLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLESAMPLE_, 0);
    }
    public sampleType(): SampleTypeContext | null {
        return this.getRuleContext(0, SampleTypeContext);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sampledRelation;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSampledRelation) {
             listener.enterSampledRelation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSampledRelation) {
             listener.exitSampledRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSampledRelation) {
            return visitor.visitSampledRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BERNOULLI_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BERNOULLI_, 0);
    }
    public SYSTEM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SYSTEM_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sampleType;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSampleType) {
             listener.enterSampleType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSampleType) {
             listener.exitSampleType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSampleType) {
            return visitor.visitSampleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEADING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEADING_, 0);
    }
    public TRAILING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRAILING_, 0);
    }
    public BOTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BOTH_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_trimsSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTrimsSpecification) {
             listener.enterTrimsSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTrimsSpecification) {
             listener.exitTrimsSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTrimsSpecification) {
            return visitor.visitTrimsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggOverflowBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public TRUNCATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUNCATE_, 0);
    }
    public listaggCountIndication(): ListaggCountIndicationContext | null {
        return this.getRuleContext(0, ListaggCountIndicationContext);
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_listAggOverflowBehavior;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterListAggOverflowBehavior) {
             listener.enterListAggOverflowBehavior(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitListAggOverflowBehavior) {
             listener.exitListAggOverflowBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListAggOverflowBehavior) {
            return visitor.visitListAggOverflowBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListaggCountIndicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COUNT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COUNT_, 0)!;
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_listaggCountIndication;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterListaggCountIndication) {
             listener.enterListaggCountIndication(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitListaggCountIndication) {
             listener.exitListaggCountIndication(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListaggCountIndication) {
            return visitor.visitListaggCountIndication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternRecognitionContext extends antlr.ParserRuleContext {
    public _expression?: ExpressionContext;
    public _partition: ExpressionContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasedRelation(): AliasedRelationContext {
        return this.getRuleContext(0, AliasedRelationContext)!;
    }
    public MATCH_RECOGNIZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_RECOGNIZE_, 0);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public rowsPerMatch(): RowsPerMatchContext | null {
        return this.getRuleContext(0, RowsPerMatchContext);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternRecognition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPatternRecognition) {
             listener.enterPatternRecognition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPatternRecognition) {
             listener.exitPatternRecognition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternRecognition) {
            return visitor.visitPatternRecognition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasureDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_measureDefinition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMeasureDefinition) {
             listener.enterMeasureDefinition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMeasureDefinition) {
             listener.exitMeasureDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMeasureDefinition) {
            return visitor.visitMeasureDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsPerMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONE_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public PER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PER_, 0)!;
    }
    public MATCH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCH_, 0)!;
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext | null {
        return this.getRuleContext(0, EmptyMatchHandlingContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowsPerMatch;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRowsPerMatch) {
             listener.enterRowsPerMatch(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRowsPerMatch) {
             listener.exitRowsPerMatch(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowsPerMatch) {
            return visitor.visitRowsPerMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyMatchHandlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public MATCHES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHES_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public UNMATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNMATCHED_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_emptyMatchHandling;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterEmptyMatchHandling) {
             listener.enterEmptyMatchHandling(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitEmptyMatchHandling) {
             listener.exitEmptyMatchHandling(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitEmptyMatchHandling) {
            return visitor.visitEmptyMatchHandling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipToContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SKIP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SKIP_, 0)!;
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public PAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PAST_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_skipTo;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSkipTo) {
             listener.enterSkipTo(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSkipTo) {
             listener.exitSkipTo(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSkipTo) {
            return visitor.visitSkipTo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubsetDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _union: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_subsetDefinition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubsetDefinition) {
             listener.enterSubsetDefinition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubsetDefinition) {
             listener.exitSubsetDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubsetDefinition) {
            return visitor.visitSubsetDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_variableDefinition;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterVariableDefinition) {
             listener.enterVariableDefinition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitVariableDefinition) {
             listener.exitVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasedRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_aliasedRelation;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAliasedRelation) {
             listener.enterAliasedRelation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAliasedRelation) {
             listener.exitAliasedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAliasedRelation) {
            return visitor.visitAliasedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_columnAliases;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterColumnAliases) {
             listener.enterColumnAliases(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitColumnAliases) {
             listener.exitColumnAliases(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubqueryRelation) {
             listener.enterSubqueryRelation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubqueryRelation) {
             listener.exitSubqueryRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryRelation) {
            return visitor.visitSubqueryRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterParenthesizedRelation) {
             listener.enterParenthesizedRelation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitParenthesizedRelation) {
             listener.exitParenthesizedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedRelation) {
            return visitor.visitParenthesizedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnnestContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNNEST_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNNEST_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public ORDINALITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDINALITY_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnnest) {
             listener.enterUnnest(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnnest) {
             listener.exitUnnest(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnnest) {
            return visitor.visitUnnest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableFunctionInvocationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        return this.getRuleContext(0, TableFunctionCallContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableFunctionInvocation) {
             listener.enterTableFunctionInvocation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableFunctionInvocation) {
             listener.exitTableFunctionInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionInvocation) {
            return visitor.visitTableFunctionInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LATERAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LATERAL_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLateral) {
             listener.enterLateral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLateral) {
             listener.exitLateral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLateral) {
            return visitor.visitLateral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableNameContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public queryPeriod(): QueryPeriodContext | null {
        return this.getRuleContext(0, QueryPeriodContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext[];
    public tableFunctionArgument(i: number): TableFunctionArgumentContext | null;
    public tableFunctionArgument(i?: number): TableFunctionArgumentContext[] | TableFunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFunctionArgumentContext);
        }

        return this.getRuleContext(i, TableFunctionArgumentContext);
    }
    public COPARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COPARTITION_, 0);
    }
    public copartitionTables(): CopartitionTablesContext[];
    public copartitionTables(i: number): CopartitionTablesContext | null;
    public copartitionTables(i?: number): CopartitionTablesContext[] | CopartitionTablesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CopartitionTablesContext);
        }

        return this.getRuleContext(i, CopartitionTablesContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableFunctionCall;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableFunctionCall) {
             listener.enterTableFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableFunctionCall) {
             listener.exitTableFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionCall) {
            return visitor.visitTableFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgument(): TableArgumentContext | null {
        return this.getRuleContext(0, TableArgumentContext);
    }
    public descriptorArgument(): DescriptorArgumentContext | null {
        return this.getRuleContext(0, DescriptorArgumentContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public RDOUBLEARROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RDOUBLEARROW_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableFunctionArgument;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableFunctionArgument) {
             listener.enterTableFunctionArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableFunctionArgument) {
             listener.exitTableFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionArgument) {
            return visitor.visitTableFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        return this.getRuleContext(0, TableArgumentRelationContext)!;
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public BY_(): antlr.TerminalNode[];
    public BY_(i: number): antlr.TerminalNode | null;
    public BY_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.BY_);
    	} else {
    		return this.getToken(TrinoParser.BY_, i);
    	}
    }
    public PRUNE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRUNE_, 0);
    }
    public WHEN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHEN_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableArgument;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableArgument) {
             listener.enterTableArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableArgument) {
             listener.exitTableArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgument) {
            return visitor.visitTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_tableArgumentRelation;
    }
    public override copyFrom(ctx: TableArgumentRelationContext): void {
        super.copyFrom(ctx);
    }
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableArgumentQuery) {
             listener.enterTableArgumentQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableArgumentQuery) {
             listener.exitTableArgumentQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentQuery) {
            return visitor.visitTableArgumentQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TABLE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTableArgumentTable) {
             listener.enterTableArgumentTable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTableArgumentTable) {
             listener.exitTableArgumentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentTable) {
            return visitor.visitTableArgumentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESCRIPTOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DESCRIPTOR_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public descriptorField(): DescriptorFieldContext[];
    public descriptorField(i: number): DescriptorFieldContext | null;
    public descriptorField(i?: number): DescriptorFieldContext[] | DescriptorFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DescriptorFieldContext);
        }

        return this.getRuleContext(i, DescriptorFieldContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CAST_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public AS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_descriptorArgument;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDescriptorArgument) {
             listener.enterDescriptorArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDescriptorArgument) {
             listener.exitDescriptorArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescriptorArgument) {
            return visitor.visitDescriptorArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_descriptorField;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDescriptorField) {
             listener.enterDescriptorField(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDescriptorField) {
             listener.exitDescriptorField(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDescriptorField) {
            return visitor.visitDescriptorField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopartitionTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_copartitionTables;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCopartitionTables) {
             listener.enterCopartitionTables(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCopartitionTables) {
             listener.exitCopartitionTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCopartitionTables) {
            return visitor.visitCopartitionTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_expression;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NOT_, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate_(): Predicate_Context | null {
        return this.getRuleContext(0, Predicate_Context);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public OR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OR_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterOr) {
             listener.enterOr(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitOr) {
             listener.exitOr(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public AND_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AND_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAnd) {
             listener.enterAnd(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAnd) {
             listener.exitAnd(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAnd) {
            return visitor.visitAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Predicate_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_predicate_;
    }
    public override copyFrom(ctx: Predicate_Context): void {
        super.copyFrom(ctx);
    }
}
export class ComparisonContext extends Predicate_Context {
    public _right?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends Predicate_Context {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LIKE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LIKE_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public ESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ESCAPE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends Predicate_Context {
    public _right?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public DISTINCT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DISTINCT_, 0)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IS_, 0)!;
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends Predicate_Context {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BETWEEN_, 0)!;
    }
    public AND_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AND_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends Predicate_Context {
    public constructor(ctx: Predicate_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        return this.getRuleContext(0, ComparisonQuantifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONCAT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CONCAT_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASTERISK_, 0);
    }
    public SLASH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SLASH_, 0);
    }
    public PERCENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERCENT_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public AT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AT_, 0)!;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        return this.getRuleContext(0, TimeZoneSpecifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base_?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOT_, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDereference) {
             listener.enterDereference(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDereference) {
             listener.exitDereference(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public DOUBLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOUBLE_, 0);
    }
    public PRECISION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECISION_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTypeConstructor) {
             listener.enterTypeConstructor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTypeConstructor) {
             listener.exitTypeConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_VALUE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public ON_(): antlr.TerminalNode[];
    public ON_(i: number): antlr.TerminalNode | null;
    public ON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ON_);
    	} else {
    		return this.getToken(TrinoParser.ON_, i);
    	}
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonValue) {
             listener.enterJsonValue(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonValue) {
             listener.exitJsonValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValue) {
            return visitor.visitJsonValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecialDateTimeFunctionContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_DATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_DATE_, 0);
    }
    public CURRENT_TIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_TIME_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public CURRENT_TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_TIMESTAMP_, 0);
    }
    public LOCALTIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCALTIME_, 0);
    }
    public LOCALTIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCALTIMESTAMP_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSpecialDateTimeFunction) {
             listener.enterSpecialDateTimeFunction(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSpecialDateTimeFunction) {
             listener.exitSpecialDateTimeFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSpecialDateTimeFunction) {
            return visitor.visitSpecialDateTimeFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstringContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SUBSTRING_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public FOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOR_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubstring) {
             listener.enterSubstring(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubstring) {
             listener.exitSubstring(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubstring) {
            return visitor.visitSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CAST_, 0);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public TRY_CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRY_CAST_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RARROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RARROW_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLambda) {
             listener.enterLambda(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLambda) {
             listener.exitLambda(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimContext extends PrimaryExpressionContext {
    public _trimChar?: ValueExpressionContext;
    public _trimSource?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TRIM_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public FROM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FROM_, 0);
    }
    public trimsSpecification(): TrimsSpecificationContext | null {
        return this.getRuleContext(0, TrimsSpecificationContext);
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTrim) {
             listener.enterTrim(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTrim) {
             listener.exitTrim(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTrim) {
            return visitor.visitTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterParameter) {
             listener.enterParameter(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitParameter) {
             listener.exitParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizeContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NORMALIZE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NORMALIZE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNormalize) {
             listener.enterNormalize(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNormalize) {
             listener.exitNormalize(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNormalize) {
            return visitor.visitNormalize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonObjectContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_OBJECT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_OBJECT_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonObjectMember(): JsonObjectMemberContext[];
    public jsonObjectMember(i: number): JsonObjectMemberContext | null;
    public jsonObjectMember(i?: number): JsonObjectMemberContext[] | JsonObjectMemberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonObjectMemberContext);
        }

        return this.getRuleContext(i, JsonObjectMemberContext);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public UNIQUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNIQUE_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KEYS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEYS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonObject) {
             listener.enterJsonObject(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonObject) {
             listener.exitJsonObject(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonObject) {
            return visitor.visitJsonObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNumericLiteral) {
             listener.enterNumericLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNumericLiteral) {
             listener.exitNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonArrayContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_ARRAY_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonValueExpression(): JsonValueExpressionContext[];
    public jsonValueExpression(i: number): JsonValueExpressionContext | null;
    public jsonValueExpression(i?: number): JsonValueExpressionContext[] | JsonValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueExpressionContext);
        }

        return this.getRuleContext(i, JsonValueExpressionContext);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonArray) {
             listener.enterJsonArray(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonArray) {
             listener.exitJsonArray(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonArray) {
            return visitor.visitJsonArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _operand?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CASE_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RowConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRowConstructor) {
             listener.enterRowConstructor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRowConstructor) {
             listener.exitRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LSQUARE_, 0)!;
    }
    public RSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RSQUARE_, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubscript) {
             listener.enterSubscript(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubscript) {
             listener.exitSubscript(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_EXISTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_EXISTS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | null {
        return this.getRuleContext(0, JsonExistsErrorBehaviorContext);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonExists) {
             listener.enterJsonExists(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonExists) {
             listener.exitJsonExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonExists) {
            return visitor.visitJsonExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentPathContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_PATH_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_PATH_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentPath) {
             listener.enterCurrentPath(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentPath) {
             listener.exitCurrentPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentPath) {
            return visitor.visitCurrentPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_LITERAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BINARY_LITERAL_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBinaryLiteral) {
             listener.enterBinaryLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBinaryLiteral) {
             listener.exitBinaryLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBinaryLiteral) {
            return visitor.visitBinaryLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_USER_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentUser) {
             listener.enterCurrentUser(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentUser) {
             listener.exitCurrentUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonQueryContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public JSON_QUERY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_QUERY_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public WRAPPER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRAPPER_, 0);
    }
    public QUOTES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUOTES_, 0);
    }
    public ON_(): antlr.TerminalNode[];
    public ON_(i: number): antlr.TerminalNode | null;
    public ON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.ON_);
    	} else {
    		return this.getToken(TrinoParser.ON_, i);
    	}
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public SCALAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCALAR_, 0);
    }
    public TEXT_STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_STRING_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonQuery) {
             listener.enterJsonQuery(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonQuery) {
             listener.exitJsonQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQuery) {
            return visitor.visitJsonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MeasureContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public over(): OverContext {
        return this.getRuleContext(0, OverContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMeasure) {
             listener.enterMeasure(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMeasure) {
             listener.exitMeasure(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMeasure) {
            return visitor.visitMeasure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXTRACT_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public FROM_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FROM_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExtract) {
             listener.enterExtract(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExtract) {
             listener.exitExtract(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LSQUARE_, 0)!;
    }
    public RSQUARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RSQUARE_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterArrayConstructor) {
             listener.enterArrayConstructor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitArrayConstructor) {
             listener.exitArrayConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArrayConstructor) {
            return visitor.visitArrayConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public _label?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public ASTERISK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASTERISK_, 0);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public processingMode(): ProcessingModeContext | null {
        return this.getRuleContext(0, ProcessingModeContext);
    }
    public DOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOT_, 0);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public over(): OverContext | null {
        return this.getRuleContext(0, OverContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_SCHEMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_SCHEMA_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentSchema) {
             listener.enterCurrentSchema(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentSchema) {
             listener.exitCurrentSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchema) {
            return visitor.visitCurrentSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EXISTS_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExists) {
             listener.enterExists(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExists) {
             listener.exitExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public POSITION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.POSITION_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public IN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.IN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPosition) {
             listener.enterPosition(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPosition) {
             listener.exitPosition(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListaggContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public LISTAGG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LISTAGG_, 0)!;
    }
    public WITHIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHIN_, 0);
    }
    public GROUP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUP_, 0);
    }
    public ORDER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDER_, 0);
    }
    public BY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BY_, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public string_(): String_Context | null {
        return this.getRuleContext(0, String_Context);
    }
    public ON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ON_, 0);
    }
    public OVERFLOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVERFLOW_, 0);
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | null {
        return this.getRuleContext(0, ListAggOverflowBehaviorContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterListagg) {
             listener.enterListagg(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitListagg) {
             listener.exitListagg(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitListagg) {
            return visitor.visitListagg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CASE_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public ELSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSE_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_CATALOG_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_CATALOG_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentCatalog) {
             listener.enterCurrentCatalog(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentCatalog) {
             listener.exitCurrentCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentCatalog) {
            return visitor.visitCurrentCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupingOperationContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GROUPING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GROUPING_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonPathInvocationContext extends antlr.ParserRuleContext {
    public _path?: String_Context;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public PASSING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PASSING_, 0);
    }
    public jsonArgument(): JsonArgumentContext[];
    public jsonArgument(i: number): JsonArgumentContext | null;
    public jsonArgument(i?: number): JsonArgumentContext[] | JsonArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonArgumentContext);
        }

        return this.getRuleContext(i, JsonArgumentContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonPathInvocation;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonPathInvocation) {
             listener.enterJsonPathInvocation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonPathInvocation) {
             listener.exitJsonPathInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonPathInvocation) {
            return visitor.visitJsonPathInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonValueExpression;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonValueExpression) {
             listener.enterJsonValueExpression(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonValueExpression) {
             listener.exitJsonValueExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValueExpression) {
            return visitor.visitJsonValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonRepresentationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.JSON_, 0)!;
    }
    public ENCODING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ENCODING_, 0);
    }
    public UTF8_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF8_, 0);
    }
    public UTF16_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF16_, 0);
    }
    public UTF32_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF32_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonRepresentation;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonRepresentation) {
             listener.enterJsonRepresentation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonRepresentation) {
             listener.exitJsonRepresentation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonRepresentation) {
            return visitor.visitJsonRepresentation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonArgument;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonArgument) {
             listener.enterJsonArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonArgument) {
             listener.exitJsonArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonArgument) {
            return visitor.visitJsonArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonExistsErrorBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUE_, 0);
    }
    public FALSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FALSE_, 0);
    }
    public UNKNOWN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNKNOWN_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonExistsErrorBehavior;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonExistsErrorBehavior) {
             listener.enterJsonExistsErrorBehavior(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonExistsErrorBehavior) {
             listener.exitJsonExistsErrorBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonExistsErrorBehavior) {
            return visitor.visitJsonExistsErrorBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonValueBehavior;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonValueBehavior) {
             listener.enterJsonValueBehavior(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonValueBehavior) {
             listener.exitJsonValueBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonValueBehavior) {
            return visitor.visitJsonValueBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryWrapperBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public CONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CONDITIONAL_, 0);
    }
    public UNCONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCONDITIONAL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonQueryWrapperBehavior;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonQueryWrapperBehavior) {
             listener.enterJsonQueryWrapperBehavior(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonQueryWrapperBehavior) {
             listener.exitJsonQueryWrapperBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryWrapperBehavior) {
            return visitor.visitJsonQueryWrapperBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public NULL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULL_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public OBJECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OBJECT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonQueryBehavior;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonQueryBehavior) {
             listener.enterJsonQueryBehavior(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonQueryBehavior) {
             listener.exitJsonQueryBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryBehavior) {
            return visitor.visitJsonQueryBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonObjectMemberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALUE_, 0);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KEY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEY_, 0);
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_jsonObjectMember;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterJsonObjectMember) {
             listener.enterJsonObjectMember(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitJsonObjectMember) {
             listener.exitJsonObjectMember(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitJsonObjectMember) {
            return visitor.visitJsonObjectMember(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcessingModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RUNNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RUNNING_, 0);
    }
    public FINAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FINAL_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_processingMode;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterProcessingMode) {
             listener.enterProcessingMode(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitProcessingMode) {
             listener.exitProcessingMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitProcessingMode) {
            return visitor.visitProcessingMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IGNORE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IGNORE_, 0);
    }
    public NULLS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULLS_, 0)!;
    }
    public RESPECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESPECT_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_nullTreatment;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class String_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_string_;
    }
    public override copyFrom(ctx: String_Context): void {
        super.copyFrom(ctx);
    }
}
export class UnicodeStringLiteralContext extends String_Context {
    public constructor(ctx: String_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNICODE_STRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNICODE_STRING_, 0)!;
    }
    public UESCAPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UESCAPE_, 0);
    }
    public STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.STRING_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnicodeStringLiteral) {
             listener.enterUnicodeStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnicodeStringLiteral) {
             listener.exitUnicodeStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnicodeStringLiteral) {
            return visitor.visitUnicodeStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BasicStringLiteralContext extends String_Context {
    public constructor(ctx: String_Context) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.STRING_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBasicStringLiteral) {
             listener.enterBasicStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBasicStringLiteral) {
             listener.exitBasicStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBasicStringLiteral) {
            return visitor.visitBasicStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneSpecifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_timeZoneSpecifier;
    }
    public override copyFrom(ctx: TimeZoneSpecifierContext): void {
        super.copyFrom(ctx);
    }
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTimeZoneInterval) {
             listener.enterTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTimeZoneInterval) {
             listener.exitTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneInterval) {
            return visitor.visitTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIME_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TIME_, 0)!;
    }
    public ZONE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ZONE_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTimeZoneString) {
             listener.enterTimeZoneString(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTimeZoneString) {
             listener.exitTimeZoneString(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EQ_, 0);
    }
    public NEQ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEQ_, 0);
    }
    public LT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LT_, 0);
    }
    public LTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LTE_, 0);
    }
    public GT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GT_, 0);
    }
    public GTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GTE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public SOME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SOME_, 0);
    }
    public ANY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANY_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_comparisonQuantifier;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterComparisonQuantifier) {
             listener.enterComparisonQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitComparisonQuantifier) {
             listener.exitComparisonQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonQuantifier) {
            return visitor.visitComparisonQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUE_, 0);
    }
    public FALSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FALSE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_booleanValue;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTERVAL_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public PLUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLUS_, 0);
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_interval;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.YEAR_, 0);
    }
    public MONTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MONTH_, 0);
    }
    public DAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DAY_, 0);
    }
    public HOUR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HOUR_, 0);
    }
    public MINUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUTE_, 0);
    }
    public SECOND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECOND_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_intervalField;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIntervalField) {
             listener.enterIntervalField(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIntervalField) {
             listener.exitIntervalField(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalField) {
            return visitor.visitIntervalField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFD_, 0);
    }
    public NFC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFC_, 0);
    }
    public NFKD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKD_, 0);
    }
    public NFKC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKC_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_normalForm;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNormalForm) {
             listener.enterNormalForm(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNormalForm) {
             listener.exitNormalForm(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_type;
    }
    public override copyFrom(ctx: TypeContext): void {
        super.copyFrom(ctx);
    }
}
export class RowTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROW_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowField(): RowFieldContext[];
    public rowField(i: number): RowFieldContext | null;
    public rowField(i?: number): RowFieldContext[] | RowFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFieldContext);
        }

        return this.getRuleContext(i, RowFieldContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRowType) {
             listener.enterRowType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRowType) {
             listener.exitRowType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowType) {
            return visitor.visitRowType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalTypeContext extends TypeContext {
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTERVAL_, 0)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIntervalType) {
             listener.enterIntervalType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIntervalType) {
             listener.exitIntervalType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LSQUARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LSQUARE_, 0);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public RSQUARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RSQUARE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterArrayType) {
             listener.enterArrayType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitArrayType) {
             listener.exitArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePrecisionTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOUBLE_, 0)!;
    }
    public PRECISION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PRECISION_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDoublePrecisionType) {
             listener.enterDoublePrecisionType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDoublePrecisionType) {
             listener.exitDoublePrecisionType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDoublePrecisionType) {
            return visitor.visitDoublePrecisionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ARRAY_, 0)!;
    }
    public LT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LT_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GT_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLegacyArrayType) {
             listener.enterLegacyArrayType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLegacyArrayType) {
             listener.exitLegacyArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLegacyArrayType) {
            return visitor.visitLegacyArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GenericTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public typeParameter(): TypeParameterContext[];
    public typeParameter(i: number): TypeParameterContext | null;
    public typeParameter(i?: number): TypeParameterContext[] | TypeParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }

        return this.getRuleContext(i, TypeParameterContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGenericType) {
             listener.enterGenericType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGenericType) {
             listener.exitGenericType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGenericType) {
            return visitor.visitGenericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateTimeTypeContext extends TypeContext {
    public _base_?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public TIME_(): antlr.TerminalNode[];
    public TIME_(i: number): antlr.TerminalNode | null;
    public TIME_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.TIME_);
    	} else {
    		return this.getToken(TrinoParser.TIME_, i);
    	}
    }
    public ZONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ZONE_, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public WITH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITH_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDateTimeType) {
             listener.enterDateTimeType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDateTimeType) {
             listener.exitDateTimeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDateTimeType) {
            return visitor.visitDateTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyMapTypeContext extends TypeContext {
    public _keyType?: TypeContext;
    public _valueType?: TypeContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAP_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MAP_, 0)!;
    }
    public LT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LT_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMA_, 0)!;
    }
    public GT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.GT_, 0)!;
    }
    public type_(): TypeContext[];
    public type_(i: number): TypeContext | null;
    public type_(i?: number): TypeContext[] | TypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeContext);
        }

        return this.getRuleContext(i, TypeContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLegacyMapType) {
             listener.enterLegacyMapType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLegacyMapType) {
             listener.exitLegacyMapType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLegacyMapType) {
            return visitor.visitLegacyMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowField;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRowField) {
             listener.enterRowField(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRowField) {
             listener.exitRowField(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRowField) {
            return visitor.visitRowField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_typeParameter;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTypeParameter) {
             listener.enterTypeParameter(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTypeParameter) {
             listener.exitTypeParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_whenClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FILTER_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public WHERE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHERE_, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_filter;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterFilter) {
             listener.enterFilter(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitFilter) {
             listener.exitFilter(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFilter) {
            return visitor.visitFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_mergeCase;
    }
    public override copyFrom(ctx: MergeCaseContext): void {
        super.copyFrom(ctx);
    }
}
export class MergeInsertContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public NOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NOT_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public INSERT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INSERT_, 0)!;
    }
    public VALUES_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VALUES_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode[];
    public LPAREN_(i: number): antlr.TerminalNode | null;
    public LPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LPAREN_);
    	} else {
    		return this.getToken(TrinoParser.LPAREN_, i);
    	}
    }
    public RPAREN_(): antlr.TerminalNode[];
    public RPAREN_(i: number): antlr.TerminalNode | null;
    public RPAREN_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.RPAREN_);
    	} else {
    		return this.getToken(TrinoParser.RPAREN_, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMergeInsert) {
             listener.enterMergeInsert(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMergeInsert) {
             listener.exitMergeInsert(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeUpdateContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public UPDATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UPDATE_, 0)!;
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public EQ_(): antlr.TerminalNode[];
    public EQ_(i: number): antlr.TerminalNode | null;
    public EQ_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.EQ_);
    	} else {
    		return this.getToken(TrinoParser.EQ_, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMergeUpdate) {
             listener.enterMergeUpdate(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMergeUpdate) {
             listener.exitMergeUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeDeleteContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public MATCHED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.MATCHED_, 0)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public DELETE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DELETE_, 0)!;
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterMergeDelete) {
             listener.enterMergeDelete(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitMergeDelete) {
             listener.exitMergeDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitMergeDelete) {
            return visitor.visitMergeDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverContext extends antlr.ParserRuleContext {
    public _windowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OVER_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_over;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterOver) {
             listener.enterOver(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitOver) {
             listener.exitOver(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOver) {
            return visitor.visitOver(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public LPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LPAREN_, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RPAREN_, 0);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_windowFrame;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start_?: FrameBoundContext;
    public _end_?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RANGE_, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public GROUPS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUPS_, 0);
    }
    public BETWEEN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BETWEEN_, 0);
    }
    public AND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AND_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_frameExtent;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterFrameExtent) {
             listener.enterFrameExtent(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitFrameExtent) {
             listener.exitFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_frameBound;
    }
    public override copyFrom(ctx: FrameBoundContext): void {
        super.copyFrom(ctx);
    }
}
export class BoundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBoundedFrame) {
             listener.enterBoundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBoundedFrame) {
             listener.exitBoundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBoundedFrame) {
            return visitor.visitBoundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnboundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNBOUNDED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNBOUNDED_, 0)!;
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnboundedFrame) {
             listener.enterUnboundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnboundedFrame) {
             listener.exitUnboundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnboundedFrame) {
            return visitor.visitUnboundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRowBoundContext extends FrameBoundContext {
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_, 0)!;
    }
    public ROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROW_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentRowBound) {
             listener.enterCurrentRowBound(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentRowBound) {
             listener.exitCurrentRowBound(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentRowBound) {
            return visitor.visitCurrentRowBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rowPattern;
    }
    public override copyFrom(ctx: RowPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class QuantifiedPrimaryContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public patternPrimary(): PatternPrimaryContext {
        return this.getRuleContext(0, PatternPrimaryContext)!;
    }
    public patternQuantifier(): PatternQuantifierContext | null {
        return this.getRuleContext(0, PatternQuantifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQuantifiedPrimary) {
             listener.enterQuantifiedPrimary(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQuantifiedPrimary) {
             listener.exitQuantifiedPrimary(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedPrimary) {
            return visitor.visitQuantifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternConcatenationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPatternConcatenation) {
             listener.enterPatternConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPatternConcatenation) {
             listener.exitPatternConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternConcatenation) {
            return visitor.visitPatternConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternAlternationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public VBAR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.VBAR_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPatternAlternation) {
             listener.enterPatternAlternation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPatternAlternation) {
             listener.exitPatternAlternation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternAlternation) {
            return visitor.visitPatternAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternPrimary;
    }
    public override copyFrom(ctx: PatternPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PatternPermutationContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERMUTE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PERMUTE_, 0)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPatternPermutation) {
             listener.enterPatternPermutation(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPatternPermutation) {
             listener.exitPatternPermutation(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternPermutation) {
            return visitor.visitPatternPermutation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOLLAR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOLLAR_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPartitionEndAnchor) {
             listener.enterPartitionEndAnchor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPartitionEndAnchor) {
             listener.exitPartitionEndAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionEndAnchor) {
            return visitor.visitPartitionEndAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternVariableContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPatternVariable) {
             listener.enterPatternVariable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPatternVariable) {
             listener.exitPatternVariable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExcludedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LCURLYHYPHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LCURLYHYPHEN_, 0)!;
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public RCURLYHYPHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RCURLYHYPHEN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExcludedPattern) {
             listener.enterExcludedPattern(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExcludedPattern) {
             listener.exitExcludedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExcludedPattern) {
            return visitor.visitExcludedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CARET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CARET_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPartitionStartAnchor) {
             listener.enterPartitionStartAnchor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPartitionStartAnchor) {
             listener.exitPartitionStartAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionStartAnchor) {
            return visitor.visitPartitionStartAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EmptyPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterEmptyPattern) {
             listener.enterEmptyPattern(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitEmptyPattern) {
             listener.exitEmptyPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitEmptyPattern) {
            return visitor.visitEmptyPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterGroupedPattern) {
             listener.enterGroupedPattern(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitGroupedPattern) {
             listener.exitGroupedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitGroupedPattern) {
            return visitor.visitGroupedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_patternQuantifier;
    }
    public override copyFrom(ctx: PatternQuantifierContext): void {
        super.copyFrom(ctx);
    }
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ASTERISK_, 0)!;
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterZeroOrMoreQuantifier) {
             listener.enterZeroOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitZeroOrMoreQuantifier) {
             listener.exitZeroOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitZeroOrMoreQuantifier) {
            return visitor.visitZeroOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.PLUS_, 0)!;
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterOneOrMoreQuantifier) {
             listener.enterOneOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitOneOrMoreQuantifier) {
             listener.exitOneOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitOneOrMoreQuantifier) {
            return visitor.visitOneOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK_(): antlr.TerminalNode[];
    public QUESTION_MARK_(i: number): antlr.TerminalNode | null;
    public QUESTION_MARK_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.QUESTION_MARK_);
    	} else {
    		return this.getToken(TrinoParser.QUESTION_MARK_, i);
    	}
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterZeroOrOneQuantifier) {
             listener.enterZeroOrOneQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitZeroOrOneQuantifier) {
             listener.exitZeroOrOneQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitZeroOrOneQuantifier) {
            return visitor.visitZeroOrOneQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RangeQuantifierContext extends PatternQuantifierContext {
    public _exactly?: Token | null;
    public _reluctant?: Token | null;
    public _atLeast?: Token | null;
    public _atMost?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LCURLY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LCURLY_, 0)!;
    }
    public RCURLY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RCURLY_, 0)!;
    }
    public INTEGER_VALUE_(): antlr.TerminalNode[];
    public INTEGER_VALUE_(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.INTEGER_VALUE_);
    	} else {
    		return this.getToken(TrinoParser.INTEGER_VALUE_, i);
    	}
    }
    public QUESTION_MARK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUESTION_MARK_, 0);
    }
    public COMMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMA_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRangeQuantifier) {
             listener.enterRangeQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRangeQuantifier) {
             listener.exitRangeQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRangeQuantifier) {
            return visitor.visitRangeQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_updateAssignment;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUpdateAssignment) {
             listener.enterUpdateAssignment(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUpdateAssignment) {
             listener.exitUpdateAssignment(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_explainOption;
    }
    public override copyFrom(ctx: ExplainOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainFormatContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FORMAT_, 0)!;
    }
    public TEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_, 0);
    }
    public GRAPHVIZ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRAPHVIZ_, 0);
    }
    public JSON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JSON_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExplainFormat) {
             listener.enterExplainFormat(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExplainFormat) {
             listener.exitExplainFormat(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainFormat) {
            return visitor.visitExplainFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainTypeContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TYPE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.TYPE_, 0)!;
    }
    public LOGICAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOGICAL_, 0);
    }
    public DISTRIBUTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTRIBUTED_, 0);
    }
    public VALIDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALIDATE_, 0);
    }
    public IO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IO_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterExplainType) {
             listener.enterExplainType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitExplainType) {
             listener.exitExplainType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitExplainType) {
            return visitor.visitExplainType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_transactionMode;
    }
    public override copyFrom(ctx: TransactionModeContext): void {
        super.copyFrom(ctx);
    }
}
export class TransactionAccessModeContext extends TransactionModeContext {
    public _accessMode?: Token | null;
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public WRITE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRITE_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsolationLevelContext extends TransactionModeContext {
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ISOLATION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ISOLATION_, 0)!;
    }
    public LEVEL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LEVEL_, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_levelOfIsolation;
    }
    public override copyFrom(ctx: LevelOfIsolationContext): void {
        super.copyFrom(ctx);
    }
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public UNCOMMITTED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNCOMMITTED_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterReadUncommitted) {
             listener.enterReadUncommitted(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitReadUncommitted) {
             listener.exitReadUncommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReadUncommitted) {
            return visitor.visitReadUncommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerializableContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SERIALIZABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SERIALIZABLE_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSerializable) {
             listener.enterSerializable(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSerializable) {
             listener.exitSerializable(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSerializable) {
            return visitor.visitSerializable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReadCommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public COMMITTED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMITTED_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterReadCommitted) {
             listener.enterReadCommitted(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitReadCommitted) {
             listener.exitReadCommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReadCommitted) {
            return visitor.visitReadCommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatableReadContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEATABLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.REPEATABLE_, 0)!;
    }
    public READ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.READ_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRepeatableRead) {
             listener.enterRepeatableRead(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRepeatableRead) {
             listener.exitRepeatableRead(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRepeatableRead) {
            return visitor.visitRepeatableRead(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_callArgument;
    }
    public override copyFrom(ctx: CallArgumentContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionalArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPositionalArgument) {
             listener.enterPositionalArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPositionalArgument) {
             listener.exitPositionalArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPositionalArgument) {
            return visitor.visitPositionalArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamedArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RDOUBLEARROW_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RDOUBLEARROW_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNamedArgument) {
             listener.enterNamedArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNamedArgument) {
             listener.exitNamedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNamedArgument) {
            return visitor.visitNamedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_pathElement;
    }
    public override copyFrom(ctx: PathElementContext): void {
        super.copyFrom(ctx);
    }
}
export class QualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOT_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQualifiedArgument) {
             listener.enterQualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQualifiedArgument) {
             listener.exitQualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedArgument) {
            return visitor.visitQualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnqualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnqualifiedArgument) {
             listener.enterUnqualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnqualifiedArgument) {
             listener.exitUnqualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnqualifiedArgument) {
            return visitor.visitUnqualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_pathSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPathSpecification) {
             listener.enterPathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPathSpecification) {
             listener.exitPathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPathSpecification) {
            return visitor.visitPathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FUNCTION_, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public returnsClause(): ReturnsClauseContext {
        return this.getRuleContext(0, ReturnsClauseContext)!;
    }
    public controlStatement(): ControlStatementContext {
        return this.getRuleContext(0, ControlStatementContext)!;
    }
    public routineCharacteristic(): RoutineCharacteristicContext[];
    public routineCharacteristic(i: number): RoutineCharacteristicContext | null;
    public routineCharacteristic(i?: number): RoutineCharacteristicContext[] | RoutineCharacteristicContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCharacteristicContext);
        }

        return this.getRuleContext(i, RoutineCharacteristicContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_functionSpecification;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterFunctionSpecification) {
             listener.enterFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitFunctionSpecification) {
             listener.exitFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionSpecification) {
            return visitor.visitFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LPAREN_, 0)!;
    }
    public RPAREN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RPAREN_, 0)!;
    }
    public parameterDeclaration(): ParameterDeclarationContext[];
    public parameterDeclaration(i: number): ParameterDeclarationContext | null;
    public parameterDeclaration(i?: number): ParameterDeclarationContext[] | ParameterDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ParameterDeclarationContext);
        }

        return this.getRuleContext(i, ParameterDeclarationContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_functionDeclaration;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterFunctionDeclaration) {
             listener.enterFunctionDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitFunctionDeclaration) {
             listener.exitFunctionDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionDeclaration) {
            return visitor.visitFunctionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_parameterDeclaration;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterParameterDeclaration) {
             listener.enterParameterDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitParameterDeclaration) {
             listener.exitParameterDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitParameterDeclaration) {
            return visitor.visitParameterDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURNS_, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_returnsClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterReturnsClause) {
             listener.enterReturnsClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitReturnsClause) {
             listener.exitReturnsClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnsClause) {
            return visitor.visitReturnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCharacteristicContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_routineCharacteristic;
    }
    public override copyFrom(ctx: RoutineCharacteristicContext): void {
        super.copyFrom(ctx);
    }
}
export class ReturnsNullOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURNS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURNS_, 0)!;
    }
    public NULL_(): antlr.TerminalNode[];
    public NULL_(i: number): antlr.TerminalNode | null;
    public NULL_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.NULL_);
    	} else {
    		return this.getToken(TrinoParser.NULL_, i);
    	}
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterReturnsNullOnNullInputCharacteristic) {
             listener.enterReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitReturnsNullOnNullInputCharacteristic) {
             listener.exitReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnsNullOnNullInputCharacteristic) {
            return visitor.visitReturnsNullOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SecurityCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SECURITY_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SECURITY_, 0)!;
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSecurityCharacteristic) {
             listener.enterSecurityCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSecurityCharacteristic) {
             listener.exitSecurityCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSecurityCharacteristic) {
            return visitor.visitSecurityCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CalledOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CALLED_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CALLED_, 0)!;
    }
    public ON_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ON_, 0)!;
    }
    public NULL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.NULL_, 0)!;
    }
    public INPUT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INPUT_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCalledOnNullInputCharacteristic) {
             listener.enterCalledOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCalledOnNullInputCharacteristic) {
             listener.exitCalledOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCalledOnNullInputCharacteristic) {
            return visitor.visitCalledOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.COMMENT_, 0)!;
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCommentCharacteristic) {
             listener.enterCommentCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCommentCharacteristic) {
             listener.exitCommentCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCommentCharacteristic) {
            return visitor.visitCommentCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LanguageCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LANGUAGE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LANGUAGE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLanguageCharacteristic) {
             listener.enterLanguageCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLanguageCharacteristic) {
             listener.exitLanguageCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLanguageCharacteristic) {
            return visitor.visitLanguageCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeterministicCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETERMINISTIC_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DETERMINISTIC_, 0)!;
    }
    public NOT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NOT_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDeterministicCharacteristic) {
             listener.enterDeterministicCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDeterministicCharacteristic) {
             listener.exitDeterministicCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDeterministicCharacteristic) {
            return visitor.visitDeterministicCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ControlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_controlStatement;
    }
    public override copyFrom(ctx: ControlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class WhileStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public WHILE_(): antlr.TerminalNode[];
    public WHILE_(i: number): antlr.TerminalNode | null;
    public WHILE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.WHILE_);
    	} else {
    		return this.getToken(TrinoParser.WHILE_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public DO_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DO_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterWhileStatement) {
             listener.enterWhileStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitWhileStatement) {
             listener.exitWhileStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode[];
    public CASE_(i: number): antlr.TerminalNode | null;
    public CASE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.CASE_);
    	} else {
    		return this.getToken(TrinoParser.CASE_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSimpleCaseStatement) {
             listener.enterSimpleCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSimpleCaseStatement) {
             listener.exitSimpleCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleCaseStatement) {
            return visitor.visitSimpleCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPEAT_(): antlr.TerminalNode[];
    public REPEAT_(i: number): antlr.TerminalNode | null;
    public REPEAT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.REPEAT_);
    	} else {
    		return this.getToken(TrinoParser.REPEAT_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public UNTIL_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.UNTIL_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRepeatStatement) {
             listener.enterRepeatStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRepeatStatement) {
             listener.exitRepeatStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRepeatStatement) {
            return visitor.visitRepeatStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignmentStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SET_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.SET_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.EQ_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterAssignmentStatement) {
             listener.enterAssignmentStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitAssignmentStatement) {
             listener.exitAssignmentStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentStatement) {
            return visitor.visitAssignmentStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeaveStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEAVE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.LEAVE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLeaveStatement) {
             listener.enterLeaveStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLeaveStatement) {
             listener.exitLeaveStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CompoundStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BEGIN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BEGIN_, 0)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public variableDeclaration(): VariableDeclarationContext[];
    public variableDeclaration(i: number): VariableDeclarationContext | null;
    public variableDeclaration(i?: number): VariableDeclarationContext[] | VariableDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclarationContext);
        }

        return this.getRuleContext(i, VariableDeclarationContext);
    }
    public SEMICOLON_(): antlr.TerminalNode[];
    public SEMICOLON_(i: number): antlr.TerminalNode | null;
    public SEMICOLON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.SEMICOLON_);
    	} else {
    		return this.getToken(TrinoParser.SEMICOLON_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext | null {
        return this.getRuleContext(0, SqlStatementListContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCompoundStatement) {
             listener.enterCompoundStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCompoundStatement) {
             listener.exitCompoundStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IterateStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ITERATE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ITERATE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIterateStatement) {
             listener.enterIterateStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIterateStatement) {
             listener.exitIterateStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoopStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOOP_(): antlr.TerminalNode[];
    public LOOP_(i: number): antlr.TerminalNode | null;
    public LOOP_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.LOOP_);
    	} else {
    		return this.getToken(TrinoParser.LOOP_, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public COLON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLON_, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterLoopStatement) {
             listener.enterLoopStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitLoopStatement) {
             listener.exitLoopStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitLoopStatement) {
            return visitor.visitLoopStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReturnStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RETURN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.RETURN_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IF_(): antlr.TerminalNode[];
    public IF_(i: number): antlr.TerminalNode | null;
    public IF_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.IF_);
    	} else {
    		return this.getToken(TrinoParser.IF_, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public elseIfClause(): ElseIfClauseContext[];
    public elseIfClause(i: number): ElseIfClauseContext | null;
    public elseIfClause(i?: number): ElseIfClauseContext[] | ElseIfClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElseIfClauseContext);
        }

        return this.getRuleContext(i, ElseIfClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIfStatement) {
             listener.enterIfStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIfStatement) {
             listener.exitIfStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE_(): antlr.TerminalNode[];
    public CASE_(i: number): antlr.TerminalNode | null;
    public CASE_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.CASE_);
    	} else {
    		return this.getToken(TrinoParser.CASE_, i);
    	}
    }
    public END_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.END_, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSearchedCaseStatement) {
             listener.enterSearchedCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSearchedCaseStatement) {
             listener.exitSearchedCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSearchedCaseStatement) {
            return visitor.visitSearchedCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.WHEN_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_caseStatementWhenClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCaseStatementWhenClause) {
             listener.enterCaseStatementWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCaseStatementWhenClause) {
             listener.exitCaseStatementWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCaseStatementWhenClause) {
            return visitor.visitCaseStatementWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseIfClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSEIF_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ELSEIF_, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public THEN_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.THEN_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_elseIfClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterElseIfClause) {
             listener.enterElseIfClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitElseIfClause) {
             listener.exitElseIfClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitElseIfClause) {
            return visitor.visitElseIfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ELSE_, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_elseClause;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterElseClause) {
             listener.enterElseClause(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitElseClause) {
             listener.exitElseClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DECLARE_, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_variableDeclaration;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterVariableDeclaration) {
             listener.enterVariableDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitVariableDeclaration) {
             listener.exitVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public controlStatement(): ControlStatementContext[];
    public controlStatement(i: number): ControlStatementContext | null;
    public controlStatement(i?: number): ControlStatementContext[] | ControlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ControlStatementContext);
        }

        return this.getRuleContext(i, ControlStatementContext);
    }
    public SEMICOLON_(): antlr.TerminalNode[];
    public SEMICOLON_(i: number): antlr.TerminalNode | null;
    public SEMICOLON_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.SEMICOLON_);
    	} else {
    		return this.getToken(TrinoParser.SEMICOLON_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_sqlStatementList;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSqlStatementList) {
             listener.enterSqlStatementList(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSqlStatementList) {
             listener.exitSqlStatementList(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSqlStatementList) {
            return visitor.visitSqlStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CREATE_, 0);
    }
    public SELECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SELECT_, 0);
    }
    public DELETE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DELETE_, 0);
    }
    public INSERT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INSERT_, 0);
    }
    public UPDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UPDATE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_privilege;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT_(): antlr.TerminalNode[];
    public DOT_(i: number): antlr.TerminalNode | null;
    public DOT_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.DOT_);
    	} else {
    		return this.getToken(TrinoParser.DOT_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_qualifiedName;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPeriodContext extends antlr.ParserRuleContext {
    public _end?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.FOR_, 0)!;
    }
    public rangeType(): RangeTypeContext {
        return this.getRuleContext(0, RangeTypeContext)!;
    }
    public AS_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.AS_, 0)!;
    }
    public OF_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.OF_, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_queryPeriod;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQueryPeriod) {
             listener.enterQueryPeriod(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQueryPeriod) {
             listener.exitQueryPeriod(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQueryPeriod) {
            return visitor.visitQueryPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public VERSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERSION_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_rangeType;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRangeType) {
             listener.enterRangeType(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRangeType) {
             listener.exitRangeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRangeType) {
            return visitor.visitRangeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_grantor;
    }
    public override copyFrom(ctx: GrantorContext): void {
        super.copyFrom(ctx);
    }
}
export class CurrentUserGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_USER_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentUserGrantor) {
             listener.enterCurrentUserGrantor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentUserGrantor) {
             listener.exitCurrentUserGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserGrantor) {
            return visitor.visitCurrentUserGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecifiedPrincipalContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterSpecifiedPrincipal) {
             listener.enterSpecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitSpecifiedPrincipal) {
             listener.exitSpecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPrincipal) {
            return visitor.visitSpecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRoleGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CURRENT_ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.CURRENT_ROLE_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterCurrentRoleGrantor) {
             listener.enterCurrentRoleGrantor(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitCurrentRoleGrantor) {
             listener.exitCurrentRoleGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitCurrentRoleGrantor) {
            return visitor.visitCurrentRoleGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_principal;
    }
    public override copyFrom(ctx: PrincipalContext): void {
        super.copyFrom(ctx);
    }
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnspecifiedPrincipal) {
             listener.enterUnspecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnspecifiedPrincipal) {
             listener.exitUnspecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnspecifiedPrincipal) {
            return visitor.visitUnspecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public USER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.USER_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUserPrincipal) {
             listener.enterUserPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUserPrincipal) {
             listener.exitUserPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUserPrincipal) {
            return visitor.visitUserPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RolePrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ROLE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.ROLE_, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRolePrincipal) {
             listener.enterRolePrincipal(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRolePrincipal) {
             listener.exitRolePrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRolePrincipal) {
            return visitor.visitRolePrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA_(): antlr.TerminalNode[];
    public COMMA_(i: number): antlr.TerminalNode | null;
    public COMMA_(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoParser.COMMA_);
    	} else {
    		return this.getToken(TrinoParser.COMMA_, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_roles;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterRoles) {
             listener.enterRoles(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitRoles) {
             listener.exitRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitRoles) {
            return visitor.visitRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class BackQuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKQUOTED_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.BACKQUOTED_IDENTIFIER_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUOTED_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.QUOTED_IDENTIFIER_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DigitIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIGIT_IDENTIFIER_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DIGIT_IDENTIFIER_, 0)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDigitIdentifier) {
             listener.enterDigitIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDigitIdentifier) {
             listener.exitDigitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDigitIdentifier) {
            return visitor.visitDigitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IDENTIFIER_, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECIMAL_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DECIMAL_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoubleLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.DOUBLE_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterDoubleLiteral) {
             listener.enterDoubleLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitDoubleLiteral) {
             listener.exitDoubleLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE_(): antlr.TerminalNode {
        return this.getToken(TrinoParser.INTEGER_VALUE_, 0)!;
    }
    public MINUS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUS_, 0);
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIntegerLiteral) {
             listener.enterIntegerLiteral(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIntegerLiteral) {
             listener.exitIntegerLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthorizationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_authorizationUser;
    }
    public override copyFrom(ctx: AuthorizationUserContext): void {
        super.copyFrom(ctx);
    }
}
export class StringUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string_(): String_Context {
        return this.getRuleContext(0, String_Context)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterStringUser) {
             listener.enterStringUser(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitStringUser) {
             listener.exitStringUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitStringUser) {
            return visitor.visitStringUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterIdentifierUser) {
             listener.enterIdentifierUser(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitIdentifierUser) {
             listener.exitIdentifierUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierUser) {
            return visitor.visitIdentifierUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABSENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ABSENT_, 0);
    }
    public ADD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADD_, 0);
    }
    public ADMIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ADMIN_, 0);
    }
    public AFTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AFTER_, 0);
    }
    public ALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ALL_, 0);
    }
    public ANALYZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANALYZE_, 0);
    }
    public ANY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ANY_, 0);
    }
    public ARRAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ARRAY_, 0);
    }
    public ASC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ASC_, 0);
    }
    public AT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AT_, 0);
    }
    public AUTHORIZATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.AUTHORIZATION_, 0);
    }
    public BEGIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BEGIN_, 0);
    }
    public BERNOULLI_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BERNOULLI_, 0);
    }
    public BOTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.BOTH_, 0);
    }
    public CALL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CALL_, 0);
    }
    public CALLED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CALLED_, 0);
    }
    public CASCADE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CASCADE_, 0);
    }
    public CATALOG_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CATALOG_, 0);
    }
    public CATALOGS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CATALOGS_, 0);
    }
    public COLUMN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMN_, 0);
    }
    public COLUMNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COLUMNS_, 0);
    }
    public COMMENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMENT_, 0);
    }
    public COMMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMIT_, 0);
    }
    public COMMITTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COMMITTED_, 0);
    }
    public CONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CONDITIONAL_, 0);
    }
    public COPARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COPARTITION_, 0);
    }
    public COUNT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.COUNT_, 0);
    }
    public CURRENT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.CURRENT_, 0);
    }
    public DATA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATA_, 0);
    }
    public DATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DATE_, 0);
    }
    public DAY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DAY_, 0);
    }
    public DECLARE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DECLARE_, 0);
    }
    public DEFAULT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFAULT_, 0);
    }
    public DEFINE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINE_, 0);
    }
    public DEFINER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DEFINER_, 0);
    }
    public DENY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DENY_, 0);
    }
    public DESC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESC_, 0);
    }
    public DESCRIPTOR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DESCRIPTOR_, 0);
    }
    public DETERMINISTIC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DETERMINISTIC_, 0);
    }
    public DISTRIBUTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DISTRIBUTED_, 0);
    }
    public DO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DO_, 0);
    }
    public DOUBLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.DOUBLE_, 0);
    }
    public ELSEIF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ELSEIF_, 0);
    }
    public EMPTY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EMPTY_, 0);
    }
    public ENCODING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ENCODING_, 0);
    }
    public ERROR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ERROR_, 0);
    }
    public EXCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXCLUDING_, 0);
    }
    public EXPLAIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.EXPLAIN_, 0);
    }
    public FETCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FETCH_, 0);
    }
    public FILTER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FILTER_, 0);
    }
    public FINAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FINAL_, 0);
    }
    public FIRST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FIRST_, 0);
    }
    public FOLLOWING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FOLLOWING_, 0);
    }
    public FORMAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FORMAT_, 0);
    }
    public FUNCTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FUNCTION_, 0);
    }
    public FUNCTIONS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.FUNCTIONS_, 0);
    }
    public GRACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRACE_, 0);
    }
    public GRANT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANT_, 0);
    }
    public GRANTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTED_, 0);
    }
    public GRANTS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRANTS_, 0);
    }
    public GRAPHVIZ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GRAPHVIZ_, 0);
    }
    public GROUPS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.GROUPS_, 0);
    }
    public HOUR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.HOUR_, 0);
    }
    public IF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IF_, 0);
    }
    public IGNORE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IGNORE_, 0);
    }
    public IMMEDIATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IMMEDIATE_, 0);
    }
    public INCLUDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INCLUDING_, 0);
    }
    public INITIAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INITIAL_, 0);
    }
    public INPUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INPUT_, 0);
    }
    public INTERVAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INTERVAL_, 0);
    }
    public INVOKER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.INVOKER_, 0);
    }
    public IO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.IO_, 0);
    }
    public ITERATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ITERATE_, 0);
    }
    public ISOLATION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ISOLATION_, 0);
    }
    public JSON_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.JSON_, 0);
    }
    public KEEP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEEP_, 0);
    }
    public KEY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEY_, 0);
    }
    public KEYS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.KEYS_, 0);
    }
    public LANGUAGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LANGUAGE_, 0);
    }
    public LAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LAST_, 0);
    }
    public LATERAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LATERAL_, 0);
    }
    public LEADING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEADING_, 0);
    }
    public LEAVE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEAVE_, 0);
    }
    public LEVEL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LEVEL_, 0);
    }
    public LIMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LIMIT_, 0);
    }
    public LOCAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOCAL_, 0);
    }
    public LOGICAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOGICAL_, 0);
    }
    public LOOP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.LOOP_, 0);
    }
    public MAP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MAP_, 0);
    }
    public MATCH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_, 0);
    }
    public MATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHED_, 0);
    }
    public MATCHES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCHES_, 0);
    }
    public MATCH_RECOGNIZE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATCH_RECOGNIZE_, 0);
    }
    public MATERIALIZED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MATERIALIZED_, 0);
    }
    public MEASURES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MEASURES_, 0);
    }
    public MERGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MERGE_, 0);
    }
    public MINUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MINUTE_, 0);
    }
    public MONTH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.MONTH_, 0);
    }
    public NESTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NESTED_, 0);
    }
    public NEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NEXT_, 0);
    }
    public NFC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFC_, 0);
    }
    public NFD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFD_, 0);
    }
    public NFKC_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKC_, 0);
    }
    public NFKD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NFKD_, 0);
    }
    public NO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NO_, 0);
    }
    public NONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NONE_, 0);
    }
    public NULLIF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLIF_, 0);
    }
    public NULLS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.NULLS_, 0);
    }
    public OBJECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OBJECT_, 0);
    }
    public OF_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OF_, 0);
    }
    public OFFSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OFFSET_, 0);
    }
    public OMIT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OMIT_, 0);
    }
    public ONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONE_, 0);
    }
    public ONLY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ONLY_, 0);
    }
    public OPTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OPTION_, 0);
    }
    public ORDINALITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ORDINALITY_, 0);
    }
    public OUTPUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OUTPUT_, 0);
    }
    public OVER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVER_, 0);
    }
    public OVERFLOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.OVERFLOW_, 0);
    }
    public PARTITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITION_, 0);
    }
    public PARTITIONS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PARTITIONS_, 0);
    }
    public PASSING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PASSING_, 0);
    }
    public PAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PAST_, 0);
    }
    public PATH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATH_, 0);
    }
    public PATTERN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PATTERN_, 0);
    }
    public PER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PER_, 0);
    }
    public PERIOD_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERIOD_, 0);
    }
    public PERMUTE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PERMUTE_, 0);
    }
    public PLAN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PLAN_, 0);
    }
    public POSITION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.POSITION_, 0);
    }
    public PRECEDING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECEDING_, 0);
    }
    public PRECISION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRECISION_, 0);
    }
    public PRIVILEGES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRIVILEGES_, 0);
    }
    public PROPERTIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PROPERTIES_, 0);
    }
    public PRUNE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.PRUNE_, 0);
    }
    public QUOTES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.QUOTES_, 0);
    }
    public RANGE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RANGE_, 0);
    }
    public READ_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.READ_, 0);
    }
    public REFRESH_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REFRESH_, 0);
    }
    public RENAME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RENAME_, 0);
    }
    public REPEAT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPEAT_, 0);
    }
    public REPEATABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPEATABLE_, 0);
    }
    public REPLACE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REPLACE_, 0);
    }
    public RESET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESET_, 0);
    }
    public RESPECT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESPECT_, 0);
    }
    public RESTRICT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RESTRICT_, 0);
    }
    public RETURN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURN_, 0);
    }
    public RETURNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNING_, 0);
    }
    public RETURNS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RETURNS_, 0);
    }
    public REVOKE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.REVOKE_, 0);
    }
    public ROLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLE_, 0);
    }
    public ROLES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLES_, 0);
    }
    public ROLLBACK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROLLBACK_, 0);
    }
    public ROW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROW_, 0);
    }
    public ROWS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ROWS_, 0);
    }
    public RUNNING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.RUNNING_, 0);
    }
    public SCALAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCALAR_, 0);
    }
    public SCHEMA_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMA_, 0);
    }
    public SCHEMAS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SCHEMAS_, 0);
    }
    public SECOND_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECOND_, 0);
    }
    public SECURITY_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SECURITY_, 0);
    }
    public SEEK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SEEK_, 0);
    }
    public SERIALIZABLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SERIALIZABLE_, 0);
    }
    public SESSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SESSION_, 0);
    }
    public SET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SET_, 0);
    }
    public SETS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SETS_, 0);
    }
    public SHOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SHOW_, 0);
    }
    public SOME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SOME_, 0);
    }
    public START_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.START_, 0);
    }
    public STATS_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.STATS_, 0);
    }
    public SUBSET_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSET_, 0);
    }
    public SUBSTRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SUBSTRING_, 0);
    }
    public SYSTEM_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.SYSTEM_, 0);
    }
    public TABLES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLES_, 0);
    }
    public TABLESAMPLE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TABLESAMPLE_, 0);
    }
    public TEXT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_, 0);
    }
    public TEXT_STRING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TEXT_STRING_, 0);
    }
    public TIES_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIES_, 0);
    }
    public TIME_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIME_, 0);
    }
    public TIMESTAMP_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TIMESTAMP_, 0);
    }
    public TO_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TO_, 0);
    }
    public TRAILING_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRAILING_, 0);
    }
    public TRANSACTION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRANSACTION_, 0);
    }
    public TRUNCATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRUNCATE_, 0);
    }
    public TRY_CAST_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TRY_CAST_, 0);
    }
    public TYPE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.TYPE_, 0);
    }
    public UNBOUNDED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNBOUNDED_, 0);
    }
    public UNCOMMITTED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCOMMITTED_, 0);
    }
    public UNCONDITIONAL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNCONDITIONAL_, 0);
    }
    public UNIQUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNIQUE_, 0);
    }
    public UNKNOWN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNKNOWN_, 0);
    }
    public UNMATCHED_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNMATCHED_, 0);
    }
    public UNTIL_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UNTIL_, 0);
    }
    public UPDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UPDATE_, 0);
    }
    public USE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USE_, 0);
    }
    public USER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.USER_, 0);
    }
    public UTF16_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF16_, 0);
    }
    public UTF32_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF32_, 0);
    }
    public UTF8_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.UTF8_, 0);
    }
    public VALIDATE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALIDATE_, 0);
    }
    public VALUE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VALUE_, 0);
    }
    public VERBOSE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERBOSE_, 0);
    }
    public VERSION_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VERSION_, 0);
    }
    public VIEW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.VIEW_, 0);
    }
    public WHILE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WHILE_, 0);
    }
    public WINDOW_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WINDOW_, 0);
    }
    public WITHIN_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHIN_, 0);
    }
    public WITHOUT_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WITHOUT_, 0);
    }
    public WORK_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WORK_, 0);
    }
    public WRAPPER_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRAPPER_, 0);
    }
    public WRITE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.WRITE_, 0);
    }
    public YEAR_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.YEAR_, 0);
    }
    public ZONE_(): antlr.TerminalNode | null {
        return this.getToken(TrinoParser.ZONE_, 0);
    }
    public override get ruleIndex(): number {
        return TrinoParser.RULE_nonReserved;
    }
    public override enterRule(listener: TrinoParserListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: TrinoParserListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: TrinoParserVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
