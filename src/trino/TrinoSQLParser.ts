// Generated from ./TrinoSQL.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { TrinoSQLListener } from "./TrinoSQLListener";
import { TrinoSQLVisitor } from "./TrinoSQLVisitor";


export class TrinoSQLParser extends Parser {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly ABSENT = 18;
	public static readonly ADD = 19;
	public static readonly ADMIN = 20;
	public static readonly AFTER = 21;
	public static readonly ALL = 22;
	public static readonly ALTER = 23;
	public static readonly ANALYZE = 24;
	public static readonly AND = 25;
	public static readonly ANY = 26;
	public static readonly ARRAY = 27;
	public static readonly AS = 28;
	public static readonly ASC = 29;
	public static readonly AT = 30;
	public static readonly AUTHORIZATION = 31;
	public static readonly BEGIN = 32;
	public static readonly BERNOULLI = 33;
	public static readonly BETWEEN = 34;
	public static readonly BOTH = 35;
	public static readonly BY = 36;
	public static readonly CALL = 37;
	public static readonly CALLED = 38;
	public static readonly CASCADE = 39;
	public static readonly CASE = 40;
	public static readonly CAST = 41;
	public static readonly CATALOG = 42;
	public static readonly CATALOGS = 43;
	public static readonly COLUMN = 44;
	public static readonly COLUMNS = 45;
	public static readonly COMMENT = 46;
	public static readonly COMMIT = 47;
	public static readonly COMMITTED = 48;
	public static readonly CONDITIONAL = 49;
	public static readonly CONSTRAINT = 50;
	public static readonly COUNT = 51;
	public static readonly COPARTITION = 52;
	public static readonly CREATE = 53;
	public static readonly CROSS = 54;
	public static readonly CUBE = 55;
	public static readonly CURRENT = 56;
	public static readonly CURRENT_CATALOG = 57;
	public static readonly CURRENT_DATE = 58;
	public static readonly CURRENT_PATH = 59;
	public static readonly CURRENT_ROLE = 60;
	public static readonly CURRENT_SCHEMA = 61;
	public static readonly CURRENT_TIME = 62;
	public static readonly CURRENT_TIMESTAMP = 63;
	public static readonly CURRENT_USER = 64;
	public static readonly DATA = 65;
	public static readonly DATE = 66;
	public static readonly DAY = 67;
	public static readonly DEALLOCATE = 68;
	public static readonly DECLARE = 69;
	public static readonly DEFAULT = 70;
	public static readonly DEFINE = 71;
	public static readonly DEFINER = 72;
	public static readonly DELETE = 73;
	public static readonly DENY = 74;
	public static readonly DESC = 75;
	public static readonly DESCRIBE = 76;
	public static readonly DESCRIPTOR = 77;
	public static readonly DETERMINISTIC = 78;
	public static readonly DISTINCT = 79;
	public static readonly DISTRIBUTED = 80;
	public static readonly DO = 81;
	public static readonly DOUBLE = 82;
	public static readonly DROP = 83;
	public static readonly ELSE = 84;
	public static readonly EMPTY = 85;
	public static readonly ELSEIF = 86;
	public static readonly ENCODING = 87;
	public static readonly END = 88;
	public static readonly ERROR = 89;
	public static readonly ESCAPE = 90;
	public static readonly EXCEPT = 91;
	public static readonly EXCLUDING = 92;
	public static readonly EXECUTE = 93;
	public static readonly EXISTS = 94;
	public static readonly EXPLAIN = 95;
	public static readonly EXTRACT = 96;
	public static readonly FALSE = 97;
	public static readonly FETCH = 98;
	public static readonly FILTER = 99;
	public static readonly FINAL = 100;
	public static readonly FIRST = 101;
	public static readonly FOLLOWING = 102;
	public static readonly FOR = 103;
	public static readonly FORMAT = 104;
	public static readonly FROM = 105;
	public static readonly FULL = 106;
	public static readonly FUNCTION = 107;
	public static readonly FUNCTIONS = 108;
	public static readonly GRACE = 109;
	public static readonly GRANT = 110;
	public static readonly GRANTED = 111;
	public static readonly GRANTS = 112;
	public static readonly GRAPHVIZ = 113;
	public static readonly GROUP = 114;
	public static readonly GROUPING = 115;
	public static readonly GROUPS = 116;
	public static readonly HAVING = 117;
	public static readonly HOUR = 118;
	public static readonly IF = 119;
	public static readonly IGNORE = 120;
	public static readonly IMMEDIATE = 121;
	public static readonly IN = 122;
	public static readonly INCLUDING = 123;
	public static readonly INITIAL = 124;
	public static readonly INNER = 125;
	public static readonly INPUT = 126;
	public static readonly INSERT = 127;
	public static readonly INTERSECT = 128;
	public static readonly INTERVAL = 129;
	public static readonly INTO = 130;
	public static readonly INVOKER = 131;
	public static readonly IO = 132;
	public static readonly IS = 133;
	public static readonly ISOLATION = 134;
	public static readonly ITERATE = 135;
	public static readonly JOIN = 136;
	public static readonly JSON = 137;
	public static readonly JSON_ARRAY = 138;
	public static readonly JSON_EXISTS = 139;
	public static readonly JSON_OBJECT = 140;
	public static readonly JSON_QUERY = 141;
	public static readonly JSON_TABLE = 142;
	public static readonly JSON_VALUE = 143;
	public static readonly KEEP = 144;
	public static readonly KEY = 145;
	public static readonly KEYS = 146;
	public static readonly LANGUAGE = 147;
	public static readonly LAST = 148;
	public static readonly LATERAL = 149;
	public static readonly LEADING = 150;
	public static readonly LEAVE = 151;
	public static readonly LEFT = 152;
	public static readonly LEVEL = 153;
	public static readonly LIKE = 154;
	public static readonly LIMIT = 155;
	public static readonly LISTAGG = 156;
	public static readonly LOCAL = 157;
	public static readonly LOCALTIME = 158;
	public static readonly LOCALTIMESTAMP = 159;
	public static readonly LOGICAL = 160;
	public static readonly LOOP = 161;
	public static readonly MAP = 162;
	public static readonly MATCH = 163;
	public static readonly MATCHED = 164;
	public static readonly MATCHES = 165;
	public static readonly MATCH_RECOGNIZE = 166;
	public static readonly MATERIALIZED = 167;
	public static readonly MEASURES = 168;
	public static readonly MERGE = 169;
	public static readonly MINUTE = 170;
	public static readonly MONTH = 171;
	public static readonly NATURAL = 172;
	public static readonly NESTED = 173;
	public static readonly NEXT = 174;
	public static readonly NFC = 175;
	public static readonly NFD = 176;
	public static readonly NFKC = 177;
	public static readonly NFKD = 178;
	public static readonly NO = 179;
	public static readonly NONE = 180;
	public static readonly NORMALIZE = 181;
	public static readonly NOT = 182;
	public static readonly NULL = 183;
	public static readonly NULLIF = 184;
	public static readonly NULLS = 185;
	public static readonly OBJECT = 186;
	public static readonly OF = 187;
	public static readonly OFFSET = 188;
	public static readonly OMIT = 189;
	public static readonly ON = 190;
	public static readonly ONE = 191;
	public static readonly ONLY = 192;
	public static readonly OPTION = 193;
	public static readonly OR = 194;
	public static readonly ORDER = 195;
	public static readonly ORDINALITY = 196;
	public static readonly OUTER = 197;
	public static readonly OUTPUT = 198;
	public static readonly OVER = 199;
	public static readonly OVERFLOW = 200;
	public static readonly PARTITION = 201;
	public static readonly PARTITIONS = 202;
	public static readonly PASSING = 203;
	public static readonly PAST = 204;
	public static readonly PATH = 205;
	public static readonly PATTERN = 206;
	public static readonly PER = 207;
	public static readonly PERIOD = 208;
	public static readonly PERMUTE = 209;
	public static readonly PLAN = 210;
	public static readonly POSITION = 211;
	public static readonly PRECEDING = 212;
	public static readonly PRECISION = 213;
	public static readonly PREPARE = 214;
	public static readonly PRIVILEGES = 215;
	public static readonly PROPERTIES = 216;
	public static readonly PRUNE = 217;
	public static readonly QUOTES = 218;
	public static readonly RANGE = 219;
	public static readonly READ = 220;
	public static readonly RECURSIVE = 221;
	public static readonly REFRESH = 222;
	public static readonly RENAME = 223;
	public static readonly REPEAT = 224;
	public static readonly REPEATABLE = 225;
	public static readonly REPLACE = 226;
	public static readonly RESET = 227;
	public static readonly RESPECT = 228;
	public static readonly RESTRICT = 229;
	public static readonly RETURN = 230;
	public static readonly RETURNING = 231;
	public static readonly RETURNS = 232;
	public static readonly REVOKE = 233;
	public static readonly RIGHT = 234;
	public static readonly ROLE = 235;
	public static readonly ROLES = 236;
	public static readonly ROLLBACK = 237;
	public static readonly ROLLUP = 238;
	public static readonly ROW = 239;
	public static readonly ROWS = 240;
	public static readonly RUNNING = 241;
	public static readonly SCALAR = 242;
	public static readonly SCHEMA = 243;
	public static readonly SCHEMAS = 244;
	public static readonly SECOND = 245;
	public static readonly SECURITY = 246;
	public static readonly SEEK = 247;
	public static readonly SELECT = 248;
	public static readonly SERIALIZABLE = 249;
	public static readonly SESSION = 250;
	public static readonly SET = 251;
	public static readonly SETS = 252;
	public static readonly SHOW = 253;
	public static readonly SOME = 254;
	public static readonly START = 255;
	public static readonly STATS = 256;
	public static readonly SUBSET = 257;
	public static readonly SUBSTRING = 258;
	public static readonly SYSTEM = 259;
	public static readonly TABLE = 260;
	public static readonly TABLES = 261;
	public static readonly TABLESAMPLE = 262;
	public static readonly TEXT = 263;
	public static readonly TEXT_STRING = 264;
	public static readonly THEN = 265;
	public static readonly TIES = 266;
	public static readonly TIME = 267;
	public static readonly TIMESTAMP = 268;
	public static readonly TO = 269;
	public static readonly TRAILING = 270;
	public static readonly TRANSACTION = 271;
	public static readonly TRIM = 272;
	public static readonly TRUE = 273;
	public static readonly TRUNCATE = 274;
	public static readonly TRY_CAST = 275;
	public static readonly TYPE = 276;
	public static readonly UESCAPE = 277;
	public static readonly UNBOUNDED = 278;
	public static readonly UNCOMMITTED = 279;
	public static readonly UNCONDITIONAL = 280;
	public static readonly UNION = 281;
	public static readonly UNIQUE = 282;
	public static readonly UNKNOWN = 283;
	public static readonly UNMATCHED = 284;
	public static readonly UNNEST = 285;
	public static readonly UNTIL = 286;
	public static readonly UPDATE = 287;
	public static readonly USE = 288;
	public static readonly USER = 289;
	public static readonly USING = 290;
	public static readonly UTF16 = 291;
	public static readonly UTF32 = 292;
	public static readonly UTF8 = 293;
	public static readonly VALIDATE = 294;
	public static readonly VALUE = 295;
	public static readonly VALUES = 296;
	public static readonly VERBOSE = 297;
	public static readonly VERSION = 298;
	public static readonly VIEW = 299;
	public static readonly WHEN = 300;
	public static readonly WHERE = 301;
	public static readonly WHILE = 302;
	public static readonly WINDOW = 303;
	public static readonly WITH = 304;
	public static readonly WITHIN = 305;
	public static readonly WITHOUT = 306;
	public static readonly WORK = 307;
	public static readonly WRAPPER = 308;
	public static readonly WRITE = 309;
	public static readonly YEAR = 310;
	public static readonly ZONE = 311;
	public static readonly EQ = 312;
	public static readonly NEQ = 313;
	public static readonly LT = 314;
	public static readonly LTE = 315;
	public static readonly GT = 316;
	public static readonly GTE = 317;
	public static readonly PLUS = 318;
	public static readonly MINUS = 319;
	public static readonly ASTERISK = 320;
	public static readonly SLASH = 321;
	public static readonly PERCENT = 322;
	public static readonly CONCAT = 323;
	public static readonly QUESTION_MARK = 324;
	public static readonly SEMICOLON = 325;
	public static readonly STRING = 326;
	public static readonly UNICODE_STRING = 327;
	public static readonly BINARY_LITERAL = 328;
	public static readonly INTEGER_VALUE = 329;
	public static readonly DECIMAL_VALUE = 330;
	public static readonly DOUBLE_VALUE = 331;
	public static readonly IDENTIFIER = 332;
	public static readonly DIGIT_IDENTIFIER = 333;
	public static readonly QUOTED_IDENTIFIER = 334;
	public static readonly BACKQUOTED_IDENTIFIER = 335;
	public static readonly SIMPLE_COMMENT = 336;
	public static readonly BRACKETED_COMMENT = 337;
	public static readonly WS = 338;
	public static readonly UNRECOGNIZED = 339;
	public static readonly DELIMITER = 340;
	public static readonly RULE_singleStatement = 0;
	public static readonly RULE_standaloneExpression = 1;
	public static readonly RULE_standalonePathSpecification = 2;
	public static readonly RULE_standaloneType = 3;
	public static readonly RULE_standaloneRowPattern = 4;
	public static readonly RULE_standaloneFunctionSpecification = 5;
	public static readonly RULE_statement = 6;
	public static readonly RULE_rootQuery = 7;
	public static readonly RULE_withFunction = 8;
	public static readonly RULE_query = 9;
	public static readonly RULE_with = 10;
	public static readonly RULE_tableElement = 11;
	public static readonly RULE_columnDefinition = 12;
	public static readonly RULE_likeClause = 13;
	public static readonly RULE_properties = 14;
	public static readonly RULE_propertyAssignments = 15;
	public static readonly RULE_property = 16;
	public static readonly RULE_propertyValue = 17;
	public static readonly RULE_queryNoWith = 18;
	public static readonly RULE_limitRowCount = 19;
	public static readonly RULE_rowCount = 20;
	public static readonly RULE_queryTerm = 21;
	public static readonly RULE_queryPrimary = 22;
	public static readonly RULE_sortItem = 23;
	public static readonly RULE_querySpecification = 24;
	public static readonly RULE_groupBy = 25;
	public static readonly RULE_groupingElement = 26;
	public static readonly RULE_groupingSet = 27;
	public static readonly RULE_windowDefinition = 28;
	public static readonly RULE_windowSpecification = 29;
	public static readonly RULE_namedQuery = 30;
	public static readonly RULE_setQuantifier = 31;
	public static readonly RULE_selectItem = 32;
	public static readonly RULE_relation = 33;
	public static readonly RULE_joinType = 34;
	public static readonly RULE_joinCriteria = 35;
	public static readonly RULE_sampledRelation = 36;
	public static readonly RULE_sampleType = 37;
	public static readonly RULE_trimsSpecification = 38;
	public static readonly RULE_listAggOverflowBehavior = 39;
	public static readonly RULE_listaggCountIndication = 40;
	public static readonly RULE_patternRecognition = 41;
	public static readonly RULE_measureDefinition = 42;
	public static readonly RULE_rowsPerMatch = 43;
	public static readonly RULE_emptyMatchHandling = 44;
	public static readonly RULE_skipTo = 45;
	public static readonly RULE_subsetDefinition = 46;
	public static readonly RULE_variableDefinition = 47;
	public static readonly RULE_aliasedRelation = 48;
	public static readonly RULE_columnAliases = 49;
	public static readonly RULE_relationPrimary = 50;
	public static readonly RULE_jsonTableColumn = 51;
	public static readonly RULE_jsonTableSpecificPlan = 52;
	public static readonly RULE_jsonTablePathName = 53;
	public static readonly RULE_planPrimary = 54;
	public static readonly RULE_jsonTableDefaultPlan = 55;
	public static readonly RULE_tableFunctionCall = 56;
	public static readonly RULE_tableFunctionArgument = 57;
	public static readonly RULE_tableArgument = 58;
	public static readonly RULE_tableArgumentRelation = 59;
	public static readonly RULE_descriptorArgument = 60;
	public static readonly RULE_descriptorField = 61;
	public static readonly RULE_copartitionTables = 62;
	public static readonly RULE_expression = 63;
	public static readonly RULE_booleanExpression = 64;
	public static readonly RULE_predicate = 65;
	public static readonly RULE_valueExpression = 66;
	public static readonly RULE_primaryExpression = 67;
	public static readonly RULE_jsonPathInvocation = 68;
	public static readonly RULE_jsonValueExpression = 69;
	public static readonly RULE_jsonRepresentation = 70;
	public static readonly RULE_jsonArgument = 71;
	public static readonly RULE_jsonExistsErrorBehavior = 72;
	public static readonly RULE_jsonValueBehavior = 73;
	public static readonly RULE_jsonQueryWrapperBehavior = 74;
	public static readonly RULE_jsonQueryBehavior = 75;
	public static readonly RULE_jsonObjectMember = 76;
	public static readonly RULE_processingMode = 77;
	public static readonly RULE_nullTreatment = 78;
	public static readonly RULE_string = 79;
	public static readonly RULE_timeZoneSpecifier = 80;
	public static readonly RULE_comparisonOperator = 81;
	public static readonly RULE_comparisonQuantifier = 82;
	public static readonly RULE_booleanValue = 83;
	public static readonly RULE_interval = 84;
	public static readonly RULE_intervalField = 85;
	public static readonly RULE_normalForm = 86;
	public static readonly RULE_type = 87;
	public static readonly RULE_rowField = 88;
	public static readonly RULE_typeParameter = 89;
	public static readonly RULE_whenClause = 90;
	public static readonly RULE_filter = 91;
	public static readonly RULE_mergeCase = 92;
	public static readonly RULE_over = 93;
	public static readonly RULE_windowFrame = 94;
	public static readonly RULE_frameExtent = 95;
	public static readonly RULE_frameBound = 96;
	public static readonly RULE_rowPattern = 97;
	public static readonly RULE_patternPrimary = 98;
	public static readonly RULE_patternQuantifier = 99;
	public static readonly RULE_updateAssignment = 100;
	public static readonly RULE_explainOption = 101;
	public static readonly RULE_transactionMode = 102;
	public static readonly RULE_levelOfIsolation = 103;
	public static readonly RULE_callArgument = 104;
	public static readonly RULE_pathElement = 105;
	public static readonly RULE_pathSpecification = 106;
	public static readonly RULE_functionSpecification = 107;
	public static readonly RULE_functionDeclaration = 108;
	public static readonly RULE_parameterDeclaration = 109;
	public static readonly RULE_returnsClause = 110;
	public static readonly RULE_routineCharacteristic = 111;
	public static readonly RULE_controlStatement = 112;
	public static readonly RULE_caseStatementWhenClause = 113;
	public static readonly RULE_elseIfClause = 114;
	public static readonly RULE_elseClause = 115;
	public static readonly RULE_variableDeclaration = 116;
	public static readonly RULE_sqlStatementList = 117;
	public static readonly RULE_privilege = 118;
	public static readonly RULE_entityKind = 119;
	public static readonly RULE_grantObject = 120;
	public static readonly RULE_qualifiedName = 121;
	public static readonly RULE_queryPeriod = 122;
	public static readonly RULE_rangeType = 123;
	public static readonly RULE_grantor = 124;
	public static readonly RULE_principal = 125;
	public static readonly RULE_roles = 126;
	public static readonly RULE_privilegeOrRole = 127;
	public static readonly RULE_identifier = 128;
	public static readonly RULE_number = 129;
	public static readonly RULE_authorizationUser = 130;
	public static readonly RULE_nonReserved = 131;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"singleStatement", "standaloneExpression", "standalonePathSpecification", 
		"standaloneType", "standaloneRowPattern", "standaloneFunctionSpecification", 
		"statement", "rootQuery", "withFunction", "query", "with", "tableElement", 
		"columnDefinition", "likeClause", "properties", "propertyAssignments", 
		"property", "propertyValue", "queryNoWith", "limitRowCount", "rowCount", 
		"queryTerm", "queryPrimary", "sortItem", "querySpecification", "groupBy", 
		"groupingElement", "groupingSet", "windowDefinition", "windowSpecification", 
		"namedQuery", "setQuantifier", "selectItem", "relation", "joinType", "joinCriteria", 
		"sampledRelation", "sampleType", "trimsSpecification", "listAggOverflowBehavior", 
		"listaggCountIndication", "patternRecognition", "measureDefinition", "rowsPerMatch", 
		"emptyMatchHandling", "skipTo", "subsetDefinition", "variableDefinition", 
		"aliasedRelation", "columnAliases", "relationPrimary", "jsonTableColumn", 
		"jsonTableSpecificPlan", "jsonTablePathName", "planPrimary", "jsonTableDefaultPlan", 
		"tableFunctionCall", "tableFunctionArgument", "tableArgument", "tableArgumentRelation", 
		"descriptorArgument", "descriptorField", "copartitionTables", "expression", 
		"booleanExpression", "predicate", "valueExpression", "primaryExpression", 
		"jsonPathInvocation", "jsonValueExpression", "jsonRepresentation", "jsonArgument", 
		"jsonExistsErrorBehavior", "jsonValueBehavior", "jsonQueryWrapperBehavior", 
		"jsonQueryBehavior", "jsonObjectMember", "processingMode", "nullTreatment", 
		"string", "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
		"booleanValue", "interval", "intervalField", "normalForm", "type", "rowField", 
		"typeParameter", "whenClause", "filter", "mergeCase", "over", "windowFrame", 
		"frameExtent", "frameBound", "rowPattern", "patternPrimary", "patternQuantifier", 
		"updateAssignment", "explainOption", "transactionMode", "levelOfIsolation", 
		"callArgument", "pathElement", "pathSpecification", "functionSpecification", 
		"functionDeclaration", "parameterDeclaration", "returnsClause", "routineCharacteristic", 
		"controlStatement", "caseStatementWhenClause", "elseIfClause", "elseClause", 
		"variableDeclaration", "sqlStatementList", "privilege", "entityKind", 
		"grantObject", "qualifiedName", "queryPeriod", "rangeType", "grantor", 
		"principal", "roles", "privilegeOrRole", "identifier", "number", "authorizationUser", 
		"nonReserved",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'.'", "'('", "')'", "','", "'SKIP'", "'=>'", "'->'", "'['", 
		"']'", "':'", "'|'", "'^'", "'$'", "'{-'", "'-}'", "'{'", "'}'", "'ABSENT'", 
		"'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
		"'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", "'BEGIN'", 
		"'BERNOULLI'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CALLED'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", 
		"'COMMENT'", "'COMMIT'", "'COMMITTED'", "'CONDITIONAL'", "'CONSTRAINT'", 
		"'COUNT'", "'COPARTITION'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
		"'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_PATH'", "'CURRENT_ROLE'", 
		"'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", 
		"'DEFINE'", "'DEFINER'", "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", 
		"'DESCRIPTOR'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTRIBUTED'", "'DO'", 
		"'DOUBLE'", "'DROP'", "'ELSE'", "'EMPTY'", "'ELSEIF'", "'ENCODING'", "'END'", 
		"'ERROR'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", 
		"'EXPLAIN'", "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", 
		"'FIRST'", "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", 
		"'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", 
		"'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
		"'IMMEDIATE'", "'IN'", "'INCLUDING'", "'INITIAL'", "'INNER'", "'INPUT'", 
		"'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", "'IO'", 
		"'IS'", "'ISOLATION'", "'ITERATE'", "'JOIN'", "'JSON'", "'JSON_ARRAY'", 
		"'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_QUERY'", "'JSON_TABLE'", "'JSON_VALUE'", 
		"'KEEP'", "'KEY'", "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LEADING'", 
		"'LEAVE'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", 
		"'LOCALTIME'", "'LOCALTIMESTAMP'", "'LOGICAL'", "'LOOP'", "'MAP'", "'MATCH'", 
		"'MATCHED'", "'MATCHES'", "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MEASURES'", 
		"'MERGE'", "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", "'NEXT'", "'NFC'", 
		"'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", 
		"'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", "'OMIT'", 
		"'ON'", "'ONE'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", "'ORDINALITY'", 
		"'OUTER'", "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", "'PARTITIONS'", 
		"'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERIOD'", "'PERMUTE'", 
		"'PLAN'", "'POSITION'", "'PRECEDING'", "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", 
		"'PROPERTIES'", "'PRUNE'", "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", 
		"'REFRESH'", "'RENAME'", "'REPEAT'", "'REPEATABLE'", "'REPLACE'", "'RESET'", 
		"'RESPECT'", "'RESTRICT'", "'RETURN'", "'RETURNING'", "'RETURNS'", "'REVOKE'", 
		"'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
		"'RUNNING'", "'SCALAR'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
		"'SEEK'", "'SELECT'", "'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", 
		"'SHOW'", "'SOME'", "'START'", "'STATS'", "'SUBSET'", "'SUBSTRING'", "'SYSTEM'", 
		"'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TEXT'", "'STRING'", "'THEN'", 
		"'TIES'", "'TIME'", "'TIMESTAMP'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
		"'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", "'TYPE'", "'UESCAPE'", 
		"'UNBOUNDED'", "'UNCOMMITTED'", "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", 
		"'UNKNOWN'", "'UNMATCHED'", "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", 
		"'USER'", "'USING'", "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", 
		"'VALUES'", "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
		"'WRITE'", "'YEAR'", "'ZONE'", "'='", undefined, "'<'", "'<='", "'>'", 
		"'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'?'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "ABSENT", "ADD", "ADMIN", 
		"AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"AT", "AUTHORIZATION", "BEGIN", "BERNOULLI", "BETWEEN", "BOTH", "BY", 
		"CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", "COLUMN", 
		"COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "CONDITIONAL", "CONSTRAINT", 
		"COUNT", "COPARTITION", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_CATALOG", 
		"CURRENT_DATE", "CURRENT_PATH", "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATE", "DAY", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DEFINE", "DEFINER", "DELETE", "DENY", "DESC", "DESCRIBE", 
		"DESCRIPTOR", "DETERMINISTIC", "DISTINCT", "DISTRIBUTED", "DO", "DOUBLE", 
		"DROP", "ELSE", "EMPTY", "ELSEIF", "ENCODING", "END", "ERROR", "ESCAPE", 
		"EXCEPT", "EXCLUDING", "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "FALSE", 
		"FETCH", "FILTER", "FINAL", "FIRST", "FOLLOWING", "FOR", "FORMAT", "FROM", 
		"FULL", "FUNCTION", "FUNCTIONS", "GRACE", "GRANT", "GRANTED", "GRANTS", 
		"GRAPHVIZ", "GROUP", "GROUPING", "GROUPS", "HAVING", "HOUR", "IF", "IGNORE", 
		"IMMEDIATE", "IN", "INCLUDING", "INITIAL", "INNER", "INPUT", "INSERT", 
		"INTERSECT", "INTERVAL", "INTO", "INVOKER", "IO", "IS", "ISOLATION", "ITERATE", 
		"JOIN", "JSON", "JSON_ARRAY", "JSON_EXISTS", "JSON_OBJECT", "JSON_QUERY", 
		"JSON_TABLE", "JSON_VALUE", "KEEP", "KEY", "KEYS", "LANGUAGE", "LAST", 
		"LATERAL", "LEADING", "LEAVE", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTAGG", 
		"LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", "LOOP", "MAP", "MATCH", 
		"MATCHED", "MATCHES", "MATCH_RECOGNIZE", "MATERIALIZED", "MEASURES", "MERGE", 
		"MINUTE", "MONTH", "NATURAL", "NESTED", "NEXT", "NFC", "NFD", "NFKC", 
		"NFKD", "NO", "NONE", "NORMALIZE", "NOT", "NULL", "NULLIF", "NULLS", "OBJECT", 
		"OF", "OFFSET", "OMIT", "ON", "ONE", "ONLY", "OPTION", "OR", "ORDER", 
		"ORDINALITY", "OUTER", "OUTPUT", "OVER", "OVERFLOW", "PARTITION", "PARTITIONS", 
		"PASSING", "PAST", "PATH", "PATTERN", "PER", "PERIOD", "PERMUTE", "PLAN", 
		"POSITION", "PRECEDING", "PRECISION", "PREPARE", "PRIVILEGES", "PROPERTIES", 
		"PRUNE", "QUOTES", "RANGE", "READ", "RECURSIVE", "REFRESH", "RENAME", 
		"REPEAT", "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", "RETURN", 
		"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
		"ROLLUP", "ROW", "ROWS", "RUNNING", "SCALAR", "SCHEMA", "SCHEMAS", "SECOND", 
		"SECURITY", "SEEK", "SELECT", "SERIALIZABLE", "SESSION", "SET", "SETS", 
		"SHOW", "SOME", "START", "STATS", "SUBSET", "SUBSTRING", "SYSTEM", "TABLE", 
		"TABLES", "TABLESAMPLE", "TEXT", "TEXT_STRING", "THEN", "TIES", "TIME", 
		"TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRIM", "TRUE", "TRUNCATE", 
		"TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", "UNCONDITIONAL", 
		"UNION", "UNIQUE", "UNKNOWN", "UNMATCHED", "UNNEST", "UNTIL", "UPDATE", 
		"USE", "USER", "USING", "UTF16", "UTF32", "UTF8", "VALIDATE", "VALUE", 
		"VALUES", "VERBOSE", "VERSION", "VIEW", "WHEN", "WHERE", "WHILE", "WINDOW", 
		"WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE", "YEAR", "ZONE", 
		"EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
		"PERCENT", "CONCAT", "QUESTION_MARK", "SEMICOLON", "STRING", "UNICODE_STRING", 
		"BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", "DOUBLE_VALUE", "IDENTIFIER", 
		"DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
		"BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TrinoSQLParser._LITERAL_NAMES, TrinoSQLParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TrinoSQLParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "TrinoSQL.g4"; }

	// @Override
	public get ruleNames(): string[] { return TrinoSQLParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return TrinoSQLParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(TrinoSQLParser._ATN, this);
	}
	// @RuleVersion(0)
	public singleStatement(): SingleStatementContext {
		let _localctx: SingleStatementContext = new SingleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, TrinoSQLParser.RULE_singleStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 264;
			this.statement();
			this.state = 265;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standaloneExpression(): StandaloneExpressionContext {
		let _localctx: StandaloneExpressionContext = new StandaloneExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, TrinoSQLParser.RULE_standaloneExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 267;
			this.expression();
			this.state = 268;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standalonePathSpecification(): StandalonePathSpecificationContext {
		let _localctx: StandalonePathSpecificationContext = new StandalonePathSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, TrinoSQLParser.RULE_standalonePathSpecification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 270;
			this.pathSpecification();
			this.state = 271;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standaloneType(): StandaloneTypeContext {
		let _localctx: StandaloneTypeContext = new StandaloneTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, TrinoSQLParser.RULE_standaloneType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 273;
			this.type(0);
			this.state = 274;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standaloneRowPattern(): StandaloneRowPatternContext {
		let _localctx: StandaloneRowPatternContext = new StandaloneRowPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, TrinoSQLParser.RULE_standaloneRowPattern);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 276;
			this.rowPattern(0);
			this.state = 277;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public standaloneFunctionSpecification(): StandaloneFunctionSpecificationContext {
		let _localctx: StandaloneFunctionSpecificationContext = new StandaloneFunctionSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, TrinoSQLParser.RULE_standaloneFunctionSpecification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 279;
			this.functionSpecification();
			this.state = 280;
			this.match(TrinoSQLParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, TrinoSQLParser.RULE_statement);
		let _la: number;
		try {
			this.state = 1167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 282;
				this.rootQuery();
				}
				break;

			case 2:
				_localctx = new UseContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 283;
				this.match(TrinoSQLParser.USE);
				this.state = 284;
				(_localctx as UseContext)._schema = this.identifier();
				}
				break;

			case 3:
				_localctx = new UseContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 285;
				this.match(TrinoSQLParser.USE);
				this.state = 286;
				(_localctx as UseContext)._catalog = this.identifier();
				this.state = 287;
				this.match(TrinoSQLParser.T__0);
				this.state = 288;
				(_localctx as UseContext)._schema = this.identifier();
				}
				break;

			case 4:
				_localctx = new CreateCatalogContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 290;
				this.match(TrinoSQLParser.CREATE);
				this.state = 291;
				this.match(TrinoSQLParser.CATALOG);
				this.state = 295;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 0, this._ctx) ) {
				case 1:
					{
					this.state = 292;
					this.match(TrinoSQLParser.IF);
					this.state = 293;
					this.match(TrinoSQLParser.NOT);
					this.state = 294;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 297;
				(_localctx as CreateCatalogContext)._catalog = this.identifier();
				this.state = 298;
				this.match(TrinoSQLParser.USING);
				this.state = 299;
				(_localctx as CreateCatalogContext)._connectorName = this.identifier();
				this.state = 302;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.COMMENT) {
					{
					this.state = 300;
					this.match(TrinoSQLParser.COMMENT);
					this.state = 301;
					this.string();
					}
				}

				this.state = 306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AUTHORIZATION) {
					{
					this.state = 304;
					this.match(TrinoSQLParser.AUTHORIZATION);
					this.state = 305;
					this.principal();
					}
				}

				this.state = 310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 308;
					this.match(TrinoSQLParser.WITH);
					this.state = 309;
					this.properties();
					}
				}

				}
				break;

			case 5:
				_localctx = new DropCatalogContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 312;
				this.match(TrinoSQLParser.DROP);
				this.state = 313;
				this.match(TrinoSQLParser.CATALOG);
				this.state = 316;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
				case 1:
					{
					this.state = 314;
					this.match(TrinoSQLParser.IF);
					this.state = 315;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 318;
				(_localctx as DropCatalogContext)._catalog = this.identifier();
				this.state = 320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.CASCADE || _la === TrinoSQLParser.RESTRICT) {
					{
					this.state = 319;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.CASCADE || _la === TrinoSQLParser.RESTRICT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 6:
				_localctx = new CreateSchemaContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 322;
				this.match(TrinoSQLParser.CREATE);
				this.state = 323;
				this.match(TrinoSQLParser.SCHEMA);
				this.state = 327;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
				case 1:
					{
					this.state = 324;
					this.match(TrinoSQLParser.IF);
					this.state = 325;
					this.match(TrinoSQLParser.NOT);
					this.state = 326;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 329;
				this.qualifiedName();
				this.state = 332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AUTHORIZATION) {
					{
					this.state = 330;
					this.match(TrinoSQLParser.AUTHORIZATION);
					this.state = 331;
					this.principal();
					}
				}

				this.state = 336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 334;
					this.match(TrinoSQLParser.WITH);
					this.state = 335;
					this.properties();
					}
				}

				}
				break;

			case 7:
				_localctx = new DropSchemaContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 338;
				this.match(TrinoSQLParser.DROP);
				this.state = 339;
				this.match(TrinoSQLParser.SCHEMA);
				this.state = 342;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 9, this._ctx) ) {
				case 1:
					{
					this.state = 340;
					this.match(TrinoSQLParser.IF);
					this.state = 341;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 344;
				this.qualifiedName();
				this.state = 346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.CASCADE || _la === TrinoSQLParser.RESTRICT) {
					{
					this.state = 345;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.CASCADE || _la === TrinoSQLParser.RESTRICT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 8:
				_localctx = new RenameSchemaContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 348;
				this.match(TrinoSQLParser.ALTER);
				this.state = 349;
				this.match(TrinoSQLParser.SCHEMA);
				this.state = 350;
				this.qualifiedName();
				this.state = 351;
				this.match(TrinoSQLParser.RENAME);
				this.state = 352;
				this.match(TrinoSQLParser.TO);
				this.state = 353;
				this.identifier();
				}
				break;

			case 9:
				_localctx = new SetSchemaAuthorizationContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 355;
				this.match(TrinoSQLParser.ALTER);
				this.state = 356;
				this.match(TrinoSQLParser.SCHEMA);
				this.state = 357;
				this.qualifiedName();
				this.state = 358;
				this.match(TrinoSQLParser.SET);
				this.state = 359;
				this.match(TrinoSQLParser.AUTHORIZATION);
				this.state = 360;
				this.principal();
				}
				break;

			case 10:
				_localctx = new CreateTableAsSelectContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 362;
				this.match(TrinoSQLParser.CREATE);
				this.state = 365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OR) {
					{
					this.state = 363;
					this.match(TrinoSQLParser.OR);
					this.state = 364;
					this.match(TrinoSQLParser.REPLACE);
					}
				}

				this.state = 367;
				this.match(TrinoSQLParser.TABLE);
				this.state = 371;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 12, this._ctx) ) {
				case 1:
					{
					this.state = 368;
					this.match(TrinoSQLParser.IF);
					this.state = 369;
					this.match(TrinoSQLParser.NOT);
					this.state = 370;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 373;
				this.qualifiedName();
				this.state = 375;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__1) {
					{
					this.state = 374;
					this.columnAliases();
					}
				}

				this.state = 379;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.COMMENT) {
					{
					this.state = 377;
					this.match(TrinoSQLParser.COMMENT);
					this.state = 378;
					this.string();
					}
				}

				this.state = 383;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 381;
					this.match(TrinoSQLParser.WITH);
					this.state = 382;
					this.properties();
					}
				}

				this.state = 385;
				this.match(TrinoSQLParser.AS);
				this.state = 391;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
				case 1:
					{
					this.state = 386;
					this.rootQuery();
					}
					break;

				case 2:
					{
					this.state = 387;
					this.match(TrinoSQLParser.T__1);
					this.state = 388;
					this.rootQuery();
					this.state = 389;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				this.state = 398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 393;
					this.match(TrinoSQLParser.WITH);
					this.state = 395;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.NO) {
						{
						this.state = 394;
						this.match(TrinoSQLParser.NO);
						}
					}

					this.state = 397;
					this.match(TrinoSQLParser.DATA);
					}
				}

				}
				break;

			case 11:
				_localctx = new CreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 400;
				this.match(TrinoSQLParser.CREATE);
				this.state = 403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OR) {
					{
					this.state = 401;
					this.match(TrinoSQLParser.OR);
					this.state = 402;
					this.match(TrinoSQLParser.REPLACE);
					}
				}

				this.state = 405;
				this.match(TrinoSQLParser.TABLE);
				this.state = 409;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
				case 1:
					{
					this.state = 406;
					this.match(TrinoSQLParser.IF);
					this.state = 407;
					this.match(TrinoSQLParser.NOT);
					this.state = 408;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 411;
				this.qualifiedName();
				this.state = 412;
				this.match(TrinoSQLParser.T__1);
				this.state = 413;
				this.tableElement();
				this.state = 418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 414;
					this.match(TrinoSQLParser.T__3);
					this.state = 415;
					this.tableElement();
					}
					}
					this.state = 420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 421;
				this.match(TrinoSQLParser.T__2);
				this.state = 424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.COMMENT) {
					{
					this.state = 422;
					this.match(TrinoSQLParser.COMMENT);
					this.state = 423;
					this.string();
					}
				}

				this.state = 428;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 426;
					this.match(TrinoSQLParser.WITH);
					this.state = 427;
					this.properties();
					}
				}

				}
				break;

			case 12:
				_localctx = new DropTableContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 430;
				this.match(TrinoSQLParser.DROP);
				this.state = 431;
				this.match(TrinoSQLParser.TABLE);
				this.state = 434;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
				case 1:
					{
					this.state = 432;
					this.match(TrinoSQLParser.IF);
					this.state = 433;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 436;
				this.qualifiedName();
				}
				break;

			case 13:
				_localctx = new InsertIntoContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 437;
				this.match(TrinoSQLParser.INSERT);
				this.state = 438;
				this.match(TrinoSQLParser.INTO);
				this.state = 439;
				this.qualifiedName();
				this.state = 441;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 25, this._ctx) ) {
				case 1:
					{
					this.state = 440;
					this.columnAliases();
					}
					break;
				}
				this.state = 443;
				this.rootQuery();
				}
				break;

			case 14:
				_localctx = new DeleteContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 445;
				this.match(TrinoSQLParser.DELETE);
				this.state = 446;
				this.match(TrinoSQLParser.FROM);
				this.state = 447;
				this.qualifiedName();
				this.state = 450;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WHERE) {
					{
					this.state = 448;
					this.match(TrinoSQLParser.WHERE);
					this.state = 449;
					this.booleanExpression(0);
					}
				}

				}
				break;

			case 15:
				_localctx = new TruncateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 452;
				this.match(TrinoSQLParser.TRUNCATE);
				this.state = 453;
				this.match(TrinoSQLParser.TABLE);
				this.state = 454;
				this.qualifiedName();
				}
				break;

			case 16:
				_localctx = new CommentTableContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 455;
				this.match(TrinoSQLParser.COMMENT);
				this.state = 456;
				this.match(TrinoSQLParser.ON);
				this.state = 457;
				this.match(TrinoSQLParser.TABLE);
				this.state = 458;
				this.qualifiedName();
				this.state = 459;
				this.match(TrinoSQLParser.IS);
				this.state = 462;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TrinoSQLParser.STRING:
				case TrinoSQLParser.UNICODE_STRING:
					{
					this.state = 460;
					this.string();
					}
					break;
				case TrinoSQLParser.NULL:
					{
					this.state = 461;
					this.match(TrinoSQLParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 17:
				_localctx = new CommentViewContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 464;
				this.match(TrinoSQLParser.COMMENT);
				this.state = 465;
				this.match(TrinoSQLParser.ON);
				this.state = 466;
				this.match(TrinoSQLParser.VIEW);
				this.state = 467;
				this.qualifiedName();
				this.state = 468;
				this.match(TrinoSQLParser.IS);
				this.state = 471;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TrinoSQLParser.STRING:
				case TrinoSQLParser.UNICODE_STRING:
					{
					this.state = 469;
					this.string();
					}
					break;
				case TrinoSQLParser.NULL:
					{
					this.state = 470;
					this.match(TrinoSQLParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 18:
				_localctx = new CommentColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 473;
				this.match(TrinoSQLParser.COMMENT);
				this.state = 474;
				this.match(TrinoSQLParser.ON);
				this.state = 475;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 476;
				this.qualifiedName();
				this.state = 477;
				this.match(TrinoSQLParser.IS);
				this.state = 480;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TrinoSQLParser.STRING:
				case TrinoSQLParser.UNICODE_STRING:
					{
					this.state = 478;
					this.string();
					}
					break;
				case TrinoSQLParser.NULL:
					{
					this.state = 479;
					this.match(TrinoSQLParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 19:
				_localctx = new RenameTableContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 482;
				this.match(TrinoSQLParser.ALTER);
				this.state = 483;
				this.match(TrinoSQLParser.TABLE);
				this.state = 486;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 30, this._ctx) ) {
				case 1:
					{
					this.state = 484;
					this.match(TrinoSQLParser.IF);
					this.state = 485;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 488;
				(_localctx as RenameTableContext)._from = this.qualifiedName();
				this.state = 489;
				this.match(TrinoSQLParser.RENAME);
				this.state = 490;
				this.match(TrinoSQLParser.TO);
				this.state = 491;
				(_localctx as RenameTableContext)._to = this.qualifiedName();
				}
				break;

			case 20:
				_localctx = new AddColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 493;
				this.match(TrinoSQLParser.ALTER);
				this.state = 494;
				this.match(TrinoSQLParser.TABLE);
				this.state = 497;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
				case 1:
					{
					this.state = 495;
					this.match(TrinoSQLParser.IF);
					this.state = 496;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 499;
				(_localctx as AddColumnContext)._tableName = this.qualifiedName();
				this.state = 500;
				this.match(TrinoSQLParser.ADD);
				this.state = 501;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 505;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 32, this._ctx) ) {
				case 1:
					{
					this.state = 502;
					this.match(TrinoSQLParser.IF);
					this.state = 503;
					this.match(TrinoSQLParser.NOT);
					this.state = 504;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 507;
				(_localctx as AddColumnContext)._column = this.columnDefinition();
				}
				break;

			case 21:
				_localctx = new RenameColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 509;
				this.match(TrinoSQLParser.ALTER);
				this.state = 510;
				this.match(TrinoSQLParser.TABLE);
				this.state = 513;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 33, this._ctx) ) {
				case 1:
					{
					this.state = 511;
					this.match(TrinoSQLParser.IF);
					this.state = 512;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 515;
				(_localctx as RenameColumnContext)._tableName = this.qualifiedName();
				this.state = 516;
				this.match(TrinoSQLParser.RENAME);
				this.state = 517;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 520;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
				case 1:
					{
					this.state = 518;
					this.match(TrinoSQLParser.IF);
					this.state = 519;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 522;
				(_localctx as RenameColumnContext)._from = this.qualifiedName();
				this.state = 523;
				this.match(TrinoSQLParser.TO);
				this.state = 524;
				(_localctx as RenameColumnContext)._to = this.identifier();
				}
				break;

			case 22:
				_localctx = new DropColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 526;
				this.match(TrinoSQLParser.ALTER);
				this.state = 527;
				this.match(TrinoSQLParser.TABLE);
				this.state = 530;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 35, this._ctx) ) {
				case 1:
					{
					this.state = 528;
					this.match(TrinoSQLParser.IF);
					this.state = 529;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 532;
				(_localctx as DropColumnContext)._tableName = this.qualifiedName();
				this.state = 533;
				this.match(TrinoSQLParser.DROP);
				this.state = 534;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 537;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 36, this._ctx) ) {
				case 1:
					{
					this.state = 535;
					this.match(TrinoSQLParser.IF);
					this.state = 536;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 539;
				(_localctx as DropColumnContext)._column = this.qualifiedName();
				}
				break;

			case 23:
				_localctx = new SetColumnTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 541;
				this.match(TrinoSQLParser.ALTER);
				this.state = 542;
				this.match(TrinoSQLParser.TABLE);
				this.state = 545;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
				case 1:
					{
					this.state = 543;
					this.match(TrinoSQLParser.IF);
					this.state = 544;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 547;
				(_localctx as SetColumnTypeContext)._tableName = this.qualifiedName();
				this.state = 548;
				this.match(TrinoSQLParser.ALTER);
				this.state = 549;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 550;
				(_localctx as SetColumnTypeContext)._columnName = this.qualifiedName();
				this.state = 551;
				this.match(TrinoSQLParser.SET);
				this.state = 552;
				this.match(TrinoSQLParser.DATA);
				this.state = 553;
				this.match(TrinoSQLParser.TYPE);
				this.state = 554;
				this.type(0);
				}
				break;

			case 24:
				_localctx = new DropNotNullConstraintContext(_localctx);
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 556;
				this.match(TrinoSQLParser.ALTER);
				this.state = 557;
				this.match(TrinoSQLParser.TABLE);
				this.state = 560;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
				case 1:
					{
					this.state = 558;
					this.match(TrinoSQLParser.IF);
					this.state = 559;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 562;
				(_localctx as DropNotNullConstraintContext)._tableName = this.qualifiedName();
				this.state = 563;
				this.match(TrinoSQLParser.ALTER);
				this.state = 564;
				this.match(TrinoSQLParser.COLUMN);
				this.state = 565;
				(_localctx as DropNotNullConstraintContext)._columnName = this.identifier();
				this.state = 566;
				this.match(TrinoSQLParser.DROP);
				this.state = 567;
				this.match(TrinoSQLParser.NOT);
				this.state = 568;
				this.match(TrinoSQLParser.NULL);
				}
				break;

			case 25:
				_localctx = new SetTableAuthorizationContext(_localctx);
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 570;
				this.match(TrinoSQLParser.ALTER);
				this.state = 571;
				this.match(TrinoSQLParser.TABLE);
				this.state = 572;
				(_localctx as SetTableAuthorizationContext)._tableName = this.qualifiedName();
				this.state = 573;
				this.match(TrinoSQLParser.SET);
				this.state = 574;
				this.match(TrinoSQLParser.AUTHORIZATION);
				this.state = 575;
				this.principal();
				}
				break;

			case 26:
				_localctx = new SetTablePropertiesContext(_localctx);
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 577;
				this.match(TrinoSQLParser.ALTER);
				this.state = 578;
				this.match(TrinoSQLParser.TABLE);
				this.state = 579;
				(_localctx as SetTablePropertiesContext)._tableName = this.qualifiedName();
				this.state = 580;
				this.match(TrinoSQLParser.SET);
				this.state = 581;
				this.match(TrinoSQLParser.PROPERTIES);
				this.state = 582;
				this.propertyAssignments();
				}
				break;

			case 27:
				_localctx = new TableExecuteContext(_localctx);
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 584;
				this.match(TrinoSQLParser.ALTER);
				this.state = 585;
				this.match(TrinoSQLParser.TABLE);
				this.state = 586;
				(_localctx as TableExecuteContext)._tableName = this.qualifiedName();
				this.state = 587;
				this.match(TrinoSQLParser.EXECUTE);
				this.state = 588;
				(_localctx as TableExecuteContext)._procedureName = this.identifier();
				this.state = 601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__1) {
					{
					this.state = 589;
					this.match(TrinoSQLParser.T__1);
					this.state = 598;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
						{
						this.state = 590;
						this.callArgument();
						this.state = 595;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TrinoSQLParser.T__3) {
							{
							{
							this.state = 591;
							this.match(TrinoSQLParser.T__3);
							this.state = 592;
							this.callArgument();
							}
							}
							this.state = 597;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					this.state = 600;
					this.match(TrinoSQLParser.T__2);
					}
				}

				this.state = 605;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WHERE) {
					{
					this.state = 603;
					this.match(TrinoSQLParser.WHERE);
					this.state = 604;
					(_localctx as TableExecuteContext)._where = this.booleanExpression(0);
					}
				}

				}
				break;

			case 28:
				_localctx = new AnalyzeContext(_localctx);
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 607;
				this.match(TrinoSQLParser.ANALYZE);
				this.state = 608;
				this.qualifiedName();
				this.state = 611;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 609;
					this.match(TrinoSQLParser.WITH);
					this.state = 610;
					this.properties();
					}
				}

				}
				break;

			case 29:
				_localctx = new CreateMaterializedViewContext(_localctx);
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 613;
				this.match(TrinoSQLParser.CREATE);
				this.state = 616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OR) {
					{
					this.state = 614;
					this.match(TrinoSQLParser.OR);
					this.state = 615;
					this.match(TrinoSQLParser.REPLACE);
					}
				}

				this.state = 618;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 619;
				this.match(TrinoSQLParser.VIEW);
				this.state = 623;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 45, this._ctx) ) {
				case 1:
					{
					this.state = 620;
					this.match(TrinoSQLParser.IF);
					this.state = 621;
					this.match(TrinoSQLParser.NOT);
					this.state = 622;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 625;
				this.qualifiedName();
				this.state = 629;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.GRACE) {
					{
					this.state = 626;
					this.match(TrinoSQLParser.GRACE);
					this.state = 627;
					this.match(TrinoSQLParser.PERIOD);
					this.state = 628;
					this.interval();
					}
				}

				this.state = 633;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.COMMENT) {
					{
					this.state = 631;
					this.match(TrinoSQLParser.COMMENT);
					this.state = 632;
					this.string();
					}
				}

				this.state = 637;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 635;
					this.match(TrinoSQLParser.WITH);
					this.state = 636;
					this.properties();
					}
				}

				this.state = 639;
				this.match(TrinoSQLParser.AS);
				this.state = 640;
				this.rootQuery();
				}
				break;

			case 30:
				_localctx = new CreateViewContext(_localctx);
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 642;
				this.match(TrinoSQLParser.CREATE);
				this.state = 645;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OR) {
					{
					this.state = 643;
					this.match(TrinoSQLParser.OR);
					this.state = 644;
					this.match(TrinoSQLParser.REPLACE);
					}
				}

				this.state = 647;
				this.match(TrinoSQLParser.VIEW);
				this.state = 648;
				this.qualifiedName();
				this.state = 651;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.COMMENT) {
					{
					this.state = 649;
					this.match(TrinoSQLParser.COMMENT);
					this.state = 650;
					this.string();
					}
				}

				this.state = 655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.SECURITY) {
					{
					this.state = 653;
					this.match(TrinoSQLParser.SECURITY);
					this.state = 654;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.DEFINER || _la === TrinoSQLParser.INVOKER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 657;
				this.match(TrinoSQLParser.AS);
				this.state = 658;
				this.rootQuery();
				}
				break;

			case 31:
				_localctx = new RefreshMaterializedViewContext(_localctx);
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 660;
				this.match(TrinoSQLParser.REFRESH);
				this.state = 661;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 662;
				this.match(TrinoSQLParser.VIEW);
				this.state = 663;
				this.qualifiedName();
				}
				break;

			case 32:
				_localctx = new DropMaterializedViewContext(_localctx);
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 664;
				this.match(TrinoSQLParser.DROP);
				this.state = 665;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 666;
				this.match(TrinoSQLParser.VIEW);
				this.state = 669;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
				case 1:
					{
					this.state = 667;
					this.match(TrinoSQLParser.IF);
					this.state = 668;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 671;
				this.qualifiedName();
				}
				break;

			case 33:
				_localctx = new RenameMaterializedViewContext(_localctx);
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 672;
				this.match(TrinoSQLParser.ALTER);
				this.state = 673;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 674;
				this.match(TrinoSQLParser.VIEW);
				this.state = 677;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
				case 1:
					{
					this.state = 675;
					this.match(TrinoSQLParser.IF);
					this.state = 676;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 679;
				(_localctx as RenameMaterializedViewContext)._from = this.qualifiedName();
				this.state = 680;
				this.match(TrinoSQLParser.RENAME);
				this.state = 681;
				this.match(TrinoSQLParser.TO);
				this.state = 682;
				(_localctx as RenameMaterializedViewContext)._to = this.qualifiedName();
				}
				break;

			case 34:
				_localctx = new SetMaterializedViewPropertiesContext(_localctx);
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 684;
				this.match(TrinoSQLParser.ALTER);
				this.state = 685;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 686;
				this.match(TrinoSQLParser.VIEW);
				this.state = 687;
				this.qualifiedName();
				this.state = 688;
				this.match(TrinoSQLParser.SET);
				this.state = 689;
				this.match(TrinoSQLParser.PROPERTIES);
				this.state = 690;
				this.propertyAssignments();
				}
				break;

			case 35:
				_localctx = new DropViewContext(_localctx);
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 692;
				this.match(TrinoSQLParser.DROP);
				this.state = 693;
				this.match(TrinoSQLParser.VIEW);
				this.state = 696;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 54, this._ctx) ) {
				case 1:
					{
					this.state = 694;
					this.match(TrinoSQLParser.IF);
					this.state = 695;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 698;
				this.qualifiedName();
				}
				break;

			case 36:
				_localctx = new RenameViewContext(_localctx);
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 699;
				this.match(TrinoSQLParser.ALTER);
				this.state = 700;
				this.match(TrinoSQLParser.VIEW);
				this.state = 701;
				(_localctx as RenameViewContext)._from = this.qualifiedName();
				this.state = 702;
				this.match(TrinoSQLParser.RENAME);
				this.state = 703;
				this.match(TrinoSQLParser.TO);
				this.state = 704;
				(_localctx as RenameViewContext)._to = this.qualifiedName();
				}
				break;

			case 37:
				_localctx = new SetViewAuthorizationContext(_localctx);
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 706;
				this.match(TrinoSQLParser.ALTER);
				this.state = 707;
				this.match(TrinoSQLParser.VIEW);
				this.state = 708;
				(_localctx as SetViewAuthorizationContext)._from = this.qualifiedName();
				this.state = 709;
				this.match(TrinoSQLParser.SET);
				this.state = 710;
				this.match(TrinoSQLParser.AUTHORIZATION);
				this.state = 711;
				this.principal();
				}
				break;

			case 38:
				_localctx = new CallContext(_localctx);
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 713;
				this.match(TrinoSQLParser.CALL);
				this.state = 714;
				this.qualifiedName();
				this.state = 715;
				this.match(TrinoSQLParser.T__1);
				this.state = 724;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 716;
					this.callArgument();
					this.state = 721;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 717;
						this.match(TrinoSQLParser.T__3);
						this.state = 718;
						this.callArgument();
						}
						}
						this.state = 723;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 726;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 39:
				_localctx = new CreateFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 728;
				this.match(TrinoSQLParser.CREATE);
				this.state = 731;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OR) {
					{
					this.state = 729;
					this.match(TrinoSQLParser.OR);
					this.state = 730;
					this.match(TrinoSQLParser.REPLACE);
					}
				}

				this.state = 733;
				this.functionSpecification();
				}
				break;

			case 40:
				_localctx = new DropFunctionContext(_localctx);
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 734;
				this.match(TrinoSQLParser.DROP);
				this.state = 735;
				this.match(TrinoSQLParser.FUNCTION);
				this.state = 738;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
				case 1:
					{
					this.state = 736;
					this.match(TrinoSQLParser.IF);
					this.state = 737;
					this.match(TrinoSQLParser.EXISTS);
					}
					break;
				}
				this.state = 740;
				this.functionDeclaration();
				}
				break;

			case 41:
				_localctx = new CreateRoleContext(_localctx);
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 741;
				this.match(TrinoSQLParser.CREATE);
				this.state = 742;
				this.match(TrinoSQLParser.ROLE);
				this.state = 743;
				(_localctx as CreateRoleContext)._name = this.identifier();
				this.state = 747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 744;
					this.match(TrinoSQLParser.WITH);
					this.state = 745;
					this.match(TrinoSQLParser.ADMIN);
					this.state = 746;
					this.grantor();
					}
				}

				this.state = 751;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.IN) {
					{
					this.state = 749;
					this.match(TrinoSQLParser.IN);
					this.state = 750;
					(_localctx as CreateRoleContext)._catalog = this.identifier();
					}
				}

				}
				break;

			case 42:
				_localctx = new DropRoleContext(_localctx);
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 753;
				this.match(TrinoSQLParser.DROP);
				this.state = 754;
				this.match(TrinoSQLParser.ROLE);
				this.state = 755;
				(_localctx as DropRoleContext)._name = this.identifier();
				this.state = 758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.IN) {
					{
					this.state = 756;
					this.match(TrinoSQLParser.IN);
					this.state = 757;
					(_localctx as DropRoleContext)._catalog = this.identifier();
					}
				}

				}
				break;

			case 43:
				_localctx = new GrantRolesContext(_localctx);
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 760;
				this.match(TrinoSQLParser.GRANT);
				this.state = 761;
				this.privilegeOrRole();
				this.state = 766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 762;
					this.match(TrinoSQLParser.T__3);
					this.state = 763;
					this.privilegeOrRole();
					}
					}
					this.state = 768;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 769;
				this.match(TrinoSQLParser.TO);
				this.state = 770;
				this.principal();
				this.state = 775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 771;
					this.match(TrinoSQLParser.T__3);
					this.state = 772;
					this.principal();
					}
					}
					this.state = 777;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 778;
					this.match(TrinoSQLParser.WITH);
					this.state = 779;
					this.match(TrinoSQLParser.ADMIN);
					this.state = 780;
					this.match(TrinoSQLParser.OPTION);
					}
				}

				this.state = 786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.GRANTED) {
					{
					this.state = 783;
					this.match(TrinoSQLParser.GRANTED);
					this.state = 784;
					this.match(TrinoSQLParser.BY);
					this.state = 785;
					this.grantor();
					}
				}

				this.state = 790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.IN) {
					{
					this.state = 788;
					this.match(TrinoSQLParser.IN);
					this.state = 789;
					(_localctx as GrantRolesContext)._catalog = this.identifier();
					}
				}

				}
				break;

			case 44:
				_localctx = new GrantPrivilegesContext(_localctx);
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 792;
				this.match(TrinoSQLParser.GRANT);
				this.state = 803;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 68, this._ctx) ) {
				case 1:
					{
					{
					this.state = 793;
					this.privilegeOrRole();
					this.state = 798;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 794;
						this.match(TrinoSQLParser.T__3);
						this.state = 795;
						this.privilegeOrRole();
						}
						}
						this.state = 800;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;

				case 2:
					{
					this.state = 801;
					this.match(TrinoSQLParser.ALL);
					this.state = 802;
					this.match(TrinoSQLParser.PRIVILEGES);
					}
					break;
				}
				this.state = 805;
				this.match(TrinoSQLParser.ON);
				this.state = 806;
				this.grantObject();
				this.state = 807;
				this.match(TrinoSQLParser.TO);
				this.state = 808;
				this.principal();
				this.state = 812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH) {
					{
					this.state = 809;
					this.match(TrinoSQLParser.WITH);
					this.state = 810;
					this.match(TrinoSQLParser.GRANT);
					this.state = 811;
					this.match(TrinoSQLParser.OPTION);
					}
				}

				}
				break;

			case 45:
				_localctx = new RevokeRolesContext(_localctx);
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 814;
				this.match(TrinoSQLParser.REVOKE);
				this.state = 818;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 70, this._ctx) ) {
				case 1:
					{
					this.state = 815;
					this.match(TrinoSQLParser.ADMIN);
					this.state = 816;
					this.match(TrinoSQLParser.OPTION);
					this.state = 817;
					this.match(TrinoSQLParser.FOR);
					}
					break;
				}
				this.state = 820;
				this.privilegeOrRole();
				this.state = 825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 821;
					this.match(TrinoSQLParser.T__3);
					this.state = 822;
					this.privilegeOrRole();
					}
					}
					this.state = 827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 828;
				this.match(TrinoSQLParser.FROM);
				this.state = 829;
				this.principal();
				this.state = 834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 830;
					this.match(TrinoSQLParser.T__3);
					this.state = 831;
					this.principal();
					}
					}
					this.state = 836;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 840;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.GRANTED) {
					{
					this.state = 837;
					this.match(TrinoSQLParser.GRANTED);
					this.state = 838;
					this.match(TrinoSQLParser.BY);
					this.state = 839;
					this.grantor();
					}
				}

				this.state = 844;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.IN) {
					{
					this.state = 842;
					this.match(TrinoSQLParser.IN);
					this.state = 843;
					(_localctx as RevokeRolesContext)._catalog = this.identifier();
					}
				}

				}
				break;

			case 46:
				_localctx = new RevokePrivilegesContext(_localctx);
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 846;
				this.match(TrinoSQLParser.REVOKE);
				this.state = 850;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
				case 1:
					{
					this.state = 847;
					this.match(TrinoSQLParser.GRANT);
					this.state = 848;
					this.match(TrinoSQLParser.OPTION);
					this.state = 849;
					this.match(TrinoSQLParser.FOR);
					}
					break;
				}
				this.state = 862;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 77, this._ctx) ) {
				case 1:
					{
					{
					this.state = 852;
					this.privilegeOrRole();
					this.state = 857;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 853;
						this.match(TrinoSQLParser.T__3);
						this.state = 854;
						this.privilegeOrRole();
						}
						}
						this.state = 859;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					}
					break;

				case 2:
					{
					this.state = 860;
					this.match(TrinoSQLParser.ALL);
					this.state = 861;
					this.match(TrinoSQLParser.PRIVILEGES);
					}
					break;
				}
				this.state = 864;
				this.match(TrinoSQLParser.ON);
				this.state = 865;
				this.grantObject();
				this.state = 866;
				this.match(TrinoSQLParser.FROM);
				this.state = 867;
				(_localctx as RevokePrivilegesContext)._grantee = this.principal();
				}
				break;

			case 47:
				_localctx = new DenyContext(_localctx);
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 869;
				this.match(TrinoSQLParser.DENY);
				this.state = 880;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 79, this._ctx) ) {
				case 1:
					{
					this.state = 870;
					this.privilege();
					this.state = 875;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 871;
						this.match(TrinoSQLParser.T__3);
						this.state = 872;
						this.privilege();
						}
						}
						this.state = 877;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;

				case 2:
					{
					this.state = 878;
					this.match(TrinoSQLParser.ALL);
					this.state = 879;
					this.match(TrinoSQLParser.PRIVILEGES);
					}
					break;
				}
				this.state = 882;
				this.match(TrinoSQLParser.ON);
				this.state = 883;
				this.grantObject();
				this.state = 884;
				this.match(TrinoSQLParser.TO);
				this.state = 885;
				(_localctx as DenyContext)._grantee = this.principal();
				}
				break;

			case 48:
				_localctx = new SetRoleContext(_localctx);
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 887;
				this.match(TrinoSQLParser.SET);
				this.state = 888;
				this.match(TrinoSQLParser.ROLE);
				this.state = 892;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 80, this._ctx) ) {
				case 1:
					{
					this.state = 889;
					this.match(TrinoSQLParser.ALL);
					}
					break;

				case 2:
					{
					this.state = 890;
					this.match(TrinoSQLParser.NONE);
					}
					break;

				case 3:
					{
					this.state = 891;
					(_localctx as SetRoleContext)._role = this.identifier();
					}
					break;
				}
				this.state = 896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.IN) {
					{
					this.state = 894;
					this.match(TrinoSQLParser.IN);
					this.state = 895;
					(_localctx as SetRoleContext)._catalog = this.identifier();
					}
				}

				}
				break;

			case 49:
				_localctx = new ShowGrantsContext(_localctx);
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 898;
				this.match(TrinoSQLParser.SHOW);
				this.state = 899;
				this.match(TrinoSQLParser.GRANTS);
				this.state = 902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ON) {
					{
					this.state = 900;
					this.match(TrinoSQLParser.ON);
					this.state = 901;
					this.grantObject();
					}
				}

				}
				break;

			case 50:
				_localctx = new ExplainContext(_localctx);
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 904;
				this.match(TrinoSQLParser.EXPLAIN);
				this.state = 916;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
				case 1:
					{
					this.state = 905;
					this.match(TrinoSQLParser.T__1);
					this.state = 906;
					this.explainOption();
					this.state = 911;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 907;
						this.match(TrinoSQLParser.T__3);
						this.state = 908;
						this.explainOption();
						}
						}
						this.state = 913;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 914;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				this.state = 918;
				this.statement();
				}
				break;

			case 51:
				_localctx = new ExplainAnalyzeContext(_localctx);
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 919;
				this.match(TrinoSQLParser.EXPLAIN);
				this.state = 920;
				this.match(TrinoSQLParser.ANALYZE);
				this.state = 922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.VERBOSE) {
					{
					this.state = 921;
					this.match(TrinoSQLParser.VERBOSE);
					}
				}

				this.state = 924;
				this.statement();
				}
				break;

			case 52:
				_localctx = new ShowCreateTableContext(_localctx);
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 925;
				this.match(TrinoSQLParser.SHOW);
				this.state = 926;
				this.match(TrinoSQLParser.CREATE);
				this.state = 927;
				this.match(TrinoSQLParser.TABLE);
				this.state = 928;
				this.qualifiedName();
				}
				break;

			case 53:
				_localctx = new ShowCreateSchemaContext(_localctx);
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 929;
				this.match(TrinoSQLParser.SHOW);
				this.state = 930;
				this.match(TrinoSQLParser.CREATE);
				this.state = 931;
				this.match(TrinoSQLParser.SCHEMA);
				this.state = 932;
				this.qualifiedName();
				}
				break;

			case 54:
				_localctx = new ShowCreateViewContext(_localctx);
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 933;
				this.match(TrinoSQLParser.SHOW);
				this.state = 934;
				this.match(TrinoSQLParser.CREATE);
				this.state = 935;
				this.match(TrinoSQLParser.VIEW);
				this.state = 936;
				this.qualifiedName();
				}
				break;

			case 55:
				_localctx = new ShowCreateMaterializedViewContext(_localctx);
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 937;
				this.match(TrinoSQLParser.SHOW);
				this.state = 938;
				this.match(TrinoSQLParser.CREATE);
				this.state = 939;
				this.match(TrinoSQLParser.MATERIALIZED);
				this.state = 940;
				this.match(TrinoSQLParser.VIEW);
				this.state = 941;
				this.qualifiedName();
				}
				break;

			case 56:
				_localctx = new ShowTablesContext(_localctx);
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 942;
				this.match(TrinoSQLParser.SHOW);
				this.state = 943;
				this.match(TrinoSQLParser.TABLES);
				this.state = 946;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN) {
					{
					this.state = 944;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 945;
					this.qualifiedName();
					}
				}

				this.state = 954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 948;
					this.match(TrinoSQLParser.LIKE);
					this.state = 949;
					(_localctx as ShowTablesContext)._pattern = this.string();
					this.state = 952;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 950;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 951;
						(_localctx as ShowTablesContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 57:
				_localctx = new ShowSchemasContext(_localctx);
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 956;
				this.match(TrinoSQLParser.SHOW);
				this.state = 957;
				this.match(TrinoSQLParser.SCHEMAS);
				this.state = 960;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN) {
					{
					this.state = 958;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 959;
					this.identifier();
					}
				}

				this.state = 968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 962;
					this.match(TrinoSQLParser.LIKE);
					this.state = 963;
					(_localctx as ShowSchemasContext)._pattern = this.string();
					this.state = 966;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 964;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 965;
						(_localctx as ShowSchemasContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 58:
				_localctx = new ShowCatalogsContext(_localctx);
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 970;
				this.match(TrinoSQLParser.SHOW);
				this.state = 971;
				this.match(TrinoSQLParser.CATALOGS);
				this.state = 978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 972;
					this.match(TrinoSQLParser.LIKE);
					this.state = 973;
					(_localctx as ShowCatalogsContext)._pattern = this.string();
					this.state = 976;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 974;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 975;
						(_localctx as ShowCatalogsContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 59:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 980;
				this.match(TrinoSQLParser.SHOW);
				this.state = 981;
				this.match(TrinoSQLParser.COLUMNS);
				this.state = 982;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 983;
				this.qualifiedName();
				this.state = 990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 984;
					this.match(TrinoSQLParser.LIKE);
					this.state = 985;
					(_localctx as ShowColumnsContext)._pattern = this.string();
					this.state = 988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 986;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 987;
						(_localctx as ShowColumnsContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 60:
				_localctx = new ShowStatsContext(_localctx);
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 992;
				this.match(TrinoSQLParser.SHOW);
				this.state = 993;
				this.match(TrinoSQLParser.STATS);
				this.state = 994;
				this.match(TrinoSQLParser.FOR);
				this.state = 995;
				this.qualifiedName();
				}
				break;

			case 61:
				_localctx = new ShowStatsForQueryContext(_localctx);
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 996;
				this.match(TrinoSQLParser.SHOW);
				this.state = 997;
				this.match(TrinoSQLParser.STATS);
				this.state = 998;
				this.match(TrinoSQLParser.FOR);
				this.state = 999;
				this.match(TrinoSQLParser.T__1);
				this.state = 1000;
				this.rootQuery();
				this.state = 1001;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 62:
				_localctx = new ShowRolesContext(_localctx);
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 1003;
				this.match(TrinoSQLParser.SHOW);
				this.state = 1005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.CURRENT) {
					{
					this.state = 1004;
					this.match(TrinoSQLParser.CURRENT);
					}
				}

				this.state = 1007;
				this.match(TrinoSQLParser.ROLES);
				this.state = 1010;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN) {
					{
					this.state = 1008;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1009;
					this.identifier();
					}
				}

				}
				break;

			case 63:
				_localctx = new ShowRoleGrantsContext(_localctx);
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 1012;
				this.match(TrinoSQLParser.SHOW);
				this.state = 1013;
				this.match(TrinoSQLParser.ROLE);
				this.state = 1014;
				this.match(TrinoSQLParser.GRANTS);
				this.state = 1017;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN) {
					{
					this.state = 1015;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1016;
					this.identifier();
					}
				}

				}
				break;

			case 64:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 1019;
				this.match(TrinoSQLParser.DESCRIBE);
				this.state = 1020;
				this.qualifiedName();
				}
				break;

			case 65:
				_localctx = new ShowColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 1021;
				this.match(TrinoSQLParser.DESC);
				this.state = 1022;
				this.qualifiedName();
				}
				break;

			case 66:
				_localctx = new ShowFunctionsContext(_localctx);
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 1023;
				this.match(TrinoSQLParser.SHOW);
				this.state = 1024;
				this.match(TrinoSQLParser.FUNCTIONS);
				this.state = 1027;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN) {
					{
					this.state = 1025;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.FROM || _la === TrinoSQLParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1026;
					this.qualifiedName();
					}
				}

				this.state = 1035;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 1029;
					this.match(TrinoSQLParser.LIKE);
					this.state = 1030;
					(_localctx as ShowFunctionsContext)._pattern = this.string();
					this.state = 1033;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 1031;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 1032;
						(_localctx as ShowFunctionsContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 67:
				_localctx = new ShowSessionContext(_localctx);
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 1037;
				this.match(TrinoSQLParser.SHOW);
				this.state = 1038;
				this.match(TrinoSQLParser.SESSION);
				this.state = 1045;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.LIKE) {
					{
					this.state = 1039;
					this.match(TrinoSQLParser.LIKE);
					this.state = 1040;
					(_localctx as ShowSessionContext)._pattern = this.string();
					this.state = 1043;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ESCAPE) {
						{
						this.state = 1041;
						this.match(TrinoSQLParser.ESCAPE);
						this.state = 1042;
						(_localctx as ShowSessionContext)._escape = this.string();
						}
					}

					}
				}

				}
				break;

			case 68:
				_localctx = new SetSessionAuthorizationContext(_localctx);
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 1047;
				this.match(TrinoSQLParser.SET);
				this.state = 1048;
				this.match(TrinoSQLParser.SESSION);
				this.state = 1049;
				this.match(TrinoSQLParser.AUTHORIZATION);
				this.state = 1050;
				this.authorizationUser();
				}
				break;

			case 69:
				_localctx = new ResetSessionAuthorizationContext(_localctx);
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 1051;
				this.match(TrinoSQLParser.RESET);
				this.state = 1052;
				this.match(TrinoSQLParser.SESSION);
				this.state = 1053;
				this.match(TrinoSQLParser.AUTHORIZATION);
				}
				break;

			case 70:
				_localctx = new SetSessionContext(_localctx);
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 1054;
				this.match(TrinoSQLParser.SET);
				this.state = 1055;
				this.match(TrinoSQLParser.SESSION);
				this.state = 1056;
				this.qualifiedName();
				this.state = 1057;
				this.match(TrinoSQLParser.EQ);
				this.state = 1058;
				this.expression();
				}
				break;

			case 71:
				_localctx = new ResetSessionContext(_localctx);
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 1060;
				this.match(TrinoSQLParser.RESET);
				this.state = 1061;
				this.match(TrinoSQLParser.SESSION);
				this.state = 1062;
				this.qualifiedName();
				}
				break;

			case 72:
				_localctx = new StartTransactionContext(_localctx);
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 1063;
				this.match(TrinoSQLParser.START);
				this.state = 1064;
				this.match(TrinoSQLParser.TRANSACTION);
				this.state = 1073;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ISOLATION || _la === TrinoSQLParser.READ) {
					{
					this.state = 1065;
					this.transactionMode();
					this.state = 1070;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1066;
						this.match(TrinoSQLParser.T__3);
						this.state = 1067;
						this.transactionMode();
						}
						}
						this.state = 1072;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;

			case 73:
				_localctx = new CommitContext(_localctx);
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 1075;
				this.match(TrinoSQLParser.COMMIT);
				this.state = 1077;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WORK) {
					{
					this.state = 1076;
					this.match(TrinoSQLParser.WORK);
					}
				}

				}
				break;

			case 74:
				_localctx = new RollbackContext(_localctx);
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 1079;
				this.match(TrinoSQLParser.ROLLBACK);
				this.state = 1081;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WORK) {
					{
					this.state = 1080;
					this.match(TrinoSQLParser.WORK);
					}
				}

				}
				break;

			case 75:
				_localctx = new PrepareContext(_localctx);
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 1083;
				this.match(TrinoSQLParser.PREPARE);
				this.state = 1084;
				this.identifier();
				this.state = 1085;
				this.match(TrinoSQLParser.FROM);
				this.state = 1086;
				this.statement();
				}
				break;

			case 76:
				_localctx = new DeallocateContext(_localctx);
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 1088;
				this.match(TrinoSQLParser.DEALLOCATE);
				this.state = 1089;
				this.match(TrinoSQLParser.PREPARE);
				this.state = 1090;
				this.identifier();
				}
				break;

			case 77:
				_localctx = new ExecuteContext(_localctx);
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 1091;
				this.match(TrinoSQLParser.EXECUTE);
				this.state = 1092;
				this.identifier();
				this.state = 1102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.USING) {
					{
					this.state = 1093;
					this.match(TrinoSQLParser.USING);
					this.state = 1094;
					this.expression();
					this.state = 1099;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1095;
						this.match(TrinoSQLParser.T__3);
						this.state = 1096;
						this.expression();
						}
						}
						this.state = 1101;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;

			case 78:
				_localctx = new ExecuteImmediateContext(_localctx);
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 1104;
				this.match(TrinoSQLParser.EXECUTE);
				this.state = 1105;
				this.match(TrinoSQLParser.IMMEDIATE);
				this.state = 1106;
				this.string();
				this.state = 1116;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.USING) {
					{
					this.state = 1107;
					this.match(TrinoSQLParser.USING);
					this.state = 1108;
					this.expression();
					this.state = 1113;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1109;
						this.match(TrinoSQLParser.T__3);
						this.state = 1110;
						this.expression();
						}
						}
						this.state = 1115;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				}
				break;

			case 79:
				_localctx = new DescribeInputContext(_localctx);
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 1118;
				this.match(TrinoSQLParser.DESCRIBE);
				this.state = 1119;
				this.match(TrinoSQLParser.INPUT);
				this.state = 1120;
				this.identifier();
				}
				break;

			case 80:
				_localctx = new DescribeOutputContext(_localctx);
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 1121;
				this.match(TrinoSQLParser.DESCRIBE);
				this.state = 1122;
				this.match(TrinoSQLParser.OUTPUT);
				this.state = 1123;
				this.identifier();
				}
				break;

			case 81:
				_localctx = new SetPathContext(_localctx);
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 1124;
				this.match(TrinoSQLParser.SET);
				this.state = 1125;
				this.match(TrinoSQLParser.PATH);
				this.state = 1126;
				this.pathSpecification();
				}
				break;

			case 82:
				_localctx = new SetTimeZoneContext(_localctx);
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 1127;
				this.match(TrinoSQLParser.SET);
				this.state = 1128;
				this.match(TrinoSQLParser.TIME);
				this.state = 1129;
				this.match(TrinoSQLParser.ZONE);
				this.state = 1132;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
				case 1:
					{
					this.state = 1130;
					this.match(TrinoSQLParser.LOCAL);
					}
					break;

				case 2:
					{
					this.state = 1131;
					this.expression();
					}
					break;
				}
				}
				break;

			case 83:
				_localctx = new UpdateContext(_localctx);
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 1134;
				this.match(TrinoSQLParser.UPDATE);
				this.state = 1135;
				this.qualifiedName();
				this.state = 1136;
				this.match(TrinoSQLParser.SET);
				this.state = 1137;
				this.updateAssignment();
				this.state = 1142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1138;
					this.match(TrinoSQLParser.T__3);
					this.state = 1139;
					this.updateAssignment();
					}
					}
					this.state = 1144;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WHERE) {
					{
					this.state = 1145;
					this.match(TrinoSQLParser.WHERE);
					this.state = 1146;
					(_localctx as UpdateContext)._where = this.booleanExpression(0);
					}
				}

				}
				break;

			case 84:
				_localctx = new MergeContext(_localctx);
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 1149;
				this.match(TrinoSQLParser.MERGE);
				this.state = 1150;
				this.match(TrinoSQLParser.INTO);
				this.state = 1151;
				this.qualifiedName();
				this.state = 1156;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.AS - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
					{
					this.state = 1153;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.AS) {
						{
						this.state = 1152;
						this.match(TrinoSQLParser.AS);
						}
					}

					this.state = 1155;
					this.identifier();
					}
				}

				this.state = 1158;
				this.match(TrinoSQLParser.USING);
				this.state = 1159;
				this.relation(0);
				this.state = 1160;
				this.match(TrinoSQLParser.ON);
				this.state = 1161;
				this.expression();
				this.state = 1163;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1162;
					this.mergeCase();
					}
					}
					this.state = 1165;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.WHEN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rootQuery(): RootQueryContext {
		let _localctx: RootQueryContext = new RootQueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, TrinoSQLParser.RULE_rootQuery);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1170;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				{
				this.state = 1169;
				this.withFunction();
				}
				break;
			}
			this.state = 1172;
			this.query();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withFunction(): WithFunctionContext {
		let _localctx: WithFunctionContext = new WithFunctionContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, TrinoSQLParser.RULE_withFunction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1174;
			this.match(TrinoSQLParser.WITH);
			this.state = 1175;
			this.functionSpecification();
			this.state = 1180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 1176;
				this.match(TrinoSQLParser.T__3);
				this.state = 1177;
				this.functionSpecification();
				}
				}
				this.state = 1182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public query(): QueryContext {
		let _localctx: QueryContext = new QueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, TrinoSQLParser.RULE_query);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.WITH) {
				{
				this.state = 1183;
				this.with();
				}
			}

			this.state = 1186;
			this.queryNoWith();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with(): WithContext {
		let _localctx: WithContext = new WithContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, TrinoSQLParser.RULE_with);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1188;
			this.match(TrinoSQLParser.WITH);
			this.state = 1190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.RECURSIVE) {
				{
				this.state = 1189;
				this.match(TrinoSQLParser.RECURSIVE);
				}
			}

			this.state = 1192;
			this.namedQuery();
			this.state = 1197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 1193;
				this.match(TrinoSQLParser.T__3);
				this.state = 1194;
				this.namedQuery();
				}
				}
				this.state = 1199;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableElement(): TableElementContext {
		let _localctx: TableElementContext = new TableElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, TrinoSQLParser.RULE_tableElement);
		try {
			this.state = 1202;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1200;
				this.columnDefinition();
				}
				break;
			case TrinoSQLParser.LIKE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1201;
				this.likeClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDefinition(): ColumnDefinitionContext {
		let _localctx: ColumnDefinitionContext = new ColumnDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, TrinoSQLParser.RULE_columnDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1204;
			this.qualifiedName();
			this.state = 1205;
			this.type(0);
			this.state = 1208;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.NOT) {
				{
				this.state = 1206;
				this.match(TrinoSQLParser.NOT);
				this.state = 1207;
				this.match(TrinoSQLParser.NULL);
				}
			}

			this.state = 1212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.COMMENT) {
				{
				this.state = 1210;
				this.match(TrinoSQLParser.COMMENT);
				this.state = 1211;
				this.string();
				}
			}

			this.state = 1216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.WITH) {
				{
				this.state = 1214;
				this.match(TrinoSQLParser.WITH);
				this.state = 1215;
				this.properties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public likeClause(): LikeClauseContext {
		let _localctx: LikeClauseContext = new LikeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, TrinoSQLParser.RULE_likeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1218;
			this.match(TrinoSQLParser.LIKE);
			this.state = 1219;
			this.qualifiedName();
			this.state = 1222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.EXCLUDING || _la === TrinoSQLParser.INCLUDING) {
				{
				this.state = 1220;
				_localctx._optionType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.EXCLUDING || _la === TrinoSQLParser.INCLUDING)) {
					_localctx._optionType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1221;
				this.match(TrinoSQLParser.PROPERTIES);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public properties(): PropertiesContext {
		let _localctx: PropertiesContext = new PropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, TrinoSQLParser.RULE_properties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1224;
			this.match(TrinoSQLParser.T__1);
			this.state = 1225;
			this.propertyAssignments();
			this.state = 1226;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyAssignments(): PropertyAssignmentsContext {
		let _localctx: PropertyAssignmentsContext = new PropertyAssignmentsContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, TrinoSQLParser.RULE_propertyAssignments);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1228;
			this.property();
			this.state = 1233;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 1229;
				this.match(TrinoSQLParser.T__3);
				this.state = 1230;
				this.property();
				}
				}
				this.state = 1235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public property(): PropertyContext {
		let _localctx: PropertyContext = new PropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, TrinoSQLParser.RULE_property);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1236;
			this.identifier();
			this.state = 1237;
			this.match(TrinoSQLParser.EQ);
			this.state = 1238;
			this.propertyValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyValue(): PropertyValueContext {
		let _localctx: PropertyValueContext = new PropertyValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, TrinoSQLParser.RULE_propertyValue);
		try {
			this.state = 1242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 130, this._ctx) ) {
			case 1:
				_localctx = new DefaultPropertyValueContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1240;
				this.match(TrinoSQLParser.DEFAULT);
				}
				break;

			case 2:
				_localctx = new NonDefaultPropertyValueContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1241;
				this.expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryNoWith(): QueryNoWithContext {
		let _localctx: QueryNoWithContext = new QueryNoWithContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, TrinoSQLParser.RULE_queryNoWith);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1244;
			this.queryTerm(0);
			this.state = 1255;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.ORDER) {
				{
				this.state = 1245;
				this.match(TrinoSQLParser.ORDER);
				this.state = 1246;
				this.match(TrinoSQLParser.BY);
				this.state = 1247;
				this.sortItem();
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1248;
					this.match(TrinoSQLParser.T__3);
					this.state = 1249;
					this.sortItem();
					}
					}
					this.state = 1254;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.OFFSET) {
				{
				this.state = 1257;
				this.match(TrinoSQLParser.OFFSET);
				this.state = 1258;
				_localctx._offset = this.rowCount();
				this.state = 1260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ROW || _la === TrinoSQLParser.ROWS) {
					{
					this.state = 1259;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.ROW || _la === TrinoSQLParser.ROWS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
			}

			this.state = 1277;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.LIMIT:
				{
				{
				this.state = 1264;
				this.match(TrinoSQLParser.LIMIT);
				this.state = 1265;
				_localctx._limit = this.limitRowCount();
				}
				}
				break;
			case TrinoSQLParser.FETCH:
				{
				{
				this.state = 1266;
				this.match(TrinoSQLParser.FETCH);
				this.state = 1267;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.FIRST || _la === TrinoSQLParser.NEXT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1269;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.QUESTION_MARK || _la === TrinoSQLParser.INTEGER_VALUE) {
					{
					this.state = 1268;
					_localctx._fetchFirst = this.rowCount();
					}
				}

				this.state = 1271;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.ROW || _la === TrinoSQLParser.ROWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1275;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case TrinoSQLParser.ONLY:
					{
					this.state = 1272;
					this.match(TrinoSQLParser.ONLY);
					}
					break;
				case TrinoSQLParser.WITH:
					{
					this.state = 1273;
					this.match(TrinoSQLParser.WITH);
					this.state = 1274;
					this.match(TrinoSQLParser.TIES);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case TrinoSQLParser.EOF:
			case TrinoSQLParser.T__2:
			case TrinoSQLParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limitRowCount(): LimitRowCountContext {
		let _localctx: LimitRowCountContext = new LimitRowCountContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, TrinoSQLParser.RULE_limitRowCount);
		try {
			this.state = 1281;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1279;
				this.match(TrinoSQLParser.ALL);
				}
				break;
			case TrinoSQLParser.QUESTION_MARK:
			case TrinoSQLParser.INTEGER_VALUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1280;
				this.rowCount();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowCount(): RowCountContext {
		let _localctx: RowCountContext = new RowCountContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, TrinoSQLParser.RULE_rowCount);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1283;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.QUESTION_MARK || _la === TrinoSQLParser.INTEGER_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public queryTerm(): QueryTermContext;
	public queryTerm(_p: number): QueryTermContext;
	// @RuleVersion(0)
	public queryTerm(_p?: number): QueryTermContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: QueryTermContext = new QueryTermContext(this._ctx, _parentState);
		let _prevctx: QueryTermContext = _localctx;
		let _startState: number = 42;
		this.enterRecursionRule(_localctx, 42, TrinoSQLParser.RULE_queryTerm, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 1286;
			this.queryPrimary();
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 1302;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 1300;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 141, this._ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						(_localctx as SetOperationContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_queryTerm);
						this.state = 1288;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 1289;
						(_localctx as SetOperationContext)._operator = this.match(TrinoSQLParser.INTERSECT);
						this.state = 1291;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TrinoSQLParser.ALL || _la === TrinoSQLParser.DISTINCT) {
							{
							this.state = 1290;
							this.setQuantifier();
							}
						}

						this.state = 1293;
						(_localctx as SetOperationContext)._right = this.queryTerm(3);
						}
						break;

					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						(_localctx as SetOperationContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_queryTerm);
						this.state = 1294;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 1295;
						(_localctx as SetOperationContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === TrinoSQLParser.EXCEPT || _la === TrinoSQLParser.UNION)) {
							(_localctx as SetOperationContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1297;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TrinoSQLParser.ALL || _la === TrinoSQLParser.DISTINCT) {
							{
							this.state = 1296;
							this.setQuantifier();
							}
						}

						this.state = 1299;
						(_localctx as SetOperationContext)._right = this.queryTerm(2);
						}
						break;
					}
					}
				}
				this.state = 1304;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 142, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryPrimary(): QueryPrimaryContext {
		let _localctx: QueryPrimaryContext = new QueryPrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, TrinoSQLParser.RULE_queryPrimary);
		try {
			let _alt: number;
			this.state = 1321;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1305;
				this.querySpecification();
				}
				break;
			case TrinoSQLParser.TABLE:
				_localctx = new TableContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1306;
				this.match(TrinoSQLParser.TABLE);
				this.state = 1307;
				this.qualifiedName();
				}
				break;
			case TrinoSQLParser.VALUES:
				_localctx = new InlineTableContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1308;
				this.match(TrinoSQLParser.VALUES);
				this.state = 1309;
				this.expression();
				this.state = 1314;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1310;
						this.match(TrinoSQLParser.T__3);
						this.state = 1311;
						this.expression();
						}
						}
					}
					this.state = 1316;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 143, this._ctx);
				}
				}
				break;
			case TrinoSQLParser.T__1:
				_localctx = new SubqueryContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1317;
				this.match(TrinoSQLParser.T__1);
				this.state = 1318;
				this.queryNoWith();
				this.state = 1319;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortItem(): SortItemContext {
		let _localctx: SortItemContext = new SortItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, TrinoSQLParser.RULE_sortItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1323;
			this.expression();
			this.state = 1325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.ASC || _la === TrinoSQLParser.DESC) {
				{
				this.state = 1324;
				_localctx._ordering = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.ASC || _la === TrinoSQLParser.DESC)) {
					_localctx._ordering = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 1329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.NULLS) {
				{
				this.state = 1327;
				this.match(TrinoSQLParser.NULLS);
				this.state = 1328;
				_localctx._nullOrdering = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.FIRST || _la === TrinoSQLParser.LAST)) {
					_localctx._nullOrdering = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public querySpecification(): QuerySpecificationContext {
		let _localctx: QuerySpecificationContext = new QuerySpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, TrinoSQLParser.RULE_querySpecification);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1331;
			this.match(TrinoSQLParser.SELECT);
			this.state = 1333;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
			case 1:
				{
				this.state = 1332;
				this.setQuantifier();
				}
				break;
			}
			this.state = 1335;
			this.selectItem();
			this.state = 1340;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1336;
					this.match(TrinoSQLParser.T__3);
					this.state = 1337;
					this.selectItem();
					}
					}
				}
				this.state = 1342;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 148, this._ctx);
			}
			this.state = 1352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
			case 1:
				{
				this.state = 1343;
				this.match(TrinoSQLParser.FROM);
				this.state = 1344;
				this.relation(0);
				this.state = 1349;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1345;
						this.match(TrinoSQLParser.T__3);
						this.state = 1346;
						this.relation(0);
						}
						}
					}
					this.state = 1351;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 149, this._ctx);
				}
				}
				break;
			}
			this.state = 1356;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
			case 1:
				{
				this.state = 1354;
				this.match(TrinoSQLParser.WHERE);
				this.state = 1355;
				_localctx._where = this.booleanExpression(0);
				}
				break;
			}
			this.state = 1361;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				{
				this.state = 1358;
				this.match(TrinoSQLParser.GROUP);
				this.state = 1359;
				this.match(TrinoSQLParser.BY);
				this.state = 1360;
				this.groupBy();
				}
				break;
			}
			this.state = 1365;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 153, this._ctx) ) {
			case 1:
				{
				this.state = 1363;
				this.match(TrinoSQLParser.HAVING);
				this.state = 1364;
				_localctx._having = this.booleanExpression(0);
				}
				break;
			}
			this.state = 1376;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
			case 1:
				{
				this.state = 1367;
				this.match(TrinoSQLParser.WINDOW);
				this.state = 1368;
				this.windowDefinition();
				this.state = 1373;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1369;
						this.match(TrinoSQLParser.T__3);
						this.state = 1370;
						this.windowDefinition();
						}
						}
					}
					this.state = 1375;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 154, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupBy(): GroupByContext {
		let _localctx: GroupByContext = new GroupByContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, TrinoSQLParser.RULE_groupBy);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1379;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 1378;
				this.setQuantifier();
				}
				break;
			}
			this.state = 1381;
			this.groupingElement();
			this.state = 1386;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1382;
					this.match(TrinoSQLParser.T__3);
					this.state = 1383;
					this.groupingElement();
					}
					}
				}
				this.state = 1388;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 157, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingElement(): GroupingElementContext {
		let _localctx: GroupingElementContext = new GroupingElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, TrinoSQLParser.RULE_groupingElement);
		let _la: number;
		try {
			this.state = 1429;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				_localctx = new SingleGroupingSetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1389;
				this.groupingSet();
				}
				break;

			case 2:
				_localctx = new RollupContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1390;
				this.match(TrinoSQLParser.ROLLUP);
				this.state = 1391;
				this.match(TrinoSQLParser.T__1);
				this.state = 1400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 1392;
					this.groupingSet();
					this.state = 1397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1393;
						this.match(TrinoSQLParser.T__3);
						this.state = 1394;
						this.groupingSet();
						}
						}
						this.state = 1399;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1402;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 3:
				_localctx = new CubeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1403;
				this.match(TrinoSQLParser.CUBE);
				this.state = 1404;
				this.match(TrinoSQLParser.T__1);
				this.state = 1413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 1405;
					this.groupingSet();
					this.state = 1410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1406;
						this.match(TrinoSQLParser.T__3);
						this.state = 1407;
						this.groupingSet();
						}
						}
						this.state = 1412;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1415;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 4:
				_localctx = new MultipleGroupingSetsContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1416;
				this.match(TrinoSQLParser.GROUPING);
				this.state = 1417;
				this.match(TrinoSQLParser.SETS);
				this.state = 1418;
				this.match(TrinoSQLParser.T__1);
				this.state = 1419;
				this.groupingSet();
				this.state = 1424;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1420;
					this.match(TrinoSQLParser.T__3);
					this.state = 1421;
					this.groupingSet();
					}
					}
					this.state = 1426;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1427;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupingSet(): GroupingSetContext {
		let _localctx: GroupingSetContext = new GroupingSetContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, TrinoSQLParser.RULE_groupingSet);
		let _la: number;
		try {
			this.state = 1444;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1431;
				this.match(TrinoSQLParser.T__1);
				this.state = 1440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 1432;
					this.expression();
					this.state = 1437;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1433;
						this.match(TrinoSQLParser.T__3);
						this.state = 1434;
						this.expression();
						}
						}
						this.state = 1439;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1442;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1443;
				this.expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowDefinition(): WindowDefinitionContext {
		let _localctx: WindowDefinitionContext = new WindowDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, TrinoSQLParser.RULE_windowDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1446;
			_localctx._name = this.identifier();
			this.state = 1447;
			this.match(TrinoSQLParser.AS);
			this.state = 1448;
			this.match(TrinoSQLParser.T__1);
			this.state = 1449;
			this.windowSpecification();
			this.state = 1450;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowSpecification(): WindowSpecificationContext {
		let _localctx: WindowSpecificationContext = new WindowSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, TrinoSQLParser.RULE_windowSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1453;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 167, this._ctx) ) {
			case 1:
				{
				this.state = 1452;
				_localctx._existingWindowName = this.identifier();
				}
				break;
			}
			this.state = 1465;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.PARTITION) {
				{
				this.state = 1455;
				this.match(TrinoSQLParser.PARTITION);
				this.state = 1456;
				this.match(TrinoSQLParser.BY);
				this.state = 1457;
				_localctx._expression = this.expression();
				_localctx._partition.push(_localctx._expression);
				this.state = 1462;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1458;
					this.match(TrinoSQLParser.T__3);
					this.state = 1459;
					_localctx._expression = this.expression();
					_localctx._partition.push(_localctx._expression);
					}
					}
					this.state = 1464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.ORDER) {
				{
				this.state = 1467;
				this.match(TrinoSQLParser.ORDER);
				this.state = 1468;
				this.match(TrinoSQLParser.BY);
				this.state = 1469;
				this.sortItem();
				this.state = 1474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1470;
					this.match(TrinoSQLParser.T__3);
					this.state = 1471;
					this.sortItem();
					}
					}
					this.state = 1476;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.GROUPS || _la === TrinoSQLParser.MEASURES || _la === TrinoSQLParser.RANGE || _la === TrinoSQLParser.ROWS) {
				{
				this.state = 1479;
				this.windowFrame();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public namedQuery(): NamedQueryContext {
		let _localctx: NamedQueryContext = new NamedQueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, TrinoSQLParser.RULE_namedQuery);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1482;
			_localctx._name = this.identifier();
			this.state = 1484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.T__1) {
				{
				this.state = 1483;
				this.columnAliases();
				}
			}

			this.state = 1486;
			this.match(TrinoSQLParser.AS);
			this.state = 1487;
			this.match(TrinoSQLParser.T__1);
			this.state = 1488;
			this.query();
			this.state = 1489;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setQuantifier(): SetQuantifierContext {
		let _localctx: SetQuantifierContext = new SetQuantifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, TrinoSQLParser.RULE_setQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1491;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.ALL || _la === TrinoSQLParser.DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let _localctx: SelectItemContext = new SelectItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, TrinoSQLParser.RULE_selectItem);
		let _la: number;
		try {
			this.state = 1508;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 177, this._ctx) ) {
			case 1:
				_localctx = new SelectSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1493;
				this.expression();
				this.state = 1498;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 175, this._ctx) ) {
				case 1:
					{
					this.state = 1495;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.AS) {
						{
						this.state = 1494;
						this.match(TrinoSQLParser.AS);
						}
					}

					this.state = 1497;
					this.identifier();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SelectAllContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1500;
				this.primaryExpression(0);
				this.state = 1501;
				this.match(TrinoSQLParser.T__0);
				this.state = 1502;
				this.match(TrinoSQLParser.ASTERISK);
				this.state = 1505;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
				case 1:
					{
					this.state = 1503;
					this.match(TrinoSQLParser.AS);
					this.state = 1504;
					this.columnAliases();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new SelectAllContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1507;
				this.match(TrinoSQLParser.ASTERISK);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public relation(): RelationContext;
	public relation(_p: number): RelationContext;
	// @RuleVersion(0)
	public relation(_p?: number): RelationContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: RelationContext = new RelationContext(this._ctx, _parentState);
		let _prevctx: RelationContext = _localctx;
		let _startState: number = 66;
		this.enterRecursionRule(_localctx, 66, TrinoSQLParser.RULE_relation, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new RelationDefaultContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 1511;
			this.sampledRelation();
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 1531;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new JoinRelationContext(new RelationContext(_parentctx, _parentState));
					(_localctx as JoinRelationContext)._left = _prevctx;
					this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_relation);
					this.state = 1513;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 1527;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TrinoSQLParser.CROSS:
						{
						this.state = 1514;
						this.match(TrinoSQLParser.CROSS);
						this.state = 1515;
						this.match(TrinoSQLParser.JOIN);
						this.state = 1516;
						(_localctx as JoinRelationContext)._right = this.sampledRelation();
						}
						break;
					case TrinoSQLParser.FULL:
					case TrinoSQLParser.INNER:
					case TrinoSQLParser.JOIN:
					case TrinoSQLParser.LEFT:
					case TrinoSQLParser.RIGHT:
						{
						this.state = 1517;
						this.joinType();
						this.state = 1518;
						this.match(TrinoSQLParser.JOIN);
						this.state = 1519;
						(_localctx as JoinRelationContext)._rightRelation = this.relation(0);
						this.state = 1520;
						this.joinCriteria();
						}
						break;
					case TrinoSQLParser.NATURAL:
						{
						this.state = 1522;
						this.match(TrinoSQLParser.NATURAL);
						this.state = 1523;
						this.joinType();
						this.state = 1524;
						this.match(TrinoSQLParser.JOIN);
						this.state = 1525;
						(_localctx as JoinRelationContext)._right = this.sampledRelation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 1533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 179, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinType(): JoinTypeContext {
		let _localctx: JoinTypeContext = new JoinTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, TrinoSQLParser.RULE_joinType);
		let _la: number;
		try {
			this.state = 1549;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.INNER:
			case TrinoSQLParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.INNER) {
					{
					this.state = 1534;
					this.match(TrinoSQLParser.INNER);
					}
				}

				}
				break;
			case TrinoSQLParser.LEFT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1537;
				this.match(TrinoSQLParser.LEFT);
				this.state = 1539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OUTER) {
					{
					this.state = 1538;
					this.match(TrinoSQLParser.OUTER);
					}
				}

				}
				break;
			case TrinoSQLParser.RIGHT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1541;
				this.match(TrinoSQLParser.RIGHT);
				this.state = 1543;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OUTER) {
					{
					this.state = 1542;
					this.match(TrinoSQLParser.OUTER);
					}
				}

				}
				break;
			case TrinoSQLParser.FULL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1545;
				this.match(TrinoSQLParser.FULL);
				this.state = 1547;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OUTER) {
					{
					this.state = 1546;
					this.match(TrinoSQLParser.OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public joinCriteria(): JoinCriteriaContext {
		let _localctx: JoinCriteriaContext = new JoinCriteriaContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, TrinoSQLParser.RULE_joinCriteria);
		let _la: number;
		try {
			this.state = 1565;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1551;
				this.match(TrinoSQLParser.ON);
				this.state = 1552;
				this.booleanExpression(0);
				}
				break;
			case TrinoSQLParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1553;
				this.match(TrinoSQLParser.USING);
				this.state = 1554;
				this.match(TrinoSQLParser.T__1);
				this.state = 1555;
				this.identifier();
				this.state = 1560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1556;
					this.match(TrinoSQLParser.T__3);
					this.state = 1557;
					this.identifier();
					}
					}
					this.state = 1562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1563;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sampledRelation(): SampledRelationContext {
		let _localctx: SampledRelationContext = new SampledRelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, TrinoSQLParser.RULE_sampledRelation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1567;
			this.patternRecognition();
			this.state = 1574;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				{
				this.state = 1568;
				this.match(TrinoSQLParser.TABLESAMPLE);
				this.state = 1569;
				this.sampleType();
				this.state = 1570;
				this.match(TrinoSQLParser.T__1);
				this.state = 1571;
				_localctx._percentage = this.expression();
				this.state = 1572;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sampleType(): SampleTypeContext {
		let _localctx: SampleTypeContext = new SampleTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, TrinoSQLParser.RULE_sampleType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1576;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.BERNOULLI || _la === TrinoSQLParser.SYSTEM)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public trimsSpecification(): TrimsSpecificationContext {
		let _localctx: TrimsSpecificationContext = new TrimsSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, TrinoSQLParser.RULE_trimsSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1578;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.BOTH || _la === TrinoSQLParser.LEADING || _la === TrinoSQLParser.TRAILING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
		let _localctx: ListAggOverflowBehaviorContext = new ListAggOverflowBehaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, TrinoSQLParser.RULE_listAggOverflowBehavior);
		let _la: number;
		try {
			this.state = 1586;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ERROR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1580;
				this.match(TrinoSQLParser.ERROR);
				}
				break;
			case TrinoSQLParser.TRUNCATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1581;
				this.match(TrinoSQLParser.TRUNCATE);
				this.state = 1583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.STRING || _la === TrinoSQLParser.UNICODE_STRING) {
					{
					this.state = 1582;
					this.string();
					}
				}

				this.state = 1585;
				this.listaggCountIndication();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listaggCountIndication(): ListaggCountIndicationContext {
		let _localctx: ListaggCountIndicationContext = new ListaggCountIndicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, TrinoSQLParser.RULE_listaggCountIndication);
		try {
			this.state = 1592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1588;
				this.match(TrinoSQLParser.WITH);
				this.state = 1589;
				this.match(TrinoSQLParser.COUNT);
				}
				break;
			case TrinoSQLParser.WITHOUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1590;
				this.match(TrinoSQLParser.WITHOUT);
				this.state = 1591;
				this.match(TrinoSQLParser.COUNT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternRecognition(): PatternRecognitionContext {
		let _localctx: PatternRecognitionContext = new PatternRecognitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, TrinoSQLParser.RULE_patternRecognition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1594;
			this.aliasedRelation();
			this.state = 1677;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
			case 1:
				{
				this.state = 1595;
				this.match(TrinoSQLParser.MATCH_RECOGNIZE);
				this.state = 1596;
				this.match(TrinoSQLParser.T__1);
				this.state = 1607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.PARTITION) {
					{
					this.state = 1597;
					this.match(TrinoSQLParser.PARTITION);
					this.state = 1598;
					this.match(TrinoSQLParser.BY);
					this.state = 1599;
					_localctx._expression = this.expression();
					_localctx._partition.push(_localctx._expression);
					this.state = 1604;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1600;
						this.match(TrinoSQLParser.T__3);
						this.state = 1601;
						_localctx._expression = this.expression();
						_localctx._partition.push(_localctx._expression);
						}
						}
						this.state = 1606;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1619;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ORDER) {
					{
					this.state = 1609;
					this.match(TrinoSQLParser.ORDER);
					this.state = 1610;
					this.match(TrinoSQLParser.BY);
					this.state = 1611;
					this.sortItem();
					this.state = 1616;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1612;
						this.match(TrinoSQLParser.T__3);
						this.state = 1613;
						this.sortItem();
						}
						}
						this.state = 1618;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1630;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.MEASURES) {
					{
					this.state = 1621;
					this.match(TrinoSQLParser.MEASURES);
					this.state = 1622;
					this.measureDefinition();
					this.state = 1627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1623;
						this.match(TrinoSQLParser.T__3);
						this.state = 1624;
						this.measureDefinition();
						}
						}
						this.state = 1629;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1633;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ALL || _la === TrinoSQLParser.ONE) {
					{
					this.state = 1632;
					this.rowsPerMatch();
					}
				}

				this.state = 1638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AFTER) {
					{
					this.state = 1635;
					this.match(TrinoSQLParser.AFTER);
					this.state = 1636;
					this.match(TrinoSQLParser.MATCH);
					this.state = 1637;
					this.skipTo();
					}
				}

				this.state = 1641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.INITIAL || _la === TrinoSQLParser.SEEK) {
					{
					this.state = 1640;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.INITIAL || _la === TrinoSQLParser.SEEK)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1643;
				this.match(TrinoSQLParser.PATTERN);
				this.state = 1644;
				this.match(TrinoSQLParser.T__1);
				this.state = 1645;
				this.rowPattern(0);
				this.state = 1646;
				this.match(TrinoSQLParser.T__2);
				this.state = 1656;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.SUBSET) {
					{
					this.state = 1647;
					this.match(TrinoSQLParser.SUBSET);
					this.state = 1648;
					this.subsetDefinition();
					this.state = 1653;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 1649;
						this.match(TrinoSQLParser.T__3);
						this.state = 1650;
						this.subsetDefinition();
						}
						}
						this.state = 1655;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 1658;
				this.match(TrinoSQLParser.DEFINE);
				this.state = 1659;
				this.variableDefinition();
				this.state = 1664;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1660;
					this.match(TrinoSQLParser.T__3);
					this.state = 1661;
					this.variableDefinition();
					}
					}
					this.state = 1666;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1667;
				this.match(TrinoSQLParser.T__2);
				this.state = 1675;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
				case 1:
					{
					this.state = 1669;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.AS) {
						{
						this.state = 1668;
						this.match(TrinoSQLParser.AS);
						}
					}

					this.state = 1671;
					this.identifier();
					this.state = 1673;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
					case 1:
						{
						this.state = 1672;
						this.columnAliases();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public measureDefinition(): MeasureDefinitionContext {
		let _localctx: MeasureDefinitionContext = new MeasureDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, TrinoSQLParser.RULE_measureDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1679;
			this.expression();
			this.state = 1680;
			this.match(TrinoSQLParser.AS);
			this.state = 1681;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsPerMatch(): RowsPerMatchContext {
		let _localctx: RowsPerMatchContext = new RowsPerMatchContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, TrinoSQLParser.RULE_rowsPerMatch);
		let _la: number;
		try {
			this.state = 1694;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ONE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1683;
				this.match(TrinoSQLParser.ONE);
				this.state = 1684;
				this.match(TrinoSQLParser.ROW);
				this.state = 1685;
				this.match(TrinoSQLParser.PER);
				this.state = 1686;
				this.match(TrinoSQLParser.MATCH);
				}
				break;
			case TrinoSQLParser.ALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1687;
				this.match(TrinoSQLParser.ALL);
				this.state = 1688;
				this.match(TrinoSQLParser.ROWS);
				this.state = 1689;
				this.match(TrinoSQLParser.PER);
				this.state = 1690;
				this.match(TrinoSQLParser.MATCH);
				this.state = 1692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.OMIT || _la === TrinoSQLParser.SHOW || _la === TrinoSQLParser.WITH) {
					{
					this.state = 1691;
					this.emptyMatchHandling();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public emptyMatchHandling(): EmptyMatchHandlingContext {
		let _localctx: EmptyMatchHandlingContext = new EmptyMatchHandlingContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, TrinoSQLParser.RULE_emptyMatchHandling);
		try {
			this.state = 1705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.SHOW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1696;
				this.match(TrinoSQLParser.SHOW);
				this.state = 1697;
				this.match(TrinoSQLParser.EMPTY);
				this.state = 1698;
				this.match(TrinoSQLParser.MATCHES);
				}
				break;
			case TrinoSQLParser.OMIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1699;
				this.match(TrinoSQLParser.OMIT);
				this.state = 1700;
				this.match(TrinoSQLParser.EMPTY);
				this.state = 1701;
				this.match(TrinoSQLParser.MATCHES);
				}
				break;
			case TrinoSQLParser.WITH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1702;
				this.match(TrinoSQLParser.WITH);
				this.state = 1703;
				this.match(TrinoSQLParser.UNMATCHED);
				this.state = 1704;
				this.match(TrinoSQLParser.ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skipTo(): SkipToContext {
		let _localctx: SkipToContext = new SkipToContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, TrinoSQLParser.RULE_skipTo);
		try {
			this.state = 1726;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1707;
				this.match(TrinoSQLParser.T__4);
				this.state = 1708;
				this.match(TrinoSQLParser.TO);
				this.state = 1709;
				this.match(TrinoSQLParser.NEXT);
				this.state = 1710;
				this.match(TrinoSQLParser.ROW);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1711;
				this.match(TrinoSQLParser.T__4);
				this.state = 1712;
				this.match(TrinoSQLParser.PAST);
				this.state = 1713;
				this.match(TrinoSQLParser.LAST);
				this.state = 1714;
				this.match(TrinoSQLParser.ROW);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1715;
				this.match(TrinoSQLParser.T__4);
				this.state = 1716;
				this.match(TrinoSQLParser.TO);
				this.state = 1717;
				this.match(TrinoSQLParser.FIRST);
				this.state = 1718;
				this.identifier();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1719;
				this.match(TrinoSQLParser.T__4);
				this.state = 1720;
				this.match(TrinoSQLParser.TO);
				this.state = 1721;
				this.match(TrinoSQLParser.LAST);
				this.state = 1722;
				this.identifier();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1723;
				this.match(TrinoSQLParser.T__4);
				this.state = 1724;
				this.match(TrinoSQLParser.TO);
				this.state = 1725;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subsetDefinition(): SubsetDefinitionContext {
		let _localctx: SubsetDefinitionContext = new SubsetDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, TrinoSQLParser.RULE_subsetDefinition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1728;
			_localctx._name = this.identifier();
			this.state = 1729;
			this.match(TrinoSQLParser.EQ);
			this.state = 1730;
			this.match(TrinoSQLParser.T__1);
			this.state = 1731;
			_localctx._identifier = this.identifier();
			_localctx._union.push(_localctx._identifier);
			this.state = 1736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 1732;
				this.match(TrinoSQLParser.T__3);
				this.state = 1733;
				_localctx._identifier = this.identifier();
				_localctx._union.push(_localctx._identifier);
				}
				}
				this.state = 1738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1739;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableDefinition(): VariableDefinitionContext {
		let _localctx: VariableDefinitionContext = new VariableDefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, TrinoSQLParser.RULE_variableDefinition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1741;
			this.identifier();
			this.state = 1742;
			this.match(TrinoSQLParser.AS);
			this.state = 1743;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aliasedRelation(): AliasedRelationContext {
		let _localctx: AliasedRelationContext = new AliasedRelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, TrinoSQLParser.RULE_aliasedRelation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1745;
			this.relationPrimary();
			this.state = 1753;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				{
				this.state = 1747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AS) {
					{
					this.state = 1746;
					this.match(TrinoSQLParser.AS);
					}
				}

				this.state = 1749;
				this.identifier();
				this.state = 1751;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
				case 1:
					{
					this.state = 1750;
					this.columnAliases();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnAliases(): ColumnAliasesContext {
		let _localctx: ColumnAliasesContext = new ColumnAliasesContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, TrinoSQLParser.RULE_columnAliases);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1755;
			this.match(TrinoSQLParser.T__1);
			this.state = 1756;
			this.identifier();
			this.state = 1761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 1757;
				this.match(TrinoSQLParser.T__3);
				this.state = 1758;
				this.identifier();
				}
				}
				this.state = 1763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1764;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationPrimary(): RelationPrimaryContext {
		let _localctx: RelationPrimaryContext = new RelationPrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, TrinoSQLParser.RULE_relationPrimary);
		let _la: number;
		try {
			this.state = 1837;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1766;
				this.qualifiedName();
				this.state = 1768;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
				case 1:
					{
					this.state = 1767;
					this.queryPeriod();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new SubqueryRelationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1770;
				this.match(TrinoSQLParser.T__1);
				this.state = 1771;
				this.query();
				this.state = 1772;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 3:
				_localctx = new UnnestContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1774;
				this.match(TrinoSQLParser.UNNEST);
				this.state = 1775;
				this.match(TrinoSQLParser.T__1);
				this.state = 1776;
				this.expression();
				this.state = 1781;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1777;
					this.match(TrinoSQLParser.T__3);
					this.state = 1778;
					this.expression();
					}
					}
					this.state = 1783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1784;
				this.match(TrinoSQLParser.T__2);
				this.state = 1787;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
				case 1:
					{
					this.state = 1785;
					this.match(TrinoSQLParser.WITH);
					this.state = 1786;
					this.match(TrinoSQLParser.ORDINALITY);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new LateralContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1789;
				this.match(TrinoSQLParser.LATERAL);
				this.state = 1790;
				this.match(TrinoSQLParser.T__1);
				this.state = 1791;
				this.query();
				this.state = 1792;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 5:
				_localctx = new TableFunctionInvocationContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1794;
				this.match(TrinoSQLParser.TABLE);
				this.state = 1795;
				this.match(TrinoSQLParser.T__1);
				this.state = 1796;
				this.tableFunctionCall();
				this.state = 1797;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 6:
				_localctx = new ParenthesizedRelationContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1799;
				this.match(TrinoSQLParser.T__1);
				this.state = 1800;
				this.relation(0);
				this.state = 1801;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 7:
				_localctx = new JsonTableContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1803;
				this.match(TrinoSQLParser.JSON_TABLE);
				this.state = 1804;
				this.match(TrinoSQLParser.T__1);
				this.state = 1805;
				this.jsonPathInvocation();
				this.state = 1806;
				this.match(TrinoSQLParser.COLUMNS);
				this.state = 1807;
				this.match(TrinoSQLParser.T__1);
				this.state = 1808;
				this.jsonTableColumn();
				this.state = 1813;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1809;
					this.match(TrinoSQLParser.T__3);
					this.state = 1810;
					this.jsonTableColumn();
					}
					}
					this.state = 1815;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1816;
				this.match(TrinoSQLParser.T__2);
				this.state = 1828;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 220, this._ctx) ) {
				case 1:
					{
					this.state = 1817;
					this.match(TrinoSQLParser.PLAN);
					this.state = 1818;
					this.match(TrinoSQLParser.T__1);
					this.state = 1819;
					this.jsonTableSpecificPlan();
					this.state = 1820;
					this.match(TrinoSQLParser.T__2);
					}
					break;

				case 2:
					{
					this.state = 1822;
					this.match(TrinoSQLParser.PLAN);
					this.state = 1823;
					this.match(TrinoSQLParser.DEFAULT);
					this.state = 1824;
					this.match(TrinoSQLParser.T__1);
					this.state = 1825;
					this.jsonTableDefaultPlan();
					this.state = 1826;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				this.state = 1833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.EMPTY || _la === TrinoSQLParser.ERROR) {
					{
					this.state = 1830;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.EMPTY || _la === TrinoSQLParser.ERROR)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1831;
					this.match(TrinoSQLParser.ON);
					this.state = 1832;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				this.state = 1835;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTableColumn(): JsonTableColumnContext {
		let _localctx: JsonTableColumnContext = new JsonTableColumnContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, TrinoSQLParser.RULE_jsonTableColumn);
		let _la: number;
		try {
			this.state = 1916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				_localctx = new OrdinalityColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1839;
				this.identifier();
				this.state = 1840;
				this.match(TrinoSQLParser.FOR);
				this.state = 1841;
				this.match(TrinoSQLParser.ORDINALITY);
				}
				break;

			case 2:
				_localctx = new ValueColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1843;
				this.identifier();
				this.state = 1844;
				this.type(0);
				this.state = 1847;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.PATH) {
					{
					this.state = 1845;
					this.match(TrinoSQLParser.PATH);
					this.state = 1846;
					this.string();
					}
				}

				this.state = 1853;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 224, this._ctx) ) {
				case 1:
					{
					this.state = 1849;
					(_localctx as ValueColumnContext)._emptyBehavior = this.jsonValueBehavior();
					this.state = 1850;
					this.match(TrinoSQLParser.ON);
					this.state = 1851;
					this.match(TrinoSQLParser.EMPTY);
					}
					break;
				}
				this.state = 1859;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.DEFAULT || _la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.NULL) {
					{
					this.state = 1855;
					(_localctx as ValueColumnContext)._errorBehavior = this.jsonValueBehavior();
					this.state = 1856;
					this.match(TrinoSQLParser.ON);
					this.state = 1857;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				}
				break;

			case 3:
				_localctx = new QueryColumnContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1861;
				this.identifier();
				this.state = 1862;
				this.type(0);
				this.state = 1863;
				this.match(TrinoSQLParser.FORMAT);
				this.state = 1864;
				this.jsonRepresentation();
				this.state = 1867;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.PATH) {
					{
					this.state = 1865;
					this.match(TrinoSQLParser.PATH);
					this.state = 1866;
					this.string();
					}
				}

				this.state = 1872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH || _la === TrinoSQLParser.WITHOUT) {
					{
					this.state = 1869;
					this.jsonQueryWrapperBehavior();
					this.state = 1870;
					this.match(TrinoSQLParser.WRAPPER);
					}
				}

				this.state = 1881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.KEEP || _la === TrinoSQLParser.OMIT) {
					{
					this.state = 1874;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.KEEP || _la === TrinoSQLParser.OMIT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1875;
					this.match(TrinoSQLParser.QUOTES);
					this.state = 1879;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ON) {
						{
						this.state = 1876;
						this.match(TrinoSQLParser.ON);
						this.state = 1877;
						this.match(TrinoSQLParser.SCALAR);
						this.state = 1878;
						this.match(TrinoSQLParser.TEXT_STRING);
						}
					}

					}
				}

				this.state = 1887;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
				case 1:
					{
					this.state = 1883;
					(_localctx as QueryColumnContext)._emptyBehavior = this.jsonQueryBehavior();
					this.state = 1884;
					this.match(TrinoSQLParser.ON);
					this.state = 1885;
					this.match(TrinoSQLParser.EMPTY);
					}
					break;
				}
				this.state = 1893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.EMPTY || _la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.NULL) {
					{
					this.state = 1889;
					(_localctx as QueryColumnContext)._errorBehavior = this.jsonQueryBehavior();
					this.state = 1890;
					this.match(TrinoSQLParser.ON);
					this.state = 1891;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				}
				break;

			case 4:
				_localctx = new NestedColumnsContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1895;
				this.match(TrinoSQLParser.NESTED);
				this.state = 1897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.PATH) {
					{
					this.state = 1896;
					this.match(TrinoSQLParser.PATH);
					}
				}

				this.state = 1899;
				this.string();
				this.state = 1902;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AS) {
					{
					this.state = 1900;
					this.match(TrinoSQLParser.AS);
					this.state = 1901;
					this.identifier();
					}
				}

				this.state = 1904;
				this.match(TrinoSQLParser.COLUMNS);
				this.state = 1905;
				this.match(TrinoSQLParser.T__1);
				this.state = 1906;
				this.jsonTableColumn();
				this.state = 1911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1907;
					this.match(TrinoSQLParser.T__3);
					this.state = 1908;
					this.jsonTableColumn();
					}
					}
					this.state = 1913;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1914;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTableSpecificPlan(): JsonTableSpecificPlanContext {
		let _localctx: JsonTableSpecificPlanContext = new JsonTableSpecificPlanContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, TrinoSQLParser.RULE_jsonTableSpecificPlan);
		let _la: number;
		try {
			this.state = 1943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				_localctx = new LeafPlanContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1918;
				this.jsonTablePathName();
				}
				break;

			case 2:
				_localctx = new JoinPlanContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1919;
				this.jsonTablePathName();
				this.state = 1920;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.INNER || _la === TrinoSQLParser.OUTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1921;
				this.planPrimary();
				}
				break;

			case 3:
				_localctx = new UnionPlanContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1923;
				this.planPrimary();
				this.state = 1924;
				this.match(TrinoSQLParser.UNION);
				this.state = 1925;
				this.planPrimary();
				this.state = 1930;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.UNION) {
					{
					{
					this.state = 1926;
					this.match(TrinoSQLParser.UNION);
					this.state = 1927;
					this.planPrimary();
					}
					}
					this.state = 1932;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 4:
				_localctx = new CrossPlanContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1933;
				this.planPrimary();
				this.state = 1934;
				this.match(TrinoSQLParser.CROSS);
				this.state = 1935;
				this.planPrimary();
				this.state = 1940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.CROSS) {
					{
					{
					this.state = 1936;
					this.match(TrinoSQLParser.CROSS);
					this.state = 1937;
					this.planPrimary();
					}
					}
					this.state = 1942;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTablePathName(): JsonTablePathNameContext {
		let _localctx: JsonTablePathNameContext = new JsonTablePathNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, TrinoSQLParser.RULE_jsonTablePathName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1945;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public planPrimary(): PlanPrimaryContext {
		let _localctx: PlanPrimaryContext = new PlanPrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, TrinoSQLParser.RULE_planPrimary);
		try {
			this.state = 1952;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1947;
				this.jsonTablePathName();
				}
				break;
			case TrinoSQLParser.T__1:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1948;
				this.match(TrinoSQLParser.T__1);
				this.state = 1949;
				this.jsonTableSpecificPlan();
				this.state = 1950;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTableDefaultPlan(): JsonTableDefaultPlanContext {
		let _localctx: JsonTableDefaultPlanContext = new JsonTableDefaultPlanContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, TrinoSQLParser.RULE_jsonTableDefaultPlan);
		let _la: number;
		try {
			this.state = 1964;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.INNER:
			case TrinoSQLParser.OUTER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1954;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.INNER || _la === TrinoSQLParser.OUTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__3) {
					{
					this.state = 1955;
					this.match(TrinoSQLParser.T__3);
					this.state = 1956;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.CROSS || _la === TrinoSQLParser.UNION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			case TrinoSQLParser.CROSS:
			case TrinoSQLParser.UNION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1959;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.CROSS || _la === TrinoSQLParser.UNION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__3) {
					{
					this.state = 1960;
					this.match(TrinoSQLParser.T__3);
					this.state = 1961;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.INNER || _la === TrinoSQLParser.OUTER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableFunctionCall(): TableFunctionCallContext {
		let _localctx: TableFunctionCallContext = new TableFunctionCallContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, TrinoSQLParser.RULE_tableFunctionCall);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1966;
			this.qualifiedName();
			this.state = 1967;
			this.match(TrinoSQLParser.T__1);
			this.state = 1976;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 244, this._ctx) ) {
			case 1:
				{
				this.state = 1968;
				this.tableFunctionArgument();
				this.state = 1973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1969;
					this.match(TrinoSQLParser.T__3);
					this.state = 1970;
					this.tableFunctionArgument();
					}
					}
					this.state = 1975;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			this.state = 1987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.COPARTITION) {
				{
				this.state = 1978;
				this.match(TrinoSQLParser.COPARTITION);
				this.state = 1979;
				this.copartitionTables();
				this.state = 1984;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 1980;
					this.match(TrinoSQLParser.T__3);
					this.state = 1981;
					this.copartitionTables();
					}
					}
					this.state = 1986;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1989;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableFunctionArgument(): TableFunctionArgumentContext {
		let _localctx: TableFunctionArgumentContext = new TableFunctionArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, TrinoSQLParser.RULE_tableFunctionArgument);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1994;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				{
				this.state = 1991;
				this.identifier();
				this.state = 1992;
				this.match(TrinoSQLParser.T__5);
				}
				break;
			}
			this.state = 1999;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 248, this._ctx) ) {
			case 1:
				{
				this.state = 1996;
				this.tableArgument();
				}
				break;

			case 2:
				{
				this.state = 1997;
				this.descriptorArgument();
				}
				break;

			case 3:
				{
				this.state = 1998;
				this.expression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableArgument(): TableArgumentContext {
		let _localctx: TableArgumentContext = new TableArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, TrinoSQLParser.RULE_tableArgument);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2001;
			this.tableArgumentRelation();
			this.state = 2019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.PARTITION) {
				{
				this.state = 2002;
				this.match(TrinoSQLParser.PARTITION);
				this.state = 2003;
				this.match(TrinoSQLParser.BY);
				this.state = 2017;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
				case 1:
					{
					this.state = 2004;
					this.match(TrinoSQLParser.T__1);
					this.state = 2013;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
						{
						this.state = 2005;
						this.expression();
						this.state = 2010;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la === TrinoSQLParser.T__3) {
							{
							{
							this.state = 2006;
							this.match(TrinoSQLParser.T__3);
							this.state = 2007;
							this.expression();
							}
							}
							this.state = 2012;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
					}

					this.state = 2015;
					this.match(TrinoSQLParser.T__2);
					}
					break;

				case 2:
					{
					this.state = 2016;
					this.expression();
					}
					break;
				}
				}
			}

			this.state = 2027;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.PRUNE:
				{
				this.state = 2021;
				this.match(TrinoSQLParser.PRUNE);
				this.state = 2022;
				this.match(TrinoSQLParser.WHEN);
				this.state = 2023;
				this.match(TrinoSQLParser.EMPTY);
				}
				break;
			case TrinoSQLParser.KEEP:
				{
				this.state = 2024;
				this.match(TrinoSQLParser.KEEP);
				this.state = 2025;
				this.match(TrinoSQLParser.WHEN);
				this.state = 2026;
				this.match(TrinoSQLParser.EMPTY);
				}
				break;
			case TrinoSQLParser.T__2:
			case TrinoSQLParser.T__3:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.ORDER:
				break;
			default:
				break;
			}
			this.state = 2045;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.ORDER) {
				{
				this.state = 2029;
				this.match(TrinoSQLParser.ORDER);
				this.state = 2030;
				this.match(TrinoSQLParser.BY);
				this.state = 2043;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
				case 1:
					{
					this.state = 2031;
					this.match(TrinoSQLParser.T__1);
					this.state = 2032;
					this.sortItem();
					this.state = 2037;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2033;
						this.match(TrinoSQLParser.T__3);
						this.state = 2034;
						this.sortItem();
						}
						}
						this.state = 2039;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2040;
					this.match(TrinoSQLParser.T__2);
					}
					break;

				case 2:
					{
					this.state = 2042;
					this.sortItem();
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableArgumentRelation(): TableArgumentRelationContext {
		let _localctx: TableArgumentRelationContext = new TableArgumentRelationContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, TrinoSQLParser.RULE_tableArgumentRelation);
		let _la: number;
		try {
			this.state = 2073;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				_localctx = new TableArgumentTableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2047;
				this.match(TrinoSQLParser.TABLE);
				this.state = 2048;
				this.match(TrinoSQLParser.T__1);
				this.state = 2049;
				this.qualifiedName();
				this.state = 2050;
				this.match(TrinoSQLParser.T__2);
				this.state = 2058;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
				case 1:
					{
					this.state = 2052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.AS) {
						{
						this.state = 2051;
						this.match(TrinoSQLParser.AS);
						}
					}

					this.state = 2054;
					this.identifier();
					this.state = 2056;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.T__1) {
						{
						this.state = 2055;
						this.columnAliases();
						}
					}

					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new TableArgumentQueryContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2060;
				this.match(TrinoSQLParser.TABLE);
				this.state = 2061;
				this.match(TrinoSQLParser.T__1);
				this.state = 2062;
				this.query();
				this.state = 2063;
				this.match(TrinoSQLParser.T__2);
				this.state = 2071;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 262, this._ctx) ) {
				case 1:
					{
					this.state = 2065;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.AS) {
						{
						this.state = 2064;
						this.match(TrinoSQLParser.AS);
						}
					}

					this.state = 2067;
					this.identifier();
					this.state = 2069;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.T__1) {
						{
						this.state = 2068;
						this.columnAliases();
						}
					}

					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descriptorArgument(): DescriptorArgumentContext {
		let _localctx: DescriptorArgumentContext = new DescriptorArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, TrinoSQLParser.RULE_descriptorArgument);
		let _la: number;
		try {
			this.state = 2093;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.DESCRIPTOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2075;
				this.match(TrinoSQLParser.DESCRIPTOR);
				this.state = 2076;
				this.match(TrinoSQLParser.T__1);
				this.state = 2077;
				this.descriptorField();
				this.state = 2082;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2078;
					this.match(TrinoSQLParser.T__3);
					this.state = 2079;
					this.descriptorField();
					}
					}
					this.state = 2084;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2085;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			case TrinoSQLParser.CAST:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2087;
				this.match(TrinoSQLParser.CAST);
				this.state = 2088;
				this.match(TrinoSQLParser.T__1);
				this.state = 2089;
				this.match(TrinoSQLParser.NULL);
				this.state = 2090;
				this.match(TrinoSQLParser.AS);
				this.state = 2091;
				this.match(TrinoSQLParser.DESCRIPTOR);
				this.state = 2092;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public descriptorField(): DescriptorFieldContext {
		let _localctx: DescriptorFieldContext = new DescriptorFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, TrinoSQLParser.RULE_descriptorField);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2095;
			this.identifier();
			this.state = 2097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
				{
				this.state = 2096;
				this.type(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copartitionTables(): CopartitionTablesContext {
		let _localctx: CopartitionTablesContext = new CopartitionTablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, TrinoSQLParser.RULE_copartitionTables);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2099;
			this.match(TrinoSQLParser.T__1);
			this.state = 2100;
			this.qualifiedName();
			this.state = 2101;
			this.match(TrinoSQLParser.T__3);
			this.state = 2102;
			this.qualifiedName();
			this.state = 2107;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 2103;
				this.match(TrinoSQLParser.T__3);
				this.state = 2104;
				this.qualifiedName();
				}
				}
				this.state = 2109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2110;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression(): ExpressionContext {
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, TrinoSQLParser.RULE_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2112;
			this.booleanExpression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public booleanExpression(): BooleanExpressionContext;
	public booleanExpression(_p: number): BooleanExpressionContext;
	// @RuleVersion(0)
	public booleanExpression(_p?: number): BooleanExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: BooleanExpressionContext = new BooleanExpressionContext(this._ctx, _parentState);
		let _prevctx: BooleanExpressionContext = _localctx;
		let _startState: number = 128;
		this.enterRecursionRule(_localctx, 128, TrinoSQLParser.RULE_booleanExpression, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2121;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.T__1:
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CASE:
			case TrinoSQLParser.CAST:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.CURRENT_CATALOG:
			case TrinoSQLParser.CURRENT_DATE:
			case TrinoSQLParser.CURRENT_PATH:
			case TrinoSQLParser.CURRENT_SCHEMA:
			case TrinoSQLParser.CURRENT_TIME:
			case TrinoSQLParser.CURRENT_TIMESTAMP:
			case TrinoSQLParser.CURRENT_USER:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXISTS:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.EXTRACT:
			case TrinoSQLParser.FALSE:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPING:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.JSON_ARRAY:
			case TrinoSQLParser.JSON_EXISTS:
			case TrinoSQLParser.JSON_OBJECT:
			case TrinoSQLParser.JSON_QUERY:
			case TrinoSQLParser.JSON_VALUE:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LISTAGG:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOCALTIME:
			case TrinoSQLParser.LOCALTIMESTAMP:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NORMALIZE:
			case TrinoSQLParser.NULL:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRIM:
			case TrinoSQLParser.TRUE:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.PLUS:
			case TrinoSQLParser.MINUS:
			case TrinoSQLParser.QUESTION_MARK:
			case TrinoSQLParser.STRING:
			case TrinoSQLParser.UNICODE_STRING:
			case TrinoSQLParser.BINARY_LITERAL:
			case TrinoSQLParser.INTEGER_VALUE:
			case TrinoSQLParser.DECIMAL_VALUE:
			case TrinoSQLParser.DOUBLE_VALUE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				{
				_localctx = new PredicatedContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 2115;
				(_localctx as PredicatedContext)._valueExpression = this.valueExpression(0);
				this.state = 2117;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 2116;
					this.predicate((_localctx as PredicatedContext)._valueExpression);
					}
					break;
				}
				}
				break;
			case TrinoSQLParser.NOT:
				{
				_localctx = new LogicalNotContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2119;
				this.match(TrinoSQLParser.NOT);
				this.state = 2120;
				this.booleanExpression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2131;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2129;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
					case 1:
						{
						_localctx = new AndContext(new BooleanExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_booleanExpression);
						this.state = 2123;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 2124;
						this.match(TrinoSQLParser.AND);
						this.state = 2125;
						this.booleanExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new OrContext(new BooleanExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_booleanExpression);
						this.state = 2126;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 2127;
						this.match(TrinoSQLParser.OR);
						this.state = 2128;
						this.booleanExpression(2);
						}
						break;
					}
					}
				}
				this.state = 2133;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public predicate(value: ParserRuleContext): PredicateContext {
		let _localctx: PredicateContext = new PredicateContext(this._ctx, this.state, value);
		this.enterRule(_localctx, 130, TrinoSQLParser.RULE_predicate);
		let _la: number;
		try {
			this.state = 2195;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 280, this._ctx) ) {
			case 1:
				_localctx = new ComparisonContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2134;
				this.comparisonOperator();
				this.state = 2135;
				(_localctx as ComparisonContext)._right = this.valueExpression(0);
				}
				break;

			case 2:
				_localctx = new QuantifiedComparisonContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2137;
				this.comparisonOperator();
				this.state = 2138;
				this.comparisonQuantifier();
				this.state = 2139;
				this.match(TrinoSQLParser.T__1);
				this.state = 2140;
				this.query();
				this.state = 2141;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 3:
				_localctx = new BetweenContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2144;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2143;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2146;
				this.match(TrinoSQLParser.BETWEEN);
				this.state = 2147;
				(_localctx as BetweenContext)._lower = this.valueExpression(0);
				this.state = 2148;
				this.match(TrinoSQLParser.AND);
				this.state = 2149;
				(_localctx as BetweenContext)._upper = this.valueExpression(0);
				}
				break;

			case 4:
				_localctx = new InListContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2151;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2154;
				this.match(TrinoSQLParser.IN);
				this.state = 2155;
				this.match(TrinoSQLParser.T__1);
				this.state = 2156;
				this.expression();
				this.state = 2161;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2157;
					this.match(TrinoSQLParser.T__3);
					this.state = 2158;
					this.expression();
					}
					}
					this.state = 2163;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2164;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 5:
				_localctx = new InSubqueryContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2167;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2166;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2169;
				this.match(TrinoSQLParser.IN);
				this.state = 2170;
				this.match(TrinoSQLParser.T__1);
				this.state = 2171;
				this.query();
				this.state = 2172;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 6:
				_localctx = new LikeContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2175;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2174;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2177;
				this.match(TrinoSQLParser.LIKE);
				this.state = 2178;
				(_localctx as LikeContext)._pattern = this.valueExpression(0);
				this.state = 2181;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 277, this._ctx) ) {
				case 1:
					{
					this.state = 2179;
					this.match(TrinoSQLParser.ESCAPE);
					this.state = 2180;
					(_localctx as LikeContext)._escape = this.valueExpression(0);
					}
					break;
				}
				}
				break;

			case 7:
				_localctx = new NullPredicateContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2183;
				this.match(TrinoSQLParser.IS);
				this.state = 2185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2184;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2187;
				this.match(TrinoSQLParser.NULL);
				}
				break;

			case 8:
				_localctx = new DistinctFromContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2188;
				this.match(TrinoSQLParser.IS);
				this.state = 2190;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 2189;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 2192;
				this.match(TrinoSQLParser.DISTINCT);
				this.state = 2193;
				this.match(TrinoSQLParser.FROM);
				this.state = 2194;
				(_localctx as DistinctFromContext)._right = this.valueExpression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public valueExpression(): ValueExpressionContext;
	public valueExpression(_p: number): ValueExpressionContext;
	// @RuleVersion(0)
	public valueExpression(_p?: number): ValueExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ValueExpressionContext = new ValueExpressionContext(this._ctx, _parentState);
		let _prevctx: ValueExpressionContext = _localctx;
		let _startState: number = 132;
		this.enterRecursionRule(_localctx, 132, TrinoSQLParser.RULE_valueExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2201;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 281, this._ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 2198;
				this.primaryExpression(0);
				}
				break;

			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2199;
				(_localctx as ArithmeticUnaryContext)._operator = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.PLUS || _la === TrinoSQLParser.MINUS)) {
					(_localctx as ArithmeticUnaryContext)._operator = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2200;
				this.valueExpression(4);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2217;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2215;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 282, this._ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_valueExpression);
						this.state = 2203;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 2204;
						(_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (TrinoSQLParser.ASTERISK - 320)) | (1 << (TrinoSQLParser.SLASH - 320)) | (1 << (TrinoSQLParser.PERCENT - 320)))) !== 0))) {
							(_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2205;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(4);
						}
						break;

					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ArithmeticBinaryContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_valueExpression);
						this.state = 2206;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 2207;
						(_localctx as ArithmeticBinaryContext)._operator = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === TrinoSQLParser.PLUS || _la === TrinoSQLParser.MINUS)) {
							(_localctx as ArithmeticBinaryContext)._operator = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2208;
						(_localctx as ArithmeticBinaryContext)._right = this.valueExpression(3);
						}
						break;

					case 3:
						{
						_localctx = new ConcatenationContext(new ValueExpressionContext(_parentctx, _parentState));
						(_localctx as ConcatenationContext)._left = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_valueExpression);
						this.state = 2209;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 2210;
						this.match(TrinoSQLParser.CONCAT);
						this.state = 2211;
						(_localctx as ConcatenationContext)._right = this.valueExpression(2);
						}
						break;

					case 4:
						{
						_localctx = new AtTimeZoneContext(new ValueExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_valueExpression);
						this.state = 2212;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 2213;
						this.match(TrinoSQLParser.AT);
						this.state = 2214;
						this.timeZoneSpecifier();
						}
						break;
					}
					}
				}
				this.state = 2219;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public primaryExpression(): PrimaryExpressionContext;
	public primaryExpression(_p: number): PrimaryExpressionContext;
	// @RuleVersion(0)
	public primaryExpression(_p?: number): PrimaryExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PrimaryExpressionContext = new PrimaryExpressionContext(this._ctx, _parentState);
		let _prevctx: PrimaryExpressionContext = _localctx;
		let _startState: number = 134;
		this.enterRecursionRule(_localctx, 134, TrinoSQLParser.RULE_primaryExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 347, this._ctx) ) {
			case 1:
				{
				_localctx = new NullLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 2221;
				this.match(TrinoSQLParser.NULL);
				}
				break;

			case 2:
				{
				_localctx = new IntervalLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2222;
				this.interval();
				}
				break;

			case 3:
				{
				_localctx = new TypeConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2223;
				this.identifier();
				this.state = 2224;
				this.string();
				}
				break;

			case 4:
				{
				_localctx = new TypeConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2226;
				this.match(TrinoSQLParser.DOUBLE);
				this.state = 2227;
				this.match(TrinoSQLParser.PRECISION);
				this.state = 2228;
				this.string();
				}
				break;

			case 5:
				{
				_localctx = new NumericLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2229;
				this.number();
				}
				break;

			case 6:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2230;
				this.booleanValue();
				}
				break;

			case 7:
				{
				_localctx = new StringLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2231;
				this.string();
				}
				break;

			case 8:
				{
				_localctx = new BinaryLiteralContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2232;
				this.match(TrinoSQLParser.BINARY_LITERAL);
				}
				break;

			case 9:
				{
				_localctx = new ParameterContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2233;
				this.match(TrinoSQLParser.QUESTION_MARK);
				}
				break;

			case 10:
				{
				_localctx = new PositionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2234;
				this.match(TrinoSQLParser.POSITION);
				this.state = 2235;
				this.match(TrinoSQLParser.T__1);
				this.state = 2236;
				this.valueExpression(0);
				this.state = 2237;
				this.match(TrinoSQLParser.IN);
				this.state = 2238;
				this.valueExpression(0);
				this.state = 2239;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 11:
				{
				_localctx = new RowConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2241;
				this.match(TrinoSQLParser.T__1);
				this.state = 2242;
				this.expression();
				this.state = 2245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2243;
					this.match(TrinoSQLParser.T__3);
					this.state = 2244;
					this.expression();
					}
					}
					this.state = 2247;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.T__3);
				this.state = 2249;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 12:
				{
				_localctx = new RowConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2251;
				this.match(TrinoSQLParser.ROW);
				this.state = 2252;
				this.match(TrinoSQLParser.T__1);
				this.state = 2253;
				this.expression();
				this.state = 2258;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2254;
					this.match(TrinoSQLParser.T__3);
					this.state = 2255;
					this.expression();
					}
					}
					this.state = 2260;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2261;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 13:
				{
				_localctx = new ListaggContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2263;
				(_localctx as ListaggContext)._name = this.match(TrinoSQLParser.LISTAGG);
				this.state = 2264;
				this.match(TrinoSQLParser.T__1);
				this.state = 2266;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 286, this._ctx) ) {
				case 1:
					{
					this.state = 2265;
					this.setQuantifier();
					}
					break;
				}
				this.state = 2268;
				this.expression();
				this.state = 2271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__3) {
					{
					this.state = 2269;
					this.match(TrinoSQLParser.T__3);
					this.state = 2270;
					this.string();
					}
				}

				this.state = 2276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ON) {
					{
					this.state = 2273;
					this.match(TrinoSQLParser.ON);
					this.state = 2274;
					this.match(TrinoSQLParser.OVERFLOW);
					this.state = 2275;
					this.listAggOverflowBehavior();
					}
				}

				this.state = 2278;
				this.match(TrinoSQLParser.T__2);
				{
				this.state = 2279;
				this.match(TrinoSQLParser.WITHIN);
				this.state = 2280;
				this.match(TrinoSQLParser.GROUP);
				this.state = 2281;
				this.match(TrinoSQLParser.T__1);
				this.state = 2282;
				this.match(TrinoSQLParser.ORDER);
				this.state = 2283;
				this.match(TrinoSQLParser.BY);
				this.state = 2284;
				this.sortItem();
				this.state = 2289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2285;
					this.match(TrinoSQLParser.T__3);
					this.state = 2286;
					this.sortItem();
					}
					}
					this.state = 2291;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2292;
				this.match(TrinoSQLParser.T__2);
				}
				this.state = 2295;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
				case 1:
					{
					this.state = 2294;
					this.filter();
					}
					break;
				}
				}
				break;

			case 14:
				{
				_localctx = new FunctionCallContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2298;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 291, this._ctx) ) {
				case 1:
					{
					this.state = 2297;
					this.processingMode();
					}
					break;
				}
				this.state = 2300;
				this.qualifiedName();
				this.state = 2301;
				this.match(TrinoSQLParser.T__1);
				this.state = 2305;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
					{
					this.state = 2302;
					(_localctx as FunctionCallContext)._label = this.identifier();
					this.state = 2303;
					this.match(TrinoSQLParser.T__0);
					}
				}

				this.state = 2307;
				this.match(TrinoSQLParser.ASTERISK);
				this.state = 2308;
				this.match(TrinoSQLParser.T__2);
				this.state = 2310;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 293, this._ctx) ) {
				case 1:
					{
					this.state = 2309;
					this.filter();
					}
					break;
				}
				this.state = 2313;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 294, this._ctx) ) {
				case 1:
					{
					this.state = 2312;
					this.over();
					}
					break;
				}
				}
				break;

			case 15:
				{
				_localctx = new FunctionCallContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2316;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 295, this._ctx) ) {
				case 1:
					{
					this.state = 2315;
					this.processingMode();
					}
					break;
				}
				this.state = 2318;
				this.qualifiedName();
				this.state = 2319;
				this.match(TrinoSQLParser.T__1);
				this.state = 2331;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTINCT - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 2321;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
					case 1:
						{
						this.state = 2320;
						this.setQuantifier();
						}
						break;
					}
					this.state = 2323;
					this.expression();
					this.state = 2328;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2324;
						this.match(TrinoSQLParser.T__3);
						this.state = 2325;
						this.expression();
						}
						}
						this.state = 2330;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2343;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ORDER) {
					{
					this.state = 2333;
					this.match(TrinoSQLParser.ORDER);
					this.state = 2334;
					this.match(TrinoSQLParser.BY);
					this.state = 2335;
					this.sortItem();
					this.state = 2340;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2336;
						this.match(TrinoSQLParser.T__3);
						this.state = 2337;
						this.sortItem();
						}
						}
						this.state = 2342;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2345;
				this.match(TrinoSQLParser.T__2);
				this.state = 2347;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
				case 1:
					{
					this.state = 2346;
					this.filter();
					}
					break;
				}
				this.state = 2353;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
				case 1:
					{
					this.state = 2350;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.IGNORE || _la === TrinoSQLParser.RESPECT) {
						{
						this.state = 2349;
						this.nullTreatment();
						}
					}

					this.state = 2352;
					this.over();
					}
					break;
				}
				}
				break;

			case 16:
				{
				_localctx = new MeasureContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2355;
				this.identifier();
				this.state = 2356;
				this.over();
				}
				break;

			case 17:
				{
				_localctx = new LambdaContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2358;
				this.identifier();
				this.state = 2359;
				this.match(TrinoSQLParser.T__6);
				this.state = 2360;
				this.expression();
				}
				break;

			case 18:
				{
				_localctx = new LambdaContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2362;
				this.match(TrinoSQLParser.T__1);
				this.state = 2371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
					{
					this.state = 2363;
					this.identifier();
					this.state = 2368;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2364;
						this.match(TrinoSQLParser.T__3);
						this.state = 2365;
						this.identifier();
						}
						}
						this.state = 2370;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2373;
				this.match(TrinoSQLParser.T__2);
				this.state = 2374;
				this.match(TrinoSQLParser.T__6);
				this.state = 2375;
				this.expression();
				}
				break;

			case 19:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2376;
				this.match(TrinoSQLParser.T__1);
				this.state = 2377;
				this.query();
				this.state = 2378;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 20:
				{
				_localctx = new ExistsContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2380;
				this.match(TrinoSQLParser.EXISTS);
				this.state = 2381;
				this.match(TrinoSQLParser.T__1);
				this.state = 2382;
				this.query();
				this.state = 2383;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 21:
				{
				_localctx = new SimpleCaseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2385;
				this.match(TrinoSQLParser.CASE);
				this.state = 2386;
				(_localctx as SimpleCaseContext)._operand = this.expression();
				this.state = 2388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2387;
					this.whenClause();
					}
					}
					this.state = 2390;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.WHEN);
				this.state = 2394;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ELSE) {
					{
					this.state = 2392;
					this.match(TrinoSQLParser.ELSE);
					this.state = 2393;
					(_localctx as SimpleCaseContext)._elseExpression = this.expression();
					}
				}

				this.state = 2396;
				this.match(TrinoSQLParser.END);
				}
				break;

			case 22:
				{
				_localctx = new SearchedCaseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2398;
				this.match(TrinoSQLParser.CASE);
				this.state = 2400;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 2399;
					this.whenClause();
					}
					}
					this.state = 2402;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.WHEN);
				this.state = 2406;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ELSE) {
					{
					this.state = 2404;
					this.match(TrinoSQLParser.ELSE);
					this.state = 2405;
					(_localctx as SearchedCaseContext)._elseExpression = this.expression();
					}
				}

				this.state = 2408;
				this.match(TrinoSQLParser.END);
				}
				break;

			case 23:
				{
				_localctx = new CastContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2410;
				this.match(TrinoSQLParser.CAST);
				this.state = 2411;
				this.match(TrinoSQLParser.T__1);
				this.state = 2412;
				this.expression();
				this.state = 2413;
				this.match(TrinoSQLParser.AS);
				this.state = 2414;
				this.type(0);
				this.state = 2415;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 24:
				{
				_localctx = new CastContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2417;
				this.match(TrinoSQLParser.TRY_CAST);
				this.state = 2418;
				this.match(TrinoSQLParser.T__1);
				this.state = 2419;
				this.expression();
				this.state = 2420;
				this.match(TrinoSQLParser.AS);
				this.state = 2421;
				this.type(0);
				this.state = 2422;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 25:
				{
				_localctx = new ArrayConstructorContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2424;
				this.match(TrinoSQLParser.ARRAY);
				this.state = 2425;
				this.match(TrinoSQLParser.T__7);
				this.state = 2434;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NOT - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
					{
					this.state = 2426;
					this.expression();
					this.state = 2431;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2427;
						this.match(TrinoSQLParser.T__3);
						this.state = 2428;
						this.expression();
						}
						}
						this.state = 2433;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2436;
				this.match(TrinoSQLParser.T__8);
				}
				break;

			case 26:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2437;
				this.identifier();
				}
				break;

			case 27:
				{
				_localctx = new CurrentDateContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2438;
				(_localctx as CurrentDateContext)._name = this.match(TrinoSQLParser.CURRENT_DATE);
				}
				break;

			case 28:
				{
				_localctx = new CurrentTimeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2439;
				(_localctx as CurrentTimeContext)._name = this.match(TrinoSQLParser.CURRENT_TIME);
				this.state = 2443;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 312, this._ctx) ) {
				case 1:
					{
					this.state = 2440;
					this.match(TrinoSQLParser.T__1);
					this.state = 2441;
					(_localctx as CurrentTimeContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
					this.state = 2442;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				}
				break;

			case 29:
				{
				_localctx = new CurrentTimestampContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2445;
				(_localctx as CurrentTimestampContext)._name = this.match(TrinoSQLParser.CURRENT_TIMESTAMP);
				this.state = 2449;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 313, this._ctx) ) {
				case 1:
					{
					this.state = 2446;
					this.match(TrinoSQLParser.T__1);
					this.state = 2447;
					(_localctx as CurrentTimestampContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
					this.state = 2448;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				}
				break;

			case 30:
				{
				_localctx = new LocalTimeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2451;
				(_localctx as LocalTimeContext)._name = this.match(TrinoSQLParser.LOCALTIME);
				this.state = 2455;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
				case 1:
					{
					this.state = 2452;
					this.match(TrinoSQLParser.T__1);
					this.state = 2453;
					(_localctx as LocalTimeContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
					this.state = 2454;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				}
				break;

			case 31:
				{
				_localctx = new LocalTimestampContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2457;
				(_localctx as LocalTimestampContext)._name = this.match(TrinoSQLParser.LOCALTIMESTAMP);
				this.state = 2461;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
				case 1:
					{
					this.state = 2458;
					this.match(TrinoSQLParser.T__1);
					this.state = 2459;
					(_localctx as LocalTimestampContext)._precision = this.match(TrinoSQLParser.INTEGER_VALUE);
					this.state = 2460;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				}
				break;

			case 32:
				{
				_localctx = new CurrentUserContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2463;
				(_localctx as CurrentUserContext)._name = this.match(TrinoSQLParser.CURRENT_USER);
				}
				break;

			case 33:
				{
				_localctx = new CurrentCatalogContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2464;
				(_localctx as CurrentCatalogContext)._name = this.match(TrinoSQLParser.CURRENT_CATALOG);
				}
				break;

			case 34:
				{
				_localctx = new CurrentSchemaContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2465;
				(_localctx as CurrentSchemaContext)._name = this.match(TrinoSQLParser.CURRENT_SCHEMA);
				}
				break;

			case 35:
				{
				_localctx = new CurrentPathContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2466;
				(_localctx as CurrentPathContext)._name = this.match(TrinoSQLParser.CURRENT_PATH);
				}
				break;

			case 36:
				{
				_localctx = new TrimContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2467;
				this.match(TrinoSQLParser.TRIM);
				this.state = 2468;
				this.match(TrinoSQLParser.T__1);
				this.state = 2476;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
				case 1:
					{
					this.state = 2470;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 316, this._ctx) ) {
					case 1:
						{
						this.state = 2469;
						this.trimsSpecification();
						}
						break;
					}
					this.state = 2473;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << TrinoSQLParser.T__1) | (1 << TrinoSQLParser.ABSENT) | (1 << TrinoSQLParser.ADD) | (1 << TrinoSQLParser.ADMIN) | (1 << TrinoSQLParser.AFTER) | (1 << TrinoSQLParser.ALL) | (1 << TrinoSQLParser.ANALYZE) | (1 << TrinoSQLParser.ANY) | (1 << TrinoSQLParser.ARRAY) | (1 << TrinoSQLParser.ASC) | (1 << TrinoSQLParser.AT) | (1 << TrinoSQLParser.AUTHORIZATION))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (TrinoSQLParser.BEGIN - 32)) | (1 << (TrinoSQLParser.BERNOULLI - 32)) | (1 << (TrinoSQLParser.BOTH - 32)) | (1 << (TrinoSQLParser.CALL - 32)) | (1 << (TrinoSQLParser.CALLED - 32)) | (1 << (TrinoSQLParser.CASCADE - 32)) | (1 << (TrinoSQLParser.CASE - 32)) | (1 << (TrinoSQLParser.CAST - 32)) | (1 << (TrinoSQLParser.CATALOG - 32)) | (1 << (TrinoSQLParser.CATALOGS - 32)) | (1 << (TrinoSQLParser.COLUMN - 32)) | (1 << (TrinoSQLParser.COLUMNS - 32)) | (1 << (TrinoSQLParser.COMMENT - 32)) | (1 << (TrinoSQLParser.COMMIT - 32)) | (1 << (TrinoSQLParser.COMMITTED - 32)) | (1 << (TrinoSQLParser.CONDITIONAL - 32)) | (1 << (TrinoSQLParser.COUNT - 32)) | (1 << (TrinoSQLParser.COPARTITION - 32)) | (1 << (TrinoSQLParser.CURRENT - 32)) | (1 << (TrinoSQLParser.CURRENT_CATALOG - 32)) | (1 << (TrinoSQLParser.CURRENT_DATE - 32)) | (1 << (TrinoSQLParser.CURRENT_PATH - 32)) | (1 << (TrinoSQLParser.CURRENT_SCHEMA - 32)) | (1 << (TrinoSQLParser.CURRENT_TIME - 32)) | (1 << (TrinoSQLParser.CURRENT_TIMESTAMP - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (TrinoSQLParser.CURRENT_USER - 64)) | (1 << (TrinoSQLParser.DATA - 64)) | (1 << (TrinoSQLParser.DATE - 64)) | (1 << (TrinoSQLParser.DAY - 64)) | (1 << (TrinoSQLParser.DECLARE - 64)) | (1 << (TrinoSQLParser.DEFAULT - 64)) | (1 << (TrinoSQLParser.DEFINE - 64)) | (1 << (TrinoSQLParser.DEFINER - 64)) | (1 << (TrinoSQLParser.DENY - 64)) | (1 << (TrinoSQLParser.DESC - 64)) | (1 << (TrinoSQLParser.DESCRIPTOR - 64)) | (1 << (TrinoSQLParser.DETERMINISTIC - 64)) | (1 << (TrinoSQLParser.DISTRIBUTED - 64)) | (1 << (TrinoSQLParser.DO - 64)) | (1 << (TrinoSQLParser.DOUBLE - 64)) | (1 << (TrinoSQLParser.EMPTY - 64)) | (1 << (TrinoSQLParser.ELSEIF - 64)) | (1 << (TrinoSQLParser.ENCODING - 64)) | (1 << (TrinoSQLParser.ERROR - 64)) | (1 << (TrinoSQLParser.EXCLUDING - 64)) | (1 << (TrinoSQLParser.EXISTS - 64)) | (1 << (TrinoSQLParser.EXPLAIN - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (TrinoSQLParser.EXTRACT - 96)) | (1 << (TrinoSQLParser.FALSE - 96)) | (1 << (TrinoSQLParser.FETCH - 96)) | (1 << (TrinoSQLParser.FILTER - 96)) | (1 << (TrinoSQLParser.FINAL - 96)) | (1 << (TrinoSQLParser.FIRST - 96)) | (1 << (TrinoSQLParser.FOLLOWING - 96)) | (1 << (TrinoSQLParser.FORMAT - 96)) | (1 << (TrinoSQLParser.FUNCTION - 96)) | (1 << (TrinoSQLParser.FUNCTIONS - 96)) | (1 << (TrinoSQLParser.GRACE - 96)) | (1 << (TrinoSQLParser.GRANT - 96)) | (1 << (TrinoSQLParser.GRANTED - 96)) | (1 << (TrinoSQLParser.GRANTS - 96)) | (1 << (TrinoSQLParser.GRAPHVIZ - 96)) | (1 << (TrinoSQLParser.GROUPING - 96)) | (1 << (TrinoSQLParser.GROUPS - 96)) | (1 << (TrinoSQLParser.HOUR - 96)) | (1 << (TrinoSQLParser.IF - 96)) | (1 << (TrinoSQLParser.IGNORE - 96)) | (1 << (TrinoSQLParser.IMMEDIATE - 96)) | (1 << (TrinoSQLParser.INCLUDING - 96)) | (1 << (TrinoSQLParser.INITIAL - 96)) | (1 << (TrinoSQLParser.INPUT - 96)))) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & ((1 << (TrinoSQLParser.INTERVAL - 129)) | (1 << (TrinoSQLParser.INVOKER - 129)) | (1 << (TrinoSQLParser.IO - 129)) | (1 << (TrinoSQLParser.ISOLATION - 129)) | (1 << (TrinoSQLParser.ITERATE - 129)) | (1 << (TrinoSQLParser.JSON - 129)) | (1 << (TrinoSQLParser.JSON_ARRAY - 129)) | (1 << (TrinoSQLParser.JSON_EXISTS - 129)) | (1 << (TrinoSQLParser.JSON_OBJECT - 129)) | (1 << (TrinoSQLParser.JSON_QUERY - 129)) | (1 << (TrinoSQLParser.JSON_VALUE - 129)) | (1 << (TrinoSQLParser.KEEP - 129)) | (1 << (TrinoSQLParser.KEY - 129)) | (1 << (TrinoSQLParser.KEYS - 129)) | (1 << (TrinoSQLParser.LANGUAGE - 129)) | (1 << (TrinoSQLParser.LAST - 129)) | (1 << (TrinoSQLParser.LATERAL - 129)) | (1 << (TrinoSQLParser.LEADING - 129)) | (1 << (TrinoSQLParser.LEAVE - 129)) | (1 << (TrinoSQLParser.LEVEL - 129)) | (1 << (TrinoSQLParser.LIMIT - 129)) | (1 << (TrinoSQLParser.LISTAGG - 129)) | (1 << (TrinoSQLParser.LOCAL - 129)) | (1 << (TrinoSQLParser.LOCALTIME - 129)) | (1 << (TrinoSQLParser.LOCALTIMESTAMP - 129)) | (1 << (TrinoSQLParser.LOGICAL - 129)))) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & ((1 << (TrinoSQLParser.LOOP - 161)) | (1 << (TrinoSQLParser.MAP - 161)) | (1 << (TrinoSQLParser.MATCH - 161)) | (1 << (TrinoSQLParser.MATCHED - 161)) | (1 << (TrinoSQLParser.MATCHES - 161)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 161)) | (1 << (TrinoSQLParser.MATERIALIZED - 161)) | (1 << (TrinoSQLParser.MEASURES - 161)) | (1 << (TrinoSQLParser.MERGE - 161)) | (1 << (TrinoSQLParser.MINUTE - 161)) | (1 << (TrinoSQLParser.MONTH - 161)) | (1 << (TrinoSQLParser.NESTED - 161)) | (1 << (TrinoSQLParser.NEXT - 161)) | (1 << (TrinoSQLParser.NFC - 161)) | (1 << (TrinoSQLParser.NFD - 161)) | (1 << (TrinoSQLParser.NFKC - 161)) | (1 << (TrinoSQLParser.NFKD - 161)) | (1 << (TrinoSQLParser.NO - 161)) | (1 << (TrinoSQLParser.NONE - 161)) | (1 << (TrinoSQLParser.NORMALIZE - 161)) | (1 << (TrinoSQLParser.NULL - 161)) | (1 << (TrinoSQLParser.NULLIF - 161)) | (1 << (TrinoSQLParser.NULLS - 161)) | (1 << (TrinoSQLParser.OBJECT - 161)) | (1 << (TrinoSQLParser.OF - 161)) | (1 << (TrinoSQLParser.OFFSET - 161)) | (1 << (TrinoSQLParser.OMIT - 161)) | (1 << (TrinoSQLParser.ONE - 161)) | (1 << (TrinoSQLParser.ONLY - 161)))) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & ((1 << (TrinoSQLParser.OPTION - 193)) | (1 << (TrinoSQLParser.ORDINALITY - 193)) | (1 << (TrinoSQLParser.OUTPUT - 193)) | (1 << (TrinoSQLParser.OVER - 193)) | (1 << (TrinoSQLParser.OVERFLOW - 193)) | (1 << (TrinoSQLParser.PARTITION - 193)) | (1 << (TrinoSQLParser.PARTITIONS - 193)) | (1 << (TrinoSQLParser.PASSING - 193)) | (1 << (TrinoSQLParser.PAST - 193)) | (1 << (TrinoSQLParser.PATH - 193)) | (1 << (TrinoSQLParser.PATTERN - 193)) | (1 << (TrinoSQLParser.PER - 193)) | (1 << (TrinoSQLParser.PERIOD - 193)) | (1 << (TrinoSQLParser.PERMUTE - 193)) | (1 << (TrinoSQLParser.PLAN - 193)) | (1 << (TrinoSQLParser.POSITION - 193)) | (1 << (TrinoSQLParser.PRECEDING - 193)) | (1 << (TrinoSQLParser.PRECISION - 193)) | (1 << (TrinoSQLParser.PRIVILEGES - 193)) | (1 << (TrinoSQLParser.PROPERTIES - 193)) | (1 << (TrinoSQLParser.PRUNE - 193)) | (1 << (TrinoSQLParser.QUOTES - 193)) | (1 << (TrinoSQLParser.RANGE - 193)) | (1 << (TrinoSQLParser.READ - 193)) | (1 << (TrinoSQLParser.REFRESH - 193)) | (1 << (TrinoSQLParser.RENAME - 193)) | (1 << (TrinoSQLParser.REPEAT - 193)))) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & ((1 << (TrinoSQLParser.REPEATABLE - 225)) | (1 << (TrinoSQLParser.REPLACE - 225)) | (1 << (TrinoSQLParser.RESET - 225)) | (1 << (TrinoSQLParser.RESPECT - 225)) | (1 << (TrinoSQLParser.RESTRICT - 225)) | (1 << (TrinoSQLParser.RETURN - 225)) | (1 << (TrinoSQLParser.RETURNING - 225)) | (1 << (TrinoSQLParser.RETURNS - 225)) | (1 << (TrinoSQLParser.REVOKE - 225)) | (1 << (TrinoSQLParser.ROLE - 225)) | (1 << (TrinoSQLParser.ROLES - 225)) | (1 << (TrinoSQLParser.ROLLBACK - 225)) | (1 << (TrinoSQLParser.ROW - 225)) | (1 << (TrinoSQLParser.ROWS - 225)) | (1 << (TrinoSQLParser.RUNNING - 225)) | (1 << (TrinoSQLParser.SCALAR - 225)) | (1 << (TrinoSQLParser.SCHEMA - 225)) | (1 << (TrinoSQLParser.SCHEMAS - 225)) | (1 << (TrinoSQLParser.SECOND - 225)) | (1 << (TrinoSQLParser.SECURITY - 225)) | (1 << (TrinoSQLParser.SEEK - 225)) | (1 << (TrinoSQLParser.SERIALIZABLE - 225)) | (1 << (TrinoSQLParser.SESSION - 225)) | (1 << (TrinoSQLParser.SET - 225)) | (1 << (TrinoSQLParser.SETS - 225)) | (1 << (TrinoSQLParser.SHOW - 225)) | (1 << (TrinoSQLParser.SOME - 225)) | (1 << (TrinoSQLParser.START - 225)) | (1 << (TrinoSQLParser.STATS - 225)))) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & ((1 << (TrinoSQLParser.SUBSET - 257)) | (1 << (TrinoSQLParser.SUBSTRING - 257)) | (1 << (TrinoSQLParser.SYSTEM - 257)) | (1 << (TrinoSQLParser.TABLES - 257)) | (1 << (TrinoSQLParser.TABLESAMPLE - 257)) | (1 << (TrinoSQLParser.TEXT - 257)) | (1 << (TrinoSQLParser.TEXT_STRING - 257)) | (1 << (TrinoSQLParser.TIES - 257)) | (1 << (TrinoSQLParser.TIME - 257)) | (1 << (TrinoSQLParser.TIMESTAMP - 257)) | (1 << (TrinoSQLParser.TO - 257)) | (1 << (TrinoSQLParser.TRAILING - 257)) | (1 << (TrinoSQLParser.TRANSACTION - 257)) | (1 << (TrinoSQLParser.TRIM - 257)) | (1 << (TrinoSQLParser.TRUE - 257)) | (1 << (TrinoSQLParser.TRUNCATE - 257)) | (1 << (TrinoSQLParser.TRY_CAST - 257)) | (1 << (TrinoSQLParser.TYPE - 257)) | (1 << (TrinoSQLParser.UNBOUNDED - 257)) | (1 << (TrinoSQLParser.UNCOMMITTED - 257)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 257)) | (1 << (TrinoSQLParser.UNIQUE - 257)) | (1 << (TrinoSQLParser.UNKNOWN - 257)) | (1 << (TrinoSQLParser.UNMATCHED - 257)) | (1 << (TrinoSQLParser.UNTIL - 257)) | (1 << (TrinoSQLParser.UPDATE - 257)) | (1 << (TrinoSQLParser.USE - 257)))) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & ((1 << (TrinoSQLParser.USER - 289)) | (1 << (TrinoSQLParser.UTF16 - 289)) | (1 << (TrinoSQLParser.UTF32 - 289)) | (1 << (TrinoSQLParser.UTF8 - 289)) | (1 << (TrinoSQLParser.VALIDATE - 289)) | (1 << (TrinoSQLParser.VALUE - 289)) | (1 << (TrinoSQLParser.VERBOSE - 289)) | (1 << (TrinoSQLParser.VERSION - 289)) | (1 << (TrinoSQLParser.VIEW - 289)) | (1 << (TrinoSQLParser.WHILE - 289)) | (1 << (TrinoSQLParser.WINDOW - 289)) | (1 << (TrinoSQLParser.WITHIN - 289)) | (1 << (TrinoSQLParser.WITHOUT - 289)) | (1 << (TrinoSQLParser.WORK - 289)) | (1 << (TrinoSQLParser.WRAPPER - 289)) | (1 << (TrinoSQLParser.WRITE - 289)) | (1 << (TrinoSQLParser.YEAR - 289)) | (1 << (TrinoSQLParser.ZONE - 289)) | (1 << (TrinoSQLParser.PLUS - 289)) | (1 << (TrinoSQLParser.MINUS - 289)))) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & ((1 << (TrinoSQLParser.QUESTION_MARK - 324)) | (1 << (TrinoSQLParser.STRING - 324)) | (1 << (TrinoSQLParser.UNICODE_STRING - 324)) | (1 << (TrinoSQLParser.BINARY_LITERAL - 324)) | (1 << (TrinoSQLParser.INTEGER_VALUE - 324)) | (1 << (TrinoSQLParser.DECIMAL_VALUE - 324)) | (1 << (TrinoSQLParser.DOUBLE_VALUE - 324)) | (1 << (TrinoSQLParser.IDENTIFIER - 324)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 324)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 324)))) !== 0)) {
						{
						this.state = 2472;
						(_localctx as TrimContext)._trimChar = this.valueExpression(0);
						}
					}

					this.state = 2475;
					this.match(TrinoSQLParser.FROM);
					}
					break;
				}
				this.state = 2478;
				(_localctx as TrimContext)._trimSource = this.valueExpression(0);
				this.state = 2479;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 37:
				{
				_localctx = new TrimContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2481;
				this.match(TrinoSQLParser.TRIM);
				this.state = 2482;
				this.match(TrinoSQLParser.T__1);
				this.state = 2483;
				(_localctx as TrimContext)._trimSource = this.valueExpression(0);
				this.state = 2484;
				this.match(TrinoSQLParser.T__3);
				this.state = 2485;
				(_localctx as TrimContext)._trimChar = this.valueExpression(0);
				this.state = 2486;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 38:
				{
				_localctx = new SubstringContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2488;
				this.match(TrinoSQLParser.SUBSTRING);
				this.state = 2489;
				this.match(TrinoSQLParser.T__1);
				this.state = 2490;
				this.valueExpression(0);
				this.state = 2491;
				this.match(TrinoSQLParser.FROM);
				this.state = 2492;
				this.valueExpression(0);
				this.state = 2495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.FOR) {
					{
					this.state = 2493;
					this.match(TrinoSQLParser.FOR);
					this.state = 2494;
					this.valueExpression(0);
					}
				}

				this.state = 2497;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 39:
				{
				_localctx = new NormalizeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2499;
				this.match(TrinoSQLParser.NORMALIZE);
				this.state = 2500;
				this.match(TrinoSQLParser.T__1);
				this.state = 2501;
				this.valueExpression(0);
				this.state = 2504;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__3) {
					{
					this.state = 2502;
					this.match(TrinoSQLParser.T__3);
					this.state = 2503;
					this.normalForm();
					}
				}

				this.state = 2506;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 40:
				{
				_localctx = new ExtractContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2508;
				this.match(TrinoSQLParser.EXTRACT);
				this.state = 2509;
				this.match(TrinoSQLParser.T__1);
				this.state = 2510;
				this.identifier();
				this.state = 2511;
				this.match(TrinoSQLParser.FROM);
				this.state = 2512;
				this.valueExpression(0);
				this.state = 2513;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 41:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2515;
				this.match(TrinoSQLParser.T__1);
				this.state = 2516;
				this.expression();
				this.state = 2517;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 42:
				{
				_localctx = new GroupingOperationContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2519;
				this.match(TrinoSQLParser.GROUPING);
				this.state = 2520;
				this.match(TrinoSQLParser.T__1);
				this.state = 2529;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
					{
					this.state = 2521;
					this.qualifiedName();
					this.state = 2526;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2522;
						this.match(TrinoSQLParser.T__3);
						this.state = 2523;
						this.qualifiedName();
						}
						}
						this.state = 2528;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 2531;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 43:
				{
				_localctx = new JsonExistsContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2532;
				this.match(TrinoSQLParser.JSON_EXISTS);
				this.state = 2533;
				this.match(TrinoSQLParser.T__1);
				this.state = 2534;
				this.jsonPathInvocation();
				this.state = 2539;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.FALSE || _la === TrinoSQLParser.TRUE || _la === TrinoSQLParser.UNKNOWN) {
					{
					this.state = 2535;
					this.jsonExistsErrorBehavior();
					this.state = 2536;
					this.match(TrinoSQLParser.ON);
					this.state = 2537;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				this.state = 2541;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 44:
				{
				_localctx = new JsonValueContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2543;
				this.match(TrinoSQLParser.JSON_VALUE);
				this.state = 2544;
				this.match(TrinoSQLParser.T__1);
				this.state = 2545;
				this.jsonPathInvocation();
				this.state = 2548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.RETURNING) {
					{
					this.state = 2546;
					this.match(TrinoSQLParser.RETURNING);
					this.state = 2547;
					this.type(0);
					}
				}

				this.state = 2554;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 325, this._ctx) ) {
				case 1:
					{
					this.state = 2550;
					(_localctx as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
					this.state = 2551;
					this.match(TrinoSQLParser.ON);
					this.state = 2552;
					this.match(TrinoSQLParser.EMPTY);
					}
					break;
				}
				this.state = 2560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.DEFAULT || _la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.NULL) {
					{
					this.state = 2556;
					(_localctx as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
					this.state = 2557;
					this.match(TrinoSQLParser.ON);
					this.state = 2558;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				this.state = 2562;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 45:
				{
				_localctx = new JsonQueryContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2564;
				this.match(TrinoSQLParser.JSON_QUERY);
				this.state = 2565;
				this.match(TrinoSQLParser.T__1);
				this.state = 2566;
				this.jsonPathInvocation();
				this.state = 2573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.RETURNING) {
					{
					this.state = 2567;
					this.match(TrinoSQLParser.RETURNING);
					this.state = 2568;
					this.type(0);
					this.state = 2571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.FORMAT) {
						{
						this.state = 2569;
						this.match(TrinoSQLParser.FORMAT);
						this.state = 2570;
						this.jsonRepresentation();
						}
					}

					}
				}

				this.state = 2578;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.WITH || _la === TrinoSQLParser.WITHOUT) {
					{
					this.state = 2575;
					this.jsonQueryWrapperBehavior();
					this.state = 2576;
					this.match(TrinoSQLParser.WRAPPER);
					}
				}

				this.state = 2587;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.KEEP || _la === TrinoSQLParser.OMIT) {
					{
					this.state = 2580;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.KEEP || _la === TrinoSQLParser.OMIT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2581;
					this.match(TrinoSQLParser.QUOTES);
					this.state = 2585;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.ON) {
						{
						this.state = 2582;
						this.match(TrinoSQLParser.ON);
						this.state = 2583;
						this.match(TrinoSQLParser.SCALAR);
						this.state = 2584;
						this.match(TrinoSQLParser.TEXT_STRING);
						}
					}

					}
				}

				this.state = 2593;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 332, this._ctx) ) {
				case 1:
					{
					this.state = 2589;
					(_localctx as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
					this.state = 2590;
					this.match(TrinoSQLParser.ON);
					this.state = 2591;
					this.match(TrinoSQLParser.EMPTY);
					}
					break;
				}
				this.state = 2599;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.EMPTY || _la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.NULL) {
					{
					this.state = 2595;
					(_localctx as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
					this.state = 2596;
					this.match(TrinoSQLParser.ON);
					this.state = 2597;
					this.match(TrinoSQLParser.ERROR);
					}
				}

				this.state = 2601;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 46:
				{
				_localctx = new JsonObjectContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2603;
				this.match(TrinoSQLParser.JSON_OBJECT);
				this.state = 2604;
				this.match(TrinoSQLParser.T__1);
				this.state = 2633;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 339, this._ctx) ) {
				case 1:
					{
					this.state = 2605;
					this.jsonObjectMember();
					this.state = 2610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2606;
						this.match(TrinoSQLParser.T__3);
						this.state = 2607;
						this.jsonObjectMember();
						}
						}
						this.state = 2612;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2619;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TrinoSQLParser.NULL:
						{
						this.state = 2613;
						this.match(TrinoSQLParser.NULL);
						this.state = 2614;
						this.match(TrinoSQLParser.ON);
						this.state = 2615;
						this.match(TrinoSQLParser.NULL);
						}
						break;
					case TrinoSQLParser.ABSENT:
						{
						this.state = 2616;
						this.match(TrinoSQLParser.ABSENT);
						this.state = 2617;
						this.match(TrinoSQLParser.ON);
						this.state = 2618;
						this.match(TrinoSQLParser.NULL);
						}
						break;
					case TrinoSQLParser.T__2:
					case TrinoSQLParser.RETURNING:
					case TrinoSQLParser.WITH:
					case TrinoSQLParser.WITHOUT:
						break;
					default:
						break;
					}
					this.state = 2631;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TrinoSQLParser.WITH:
						{
						this.state = 2621;
						this.match(TrinoSQLParser.WITH);
						this.state = 2622;
						this.match(TrinoSQLParser.UNIQUE);
						this.state = 2624;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TrinoSQLParser.KEYS) {
							{
							this.state = 2623;
							this.match(TrinoSQLParser.KEYS);
							}
						}

						}
						break;
					case TrinoSQLParser.WITHOUT:
						{
						this.state = 2626;
						this.match(TrinoSQLParser.WITHOUT);
						this.state = 2627;
						this.match(TrinoSQLParser.UNIQUE);
						this.state = 2629;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === TrinoSQLParser.KEYS) {
							{
							this.state = 2628;
							this.match(TrinoSQLParser.KEYS);
							}
						}

						}
						break;
					case TrinoSQLParser.T__2:
					case TrinoSQLParser.RETURNING:
						break;
					default:
						break;
					}
					}
					break;
				}
				this.state = 2641;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.RETURNING) {
					{
					this.state = 2635;
					this.match(TrinoSQLParser.RETURNING);
					this.state = 2636;
					this.type(0);
					this.state = 2639;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.FORMAT) {
						{
						this.state = 2637;
						this.match(TrinoSQLParser.FORMAT);
						this.state = 2638;
						this.jsonRepresentation();
						}
					}

					}
				}

				this.state = 2643;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 47:
				{
				_localctx = new JsonArrayContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2644;
				this.match(TrinoSQLParser.JSON_ARRAY);
				this.state = 2645;
				this.match(TrinoSQLParser.T__1);
				this.state = 2662;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
				case 1:
					{
					this.state = 2646;
					this.jsonValueExpression();
					this.state = 2651;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2647;
						this.match(TrinoSQLParser.T__3);
						this.state = 2648;
						this.jsonValueExpression();
						}
						}
						this.state = 2653;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2660;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case TrinoSQLParser.NULL:
						{
						this.state = 2654;
						this.match(TrinoSQLParser.NULL);
						this.state = 2655;
						this.match(TrinoSQLParser.ON);
						this.state = 2656;
						this.match(TrinoSQLParser.NULL);
						}
						break;
					case TrinoSQLParser.ABSENT:
						{
						this.state = 2657;
						this.match(TrinoSQLParser.ABSENT);
						this.state = 2658;
						this.match(TrinoSQLParser.ON);
						this.state = 2659;
						this.match(TrinoSQLParser.NULL);
						}
						break;
					case TrinoSQLParser.T__2:
					case TrinoSQLParser.RETURNING:
						break;
					default:
						break;
					}
					}
					break;
				}
				this.state = 2670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.RETURNING) {
					{
					this.state = 2664;
					this.match(TrinoSQLParser.RETURNING);
					this.state = 2665;
					this.type(0);
					this.state = 2668;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === TrinoSQLParser.FORMAT) {
						{
						this.state = 2666;
						this.match(TrinoSQLParser.FORMAT);
						this.state = 2667;
						this.jsonRepresentation();
						}
					}

					}
				}

				this.state = 2672;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2685;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2683;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
					case 1:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						(_localctx as SubscriptContext)._value = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_primaryExpression);
						this.state = 2675;
						if (!(this.precpred(this._ctx, 24))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 24)");
						}
						this.state = 2676;
						this.match(TrinoSQLParser.T__7);
						this.state = 2677;
						(_localctx as SubscriptContext)._index = this.valueExpression(0);
						this.state = 2678;
						this.match(TrinoSQLParser.T__8);
						}
						break;

					case 2:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						(_localctx as DereferenceContext)._base = _prevctx;
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_primaryExpression);
						this.state = 2680;
						if (!(this.precpred(this._ctx, 22))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
						}
						this.state = 2681;
						this.match(TrinoSQLParser.T__0);
						this.state = 2682;
						(_localctx as DereferenceContext)._fieldName = this.identifier();
						}
						break;
					}
					}
				}
				this.state = 2687;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 349, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonPathInvocation(): JsonPathInvocationContext {
		let _localctx: JsonPathInvocationContext = new JsonPathInvocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, TrinoSQLParser.RULE_jsonPathInvocation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2688;
			this.jsonValueExpression();
			this.state = 2689;
			this.match(TrinoSQLParser.T__3);
			this.state = 2690;
			_localctx._path = this.string();
			this.state = 2693;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.AS) {
				{
				this.state = 2691;
				this.match(TrinoSQLParser.AS);
				this.state = 2692;
				_localctx._pathName = this.identifier();
				}
			}

			this.state = 2704;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.PASSING) {
				{
				this.state = 2695;
				this.match(TrinoSQLParser.PASSING);
				this.state = 2696;
				this.jsonArgument();
				this.state = 2701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2697;
					this.match(TrinoSQLParser.T__3);
					this.state = 2698;
					this.jsonArgument();
					}
					}
					this.state = 2703;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonValueExpression(): JsonValueExpressionContext {
		let _localctx: JsonValueExpressionContext = new JsonValueExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, TrinoSQLParser.RULE_jsonValueExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2706;
			this.expression();
			this.state = 2709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.FORMAT) {
				{
				this.state = 2707;
				this.match(TrinoSQLParser.FORMAT);
				this.state = 2708;
				this.jsonRepresentation();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonRepresentation(): JsonRepresentationContext {
		let _localctx: JsonRepresentationContext = new JsonRepresentationContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, TrinoSQLParser.RULE_jsonRepresentation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2711;
			this.match(TrinoSQLParser.JSON);
			this.state = 2714;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.ENCODING) {
				{
				this.state = 2712;
				this.match(TrinoSQLParser.ENCODING);
				this.state = 2713;
				_la = this._input.LA(1);
				if (!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & ((1 << (TrinoSQLParser.UTF16 - 291)) | (1 << (TrinoSQLParser.UTF32 - 291)) | (1 << (TrinoSQLParser.UTF8 - 291)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonArgument(): JsonArgumentContext {
		let _localctx: JsonArgumentContext = new JsonArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, TrinoSQLParser.RULE_jsonArgument);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2716;
			this.jsonValueExpression();
			this.state = 2717;
			this.match(TrinoSQLParser.AS);
			this.state = 2718;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
		let _localctx: JsonExistsErrorBehaviorContext = new JsonExistsErrorBehaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, TrinoSQLParser.RULE_jsonExistsErrorBehavior);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2720;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.ERROR || _la === TrinoSQLParser.FALSE || _la === TrinoSQLParser.TRUE || _la === TrinoSQLParser.UNKNOWN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonValueBehavior(): JsonValueBehaviorContext {
		let _localctx: JsonValueBehaviorContext = new JsonValueBehaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, TrinoSQLParser.RULE_jsonValueBehavior);
		try {
			this.state = 2726;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ERROR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2722;
				this.match(TrinoSQLParser.ERROR);
				}
				break;
			case TrinoSQLParser.NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2723;
				this.match(TrinoSQLParser.NULL);
				}
				break;
			case TrinoSQLParser.DEFAULT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2724;
				this.match(TrinoSQLParser.DEFAULT);
				this.state = 2725;
				this.expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
		let _localctx: JsonQueryWrapperBehaviorContext = new JsonQueryWrapperBehaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, TrinoSQLParser.RULE_jsonQueryWrapperBehavior);
		let _la: number;
		try {
			this.state = 2739;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.WITHOUT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2728;
				this.match(TrinoSQLParser.WITHOUT);
				this.state = 2730;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ARRAY) {
					{
					this.state = 2729;
					this.match(TrinoSQLParser.ARRAY);
					}
				}

				}
				break;
			case TrinoSQLParser.WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2732;
				this.match(TrinoSQLParser.WITH);
				this.state = 2734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.CONDITIONAL || _la === TrinoSQLParser.UNCONDITIONAL) {
					{
					this.state = 2733;
					_la = this._input.LA(1);
					if (!(_la === TrinoSQLParser.CONDITIONAL || _la === TrinoSQLParser.UNCONDITIONAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2737;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ARRAY) {
					{
					this.state = 2736;
					this.match(TrinoSQLParser.ARRAY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonQueryBehavior(): JsonQueryBehaviorContext {
		let _localctx: JsonQueryBehaviorContext = new JsonQueryBehaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, TrinoSQLParser.RULE_jsonQueryBehavior);
		try {
			this.state = 2747;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 360, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2741;
				this.match(TrinoSQLParser.ERROR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2742;
				this.match(TrinoSQLParser.NULL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2743;
				this.match(TrinoSQLParser.EMPTY);
				this.state = 2744;
				this.match(TrinoSQLParser.ARRAY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2745;
				this.match(TrinoSQLParser.EMPTY);
				this.state = 2746;
				this.match(TrinoSQLParser.OBJECT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonObjectMember(): JsonObjectMemberContext {
		let _localctx: JsonObjectMemberContext = new JsonObjectMemberContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, TrinoSQLParser.RULE_jsonObjectMember);
		try {
			this.state = 2760;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2750;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
				case 1:
					{
					this.state = 2749;
					this.match(TrinoSQLParser.KEY);
					}
					break;
				}
				this.state = 2752;
				this.expression();
				this.state = 2753;
				this.match(TrinoSQLParser.VALUE);
				this.state = 2754;
				this.jsonValueExpression();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2756;
				this.expression();
				this.state = 2757;
				this.match(TrinoSQLParser.T__9);
				this.state = 2758;
				this.jsonValueExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public processingMode(): ProcessingModeContext {
		let _localctx: ProcessingModeContext = new ProcessingModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, TrinoSQLParser.RULE_processingMode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2762;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.FINAL || _la === TrinoSQLParser.RUNNING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nullTreatment(): NullTreatmentContext {
		let _localctx: NullTreatmentContext = new NullTreatmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, TrinoSQLParser.RULE_nullTreatment);
		try {
			this.state = 2768;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.IGNORE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2764;
				this.match(TrinoSQLParser.IGNORE);
				this.state = 2765;
				this.match(TrinoSQLParser.NULLS);
				}
				break;
			case TrinoSQLParser.RESPECT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2766;
				this.match(TrinoSQLParser.RESPECT);
				this.state = 2767;
				this.match(TrinoSQLParser.NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public string(): StringContext {
		let _localctx: StringContext = new StringContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, TrinoSQLParser.RULE_string);
		try {
			this.state = 2776;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.STRING:
				_localctx = new BasicStringLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2770;
				this.match(TrinoSQLParser.STRING);
				}
				break;
			case TrinoSQLParser.UNICODE_STRING:
				_localctx = new UnicodeStringLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2771;
				this.match(TrinoSQLParser.UNICODE_STRING);
				this.state = 2774;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 364, this._ctx) ) {
				case 1:
					{
					this.state = 2772;
					this.match(TrinoSQLParser.UESCAPE);
					this.state = 2773;
					this.match(TrinoSQLParser.STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timeZoneSpecifier(): TimeZoneSpecifierContext {
		let _localctx: TimeZoneSpecifierContext = new TimeZoneSpecifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, TrinoSQLParser.RULE_timeZoneSpecifier);
		try {
			this.state = 2784;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
			case 1:
				_localctx = new TimeZoneIntervalContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2778;
				this.match(TrinoSQLParser.TIME);
				this.state = 2779;
				this.match(TrinoSQLParser.ZONE);
				this.state = 2780;
				this.interval();
				}
				break;

			case 2:
				_localctx = new TimeZoneStringContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2781;
				this.match(TrinoSQLParser.TIME);
				this.state = 2782;
				this.match(TrinoSQLParser.ZONE);
				this.state = 2783;
				this.string();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonOperator(): ComparisonOperatorContext {
		let _localctx: ComparisonOperatorContext = new ComparisonOperatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, TrinoSQLParser.RULE_comparisonOperator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2786;
			_la = this._input.LA(1);
			if (!(((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (TrinoSQLParser.EQ - 312)) | (1 << (TrinoSQLParser.NEQ - 312)) | (1 << (TrinoSQLParser.LT - 312)) | (1 << (TrinoSQLParser.LTE - 312)) | (1 << (TrinoSQLParser.GT - 312)) | (1 << (TrinoSQLParser.GTE - 312)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonQuantifier(): ComparisonQuantifierContext {
		let _localctx: ComparisonQuantifierContext = new ComparisonQuantifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, TrinoSQLParser.RULE_comparisonQuantifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2788;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.ALL || _la === TrinoSQLParser.ANY || _la === TrinoSQLParser.SOME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public booleanValue(): BooleanValueContext {
		let _localctx: BooleanValueContext = new BooleanValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, TrinoSQLParser.RULE_booleanValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2790;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.FALSE || _la === TrinoSQLParser.TRUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval(): IntervalContext {
		let _localctx: IntervalContext = new IntervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, TrinoSQLParser.RULE_interval);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2792;
			this.match(TrinoSQLParser.INTERVAL);
			this.state = 2794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.PLUS || _la === TrinoSQLParser.MINUS) {
				{
				this.state = 2793;
				_localctx._sign = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.PLUS || _la === TrinoSQLParser.MINUS)) {
					_localctx._sign = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2796;
			this.string();
			this.state = 2797;
			_localctx._from = this.intervalField();
			this.state = 2800;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 368, this._ctx) ) {
			case 1:
				{
				this.state = 2798;
				this.match(TrinoSQLParser.TO);
				this.state = 2799;
				_localctx._to = this.intervalField();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intervalField(): IntervalFieldContext {
		let _localctx: IntervalFieldContext = new IntervalFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, TrinoSQLParser.RULE_intervalField);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2802;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.DAY || _la === TrinoSQLParser.HOUR || _la === TrinoSQLParser.MINUTE || _la === TrinoSQLParser.MONTH || _la === TrinoSQLParser.SECOND || _la === TrinoSQLParser.YEAR)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public normalForm(): NormalFormContext {
		let _localctx: NormalFormContext = new NormalFormContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, TrinoSQLParser.RULE_normalForm);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2804;
			_la = this._input.LA(1);
			if (!(((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & ((1 << (TrinoSQLParser.NFC - 175)) | (1 << (TrinoSQLParser.NFD - 175)) | (1 << (TrinoSQLParser.NFKC - 175)) | (1 << (TrinoSQLParser.NFKD - 175)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public type(): TypeContext;
	public type(_p: number): TypeContext;
	// @RuleVersion(0)
	public type(_p?: number): TypeContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: TypeContext = new TypeContext(this._ctx, _parentState);
		let _prevctx: TypeContext = _localctx;
		let _startState: number = 174;
		this.enterRecursionRule(_localctx, 174, TrinoSQLParser.RULE_type, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2897;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 379, this._ctx) ) {
			case 1:
				{
				_localctx = new RowTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 2807;
				this.match(TrinoSQLParser.ROW);
				this.state = 2808;
				this.match(TrinoSQLParser.T__1);
				this.state = 2809;
				this.rowField();
				this.state = 2814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2810;
					this.match(TrinoSQLParser.T__3);
					this.state = 2811;
					this.rowField();
					}
					}
					this.state = 2816;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2817;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 2:
				{
				_localctx = new IntervalTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2819;
				this.match(TrinoSQLParser.INTERVAL);
				this.state = 2820;
				(_localctx as IntervalTypeContext)._from = this.intervalField();
				this.state = 2823;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 370, this._ctx) ) {
				case 1:
					{
					this.state = 2821;
					this.match(TrinoSQLParser.TO);
					this.state = 2822;
					(_localctx as IntervalTypeContext)._to = this.intervalField();
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2825;
				(_localctx as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIMESTAMP);
				this.state = 2830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 371, this._ctx) ) {
				case 1:
					{
					this.state = 2826;
					this.match(TrinoSQLParser.T__1);
					this.state = 2827;
					(_localctx as DateTimeTypeContext)._precision = this.typeParameter();
					this.state = 2828;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				this.state = 2835;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
				case 1:
					{
					this.state = 2832;
					this.match(TrinoSQLParser.WITHOUT);
					this.state = 2833;
					this.match(TrinoSQLParser.TIME);
					this.state = 2834;
					this.match(TrinoSQLParser.ZONE);
					}
					break;
				}
				}
				break;

			case 4:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2837;
				(_localctx as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIMESTAMP);
				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__1) {
					{
					this.state = 2838;
					this.match(TrinoSQLParser.T__1);
					this.state = 2839;
					(_localctx as DateTimeTypeContext)._precision = this.typeParameter();
					this.state = 2840;
					this.match(TrinoSQLParser.T__2);
					}
				}

				this.state = 2844;
				this.match(TrinoSQLParser.WITH);
				this.state = 2845;
				this.match(TrinoSQLParser.TIME);
				this.state = 2846;
				this.match(TrinoSQLParser.ZONE);
				}
				break;

			case 5:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2847;
				(_localctx as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIME);
				this.state = 2852;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
				case 1:
					{
					this.state = 2848;
					this.match(TrinoSQLParser.T__1);
					this.state = 2849;
					(_localctx as DateTimeTypeContext)._precision = this.typeParameter();
					this.state = 2850;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				this.state = 2857;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 375, this._ctx) ) {
				case 1:
					{
					this.state = 2854;
					this.match(TrinoSQLParser.WITHOUT);
					this.state = 2855;
					this.match(TrinoSQLParser.TIME);
					this.state = 2856;
					this.match(TrinoSQLParser.ZONE);
					}
					break;
				}
				}
				break;

			case 6:
				{
				_localctx = new DateTimeTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2859;
				(_localctx as DateTimeTypeContext)._base = this.match(TrinoSQLParser.TIME);
				this.state = 2864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__1) {
					{
					this.state = 2860;
					this.match(TrinoSQLParser.T__1);
					this.state = 2861;
					(_localctx as DateTimeTypeContext)._precision = this.typeParameter();
					this.state = 2862;
					this.match(TrinoSQLParser.T__2);
					}
				}

				this.state = 2866;
				this.match(TrinoSQLParser.WITH);
				this.state = 2867;
				this.match(TrinoSQLParser.TIME);
				this.state = 2868;
				this.match(TrinoSQLParser.ZONE);
				}
				break;

			case 7:
				{
				_localctx = new DoublePrecisionTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2869;
				this.match(TrinoSQLParser.DOUBLE);
				this.state = 2870;
				this.match(TrinoSQLParser.PRECISION);
				}
				break;

			case 8:
				{
				_localctx = new LegacyArrayTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2871;
				this.match(TrinoSQLParser.ARRAY);
				this.state = 2872;
				this.match(TrinoSQLParser.LT);
				this.state = 2873;
				this.type(0);
				this.state = 2874;
				this.match(TrinoSQLParser.GT);
				}
				break;

			case 9:
				{
				_localctx = new LegacyMapTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2876;
				this.match(TrinoSQLParser.MAP);
				this.state = 2877;
				this.match(TrinoSQLParser.LT);
				this.state = 2878;
				(_localctx as LegacyMapTypeContext)._keyType = this.type(0);
				this.state = 2879;
				this.match(TrinoSQLParser.T__3);
				this.state = 2880;
				(_localctx as LegacyMapTypeContext)._valueType = this.type(0);
				this.state = 2881;
				this.match(TrinoSQLParser.GT);
				}
				break;

			case 10:
				{
				_localctx = new GenericTypeContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2883;
				this.identifier();
				this.state = 2895;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
				case 1:
					{
					this.state = 2884;
					this.match(TrinoSQLParser.T__1);
					this.state = 2885;
					this.typeParameter();
					this.state = 2890;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2886;
						this.match(TrinoSQLParser.T__3);
						this.state = 2887;
						this.typeParameter();
						}
						}
						this.state = 2892;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2893;
					this.match(TrinoSQLParser.T__2);
					}
					break;
				}
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2908;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new ArrayTypeContext(new TypeContext(_parentctx, _parentState));
					this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_type);
					this.state = 2899;
					if (!(this.precpred(this._ctx, 2))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
					}
					this.state = 2900;
					this.match(TrinoSQLParser.ARRAY);
					this.state = 2904;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 380, this._ctx) ) {
					case 1:
						{
						this.state = 2901;
						this.match(TrinoSQLParser.T__7);
						this.state = 2902;
						this.match(TrinoSQLParser.INTEGER_VALUE);
						this.state = 2903;
						this.match(TrinoSQLParser.T__8);
						}
						break;
					}
					}
					}
				}
				this.state = 2910;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowField(): RowFieldContext {
		let _localctx: RowFieldContext = new RowFieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, TrinoSQLParser.RULE_rowField);
		try {
			this.state = 2915;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 382, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2911;
				this.type(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2912;
				this.identifier();
				this.state = 2913;
				this.type(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeParameter(): TypeParameterContext {
		let _localctx: TypeParameterContext = new TypeParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, TrinoSQLParser.RULE_typeParameter);
		try {
			this.state = 2919;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.INTEGER_VALUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2917;
				this.match(TrinoSQLParser.INTEGER_VALUE);
				}
				break;
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2918;
				this.type(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whenClause(): WhenClauseContext {
		let _localctx: WhenClauseContext = new WhenClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, TrinoSQLParser.RULE_whenClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2921;
			this.match(TrinoSQLParser.WHEN);
			this.state = 2922;
			_localctx._condition = this.expression();
			this.state = 2923;
			this.match(TrinoSQLParser.THEN);
			this.state = 2924;
			_localctx._result = this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filter(): FilterContext {
		let _localctx: FilterContext = new FilterContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, TrinoSQLParser.RULE_filter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2926;
			this.match(TrinoSQLParser.FILTER);
			this.state = 2927;
			this.match(TrinoSQLParser.T__1);
			this.state = 2928;
			this.match(TrinoSQLParser.WHERE);
			this.state = 2929;
			this.booleanExpression(0);
			this.state = 2930;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeCase(): MergeCaseContext {
		let _localctx: MergeCaseContext = new MergeCaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, TrinoSQLParser.RULE_mergeCase);
		let _la: number;
		try {
			this.state = 2996;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				_localctx = new MergeUpdateContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2932;
				this.match(TrinoSQLParser.WHEN);
				this.state = 2933;
				this.match(TrinoSQLParser.MATCHED);
				this.state = 2936;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AND) {
					{
					this.state = 2934;
					this.match(TrinoSQLParser.AND);
					this.state = 2935;
					(_localctx as MergeUpdateContext)._condition = this.expression();
					}
				}

				this.state = 2938;
				this.match(TrinoSQLParser.THEN);
				this.state = 2939;
				this.match(TrinoSQLParser.UPDATE);
				this.state = 2940;
				this.match(TrinoSQLParser.SET);
				this.state = 2941;
				(_localctx as MergeUpdateContext)._identifier = this.identifier();
				(_localctx as MergeUpdateContext)._targets.push((_localctx as MergeUpdateContext)._identifier);
				this.state = 2942;
				this.match(TrinoSQLParser.EQ);
				this.state = 2943;
				(_localctx as MergeUpdateContext)._expression = this.expression();
				(_localctx as MergeUpdateContext)._values.push((_localctx as MergeUpdateContext)._expression);
				this.state = 2951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2944;
					this.match(TrinoSQLParser.T__3);
					this.state = 2945;
					(_localctx as MergeUpdateContext)._identifier = this.identifier();
					(_localctx as MergeUpdateContext)._targets.push((_localctx as MergeUpdateContext)._identifier);
					this.state = 2946;
					this.match(TrinoSQLParser.EQ);
					this.state = 2947;
					(_localctx as MergeUpdateContext)._expression = this.expression();
					(_localctx as MergeUpdateContext)._values.push((_localctx as MergeUpdateContext)._expression);
					}
					}
					this.state = 2953;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 2:
				_localctx = new MergeDeleteContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2954;
				this.match(TrinoSQLParser.WHEN);
				this.state = 2955;
				this.match(TrinoSQLParser.MATCHED);
				this.state = 2958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AND) {
					{
					this.state = 2956;
					this.match(TrinoSQLParser.AND);
					this.state = 2957;
					(_localctx as MergeDeleteContext)._condition = this.expression();
					}
				}

				this.state = 2960;
				this.match(TrinoSQLParser.THEN);
				this.state = 2961;
				this.match(TrinoSQLParser.DELETE);
				}
				break;

			case 3:
				_localctx = new MergeInsertContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2962;
				this.match(TrinoSQLParser.WHEN);
				this.state = 2963;
				this.match(TrinoSQLParser.NOT);
				this.state = 2964;
				this.match(TrinoSQLParser.MATCHED);
				this.state = 2967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.AND) {
					{
					this.state = 2965;
					this.match(TrinoSQLParser.AND);
					this.state = 2966;
					(_localctx as MergeInsertContext)._condition = this.expression();
					}
				}

				this.state = 2969;
				this.match(TrinoSQLParser.THEN);
				this.state = 2970;
				this.match(TrinoSQLParser.INSERT);
				this.state = 2982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.T__1) {
					{
					this.state = 2971;
					this.match(TrinoSQLParser.T__1);
					this.state = 2972;
					(_localctx as MergeInsertContext)._identifier = this.identifier();
					(_localctx as MergeInsertContext)._targets.push((_localctx as MergeInsertContext)._identifier);
					this.state = 2977;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === TrinoSQLParser.T__3) {
						{
						{
						this.state = 2973;
						this.match(TrinoSQLParser.T__3);
						this.state = 2974;
						(_localctx as MergeInsertContext)._identifier = this.identifier();
						(_localctx as MergeInsertContext)._targets.push((_localctx as MergeInsertContext)._identifier);
						}
						}
						this.state = 2979;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 2980;
					this.match(TrinoSQLParser.T__2);
					}
				}

				this.state = 2984;
				this.match(TrinoSQLParser.VALUES);
				this.state = 2985;
				this.match(TrinoSQLParser.T__1);
				this.state = 2986;
				(_localctx as MergeInsertContext)._expression = this.expression();
				(_localctx as MergeInsertContext)._values.push((_localctx as MergeInsertContext)._expression);
				this.state = 2991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 2987;
					this.match(TrinoSQLParser.T__3);
					this.state = 2988;
					(_localctx as MergeInsertContext)._expression = this.expression();
					(_localctx as MergeInsertContext)._values.push((_localctx as MergeInsertContext)._expression);
					}
					}
					this.state = 2993;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2994;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public over(): OverContext {
		let _localctx: OverContext = new OverContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, TrinoSQLParser.RULE_over);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2998;
			this.match(TrinoSQLParser.OVER);
			this.state = 3004;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				{
				this.state = 2999;
				_localctx._windowName = this.identifier();
				}
				break;
			case TrinoSQLParser.T__1:
				{
				this.state = 3000;
				this.match(TrinoSQLParser.T__1);
				this.state = 3001;
				this.windowSpecification();
				this.state = 3002;
				this.match(TrinoSQLParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public windowFrame(): WindowFrameContext {
		let _localctx: WindowFrameContext = new WindowFrameContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, TrinoSQLParser.RULE_windowFrame);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.MEASURES) {
				{
				this.state = 3006;
				this.match(TrinoSQLParser.MEASURES);
				this.state = 3007;
				this.measureDefinition();
				this.state = 3012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 3008;
					this.match(TrinoSQLParser.T__3);
					this.state = 3009;
					this.measureDefinition();
					}
					}
					this.state = 3014;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3017;
			this.frameExtent();
			this.state = 3021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.AFTER) {
				{
				this.state = 3018;
				this.match(TrinoSQLParser.AFTER);
				this.state = 3019;
				this.match(TrinoSQLParser.MATCH);
				this.state = 3020;
				this.skipTo();
				}
			}

			this.state = 3024;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.INITIAL || _la === TrinoSQLParser.SEEK) {
				{
				this.state = 3023;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.INITIAL || _la === TrinoSQLParser.SEEK)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3031;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.PATTERN) {
				{
				this.state = 3026;
				this.match(TrinoSQLParser.PATTERN);
				this.state = 3027;
				this.match(TrinoSQLParser.T__1);
				this.state = 3028;
				this.rowPattern(0);
				this.state = 3029;
				this.match(TrinoSQLParser.T__2);
				}
			}

			this.state = 3042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.SUBSET) {
				{
				this.state = 3033;
				this.match(TrinoSQLParser.SUBSET);
				this.state = 3034;
				this.subsetDefinition();
				this.state = 3039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 3035;
					this.match(TrinoSQLParser.T__3);
					this.state = 3036;
					this.subsetDefinition();
					}
					}
					this.state = 3041;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3053;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.DEFINE) {
				{
				this.state = 3044;
				this.match(TrinoSQLParser.DEFINE);
				this.state = 3045;
				this.variableDefinition();
				this.state = 3050;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 3046;
					this.match(TrinoSQLParser.T__3);
					this.state = 3047;
					this.variableDefinition();
					}
					}
					this.state = 3052;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameExtent(): FrameExtentContext {
		let _localctx: FrameExtentContext = new FrameExtentContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, TrinoSQLParser.RULE_frameExtent);
		try {
			this.state = 3079;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 402, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3055;
				_localctx._frameType = this.match(TrinoSQLParser.RANGE);
				this.state = 3056;
				_localctx._start = this.frameBound();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3057;
				_localctx._frameType = this.match(TrinoSQLParser.ROWS);
				this.state = 3058;
				_localctx._start = this.frameBound();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3059;
				_localctx._frameType = this.match(TrinoSQLParser.GROUPS);
				this.state = 3060;
				_localctx._start = this.frameBound();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3061;
				_localctx._frameType = this.match(TrinoSQLParser.RANGE);
				this.state = 3062;
				this.match(TrinoSQLParser.BETWEEN);
				this.state = 3063;
				_localctx._start = this.frameBound();
				this.state = 3064;
				this.match(TrinoSQLParser.AND);
				this.state = 3065;
				_localctx._end = this.frameBound();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3067;
				_localctx._frameType = this.match(TrinoSQLParser.ROWS);
				this.state = 3068;
				this.match(TrinoSQLParser.BETWEEN);
				this.state = 3069;
				_localctx._start = this.frameBound();
				this.state = 3070;
				this.match(TrinoSQLParser.AND);
				this.state = 3071;
				_localctx._end = this.frameBound();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3073;
				_localctx._frameType = this.match(TrinoSQLParser.GROUPS);
				this.state = 3074;
				this.match(TrinoSQLParser.BETWEEN);
				this.state = 3075;
				_localctx._start = this.frameBound();
				this.state = 3076;
				this.match(TrinoSQLParser.AND);
				this.state = 3077;
				_localctx._end = this.frameBound();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frameBound(): FrameBoundContext {
		let _localctx: FrameBoundContext = new FrameBoundContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, TrinoSQLParser.RULE_frameBound);
		let _la: number;
		try {
			this.state = 3090;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				_localctx = new UnboundedFrameContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3081;
				this.match(TrinoSQLParser.UNBOUNDED);
				this.state = 3082;
				(_localctx as UnboundedFrameContext)._boundType = this.match(TrinoSQLParser.PRECEDING);
				}
				break;

			case 2:
				_localctx = new UnboundedFrameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3083;
				this.match(TrinoSQLParser.UNBOUNDED);
				this.state = 3084;
				(_localctx as UnboundedFrameContext)._boundType = this.match(TrinoSQLParser.FOLLOWING);
				}
				break;

			case 3:
				_localctx = new CurrentRowBoundContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3085;
				this.match(TrinoSQLParser.CURRENT);
				this.state = 3086;
				this.match(TrinoSQLParser.ROW);
				}
				break;

			case 4:
				_localctx = new BoundedFrameContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3087;
				this.expression();
				this.state = 3088;
				(_localctx as BoundedFrameContext)._boundType = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.FOLLOWING || _la === TrinoSQLParser.PRECEDING)) {
					(_localctx as BoundedFrameContext)._boundType = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public rowPattern(): RowPatternContext;
	public rowPattern(_p: number): RowPatternContext;
	// @RuleVersion(0)
	public rowPattern(_p?: number): RowPatternContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: RowPatternContext = new RowPatternContext(this._ctx, _parentState);
		let _prevctx: RowPatternContext = _localctx;
		let _startState: number = 194;
		this.enterRecursionRule(_localctx, 194, TrinoSQLParser.RULE_rowPattern, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QuantifiedPrimaryContext(_localctx);
			this._ctx = _localctx;
			_prevctx = _localctx;

			this.state = 3093;
			this.patternPrimary();
			this.state = 3095;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 404, this._ctx) ) {
			case 1:
				{
				this.state = 3094;
				this.patternQuantifier();
				}
				break;
			}
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 3104;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 3102;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 405, this._ctx) ) {
					case 1:
						{
						_localctx = new PatternConcatenationContext(new RowPatternContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_rowPattern);
						this.state = 3097;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 3098;
						this.rowPattern(3);
						}
						break;

					case 2:
						{
						_localctx = new PatternAlternationContext(new RowPatternContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, TrinoSQLParser.RULE_rowPattern);
						this.state = 3099;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 3100;
						this.match(TrinoSQLParser.T__10);
						this.state = 3101;
						this.rowPattern(2);
						}
						break;
					}
					}
				}
				this.state = 3106;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 406, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternPrimary(): PatternPrimaryContext {
		let _localctx: PatternPrimaryContext = new PatternPrimaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, TrinoSQLParser.RULE_patternPrimary);
		let _la: number;
		try {
			this.state = 3132;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
			case 1:
				_localctx = new PatternVariableContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3107;
				this.identifier();
				}
				break;

			case 2:
				_localctx = new EmptyPatternContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3108;
				this.match(TrinoSQLParser.T__1);
				this.state = 3109;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 3:
				_localctx = new PatternPermutationContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3110;
				this.match(TrinoSQLParser.PERMUTE);
				this.state = 3111;
				this.match(TrinoSQLParser.T__1);
				this.state = 3112;
				this.rowPattern(0);
				this.state = 3117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 3113;
					this.match(TrinoSQLParser.T__3);
					this.state = 3114;
					this.rowPattern(0);
					}
					}
					this.state = 3119;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3120;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 4:
				_localctx = new GroupedPatternContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3122;
				this.match(TrinoSQLParser.T__1);
				this.state = 3123;
				this.rowPattern(0);
				this.state = 3124;
				this.match(TrinoSQLParser.T__2);
				}
				break;

			case 5:
				_localctx = new PartitionStartAnchorContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3126;
				this.match(TrinoSQLParser.T__11);
				}
				break;

			case 6:
				_localctx = new PartitionEndAnchorContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3127;
				this.match(TrinoSQLParser.T__12);
				}
				break;

			case 7:
				_localctx = new ExcludedPatternContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3128;
				this.match(TrinoSQLParser.T__13);
				this.state = 3129;
				this.rowPattern(0);
				this.state = 3130;
				this.match(TrinoSQLParser.T__14);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternQuantifier(): PatternQuantifierContext {
		let _localctx: PatternQuantifierContext = new PatternQuantifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, TrinoSQLParser.RULE_patternQuantifier);
		let _la: number;
		try {
			this.state = 3164;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				_localctx = new ZeroOrMoreQuantifierContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3134;
				this.match(TrinoSQLParser.ASTERISK);
				this.state = 3136;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 409, this._ctx) ) {
				case 1:
					{
					this.state = 3135;
					(_localctx as ZeroOrMoreQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new OneOrMoreQuantifierContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3138;
				this.match(TrinoSQLParser.PLUS);
				this.state = 3140;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 410, this._ctx) ) {
				case 1:
					{
					this.state = 3139;
					(_localctx as OneOrMoreQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new ZeroOrOneQuantifierContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3142;
				this.match(TrinoSQLParser.QUESTION_MARK);
				this.state = 3144;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 411, this._ctx) ) {
				case 1:
					{
					this.state = 3143;
					(_localctx as ZeroOrOneQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new RangeQuantifierContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3146;
				this.match(TrinoSQLParser.T__15);
				this.state = 3147;
				(_localctx as RangeQuantifierContext)._exactly = this.match(TrinoSQLParser.INTEGER_VALUE);
				this.state = 3148;
				this.match(TrinoSQLParser.T__16);
				this.state = 3150;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 412, this._ctx) ) {
				case 1:
					{
					this.state = 3149;
					(_localctx as RangeQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new RangeQuantifierContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3152;
				this.match(TrinoSQLParser.T__15);
				this.state = 3154;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.INTEGER_VALUE) {
					{
					this.state = 3153;
					(_localctx as RangeQuantifierContext)._atLeast = this.match(TrinoSQLParser.INTEGER_VALUE);
					}
				}

				this.state = 3156;
				this.match(TrinoSQLParser.T__3);
				this.state = 3158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.INTEGER_VALUE) {
					{
					this.state = 3157;
					(_localctx as RangeQuantifierContext)._atMost = this.match(TrinoSQLParser.INTEGER_VALUE);
					}
				}

				this.state = 3160;
				this.match(TrinoSQLParser.T__16);
				this.state = 3162;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
				case 1:
					{
					this.state = 3161;
					(_localctx as RangeQuantifierContext)._reluctant = this.match(TrinoSQLParser.QUESTION_MARK);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updateAssignment(): UpdateAssignmentContext {
		let _localctx: UpdateAssignmentContext = new UpdateAssignmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, TrinoSQLParser.RULE_updateAssignment);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3166;
			this.identifier();
			this.state = 3167;
			this.match(TrinoSQLParser.EQ);
			this.state = 3168;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainOption(): ExplainOptionContext {
		let _localctx: ExplainOptionContext = new ExplainOptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, TrinoSQLParser.RULE_explainOption);
		let _la: number;
		try {
			this.state = 3174;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.FORMAT:
				_localctx = new ExplainFormatContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3170;
				this.match(TrinoSQLParser.FORMAT);
				this.state = 3171;
				(_localctx as ExplainFormatContext)._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.GRAPHVIZ || _la === TrinoSQLParser.JSON || _la === TrinoSQLParser.TEXT)) {
					(_localctx as ExplainFormatContext)._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TrinoSQLParser.TYPE:
				_localctx = new ExplainTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3172;
				this.match(TrinoSQLParser.TYPE);
				this.state = 3173;
				(_localctx as ExplainTypeContext)._value = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.DISTRIBUTED || _la === TrinoSQLParser.IO || _la === TrinoSQLParser.LOGICAL || _la === TrinoSQLParser.VALIDATE)) {
					(_localctx as ExplainTypeContext)._value = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let _localctx: TransactionModeContext = new TransactionModeContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, TrinoSQLParser.RULE_transactionMode);
		let _la: number;
		try {
			this.state = 3181;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ISOLATION:
				_localctx = new IsolationLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3176;
				this.match(TrinoSQLParser.ISOLATION);
				this.state = 3177;
				this.match(TrinoSQLParser.LEVEL);
				this.state = 3178;
				this.levelOfIsolation();
				}
				break;
			case TrinoSQLParser.READ:
				_localctx = new TransactionAccessModeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3179;
				this.match(TrinoSQLParser.READ);
				this.state = 3180;
				(_localctx as TransactionAccessModeContext)._accessMode = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.ONLY || _la === TrinoSQLParser.WRITE)) {
					(_localctx as TransactionAccessModeContext)._accessMode = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public levelOfIsolation(): LevelOfIsolationContext {
		let _localctx: LevelOfIsolationContext = new LevelOfIsolationContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, TrinoSQLParser.RULE_levelOfIsolation);
		try {
			this.state = 3190;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				_localctx = new ReadUncommittedContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3183;
				this.match(TrinoSQLParser.READ);
				this.state = 3184;
				this.match(TrinoSQLParser.UNCOMMITTED);
				}
				break;

			case 2:
				_localctx = new ReadCommittedContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3185;
				this.match(TrinoSQLParser.READ);
				this.state = 3186;
				this.match(TrinoSQLParser.COMMITTED);
				}
				break;

			case 3:
				_localctx = new RepeatableReadContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3187;
				this.match(TrinoSQLParser.REPEATABLE);
				this.state = 3188;
				this.match(TrinoSQLParser.READ);
				}
				break;

			case 4:
				_localctx = new SerializableContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3189;
				this.match(TrinoSQLParser.SERIALIZABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callArgument(): CallArgumentContext {
		let _localctx: CallArgumentContext = new CallArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, TrinoSQLParser.RULE_callArgument);
		try {
			this.state = 3197;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
			case 1:
				_localctx = new PositionalArgumentContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3192;
				this.expression();
				}
				break;

			case 2:
				_localctx = new NamedArgumentContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3193;
				this.identifier();
				this.state = 3194;
				this.match(TrinoSQLParser.T__5);
				this.state = 3195;
				this.expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pathElement(): PathElementContext {
		let _localctx: PathElementContext = new PathElementContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, TrinoSQLParser.RULE_pathElement);
		try {
			this.state = 3204;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 421, this._ctx) ) {
			case 1:
				_localctx = new QualifiedArgumentContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3199;
				this.identifier();
				this.state = 3200;
				this.match(TrinoSQLParser.T__0);
				this.state = 3201;
				this.identifier();
				}
				break;

			case 2:
				_localctx = new UnqualifiedArgumentContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3203;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pathSpecification(): PathSpecificationContext {
		let _localctx: PathSpecificationContext = new PathSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, TrinoSQLParser.RULE_pathSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3206;
			this.pathElement();
			this.state = 3211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 3207;
				this.match(TrinoSQLParser.T__3);
				this.state = 3208;
				this.pathElement();
				}
				}
				this.state = 3213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionSpecification(): FunctionSpecificationContext {
		let _localctx: FunctionSpecificationContext = new FunctionSpecificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, TrinoSQLParser.RULE_functionSpecification);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3214;
			this.match(TrinoSQLParser.FUNCTION);
			this.state = 3215;
			this.functionDeclaration();
			this.state = 3216;
			this.returnsClause();
			this.state = 3220;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3217;
					this.routineCharacteristic();
					}
					}
				}
				this.state = 3222;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 423, this._ctx);
			}
			this.state = 3223;
			this.controlStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionDeclaration(): FunctionDeclarationContext {
		let _localctx: FunctionDeclarationContext = new FunctionDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, TrinoSQLParser.RULE_functionDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3225;
			this.qualifiedName();
			this.state = 3226;
			this.match(TrinoSQLParser.T__1);
			this.state = 3235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
				{
				this.state = 3227;
				this.parameterDeclaration();
				this.state = 3232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.T__3) {
					{
					{
					this.state = 3228;
					this.match(TrinoSQLParser.T__3);
					this.state = 3229;
					this.parameterDeclaration();
					}
					}
					this.state = 3234;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3237;
			this.match(TrinoSQLParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameterDeclaration(): ParameterDeclarationContext {
		let _localctx: ParameterDeclarationContext = new ParameterDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, TrinoSQLParser.RULE_parameterDeclaration);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3240;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 426, this._ctx) ) {
			case 1:
				{
				this.state = 3239;
				this.identifier();
				}
				break;
			}
			this.state = 3242;
			this.type(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnsClause(): ReturnsClauseContext {
		let _localctx: ReturnsClauseContext = new ReturnsClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, TrinoSQLParser.RULE_returnsClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3244;
			this.match(TrinoSQLParser.RETURNS);
			this.state = 3245;
			this.type(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public routineCharacteristic(): RoutineCharacteristicContext {
		let _localctx: RoutineCharacteristicContext = new RoutineCharacteristicContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, TrinoSQLParser.RULE_routineCharacteristic);
		let _la: number;
		try {
			this.state = 3266;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.LANGUAGE:
				_localctx = new LanguageCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3247;
				this.match(TrinoSQLParser.LANGUAGE);
				this.state = 3248;
				this.identifier();
				}
				break;
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.NOT:
				_localctx = new DeterministicCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.NOT) {
					{
					this.state = 3249;
					this.match(TrinoSQLParser.NOT);
					}
				}

				this.state = 3252;
				this.match(TrinoSQLParser.DETERMINISTIC);
				}
				break;
			case TrinoSQLParser.RETURNS:
				_localctx = new ReturnsNullOnNullInputCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3253;
				this.match(TrinoSQLParser.RETURNS);
				this.state = 3254;
				this.match(TrinoSQLParser.NULL);
				this.state = 3255;
				this.match(TrinoSQLParser.ON);
				this.state = 3256;
				this.match(TrinoSQLParser.NULL);
				this.state = 3257;
				this.match(TrinoSQLParser.INPUT);
				}
				break;
			case TrinoSQLParser.CALLED:
				_localctx = new CalledOnNullInputCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3258;
				this.match(TrinoSQLParser.CALLED);
				this.state = 3259;
				this.match(TrinoSQLParser.ON);
				this.state = 3260;
				this.match(TrinoSQLParser.NULL);
				this.state = 3261;
				this.match(TrinoSQLParser.INPUT);
				}
				break;
			case TrinoSQLParser.SECURITY:
				_localctx = new SecurityCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3262;
				this.match(TrinoSQLParser.SECURITY);
				this.state = 3263;
				_la = this._input.LA(1);
				if (!(_la === TrinoSQLParser.DEFINER || _la === TrinoSQLParser.INVOKER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case TrinoSQLParser.COMMENT:
				_localctx = new CommentCharacteristicContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3264;
				this.match(TrinoSQLParser.COMMENT);
				this.state = 3265;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public controlStatement(): ControlStatementContext {
		let _localctx: ControlStatementContext = new ControlStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, TrinoSQLParser.RULE_controlStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3367;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
			case 1:
				_localctx = new ReturnStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3268;
				this.match(TrinoSQLParser.RETURN);
				this.state = 3269;
				this.valueExpression(0);
				}
				break;

			case 2:
				_localctx = new AssignmentStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3270;
				this.match(TrinoSQLParser.SET);
				this.state = 3271;
				this.identifier();
				this.state = 3272;
				this.match(TrinoSQLParser.EQ);
				this.state = 3273;
				this.expression();
				}
				break;

			case 3:
				_localctx = new SimpleCaseStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3275;
				this.match(TrinoSQLParser.CASE);
				this.state = 3276;
				this.expression();
				this.state = 3278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3277;
					this.caseStatementWhenClause();
					}
					}
					this.state = 3280;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.WHEN);
				this.state = 3283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ELSE) {
					{
					this.state = 3282;
					this.elseClause();
					}
				}

				this.state = 3285;
				this.match(TrinoSQLParser.END);
				this.state = 3286;
				this.match(TrinoSQLParser.CASE);
				}
				break;

			case 4:
				_localctx = new SearchedCaseStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3288;
				this.match(TrinoSQLParser.CASE);
				this.state = 3290;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3289;
					this.caseStatementWhenClause();
					}
					}
					this.state = 3292;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === TrinoSQLParser.WHEN);
				this.state = 3295;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ELSE) {
					{
					this.state = 3294;
					this.elseClause();
					}
				}

				this.state = 3297;
				this.match(TrinoSQLParser.END);
				this.state = 3298;
				this.match(TrinoSQLParser.CASE);
				}
				break;

			case 5:
				_localctx = new IfStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3300;
				this.match(TrinoSQLParser.IF);
				this.state = 3301;
				this.expression();
				this.state = 3302;
				this.match(TrinoSQLParser.THEN);
				this.state = 3303;
				this.sqlStatementList();
				this.state = 3307;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === TrinoSQLParser.ELSEIF) {
					{
					{
					this.state = 3304;
					this.elseIfClause();
					}
					}
					this.state = 3309;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.ELSE) {
					{
					this.state = 3310;
					this.elseClause();
					}
				}

				this.state = 3313;
				this.match(TrinoSQLParser.END);
				this.state = 3314;
				this.match(TrinoSQLParser.IF);
				}
				break;

			case 6:
				_localctx = new IterateStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3316;
				this.match(TrinoSQLParser.ITERATE);
				this.state = 3317;
				this.identifier();
				}
				break;

			case 7:
				_localctx = new LeaveStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3318;
				this.match(TrinoSQLParser.LEAVE);
				this.state = 3319;
				this.identifier();
				}
				break;

			case 8:
				_localctx = new CompoundStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3320;
				this.match(TrinoSQLParser.BEGIN);
				this.state = 3326;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3321;
						this.variableDeclaration();
						this.state = 3322;
						this.match(TrinoSQLParser.SEMICOLON);
						}
						}
					}
					this.state = 3328;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 435, this._ctx);
				}
				this.state = 3330;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CASE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & ((1 << (TrinoSQLParser.IDENTIFIER - 332)) | (1 << (TrinoSQLParser.DIGIT_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.QUOTED_IDENTIFIER - 332)) | (1 << (TrinoSQLParser.BACKQUOTED_IDENTIFIER - 332)))) !== 0)) {
					{
					this.state = 3329;
					this.sqlStatementList();
					}
				}

				this.state = 3332;
				this.match(TrinoSQLParser.END);
				}
				break;

			case 9:
				_localctx = new LoopStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3336;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 437, this._ctx) ) {
				case 1:
					{
					this.state = 3333;
					(_localctx as LoopStatementContext)._label = this.identifier();
					this.state = 3334;
					this.match(TrinoSQLParser.T__9);
					}
					break;
				}
				this.state = 3338;
				this.match(TrinoSQLParser.LOOP);
				this.state = 3339;
				this.sqlStatementList();
				this.state = 3340;
				this.match(TrinoSQLParser.END);
				this.state = 3341;
				this.match(TrinoSQLParser.LOOP);
				}
				break;

			case 10:
				_localctx = new WhileStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3346;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 438, this._ctx) ) {
				case 1:
					{
					this.state = 3343;
					(_localctx as WhileStatementContext)._label = this.identifier();
					this.state = 3344;
					this.match(TrinoSQLParser.T__9);
					}
					break;
				}
				this.state = 3348;
				this.match(TrinoSQLParser.WHILE);
				this.state = 3349;
				this.expression();
				this.state = 3350;
				this.match(TrinoSQLParser.DO);
				this.state = 3351;
				this.sqlStatementList();
				this.state = 3352;
				this.match(TrinoSQLParser.END);
				this.state = 3353;
				this.match(TrinoSQLParser.WHILE);
				}
				break;

			case 11:
				_localctx = new RepeatStatementContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3358;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 439, this._ctx) ) {
				case 1:
					{
					this.state = 3355;
					(_localctx as RepeatStatementContext)._label = this.identifier();
					this.state = 3356;
					this.match(TrinoSQLParser.T__9);
					}
					break;
				}
				this.state = 3360;
				this.match(TrinoSQLParser.REPEAT);
				this.state = 3361;
				this.sqlStatementList();
				this.state = 3362;
				this.match(TrinoSQLParser.UNTIL);
				this.state = 3363;
				this.expression();
				this.state = 3364;
				this.match(TrinoSQLParser.END);
				this.state = 3365;
				this.match(TrinoSQLParser.REPEAT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseStatementWhenClause(): CaseStatementWhenClauseContext {
		let _localctx: CaseStatementWhenClauseContext = new CaseStatementWhenClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, TrinoSQLParser.RULE_caseStatementWhenClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3369;
			this.match(TrinoSQLParser.WHEN);
			this.state = 3370;
			this.expression();
			this.state = 3371;
			this.match(TrinoSQLParser.THEN);
			this.state = 3372;
			this.sqlStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elseIfClause(): ElseIfClauseContext {
		let _localctx: ElseIfClauseContext = new ElseIfClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, TrinoSQLParser.RULE_elseIfClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3374;
			this.match(TrinoSQLParser.ELSEIF);
			this.state = 3375;
			this.expression();
			this.state = 3376;
			this.match(TrinoSQLParser.THEN);
			this.state = 3377;
			this.sqlStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public elseClause(): ElseClauseContext {
		let _localctx: ElseClauseContext = new ElseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, TrinoSQLParser.RULE_elseClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3379;
			this.match(TrinoSQLParser.ELSE);
			this.state = 3380;
			this.sqlStatementList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableDeclaration(): VariableDeclarationContext {
		let _localctx: VariableDeclarationContext = new VariableDeclarationContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, TrinoSQLParser.RULE_variableDeclaration);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3382;
			this.match(TrinoSQLParser.DECLARE);
			this.state = 3383;
			this.identifier();
			this.state = 3388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 3384;
				this.match(TrinoSQLParser.T__3);
				this.state = 3385;
				this.identifier();
				}
				}
				this.state = 3390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3391;
			this.type(0);
			this.state = 3394;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === TrinoSQLParser.DEFAULT) {
				{
				this.state = 3392;
				this.match(TrinoSQLParser.DEFAULT);
				this.state = 3393;
				this.valueExpression(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sqlStatementList(): SqlStatementListContext {
		let _localctx: SqlStatementListContext = new SqlStatementListContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, TrinoSQLParser.RULE_sqlStatementList);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3399;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3396;
					this.controlStatement();
					this.state = 3397;
					this.match(TrinoSQLParser.SEMICOLON);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3401;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 443, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, TrinoSQLParser.RULE_privilege);
		try {
			this.state = 3409;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 444, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3403;
				this.match(TrinoSQLParser.CREATE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3404;
				this.match(TrinoSQLParser.SELECT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3405;
				this.match(TrinoSQLParser.DELETE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3406;
				this.match(TrinoSQLParser.INSERT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3407;
				this.match(TrinoSQLParser.UPDATE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3408;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityKind(): EntityKindContext {
		let _localctx: EntityKindContext = new EntityKindContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, TrinoSQLParser.RULE_entityKind);
		try {
			this.state = 3414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 445, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3411;
				this.match(TrinoSQLParser.TABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3412;
				this.match(TrinoSQLParser.SCHEMA);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3413;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantObject(): GrantObjectContext {
		let _localctx: GrantObjectContext = new GrantObjectContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, TrinoSQLParser.RULE_grantObject);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3417;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				{
				this.state = 3416;
				this.entityKind();
				}
				break;
			}
			this.state = 3419;
			this.qualifiedName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedName(): QualifiedNameContext {
		let _localctx: QualifiedNameContext = new QualifiedNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, TrinoSQLParser.RULE_qualifiedName);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3421;
			this.identifier();
			this.state = 3426;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3422;
					this.match(TrinoSQLParser.T__0);
					this.state = 3423;
					this.identifier();
					}
					}
				}
				this.state = 3428;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 447, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public queryPeriod(): QueryPeriodContext {
		let _localctx: QueryPeriodContext = new QueryPeriodContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, TrinoSQLParser.RULE_queryPeriod);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3429;
			this.match(TrinoSQLParser.FOR);
			this.state = 3430;
			this.rangeType();
			this.state = 3431;
			this.match(TrinoSQLParser.AS);
			this.state = 3432;
			this.match(TrinoSQLParser.OF);
			this.state = 3433;
			_localctx._end = this.valueExpression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rangeType(): RangeTypeContext {
		let _localctx: RangeTypeContext = new RangeTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, TrinoSQLParser.RULE_rangeType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3435;
			_la = this._input.LA(1);
			if (!(_la === TrinoSQLParser.TIMESTAMP || _la === TrinoSQLParser.VERSION)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantor(): GrantorContext {
		let _localctx: GrantorContext = new GrantorContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, TrinoSQLParser.RULE_grantor);
		try {
			this.state = 3440;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				_localctx = new SpecifiedPrincipalContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3437;
				this.principal();
				}
				break;
			case TrinoSQLParser.CURRENT_USER:
				_localctx = new CurrentUserGrantorContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3438;
				this.match(TrinoSQLParser.CURRENT_USER);
				}
				break;
			case TrinoSQLParser.CURRENT_ROLE:
				_localctx = new CurrentRoleGrantorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3439;
				this.match(TrinoSQLParser.CURRENT_ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public principal(): PrincipalContext {
		let _localctx: PrincipalContext = new PrincipalContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, TrinoSQLParser.RULE_principal);
		try {
			this.state = 3447;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 449, this._ctx) ) {
			case 1:
				_localctx = new UnspecifiedPrincipalContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3442;
				this.identifier();
				}
				break;

			case 2:
				_localctx = new UserPrincipalContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3443;
				this.match(TrinoSQLParser.USER);
				this.state = 3444;
				this.identifier();
				}
				break;

			case 3:
				_localctx = new RolePrincipalContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3445;
				this.match(TrinoSQLParser.ROLE);
				this.state = 3446;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roles(): RolesContext {
		let _localctx: RolesContext = new RolesContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, TrinoSQLParser.RULE_roles);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3449;
			this.identifier();
			this.state = 3454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === TrinoSQLParser.T__3) {
				{
				{
				this.state = 3450;
				this.match(TrinoSQLParser.T__3);
				this.state = 3451;
				this.identifier();
				}
				}
				this.state = 3456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilegeOrRole(): PrivilegeOrRoleContext {
		let _localctx: PrivilegeOrRoleContext = new PrivilegeOrRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, TrinoSQLParser.RULE_privilegeOrRole);
		try {
			this.state = 3463;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3457;
				this.match(TrinoSQLParser.CREATE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3458;
				this.match(TrinoSQLParser.SELECT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3459;
				this.match(TrinoSQLParser.DELETE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3460;
				this.match(TrinoSQLParser.INSERT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3461;
				this.match(TrinoSQLParser.UPDATE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3462;
				this.identifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, TrinoSQLParser.RULE_identifier);
		try {
			this.state = 3470;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.IDENTIFIER:
				_localctx = new UnquotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3465;
				this.match(TrinoSQLParser.IDENTIFIER);
				}
				break;
			case TrinoSQLParser.QUOTED_IDENTIFIER:
				_localctx = new QuotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3466;
				this.match(TrinoSQLParser.QUOTED_IDENTIFIER);
				}
				break;
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
				_localctx = new UnquotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3467;
				this.nonReserved();
				}
				break;
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				_localctx = new BackQuotedIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3468;
				this.match(TrinoSQLParser.BACKQUOTED_IDENTIFIER);
				}
				break;
			case TrinoSQLParser.DIGIT_IDENTIFIER:
				_localctx = new DigitIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3469;
				this.match(TrinoSQLParser.DIGIT_IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number(): NumberContext {
		let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, TrinoSQLParser.RULE_number);
		let _la: number;
		try {
			this.state = 3484;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
			case 1:
				_localctx = new DecimalLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3473;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.MINUS) {
					{
					this.state = 3472;
					this.match(TrinoSQLParser.MINUS);
					}
				}

				this.state = 3475;
				this.match(TrinoSQLParser.DECIMAL_VALUE);
				}
				break;

			case 2:
				_localctx = new DoubleLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.MINUS) {
					{
					this.state = 3476;
					this.match(TrinoSQLParser.MINUS);
					}
				}

				this.state = 3479;
				this.match(TrinoSQLParser.DOUBLE_VALUE);
				}
				break;

			case 3:
				_localctx = new IntegerLiteralContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3481;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === TrinoSQLParser.MINUS) {
					{
					this.state = 3480;
					this.match(TrinoSQLParser.MINUS);
					}
				}

				this.state = 3483;
				this.match(TrinoSQLParser.INTEGER_VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public authorizationUser(): AuthorizationUserContext {
		let _localctx: AuthorizationUserContext = new AuthorizationUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, TrinoSQLParser.RULE_authorizationUser);
		try {
			this.state = 3488;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case TrinoSQLParser.ABSENT:
			case TrinoSQLParser.ADD:
			case TrinoSQLParser.ADMIN:
			case TrinoSQLParser.AFTER:
			case TrinoSQLParser.ALL:
			case TrinoSQLParser.ANALYZE:
			case TrinoSQLParser.ANY:
			case TrinoSQLParser.ARRAY:
			case TrinoSQLParser.ASC:
			case TrinoSQLParser.AT:
			case TrinoSQLParser.AUTHORIZATION:
			case TrinoSQLParser.BEGIN:
			case TrinoSQLParser.BERNOULLI:
			case TrinoSQLParser.BOTH:
			case TrinoSQLParser.CALL:
			case TrinoSQLParser.CALLED:
			case TrinoSQLParser.CASCADE:
			case TrinoSQLParser.CATALOG:
			case TrinoSQLParser.CATALOGS:
			case TrinoSQLParser.COLUMN:
			case TrinoSQLParser.COLUMNS:
			case TrinoSQLParser.COMMENT:
			case TrinoSQLParser.COMMIT:
			case TrinoSQLParser.COMMITTED:
			case TrinoSQLParser.CONDITIONAL:
			case TrinoSQLParser.COUNT:
			case TrinoSQLParser.COPARTITION:
			case TrinoSQLParser.CURRENT:
			case TrinoSQLParser.DATA:
			case TrinoSQLParser.DATE:
			case TrinoSQLParser.DAY:
			case TrinoSQLParser.DECLARE:
			case TrinoSQLParser.DEFAULT:
			case TrinoSQLParser.DEFINE:
			case TrinoSQLParser.DEFINER:
			case TrinoSQLParser.DENY:
			case TrinoSQLParser.DESC:
			case TrinoSQLParser.DESCRIPTOR:
			case TrinoSQLParser.DETERMINISTIC:
			case TrinoSQLParser.DISTRIBUTED:
			case TrinoSQLParser.DO:
			case TrinoSQLParser.DOUBLE:
			case TrinoSQLParser.EMPTY:
			case TrinoSQLParser.ELSEIF:
			case TrinoSQLParser.ENCODING:
			case TrinoSQLParser.ERROR:
			case TrinoSQLParser.EXCLUDING:
			case TrinoSQLParser.EXPLAIN:
			case TrinoSQLParser.FETCH:
			case TrinoSQLParser.FILTER:
			case TrinoSQLParser.FINAL:
			case TrinoSQLParser.FIRST:
			case TrinoSQLParser.FOLLOWING:
			case TrinoSQLParser.FORMAT:
			case TrinoSQLParser.FUNCTION:
			case TrinoSQLParser.FUNCTIONS:
			case TrinoSQLParser.GRACE:
			case TrinoSQLParser.GRANT:
			case TrinoSQLParser.GRANTED:
			case TrinoSQLParser.GRANTS:
			case TrinoSQLParser.GRAPHVIZ:
			case TrinoSQLParser.GROUPS:
			case TrinoSQLParser.HOUR:
			case TrinoSQLParser.IF:
			case TrinoSQLParser.IGNORE:
			case TrinoSQLParser.IMMEDIATE:
			case TrinoSQLParser.INCLUDING:
			case TrinoSQLParser.INITIAL:
			case TrinoSQLParser.INPUT:
			case TrinoSQLParser.INTERVAL:
			case TrinoSQLParser.INVOKER:
			case TrinoSQLParser.IO:
			case TrinoSQLParser.ISOLATION:
			case TrinoSQLParser.ITERATE:
			case TrinoSQLParser.JSON:
			case TrinoSQLParser.KEEP:
			case TrinoSQLParser.KEY:
			case TrinoSQLParser.KEYS:
			case TrinoSQLParser.LANGUAGE:
			case TrinoSQLParser.LAST:
			case TrinoSQLParser.LATERAL:
			case TrinoSQLParser.LEADING:
			case TrinoSQLParser.LEAVE:
			case TrinoSQLParser.LEVEL:
			case TrinoSQLParser.LIMIT:
			case TrinoSQLParser.LOCAL:
			case TrinoSQLParser.LOGICAL:
			case TrinoSQLParser.LOOP:
			case TrinoSQLParser.MAP:
			case TrinoSQLParser.MATCH:
			case TrinoSQLParser.MATCHED:
			case TrinoSQLParser.MATCHES:
			case TrinoSQLParser.MATCH_RECOGNIZE:
			case TrinoSQLParser.MATERIALIZED:
			case TrinoSQLParser.MEASURES:
			case TrinoSQLParser.MERGE:
			case TrinoSQLParser.MINUTE:
			case TrinoSQLParser.MONTH:
			case TrinoSQLParser.NESTED:
			case TrinoSQLParser.NEXT:
			case TrinoSQLParser.NFC:
			case TrinoSQLParser.NFD:
			case TrinoSQLParser.NFKC:
			case TrinoSQLParser.NFKD:
			case TrinoSQLParser.NO:
			case TrinoSQLParser.NONE:
			case TrinoSQLParser.NULLIF:
			case TrinoSQLParser.NULLS:
			case TrinoSQLParser.OBJECT:
			case TrinoSQLParser.OF:
			case TrinoSQLParser.OFFSET:
			case TrinoSQLParser.OMIT:
			case TrinoSQLParser.ONE:
			case TrinoSQLParser.ONLY:
			case TrinoSQLParser.OPTION:
			case TrinoSQLParser.ORDINALITY:
			case TrinoSQLParser.OUTPUT:
			case TrinoSQLParser.OVER:
			case TrinoSQLParser.OVERFLOW:
			case TrinoSQLParser.PARTITION:
			case TrinoSQLParser.PARTITIONS:
			case TrinoSQLParser.PASSING:
			case TrinoSQLParser.PAST:
			case TrinoSQLParser.PATH:
			case TrinoSQLParser.PATTERN:
			case TrinoSQLParser.PER:
			case TrinoSQLParser.PERIOD:
			case TrinoSQLParser.PERMUTE:
			case TrinoSQLParser.PLAN:
			case TrinoSQLParser.POSITION:
			case TrinoSQLParser.PRECEDING:
			case TrinoSQLParser.PRECISION:
			case TrinoSQLParser.PRIVILEGES:
			case TrinoSQLParser.PROPERTIES:
			case TrinoSQLParser.PRUNE:
			case TrinoSQLParser.QUOTES:
			case TrinoSQLParser.RANGE:
			case TrinoSQLParser.READ:
			case TrinoSQLParser.REFRESH:
			case TrinoSQLParser.RENAME:
			case TrinoSQLParser.REPEAT:
			case TrinoSQLParser.REPEATABLE:
			case TrinoSQLParser.REPLACE:
			case TrinoSQLParser.RESET:
			case TrinoSQLParser.RESPECT:
			case TrinoSQLParser.RESTRICT:
			case TrinoSQLParser.RETURN:
			case TrinoSQLParser.RETURNING:
			case TrinoSQLParser.RETURNS:
			case TrinoSQLParser.REVOKE:
			case TrinoSQLParser.ROLE:
			case TrinoSQLParser.ROLES:
			case TrinoSQLParser.ROLLBACK:
			case TrinoSQLParser.ROW:
			case TrinoSQLParser.ROWS:
			case TrinoSQLParser.RUNNING:
			case TrinoSQLParser.SCALAR:
			case TrinoSQLParser.SCHEMA:
			case TrinoSQLParser.SCHEMAS:
			case TrinoSQLParser.SECOND:
			case TrinoSQLParser.SECURITY:
			case TrinoSQLParser.SEEK:
			case TrinoSQLParser.SERIALIZABLE:
			case TrinoSQLParser.SESSION:
			case TrinoSQLParser.SET:
			case TrinoSQLParser.SETS:
			case TrinoSQLParser.SHOW:
			case TrinoSQLParser.SOME:
			case TrinoSQLParser.START:
			case TrinoSQLParser.STATS:
			case TrinoSQLParser.SUBSET:
			case TrinoSQLParser.SUBSTRING:
			case TrinoSQLParser.SYSTEM:
			case TrinoSQLParser.TABLES:
			case TrinoSQLParser.TABLESAMPLE:
			case TrinoSQLParser.TEXT:
			case TrinoSQLParser.TEXT_STRING:
			case TrinoSQLParser.TIES:
			case TrinoSQLParser.TIME:
			case TrinoSQLParser.TIMESTAMP:
			case TrinoSQLParser.TO:
			case TrinoSQLParser.TRAILING:
			case TrinoSQLParser.TRANSACTION:
			case TrinoSQLParser.TRUNCATE:
			case TrinoSQLParser.TRY_CAST:
			case TrinoSQLParser.TYPE:
			case TrinoSQLParser.UNBOUNDED:
			case TrinoSQLParser.UNCOMMITTED:
			case TrinoSQLParser.UNCONDITIONAL:
			case TrinoSQLParser.UNIQUE:
			case TrinoSQLParser.UNKNOWN:
			case TrinoSQLParser.UNMATCHED:
			case TrinoSQLParser.UNTIL:
			case TrinoSQLParser.UPDATE:
			case TrinoSQLParser.USE:
			case TrinoSQLParser.USER:
			case TrinoSQLParser.UTF16:
			case TrinoSQLParser.UTF32:
			case TrinoSQLParser.UTF8:
			case TrinoSQLParser.VALIDATE:
			case TrinoSQLParser.VALUE:
			case TrinoSQLParser.VERBOSE:
			case TrinoSQLParser.VERSION:
			case TrinoSQLParser.VIEW:
			case TrinoSQLParser.WHILE:
			case TrinoSQLParser.WINDOW:
			case TrinoSQLParser.WITHIN:
			case TrinoSQLParser.WITHOUT:
			case TrinoSQLParser.WORK:
			case TrinoSQLParser.WRAPPER:
			case TrinoSQLParser.WRITE:
			case TrinoSQLParser.YEAR:
			case TrinoSQLParser.ZONE:
			case TrinoSQLParser.IDENTIFIER:
			case TrinoSQLParser.DIGIT_IDENTIFIER:
			case TrinoSQLParser.QUOTED_IDENTIFIER:
			case TrinoSQLParser.BACKQUOTED_IDENTIFIER:
				_localctx = new IdentifierUserContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3486;
				this.identifier();
				}
				break;
			case TrinoSQLParser.STRING:
			case TrinoSQLParser.UNICODE_STRING:
				_localctx = new StringUserContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3487;
				this.string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonReserved(): NonReservedContext {
		let _localctx: NonReservedContext = new NonReservedContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, TrinoSQLParser.RULE_nonReserved);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3490;
			_la = this._input.LA(1);
			if (!(((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (TrinoSQLParser.ABSENT - 18)) | (1 << (TrinoSQLParser.ADD - 18)) | (1 << (TrinoSQLParser.ADMIN - 18)) | (1 << (TrinoSQLParser.AFTER - 18)) | (1 << (TrinoSQLParser.ALL - 18)) | (1 << (TrinoSQLParser.ANALYZE - 18)) | (1 << (TrinoSQLParser.ANY - 18)) | (1 << (TrinoSQLParser.ARRAY - 18)) | (1 << (TrinoSQLParser.ASC - 18)) | (1 << (TrinoSQLParser.AT - 18)) | (1 << (TrinoSQLParser.AUTHORIZATION - 18)) | (1 << (TrinoSQLParser.BEGIN - 18)) | (1 << (TrinoSQLParser.BERNOULLI - 18)) | (1 << (TrinoSQLParser.BOTH - 18)) | (1 << (TrinoSQLParser.CALL - 18)) | (1 << (TrinoSQLParser.CALLED - 18)) | (1 << (TrinoSQLParser.CASCADE - 18)) | (1 << (TrinoSQLParser.CATALOG - 18)) | (1 << (TrinoSQLParser.CATALOGS - 18)) | (1 << (TrinoSQLParser.COLUMN - 18)) | (1 << (TrinoSQLParser.COLUMNS - 18)) | (1 << (TrinoSQLParser.COMMENT - 18)) | (1 << (TrinoSQLParser.COMMIT - 18)) | (1 << (TrinoSQLParser.COMMITTED - 18)) | (1 << (TrinoSQLParser.CONDITIONAL - 18)))) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & ((1 << (TrinoSQLParser.COUNT - 51)) | (1 << (TrinoSQLParser.COPARTITION - 51)) | (1 << (TrinoSQLParser.CURRENT - 51)) | (1 << (TrinoSQLParser.DATA - 51)) | (1 << (TrinoSQLParser.DATE - 51)) | (1 << (TrinoSQLParser.DAY - 51)) | (1 << (TrinoSQLParser.DECLARE - 51)) | (1 << (TrinoSQLParser.DEFAULT - 51)) | (1 << (TrinoSQLParser.DEFINE - 51)) | (1 << (TrinoSQLParser.DEFINER - 51)) | (1 << (TrinoSQLParser.DENY - 51)) | (1 << (TrinoSQLParser.DESC - 51)) | (1 << (TrinoSQLParser.DESCRIPTOR - 51)) | (1 << (TrinoSQLParser.DETERMINISTIC - 51)) | (1 << (TrinoSQLParser.DISTRIBUTED - 51)) | (1 << (TrinoSQLParser.DO - 51)) | (1 << (TrinoSQLParser.DOUBLE - 51)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (TrinoSQLParser.EMPTY - 85)) | (1 << (TrinoSQLParser.ELSEIF - 85)) | (1 << (TrinoSQLParser.ENCODING - 85)) | (1 << (TrinoSQLParser.ERROR - 85)) | (1 << (TrinoSQLParser.EXCLUDING - 85)) | (1 << (TrinoSQLParser.EXPLAIN - 85)) | (1 << (TrinoSQLParser.FETCH - 85)) | (1 << (TrinoSQLParser.FILTER - 85)) | (1 << (TrinoSQLParser.FINAL - 85)) | (1 << (TrinoSQLParser.FIRST - 85)) | (1 << (TrinoSQLParser.FOLLOWING - 85)) | (1 << (TrinoSQLParser.FORMAT - 85)) | (1 << (TrinoSQLParser.FUNCTION - 85)) | (1 << (TrinoSQLParser.FUNCTIONS - 85)) | (1 << (TrinoSQLParser.GRACE - 85)) | (1 << (TrinoSQLParser.GRANT - 85)) | (1 << (TrinoSQLParser.GRANTED - 85)) | (1 << (TrinoSQLParser.GRANTS - 85)) | (1 << (TrinoSQLParser.GRAPHVIZ - 85)) | (1 << (TrinoSQLParser.GROUPS - 85)))) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & ((1 << (TrinoSQLParser.HOUR - 118)) | (1 << (TrinoSQLParser.IF - 118)) | (1 << (TrinoSQLParser.IGNORE - 118)) | (1 << (TrinoSQLParser.IMMEDIATE - 118)) | (1 << (TrinoSQLParser.INCLUDING - 118)) | (1 << (TrinoSQLParser.INITIAL - 118)) | (1 << (TrinoSQLParser.INPUT - 118)) | (1 << (TrinoSQLParser.INTERVAL - 118)) | (1 << (TrinoSQLParser.INVOKER - 118)) | (1 << (TrinoSQLParser.IO - 118)) | (1 << (TrinoSQLParser.ISOLATION - 118)) | (1 << (TrinoSQLParser.ITERATE - 118)) | (1 << (TrinoSQLParser.JSON - 118)) | (1 << (TrinoSQLParser.KEEP - 118)) | (1 << (TrinoSQLParser.KEY - 118)) | (1 << (TrinoSQLParser.KEYS - 118)) | (1 << (TrinoSQLParser.LANGUAGE - 118)) | (1 << (TrinoSQLParser.LAST - 118)) | (1 << (TrinoSQLParser.LATERAL - 118)))) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & ((1 << (TrinoSQLParser.LEADING - 150)) | (1 << (TrinoSQLParser.LEAVE - 150)) | (1 << (TrinoSQLParser.LEVEL - 150)) | (1 << (TrinoSQLParser.LIMIT - 150)) | (1 << (TrinoSQLParser.LOCAL - 150)) | (1 << (TrinoSQLParser.LOGICAL - 150)) | (1 << (TrinoSQLParser.LOOP - 150)) | (1 << (TrinoSQLParser.MAP - 150)) | (1 << (TrinoSQLParser.MATCH - 150)) | (1 << (TrinoSQLParser.MATCHED - 150)) | (1 << (TrinoSQLParser.MATCHES - 150)) | (1 << (TrinoSQLParser.MATCH_RECOGNIZE - 150)) | (1 << (TrinoSQLParser.MATERIALIZED - 150)) | (1 << (TrinoSQLParser.MEASURES - 150)) | (1 << (TrinoSQLParser.MERGE - 150)) | (1 << (TrinoSQLParser.MINUTE - 150)) | (1 << (TrinoSQLParser.MONTH - 150)) | (1 << (TrinoSQLParser.NESTED - 150)) | (1 << (TrinoSQLParser.NEXT - 150)) | (1 << (TrinoSQLParser.NFC - 150)) | (1 << (TrinoSQLParser.NFD - 150)) | (1 << (TrinoSQLParser.NFKC - 150)) | (1 << (TrinoSQLParser.NFKD - 150)) | (1 << (TrinoSQLParser.NO - 150)) | (1 << (TrinoSQLParser.NONE - 150)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (TrinoSQLParser.NULLIF - 184)) | (1 << (TrinoSQLParser.NULLS - 184)) | (1 << (TrinoSQLParser.OBJECT - 184)) | (1 << (TrinoSQLParser.OF - 184)) | (1 << (TrinoSQLParser.OFFSET - 184)) | (1 << (TrinoSQLParser.OMIT - 184)) | (1 << (TrinoSQLParser.ONE - 184)) | (1 << (TrinoSQLParser.ONLY - 184)) | (1 << (TrinoSQLParser.OPTION - 184)) | (1 << (TrinoSQLParser.ORDINALITY - 184)) | (1 << (TrinoSQLParser.OUTPUT - 184)) | (1 << (TrinoSQLParser.OVER - 184)) | (1 << (TrinoSQLParser.OVERFLOW - 184)) | (1 << (TrinoSQLParser.PARTITION - 184)) | (1 << (TrinoSQLParser.PARTITIONS - 184)) | (1 << (TrinoSQLParser.PASSING - 184)) | (1 << (TrinoSQLParser.PAST - 184)) | (1 << (TrinoSQLParser.PATH - 184)) | (1 << (TrinoSQLParser.PATTERN - 184)) | (1 << (TrinoSQLParser.PER - 184)) | (1 << (TrinoSQLParser.PERIOD - 184)) | (1 << (TrinoSQLParser.PERMUTE - 184)) | (1 << (TrinoSQLParser.PLAN - 184)) | (1 << (TrinoSQLParser.POSITION - 184)) | (1 << (TrinoSQLParser.PRECEDING - 184)) | (1 << (TrinoSQLParser.PRECISION - 184)) | (1 << (TrinoSQLParser.PRIVILEGES - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (TrinoSQLParser.PROPERTIES - 216)) | (1 << (TrinoSQLParser.PRUNE - 216)) | (1 << (TrinoSQLParser.QUOTES - 216)) | (1 << (TrinoSQLParser.RANGE - 216)) | (1 << (TrinoSQLParser.READ - 216)) | (1 << (TrinoSQLParser.REFRESH - 216)) | (1 << (TrinoSQLParser.RENAME - 216)) | (1 << (TrinoSQLParser.REPEAT - 216)) | (1 << (TrinoSQLParser.REPEATABLE - 216)) | (1 << (TrinoSQLParser.REPLACE - 216)) | (1 << (TrinoSQLParser.RESET - 216)) | (1 << (TrinoSQLParser.RESPECT - 216)) | (1 << (TrinoSQLParser.RESTRICT - 216)) | (1 << (TrinoSQLParser.RETURN - 216)) | (1 << (TrinoSQLParser.RETURNING - 216)) | (1 << (TrinoSQLParser.RETURNS - 216)) | (1 << (TrinoSQLParser.REVOKE - 216)) | (1 << (TrinoSQLParser.ROLE - 216)) | (1 << (TrinoSQLParser.ROLES - 216)) | (1 << (TrinoSQLParser.ROLLBACK - 216)) | (1 << (TrinoSQLParser.ROW - 216)) | (1 << (TrinoSQLParser.ROWS - 216)) | (1 << (TrinoSQLParser.RUNNING - 216)) | (1 << (TrinoSQLParser.SCALAR - 216)) | (1 << (TrinoSQLParser.SCHEMA - 216)) | (1 << (TrinoSQLParser.SCHEMAS - 216)) | (1 << (TrinoSQLParser.SECOND - 216)) | (1 << (TrinoSQLParser.SECURITY - 216)) | (1 << (TrinoSQLParser.SEEK - 216)))) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & ((1 << (TrinoSQLParser.SERIALIZABLE - 249)) | (1 << (TrinoSQLParser.SESSION - 249)) | (1 << (TrinoSQLParser.SET - 249)) | (1 << (TrinoSQLParser.SETS - 249)) | (1 << (TrinoSQLParser.SHOW - 249)) | (1 << (TrinoSQLParser.SOME - 249)) | (1 << (TrinoSQLParser.START - 249)) | (1 << (TrinoSQLParser.STATS - 249)) | (1 << (TrinoSQLParser.SUBSET - 249)) | (1 << (TrinoSQLParser.SUBSTRING - 249)) | (1 << (TrinoSQLParser.SYSTEM - 249)) | (1 << (TrinoSQLParser.TABLES - 249)) | (1 << (TrinoSQLParser.TABLESAMPLE - 249)) | (1 << (TrinoSQLParser.TEXT - 249)) | (1 << (TrinoSQLParser.TEXT_STRING - 249)) | (1 << (TrinoSQLParser.TIES - 249)) | (1 << (TrinoSQLParser.TIME - 249)) | (1 << (TrinoSQLParser.TIMESTAMP - 249)) | (1 << (TrinoSQLParser.TO - 249)) | (1 << (TrinoSQLParser.TRAILING - 249)) | (1 << (TrinoSQLParser.TRANSACTION - 249)) | (1 << (TrinoSQLParser.TRUNCATE - 249)) | (1 << (TrinoSQLParser.TRY_CAST - 249)) | (1 << (TrinoSQLParser.TYPE - 249)) | (1 << (TrinoSQLParser.UNBOUNDED - 249)) | (1 << (TrinoSQLParser.UNCOMMITTED - 249)) | (1 << (TrinoSQLParser.UNCONDITIONAL - 249)))) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & ((1 << (TrinoSQLParser.UNIQUE - 282)) | (1 << (TrinoSQLParser.UNKNOWN - 282)) | (1 << (TrinoSQLParser.UNMATCHED - 282)) | (1 << (TrinoSQLParser.UNTIL - 282)) | (1 << (TrinoSQLParser.UPDATE - 282)) | (1 << (TrinoSQLParser.USE - 282)) | (1 << (TrinoSQLParser.USER - 282)) | (1 << (TrinoSQLParser.UTF16 - 282)) | (1 << (TrinoSQLParser.UTF32 - 282)) | (1 << (TrinoSQLParser.UTF8 - 282)) | (1 << (TrinoSQLParser.VALIDATE - 282)) | (1 << (TrinoSQLParser.VALUE - 282)) | (1 << (TrinoSQLParser.VERBOSE - 282)) | (1 << (TrinoSQLParser.VERSION - 282)) | (1 << (TrinoSQLParser.VIEW - 282)) | (1 << (TrinoSQLParser.WHILE - 282)) | (1 << (TrinoSQLParser.WINDOW - 282)) | (1 << (TrinoSQLParser.WITHIN - 282)) | (1 << (TrinoSQLParser.WITHOUT - 282)) | (1 << (TrinoSQLParser.WORK - 282)) | (1 << (TrinoSQLParser.WRAPPER - 282)) | (1 << (TrinoSQLParser.WRITE - 282)) | (1 << (TrinoSQLParser.YEAR - 282)) | (1 << (TrinoSQLParser.ZONE - 282)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 21:
			return this.queryTerm_sempred(_localctx as QueryTermContext, predIndex);

		case 33:
			return this.relation_sempred(_localctx as RelationContext, predIndex);

		case 64:
			return this.booleanExpression_sempred(_localctx as BooleanExpressionContext, predIndex);

		case 66:
			return this.valueExpression_sempred(_localctx as ValueExpressionContext, predIndex);

		case 67:
			return this.primaryExpression_sempred(_localctx as PrimaryExpressionContext, predIndex);

		case 87:
			return this.type_sempred(_localctx as TypeContext, predIndex);

		case 97:
			return this.rowPattern_sempred(_localctx as RowPatternContext, predIndex);
		}
		return true;
	}
	private queryTerm_sempred(_localctx: QueryTermContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);

		case 1:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private relation_sempred(_localctx: RelationContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private booleanExpression_sempred(_localctx: BooleanExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.precpred(this._ctx, 2);

		case 4:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private valueExpression_sempred(_localctx: ValueExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return this.precpred(this._ctx, 3);

		case 6:
			return this.precpred(this._ctx, 2);

		case 7:
			return this.precpred(this._ctx, 1);

		case 8:
			return this.precpred(this._ctx, 5);
		}
		return true;
	}
	private primaryExpression_sempred(_localctx: PrimaryExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 9:
			return this.precpred(this._ctx, 24);

		case 10:
			return this.precpred(this._ctx, 22);
		}
		return true;
	}
	private type_sempred(_localctx: TypeContext, predIndex: number): boolean {
		switch (predIndex) {
		case 11:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private rowPattern_sempred(_localctx: RowPatternContext, predIndex: number): boolean {
		switch (predIndex) {
		case 12:
			return this.precpred(this._ctx, 2);

		case 13:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 7;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0156\u0DA7\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x03\x02\x03\x02" +
		"\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05" +
		"\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u012A" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0131\n\b\x03\b\x03\b\x05\b\u0135" +
		"\n\b\x03\b\x03\b\x05\b\u0139\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u013F\n" +
		"\b\x03\b\x03\b\x05\b\u0143\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u014A" +
		"\n\b\x03\b\x03\b\x03\b\x05\b\u014F\n\b\x03\b\x03\b\x05\b\u0153\n\b\x03" +
		"\b\x03\b\x03\b\x03\b\x05\b\u0159\n\b\x03\b\x03\b\x05\b\u015D\n\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0170\n\b\x03\b\x03\b\x03\b\x03\b\x05" +
		"\b\u0176\n\b\x03\b\x03\b\x05\b\u017A\n\b\x03\b\x03\b\x05\b\u017E\n\b\x03" +
		"\b\x03\b\x05\b\u0182\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u018A" +
		"\n\b\x03\b\x03\b\x05\b\u018E\n\b\x03\b\x05\b\u0191\n\b\x03\b\x03\b\x03" +
		"\b\x05\b\u0196\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u019C\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x07\b\u01A3\n\b\f\b\x0E\b\u01A6\v\b\x03\b\x03\b\x03" +
		"\b\x05\b\u01AB\n\b\x03\b\x03\b\x05\b\u01AF\n\b\x03\b\x03\b\x03\b\x03\b" +
		"\x05\b\u01B5\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01BC\n\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01C5\n\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01D1\n\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01DA\n\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u01E3\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01E9\n\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01F4\n\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u01FC\n\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x05\b\u0204\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b" +
		"\u020B\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0215" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u021C\n\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u0224\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0233\n\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x07\b\u0254\n\b\f\b\x0E\b\u0257\v\b\x05\b\u0259" +
		"\n\b\x03\b\x05\b\u025C\n\b\x03\b\x03\b\x05\b\u0260\n\b\x03\b\x03\b\x03" +
		"\b\x03\b\x05\b\u0266\n\b\x03\b\x03\b\x03\b\x05\b\u026B\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x05\b\u0272\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0278" +
		"\n\b\x03\b\x03\b\x05\b\u027C\n\b\x03\b\x03\b\x05\b\u0280\n\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0288\n\b\x03\b\x03\b\x03\b\x03\b\x05" +
		"\b\u028E\n\b\x03\b\x03\b\x05\b\u0292\n\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u02A0\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x05\b\u02A8\n\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x05\b\u02BB\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x07\b\u02D2\n\b\f\b\x0E\b\u02D5\v\b\x05\b\u02D7\n\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u02DE\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u02E5" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u02EE\n\b\x03\b\x03" +
		"\b\x05\b\u02F2\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u02F9\n\b\x03\b" +
		"\x03\b\x03\b\x03\b\x07\b\u02FF\n\b\f\b\x0E\b\u0302\v\b\x03\b\x03\b\x03" +
		"\b\x03\b\x07\b\u0308\n\b\f\b\x0E\b\u030B\v\b\x03\b\x03\b\x03\b\x05\b\u0310" +
		"\n\b\x03\b\x03\b\x03\b\x05\b\u0315\n\b\x03\b\x03\b\x05\b\u0319\n\b\x03" +
		"\b\x03\b\x03\b\x03\b\x07\b\u031F\n\b\f\b\x0E\b\u0322\v\b\x03\b\x03\b\x05" +
		"\b\u0326\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u032F\n\b" +
		"\x03\b\x03\b\x03\b\x03\b\x05\b\u0335\n\b\x03\b\x03\b\x03\b\x07\b\u033A" +
		"\n\b\f\b\x0E\b\u033D\v\b\x03\b\x03\b\x03\b\x03\b\x07\b\u0343\n\b\f\b\x0E" +
		"\b\u0346\v\b\x03\b\x03\b\x03\b\x05\b\u034B\n\b\x03\b\x03\b\x05\b\u034F" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0355\n\b\x03\b\x03\b\x03\b\x07\b\u035A" +
		"\n\b\f\b\x0E\b\u035D\v\b\x03\b\x03\b\x05\b\u0361\n\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b\u036C\n\b\f\b\x0E\b\u036F\v" +
		"\b\x03\b\x03\b\x05\b\u0373\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x05\b\u037F\n\b\x03\b\x03\b\x05\b\u0383\n\b\x03\b" +
		"\x03\b\x03\b\x03\b\x05\b\u0389\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b" +
		"\u0390\n\b\f\b\x0E\b\u0393\v\b\x03\b\x03\b\x05\b\u0397\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x05\b\u039D\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x05\b\u03B5\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u03BB" +
		"\n\b\x05\b\u03BD\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u03C3\n\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u03C9\n\b\x05\b\u03CB\n\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x05\b\u03D3\n\b\x05\b\u03D5\n\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x05\b\u03DF\n\b\x05\b\u03E1\n\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u03F0" +
		"\n\b\x03\b\x03\b\x03\b\x05\b\u03F5\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05" +
		"\b\u03FC\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0406" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u040C\n\b\x05\b\u040E\n\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0416\n\b\x05\b\u0418\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b\u042F\n\b\f\b\x0E\b" +
		"\u0432\v\b\x05\b\u0434\n\b\x03\b\x03\b\x05\b\u0438\n\b\x03\b\x03\b\x05" +
		"\b\u043C\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x07\b\u044C\n\b\f\b\x0E\b\u044F\v\b\x05\b\u0451" +
		"\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b\u045A\n\b\f\b\x0E" +
		"\b\u045D\v\b\x05\b\u045F\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\u046F\n\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x07\b\u0477\n\b\f\b\x0E\b\u047A\v\b\x03\b\x03" +
		"\b\x05\b\u047E\n\b\x03\b\x03\b\x03\b\x03\b\x05\b\u0484\n\b\x03\b\x05\b" +
		"\u0487\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x06\b\u048E\n\b\r\b\x0E\b\u048F" +
		"\x05\b\u0492\n\b\x03\t\x05\t\u0495\n\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x07\n\u049D\n\n\f\n\x0E\n\u04A0\v\n\x03\v\x05\v\u04A3\n\v\x03\v\x03" +
		"\v\x03\f\x03\f\x05\f\u04A9\n\f\x03\f\x03\f\x03\f\x07\f\u04AE\n\f\f\f\x0E" +
		"\f\u04B1\v\f\x03\r\x03\r\x05\r\u04B5\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x05\x0E\u04BB\n\x0E\x03\x0E\x03\x0E\x05\x0E\u04BF\n\x0E\x03\x0E\x03\x0E" +
		"\x05\x0E\u04C3\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u04C9\n\x0F" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x07\x11\u04D2" +
		"\n\x11\f\x11\x0E\x11\u04D5\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x05\x13\u04DD\n\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x07\x14\u04E5\n\x14\f\x14\x0E\x14\u04E8\v\x14\x05\x14\u04EA\n\x14" +
		"\x03\x14\x03\x14\x03\x14\x05\x14\u04EF\n\x14\x05\x14\u04F1\n\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u04F8\n\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x05\x14\u04FE\n\x14\x05\x14\u0500\n\x14\x03\x15\x03\x15\x05" +
		"\x15\u0504\n\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x05\x17\u050E\n\x17\x03\x17\x03\x17\x03\x17\x03\x17\x05\x17\u0514" +
		"\n\x17\x03\x17\x07\x17\u0517\n\x17\f\x17\x0E\x17\u051A\v\x17\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u0523\n\x18\f\x18" +
		"\x0E\x18\u0526\v\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u052C\n\x18" +
		"\x03\x19\x03\x19\x05\x19\u0530\n\x19\x03\x19\x03\x19\x05\x19\u0534\n\x19" +
		"\x03\x1A\x03\x1A\x05\x1A\u0538\n\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u053D" +
		"\n\x1A\f\x1A\x0E\x1A\u0540\v\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A" +
		"\u0546\n\x1A\f\x1A\x0E\x1A\u0549\v\x1A\x05\x1A\u054B\n\x1A\x03\x1A\x03" +
		"\x1A\x05\x1A\u054F\n\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u0554\n\x1A\x03" +
		"\x1A\x03\x1A\x05\x1A\u0558\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A" +
		"\u055E\n\x1A\f\x1A\x0E\x1A\u0561\v\x1A\x05\x1A\u0563\n\x1A\x03\x1B\x05" +
		"\x1B\u0566\n\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u056B\n\x1B\f\x1B\x0E" +
		"\x1B\u056E\v\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C" +
		"\u0576\n\x1C\f\x1C\x0E\x1C\u0579\v\x1C\x05\x1C\u057B\n\x1C\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u0583\n\x1C\f\x1C\x0E\x1C" +
		"\u0586\v\x1C\x05\x1C\u0588\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x07\x1C\u0591\n\x1C\f\x1C\x0E\x1C\u0594\v\x1C\x03\x1C" +
		"\x03\x1C\x05\x1C\u0598\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u059E" +
		"\n\x1D\f\x1D\x0E\x1D\u05A1\v\x1D\x05\x1D\u05A3\n\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u05A7\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F" +
		"\x05\x1F\u05B0\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u05B7" +
		"\n\x1F\f\x1F\x0E\x1F\u05BA\v\x1F\x05\x1F\u05BC\n\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x07\x1F\u05C3\n\x1F\f\x1F\x0E\x1F\u05C6\v\x1F\x05" +
		"\x1F\u05C8\n\x1F\x03\x1F\x05\x1F\u05CB\n\x1F\x03 \x03 \x05 \u05CF\n \x03" +
		" \x03 \x03 \x03 \x03 \x03!\x03!\x03\"\x03\"\x05\"\u05DA\n\"\x03\"\x05" +
		"\"\u05DD\n\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u05E4\n\"\x03\"\x05\"" +
		"\u05E7\n\"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x03#\x03#\x05#\u05FA\n#\x07#\u05FC\n#\f#\x0E#\u05FF\v" +
		"#\x03$\x05$\u0602\n$\x03$\x03$\x05$\u0606\n$\x03$\x03$\x05$\u060A\n$\x03" +
		"$\x03$\x05$\u060E\n$\x05$\u0610\n$\x03%\x03%\x03%\x03%\x03%\x03%\x03%" +
		"\x07%\u0619\n%\f%\x0E%\u061C\v%\x03%\x03%\x05%\u0620\n%\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x05&\u0629\n&\x03\'\x03\'\x03(\x03(\x03)\x03)\x03" +
		")\x05)\u0632\n)\x03)\x05)\u0635\n)\x03*\x03*\x03*\x03*\x05*\u063B\n*\x03" +
		"+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x07+\u0645\n+\f+\x0E+\u0648\v+\x05" +
		"+\u064A\n+\x03+\x03+\x03+\x03+\x03+\x07+\u0651\n+\f+\x0E+\u0654\v+\x05" +
		"+\u0656\n+\x03+\x03+\x03+\x03+\x07+\u065C\n+\f+\x0E+\u065F\v+\x05+\u0661" +
		"\n+\x03+\x05+\u0664\n+\x03+\x03+\x03+\x05+\u0669\n+\x03+\x05+\u066C\n" +
		"+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x07+\u0676\n+\f+\x0E+\u0679" +
		"\v+\x05+\u067B\n+\x03+\x03+\x03+\x03+\x07+\u0681\n+\f+\x0E+\u0684\v+\x03" +
		"+\x03+\x05+\u0688\n+\x03+\x03+\x05+\u068C\n+\x05+\u068E\n+\x05+\u0690" +
		"\n+\x03,\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x05" +
		"-\u069F\n-\x05-\u06A1\n-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03." +
		"\x05.\u06AC\n.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/" +
		"\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u06C1\n/\x030\x030\x030" +
		"\x030\x030\x030\x070\u06C9\n0\f0\x0E0\u06CC\v0\x030\x030\x031\x031\x03" +
		"1\x031\x032\x032\x052\u06D6\n2\x032\x032\x052\u06DA\n2\x052\u06DC\n2\x03" +
		"3\x033\x033\x033\x073\u06E2\n3\f3\x0E3\u06E5\v3\x033\x033\x034\x034\x05" +
		"4\u06EB\n4\x034\x034\x034\x034\x034\x034\x034\x034\x034\x074\u06F6\n4" +
		"\f4\x0E4\u06F9\v4\x034\x034\x034\x054\u06FE\n4\x034\x034\x034\x034\x03" +
		"4\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x03" +
		"4\x034\x034\x034\x074\u0716\n4\f4\x0E4\u0719\v4\x034\x034\x034\x034\x03" +
		"4\x034\x034\x034\x034\x034\x034\x034\x054\u0727\n4\x034\x034\x034\x05" +
		"4\u072C\n4\x034\x034\x054\u0730\n4\x035\x035\x035\x035\x035\x035\x035" +
		"\x035\x055\u073A\n5\x035\x035\x035\x035\x055\u0740\n5\x035\x035\x035\x03" +
		"5\x055\u0746\n5\x035\x035\x035\x035\x035\x035\x055\u074E\n5\x035\x035" +
		"\x035\x055\u0753\n5\x035\x035\x035\x035\x035\x055\u075A\n5\x055\u075C" +
		"\n5\x035\x035\x035\x035\x055\u0762\n5\x035\x035\x035\x035\x055\u0768\n" +
		"5\x035\x035\x055\u076C\n5\x035\x035\x035\x055\u0771\n5\x035\x035\x035" +
		"\x035\x035\x075\u0778\n5\f5\x0E5\u077B\v5\x035\x035\x055\u077F\n5\x03" +
		"6\x036\x036\x036\x036\x036\x036\x036\x036\x036\x076\u078B\n6\f6\x0E6\u078E" +
		"\v6\x036\x036\x036\x036\x036\x076\u0795\n6\f6\x0E6\u0798\v6\x056\u079A" +
		"\n6\x037\x037\x038\x038\x038\x038\x038\x058\u07A3\n8\x039\x039\x039\x05" +
		"9\u07A8\n9\x039\x039\x039\x059\u07AD\n9\x059\u07AF\n9\x03:\x03:\x03:\x03" +
		":\x03:\x07:\u07B6\n:\f:\x0E:\u07B9\v:\x05:\u07BB\n:\x03:\x03:\x03:\x03" +
		":\x07:\u07C1\n:\f:\x0E:\u07C4\v:\x05:\u07C6\n:\x03:\x03:\x03;\x03;\x03" +
		";\x05;\u07CD\n;\x03;\x03;\x03;\x05;\u07D2\n;\x03<\x03<\x03<\x03<\x03<" +
		"\x03<\x03<\x07<\u07DB\n<\f<\x0E<\u07DE\v<\x05<\u07E0\n<\x03<\x03<\x05" +
		"<\u07E4\n<\x05<\u07E6\n<\x03<\x03<\x03<\x03<\x03<\x03<\x05<\u07EE\n<\x03" +
		"<\x03<\x03<\x03<\x03<\x03<\x07<\u07F6\n<\f<\x0E<\u07F9\v<\x03<\x03<\x03" +
		"<\x05<\u07FE\n<\x05<\u0800\n<\x03=\x03=\x03=\x03=\x03=\x05=\u0807\n=\x03" +
		"=\x03=\x05=\u080B\n=\x05=\u080D\n=\x03=\x03=\x03=\x03=\x03=\x05=\u0814" +
		"\n=\x03=\x03=\x05=\u0818\n=\x05=\u081A\n=\x05=\u081C\n=\x03>\x03>\x03" +
		">\x03>\x03>\x07>\u0823\n>\f>\x0E>\u0826\v>\x03>\x03>\x03>\x03>\x03>\x03" +
		">\x03>\x03>\x05>\u0830\n>\x03?\x03?\x05?\u0834\n?\x03@\x03@\x03@\x03@" +
		"\x03@\x03@\x07@\u083C\n@\f@\x0E@\u083F\v@\x03@\x03@\x03A\x03A\x03B\x03" +
		"B\x03B\x05B\u0848\nB\x03B\x03B\x05B\u084C\nB\x03B\x03B\x03B\x03B\x03B" +
		"\x03B\x07B\u0854\nB\fB\x0EB\u0857\vB\x03C\x03C\x03C\x03C\x03C\x03C\x03" +
		"C\x03C\x03C\x03C\x05C\u0863\nC\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u086B" +
		"\nC\x03C\x03C\x03C\x03C\x03C\x07C\u0872\nC\fC\x0EC\u0875\vC\x03C\x03C" +
		"\x03C\x05C\u087A\nC\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u0882\nC\x03C\x03" +
		"C\x03C\x03C\x05C\u0888\nC\x03C\x03C\x05C\u088C\nC\x03C\x03C\x03C\x05C" +
		"\u0891\nC\x03C\x03C\x03C\x05C\u0896\nC\x03D\x03D\x03D\x03D\x05D\u089C" +
		"\nD\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x03D\x07D\u08AA" +
		"\nD\fD\x0ED\u08AD\vD\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x06E\u08C8\nE\rE\x0EE\u08C9\x03E\x03E\x03E\x03E\x03E\x03E\x03E" +
		"\x07E\u08D3\nE\fE\x0EE\u08D6\vE\x03E\x03E\x03E\x03E\x03E\x05E\u08DD\n" +
		"E\x03E\x03E\x03E\x05E\u08E2\nE\x03E\x03E\x03E\x05E\u08E7\nE\x03E\x03E" +
		"\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x07E\u08F2\nE\fE\x0EE\u08F5\vE\x03" +
		"E\x03E\x03E\x05E\u08FA\nE\x03E\x05E\u08FD\nE\x03E\x03E\x03E\x03E\x03E" +
		"\x05E\u0904\nE\x03E\x03E\x03E\x05E\u0909\nE\x03E\x05E\u090C\nE\x03E\x05" +
		"E\u090F\nE\x03";
	private static readonly _serializedATNSegment1: string =
		"E\x03E\x03E\x05E\u0914\nE\x03E\x03E\x03E\x07E\u0919\nE\fE\x0EE\u091C\v" +
		"E\x05E\u091E\nE\x03E\x03E\x03E\x03E\x03E\x07E\u0925\nE\fE\x0EE\u0928\v" +
		"E\x05E\u092A\nE\x03E\x03E\x05E\u092E\nE\x03E\x05E\u0931\nE\x03E\x05E\u0934" +
		"\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x07E\u0941" +
		"\nE\fE\x0EE\u0944\vE\x05E\u0946\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E" +
		"\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x06E\u0957\nE\rE\x0EE\u0958\x03" +
		"E\x03E\x05E\u095D\nE\x03E\x03E\x03E\x03E\x06E\u0963\nE\rE\x0EE\u0964\x03" +
		"E\x03E\x05E\u0969\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x07E\u0980\n" +
		"E\fE\x0EE\u0983\vE\x05E\u0985\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05" +
		"E\u098E\nE\x03E\x03E\x03E\x03E\x05E\u0994\nE\x03E\x03E\x03E\x03E\x05E" +
		"\u099A\nE\x03E\x03E\x03E\x03E\x05E\u09A0\nE\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x05E\u09A9\nE\x03E\x05E\u09AC\nE\x03E\x05E\u09AF\nE\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x05E\u09C2\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u09CB\nE\x03E" +
		"\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x07E\u09DF\nE\fE\x0EE\u09E2\vE\x05E\u09E4\nE\x03E\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u09EE\nE\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x03E\x05E\u09F7\nE\x03E\x03E\x03E\x03E\x05E\u09FD\nE\x03E\x03E" +
		"\x03E\x03E\x05E\u0A03\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E" +
		"\x05E\u0A0E\nE\x05E\u0A10\nE\x03E\x03E\x03E\x05E\u0A15\nE\x03E\x03E\x03" +
		"E\x03E\x03E\x05E\u0A1C\nE\x05E\u0A1E\nE\x03E\x03E\x03E\x03E\x05E\u0A24" +
		"\nE\x03E\x03E\x03E\x03E\x05E\u0A2A\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x07E\u0A33\nE\fE\x0EE\u0A36\vE\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u0A3E" +
		"\nE\x03E\x03E\x03E\x05E\u0A43\nE\x03E\x03E\x03E\x05E\u0A48\nE\x05E\u0A4A" +
		"\nE\x05E\u0A4C\nE\x03E\x03E\x03E\x03E\x05E\u0A52\nE\x05E\u0A54\nE\x03" +
		"E\x03E\x03E\x03E\x03E\x03E\x07E\u0A5C\nE\fE\x0EE\u0A5F\vE\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x05E\u0A67\nE\x05E\u0A69\nE\x03E\x03E\x03E\x03E\x05E" +
		"\u0A6F\nE\x05E\u0A71\nE\x03E\x05E\u0A74\nE\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x03E\x07E\u0A7E\nE\fE\x0EE\u0A81\vE\x03F\x03F\x03F\x03F\x03F\x05" +
		"F\u0A88\nF\x03F\x03F\x03F\x03F\x07F\u0A8E\nF\fF\x0EF\u0A91\vF\x05F\u0A93" +
		"\nF\x03G\x03G\x03G\x05G\u0A98\nG\x03H\x03H\x03H\x05H\u0A9D\nH\x03I\x03" +
		"I\x03I\x03I\x03J\x03J\x03K\x03K\x03K\x03K\x05K\u0AA9\nK\x03L\x03L\x05" +
		"L\u0AAD\nL\x03L\x03L\x05L\u0AB1\nL\x03L\x05L\u0AB4\nL\x05L\u0AB6\nL\x03" +
		"M\x03M\x03M\x03M\x03M\x03M\x05M\u0ABE\nM\x03N\x05N\u0AC1\nN\x03N\x03N" +
		"\x03N\x03N\x03N\x03N\x03N\x03N\x05N\u0ACB\nN\x03O\x03O\x03P\x03P\x03P" +
		"\x03P\x05P\u0AD3\nP\x03Q\x03Q\x03Q\x03Q\x05Q\u0AD9\nQ\x05Q\u0ADB\nQ\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x05R\u0AE3\nR\x03S\x03S\x03T\x03T\x03U\x03" +
		"U\x03V\x03V\x05V\u0AED\nV\x03V\x03V\x03V\x03V\x05V\u0AF3\nV\x03W\x03W" +
		"\x03X\x03X\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x07Y\u0AFF\nY\fY\x0EY\u0B02\v" +
		"Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0B0A\nY\x03Y\x03Y\x03Y\x03Y\x03" +
		"Y\x05Y\u0B11\nY\x03Y\x03Y\x03Y\x05Y\u0B16\nY\x03Y\x03Y\x03Y\x03Y\x03Y" +
		"\x05Y\u0B1D\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0B27\nY\x03" +
		"Y\x03Y\x03Y\x05Y\u0B2C\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0B33\nY\x03Y" +
		"\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03" +
		"Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x07Y\u0B4B\nY\fY\x0EY\u0B4E\vY\x03" +
		"Y\x03Y\x05Y\u0B52\nY\x05Y\u0B54\nY\x03Y\x03Y\x03Y\x03Y\x03Y\x05Y\u0B5B" +
		"\nY\x07Y\u0B5D\nY\fY\x0EY\u0B60\vY\x03Z\x03Z\x03Z\x03Z\x05Z\u0B66\nZ\x03" +
		"[\x03[\x05[\u0B6A\n[\x03\\\x03\\\x03\\\x03\\\x03\\\x03]\x03]\x03]\x03" +
		"]\x03]\x03]\x03^\x03^\x03^\x03^\x05^\u0B7B\n^\x03^\x03^\x03^\x03^\x03" +
		"^\x03^\x03^\x03^\x03^\x03^\x03^\x07^\u0B88\n^\f^\x0E^\u0B8B\v^\x03^\x03" +
		"^\x03^\x03^\x05^\u0B91\n^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x05^\u0B9A" +
		"\n^\x03^\x03^\x03^\x03^\x03^\x03^\x07^\u0BA2\n^\f^\x0E^\u0BA5\v^\x03^" +
		"\x03^\x05^\u0BA9\n^\x03^\x03^\x03^\x03^\x03^\x07^\u0BB0\n^\f^\x0E^\u0BB3" +
		"\v^\x03^\x03^\x05^\u0BB7\n^\x03_\x03_\x03_\x03_\x03_\x03_\x05_\u0BBF\n" +
		"_\x03`\x03`\x03`\x03`\x07`\u0BC5\n`\f`\x0E`\u0BC8\v`\x05`\u0BCA\n`\x03" +
		"`\x03`\x03`\x03`\x05`\u0BD0\n`\x03`\x05`\u0BD3\n`\x03`\x03`\x03`\x03`" +
		"\x03`\x05`\u0BDA\n`\x03`\x03`\x03`\x03`\x07`\u0BE0\n`\f`\x0E`\u0BE3\v" +
		"`\x05`\u0BE5\n`\x03`\x03`\x03`\x03`\x07`\u0BEB\n`\f`\x0E`\u0BEE\v`\x05" +
		"`\u0BF0\n`\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03" +
		"a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x05a\u0C0A" +
		"\na\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0C15\nb\x03c\x03" +
		"c\x03c\x05c\u0C1A\nc\x03c\x03c\x03c\x03c\x03c\x07c\u0C21\nc\fc\x0Ec\u0C24" +
		"\vc\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x07d\u0C2E\nd\fd\x0Ed\u0C31" +
		"\vd\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x05d\u0C3F" +
		"\nd\x03e\x03e\x05e\u0C43\ne\x03e\x03e\x05e\u0C47\ne\x03e\x03e\x05e\u0C4B" +
		"\ne\x03e\x03e\x03e\x03e\x05e\u0C51\ne\x03e\x03e\x05e\u0C55\ne\x03e\x03" +
		"e\x05e\u0C59\ne\x03e\x03e\x05e\u0C5D\ne\x05e\u0C5F\ne\x03f\x03f\x03f\x03" +
		"f\x03g\x03g\x03g\x03g\x05g\u0C69\ng\x03h\x03h\x03h\x03h\x03h\x05h\u0C70" +
		"\nh\x03i\x03i\x03i\x03i\x03i\x03i\x03i\x05i\u0C79\ni\x03j\x03j\x03j\x03" +
		"j\x03j\x05j\u0C80\nj\x03k\x03k\x03k\x03k\x03k\x05k\u0C87\nk\x03l\x03l" +
		"\x03l\x07l\u0C8C\nl\fl\x0El\u0C8F\vl\x03m\x03m\x03m\x03m\x07m\u0C95\n" +
		"m\fm\x0Em\u0C98\vm\x03m\x03m\x03n\x03n\x03n\x03n\x03n\x07n\u0CA1\nn\f" +
		"n\x0En\u0CA4\vn\x05n\u0CA6\nn\x03n\x03n\x03o\x05o\u0CAB\no\x03o\x03o\x03" +
		"p\x03p\x03p\x03q\x03q\x03q\x05q\u0CB5\nq\x03q\x03q\x03q\x03q\x03q\x03" +
		"q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x03q\x05q\u0CC5\nq\x03r\x03r\x03" +
		"r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x06r\u0CD1\nr\rr\x0Er\u0CD2\x03r" +
		"\x05r\u0CD6\nr\x03r\x03r\x03r\x03r\x03r\x06r\u0CDD\nr\rr\x0Er\u0CDE\x03" +
		"r\x05r\u0CE2\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x07r\u0CEC\nr" +
		"\fr\x0Er\u0CEF\vr\x03r\x05r\u0CF2\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03" +
		"r\x03r\x03r\x03r\x03r\x07r\u0CFF\nr\fr\x0Er\u0D02\vr\x03r\x05r\u0D05\n" +
		"r\x03r\x03r\x03r\x03r\x05r\u0D0B\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03" +
		"r\x03r\x05r\u0D15\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x03" +
		"r\x05r\u0D21\nr\x03r\x03r\x03r\x03r\x03r\x03r\x03r\x05r\u0D2A\nr\x03s" +
		"\x03s\x03s\x03s\x03s\x03t\x03t\x03t\x03t\x03t\x03u\x03u\x03u\x03v\x03" +
		"v\x03v\x03v\x07v\u0D3D\nv\fv\x0Ev\u0D40\vv\x03v\x03v\x03v\x05v\u0D45\n" +
		"v\x03w\x03w\x03w\x06w\u0D4A\nw\rw\x0Ew\u0D4B\x03x\x03x\x03x\x03x\x03x" +
		"\x03x\x05x\u0D54\nx\x03y\x03y\x03y\x05y\u0D59\ny\x03z\x05z\u0D5C\nz\x03" +
		"z\x03z\x03{\x03{\x03{\x07{\u0D63\n{\f{\x0E{\u0D66\v{\x03|\x03|\x03|\x03" +
		"|\x03|\x03|\x03}\x03}\x03~\x03~\x03~\x05~\u0D73\n~\x03\x7F\x03\x7F\x03" +
		"\x7F\x03\x7F\x03\x7F\x05\x7F\u0D7A\n\x7F\x03\x80\x03\x80\x03\x80\x07\x80" +
		"\u0D7F\n\x80\f\x80\x0E\x80\u0D82\v\x80\x03\x81\x03\x81\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x05\x81\u0D8A\n\x81\x03\x82\x03\x82\x03\x82\x03\x82\x03" +
		"\x82\x05\x82\u0D91\n\x82\x03\x83\x05\x83\u0D94\n\x83\x03\x83\x03\x83\x05" +
		"\x83\u0D98\n\x83\x03\x83\x03\x83\x05\x83\u0D9C\n\x83\x03\x83\x05\x83\u0D9F" +
		"\n\x83\x03\x84\x03\x84\x05\x84\u0DA3\n\x84\x03\x85\x03\x85\x03\x85\x02" +
		"\x02\t,D\x82\x86\x88\xB0\xC4\x86\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f" +
		"\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E" +
		"\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x028\x02" +
		":\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02" +
		"V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02" +
		"r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88" +
		"\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A" +
		"\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC" +
		"\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE" +
		"\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0" +
		"\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2" +
		"\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4" +
		"\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104" +
		"\x02\u0106\x02\u0108\x02\x02%\x04\x02))\xE7\xE7\x04\x02JJ\x85\x85\x04" +
		"\x02kk||\x04\x02^^}}\x03\x02\xF1\xF2\x04\x02gg\xB0\xB0\x04\x02\u0146\u0146" +
		"\u014B\u014B\x04\x02]]\u011B\u011B\x04\x02\x1F\x1FMM\x04\x02gg\x96\x96" +
		"\x04\x02\x18\x18QQ\x04\x02##\u0105\u0105\x05\x02%%\x98\x98\u0110\u0110" +
		"\x04\x02~~\xF9\xF9\x04\x02WW[[\x04\x02\x92\x92\xBF\xBF\x04\x02\x7F\x7F" +
		"\xC7\xC7\x04\x0288\u011B\u011B\x03\x02\u0140\u0141\x03\x02\u0142\u0144" +
		"\x03\x02\u0125\u0127\x06\x02[[cc\u0113\u0113\u011D\u011D\x04\x0233\u011A" +
		"\u011A\x04\x02ff\xF3\xF3\x03\x02\u013A\u013F\x05\x02\x18\x18\x1C\x1C\u0100" +
		"\u0100\x04\x02cc\u0113\u0113\x07\x02EExx\xAC\xAD\xF7\xF7\u0138\u0138\x03" +
		"\x02\xB1\xB4\x04\x02hh\xD6\xD6\x05\x02ss\x8B\x8B\u0109\u0109\x06\x02R" +
		"R\x86\x86\xA2\xA2\u0128\u0128\x04\x02\xC2\xC2\u0137\u0137\x04\x02\u010E" +
		"\u010E\u012C\u012C8\x02\x14\x18\x1A\x1A\x1C\x1D\x1F#%%\'),356::CEGJLM" +
		"OPRTWY[[^^aadhjjmsvvx{}~\x80\x80\x83\x83\x85\x86\x88\x89\x8B\x8B\x92\x99" +
		"\x9B\x9B\x9D\x9D\x9F\x9F\xA2\xAD\xAF\xB6\xBA\xBF\xC1\xC3\xC6\xC6\xC8\xD7" +
		"\xD9\xDE\xE0\xEB\xED\xEF\xF1\xF9\xFB\u0105\u0107\u010A\u010C\u0111\u0114" +
		"\u0116\u0118\u011A\u011C\u011E\u0120\u0123\u0125\u0129\u012B\u012D\u0130" +
		"\u0131\u0133\u0139\x02\u0FC8\x02\u010A\x03\x02\x02\x02\x04\u010D\x03\x02" +
		"\x02\x02\x06\u0110\x03\x02\x02\x02\b\u0113\x03\x02\x02\x02\n\u0116\x03" +
		"\x02\x02\x02\f\u0119\x03\x02\x02\x02\x0E\u0491\x03\x02\x02\x02\x10\u0494" +
		"\x03\x02\x02\x02\x12\u0498\x03\x02\x02\x02\x14\u04A2\x03\x02\x02\x02\x16" +
		"\u04A6\x03\x02\x02\x02\x18\u04B4\x03\x02\x02\x02\x1A\u04B6\x03\x02\x02" +
		"\x02\x1C\u04C4\x03\x02\x02\x02\x1E\u04CA\x03\x02\x02\x02 \u04CE\x03\x02" +
		"\x02\x02\"\u04D6\x03\x02\x02\x02$\u04DC\x03\x02\x02\x02&\u04DE\x03\x02" +
		"\x02\x02(\u0503\x03\x02\x02\x02*\u0505\x03\x02\x02\x02,\u0507\x03\x02" +
		"\x02\x02.\u052B\x03\x02\x02\x020\u052D\x03\x02\x02\x022\u0535\x03\x02" +
		"\x02\x024\u0565\x03\x02\x02\x026\u0597\x03\x02\x02\x028\u05A6\x03\x02" +
		"\x02\x02:\u05A8\x03\x02\x02\x02<\u05AF\x03\x02\x02\x02>\u05CC\x03\x02" +
		"\x02\x02@\u05D5\x03\x02\x02\x02B\u05E6\x03\x02\x02\x02D\u05E8\x03\x02" +
		"\x02\x02F\u060F\x03\x02\x02\x02H\u061F\x03\x02\x02\x02J\u0621\x03\x02" +
		"\x02\x02L\u062A\x03\x02\x02\x02N\u062C\x03\x02\x02\x02P\u0634\x03\x02" +
		"\x02\x02R\u063A\x03\x02\x02\x02T\u063C\x03\x02\x02\x02V\u0691\x03\x02" +
		"\x02\x02X\u06A0\x03\x02\x02\x02Z\u06AB\x03\x02\x02\x02\\\u06C0\x03\x02" +
		"\x02\x02^\u06C2\x03\x02\x02\x02`\u06CF\x03\x02\x02\x02b\u06D3\x03\x02" +
		"\x02\x02d\u06DD\x03\x02\x02\x02f\u072F\x03\x02\x02\x02h\u077E\x03\x02" +
		"\x02\x02j\u0799\x03\x02\x02\x02l\u079B\x03\x02\x02\x02n\u07A2\x03\x02" +
		"\x02\x02p\u07AE\x03\x02\x02\x02r\u07B0\x03\x02\x02\x02t\u07CC\x03\x02" +
		"\x02\x02v\u07D3\x03\x02\x02\x02x\u081B\x03\x02\x02\x02z\u082F\x03\x02" +
		"\x02\x02|\u0831\x03\x02\x02\x02~\u0835\x03\x02\x02\x02\x80\u0842\x03\x02" +
		"\x02\x02\x82\u084B\x03\x02\x02\x02\x84\u0895\x03\x02\x02\x02\x86\u089B" +
		"\x03\x02\x02\x02\x88\u0A73\x03\x02\x02\x02\x8A\u0A82\x03\x02\x02\x02\x8C" +
		"\u0A94\x03\x02\x02\x02\x8E\u0A99\x03\x02\x02\x02\x90\u0A9E\x03\x02\x02" +
		"\x02\x92\u0AA2\x03\x02\x02\x02\x94\u0AA8\x03\x02\x02\x02\x96\u0AB5\x03" +
		"\x02\x02\x02\x98\u0ABD\x03\x02\x02\x02\x9A\u0ACA\x03\x02\x02\x02\x9C\u0ACC" +
		"\x03\x02\x02\x02\x9E\u0AD2\x03\x02\x02\x02\xA0\u0ADA\x03\x02\x02\x02\xA2" +
		"\u0AE2\x03\x02\x02\x02\xA4\u0AE4\x03\x02\x02\x02\xA6\u0AE6\x03\x02\x02" +
		"\x02\xA8\u0AE8\x03\x02\x02\x02\xAA\u0AEA\x03\x02\x02\x02\xAC\u0AF4\x03" +
		"\x02\x02\x02\xAE\u0AF6\x03\x02\x02\x02\xB0\u0B53\x03\x02\x02\x02\xB2\u0B65" +
		"\x03\x02\x02\x02\xB4\u0B69\x03\x02\x02\x02\xB6\u0B6B\x03\x02\x02\x02\xB8" +
		"\u0B70\x03\x02\x02\x02\xBA\u0BB6\x03\x02\x02\x02\xBC\u0BB8\x03\x02\x02" +
		"\x02\xBE\u0BC9\x03\x02\x02\x02\xC0\u0C09\x03\x02\x02\x02\xC2\u0C14\x03" +
		"\x02\x02\x02\xC4\u0C16\x03\x02\x02\x02\xC6\u0C3E\x03\x02\x02\x02\xC8\u0C5E" +
		"\x03\x02\x02\x02\xCA\u0C60\x03\x02\x02\x02\xCC\u0C68\x03\x02\x02\x02\xCE" +
		"\u0C6F\x03\x02\x02\x02\xD0\u0C78\x03\x02\x02\x02\xD2\u0C7F\x03\x02\x02" +
		"\x02\xD4\u0C86\x03\x02\x02\x02\xD6\u0C88\x03\x02\x02\x02\xD8\u0C90\x03" +
		"\x02\x02\x02\xDA\u0C9B\x03\x02\x02\x02\xDC\u0CAA\x03\x02\x02\x02\xDE\u0CAE" +
		"\x03\x02\x02\x02\xE0\u0CC4\x03\x02\x02\x02\xE2\u0D29\x03\x02\x02\x02\xE4" +
		"\u0D2B\x03\x02\x02\x02\xE6\u0D30\x03\x02\x02\x02\xE8\u0D35\x03\x02\x02" +
		"\x02\xEA\u0D38\x03\x02\x02\x02\xEC\u0D49\x03\x02\x02\x02\xEE\u0D53\x03" +
		"\x02\x02\x02\xF0\u0D58\x03\x02\x02\x02\xF2\u0D5B\x03\x02\x02\x02\xF4\u0D5F" +
		"\x03\x02\x02\x02\xF6\u0D67\x03\x02\x02\x02\xF8\u0D6D\x03\x02\x02\x02\xFA" +
		"\u0D72\x03\x02\x02\x02\xFC\u0D79\x03\x02\x02\x02\xFE\u0D7B\x03\x02\x02" +
		"\x02\u0100\u0D89\x03\x02\x02\x02\u0102\u0D90\x03\x02\x02\x02\u0104\u0D9E" +
		"\x03\x02\x02\x02\u0106\u0DA2\x03\x02\x02\x02\u0108\u0DA4\x03\x02\x02\x02" +
		"\u010A\u010B\x05\x0E\b\x02\u010B\u010C\x07\x02\x02\x03\u010C\x03\x03\x02" +
		"\x02\x02\u010D\u010E\x05\x80A\x02\u010E\u010F\x07\x02\x02\x03\u010F\x05" +
		"\x03\x02\x02\x02\u0110\u0111\x05\xD6l\x02\u0111\u0112\x07\x02\x02\x03" +
		"\u0112\x07\x03\x02\x02\x02\u0113\u0114\x05\xB0Y\x02\u0114\u0115\x07\x02" +
		"\x02\x03\u0115\t\x03\x02\x02\x02\u0116\u0117\x05\xC4c\x02\u0117\u0118" +
		"\x07\x02\x02\x03\u0118\v\x03\x02\x02\x02\u0119\u011A\x05\xD8m\x02\u011A" +
		"\u011B\x07\x02\x02\x03\u011B\r\x03\x02\x02\x02\u011C\u0492\x05\x10\t\x02" +
		"\u011D\u011E\x07\u0122\x02\x02\u011E\u0492\x05\u0102\x82\x02\u011F\u0120" +
		"\x07\u0122\x02\x02\u0120\u0121\x05\u0102\x82\x02\u0121\u0122\x07\x03\x02" +
		"\x02\u0122\u0123\x05\u0102\x82\x02\u0123\u0492\x03\x02\x02\x02\u0124\u0125" +
		"\x077\x02\x02\u0125\u0129\x07,\x02\x02\u0126\u0127\x07y\x02\x02\u0127" +
		"\u0128\x07\xB8\x02\x02\u0128\u012A\x07`\x02\x02\u0129\u0126\x03\x02\x02" +
		"\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02\u012B\u012C" +
		"\x05\u0102\x82\x02\u012C\u012D\x07\u0124\x02\x02\u012D\u0130\x05\u0102" +
		"\x82\x02\u012E\u012F\x070\x02\x02\u012F\u0131\x05\xA0Q\x02\u0130\u012E" +
		"\x03\x02\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0134\x03\x02\x02\x02" +
		"\u0132\u0133\x07!\x02\x02\u0133\u0135\x05\xFC\x7F\x02\u0134\u0132\x03" +
		"\x02\x02\x02\u0134\u0135\x03\x02\x02\x02\u0135\u0138\x03\x02\x02\x02\u0136" +
		"\u0137\x07\u0132\x02\x02\u0137\u0139\x05\x1E\x10\x02\u0138\u0136\x03\x02" +
		"\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139\u0492\x03\x02\x02\x02\u013A" +
		"\u013B\x07U\x02\x02\u013B\u013E\x07,\x02\x02\u013C\u013D\x07y\x02\x02" +
		"\u013D\u013F\x07`\x02\x02\u013E\u013C\x03\x02\x02\x02\u013E\u013F\x03" +
		"\x02\x02\x02\u013F\u0140\x03\x02\x02\x02\u0140\u0142\x05\u0102\x82\x02" +
		"\u0141\u0143\t\x02\x02\x02\u0142\u0141\x03\x02\x02\x02\u0142\u0143\x03" +
		"\x02\x02\x02\u0143\u0492\x03\x02\x02\x02\u0144\u0145\x077\x02\x02\u0145" +
		"\u0149\x07\xF5\x02\x02\u0146\u0147\x07y\x02\x02\u0147\u0148\x07\xB8\x02" +
		"\x02\u0148\u014A\x07`\x02\x02\u0149\u0146\x03\x02\x02\x02\u0149\u014A" +
		"\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02\u014B\u014E\x05\xF4{\x02" +
		"\u014C\u014D\x07!\x02\x02\u014D\u014F\x05\xFC\x7F\x02\u014E\u014C\x03" +
		"\x02\x02\x02\u014E\u014F\x03\x02\x02\x02\u014F\u0152\x03\x02\x02\x02\u0150" +
		"\u0151\x07\u0132\x02\x02\u0151\u0153\x05\x1E\x10\x02\u0152\u0150\x03\x02" +
		"\x02\x02\u0152\u0153\x03\x02\x02\x02\u0153\u0492\x03\x02\x02\x02\u0154" +
		"\u0155\x07U\x02\x02\u0155\u0158\x07\xF5\x02\x02\u0156\u0157\x07y\x02\x02" +
		"\u0157\u0159\x07`\x02\x02\u0158\u0156\x03\x02\x02\x02\u0158\u0159\x03" +
		"\x02\x02\x02\u0159\u015A\x03\x02\x02\x02\u015A\u015C\x05\xF4{\x02\u015B" +
		"\u015D\t\x02\x02\x02\u015C\u015B\x03\x02\x02\x02\u015C\u015D\x03\x02\x02" +
		"\x02\u015D\u0492\x03\x02\x02\x02\u015E\u015F\x07\x19\x02\x02\u015F\u0160" +
		"\x07\xF5\x02\x02\u0160\u0161\x05\xF4{\x02\u0161\u0162\x07\xE1\x02\x02" +
		"\u0162\u0163\x07\u010F\x02\x02\u0163\u0164\x05\u0102\x82\x02\u0164\u0492" +
		"\x03\x02\x02\x02\u0165\u0166\x07\x19\x02\x02\u0166\u0167\x07\xF5\x02\x02" +
		"\u0167\u0168\x05\xF4{\x02\u0168\u0169\x07\xFD\x02\x02\u0169\u016A\x07" +
		"!\x02\x02\u016A\u016B\x05\xFC\x7F\x02\u016B\u0492\x03\x02\x02\x02\u016C" +
		"\u016F\x077\x02\x02\u016D\u016E\x07\xC4\x02\x02\u016E\u0170\x07\xE4\x02" +
		"\x02\u016F\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02\x02\x02\u0170\u0171" +
		"\x03\x02\x02\x02\u0171\u0175\x07\u0106\x02\x02\u0172\u0173\x07y\x02\x02" +
		"\u0173\u0174\x07\xB8\x02\x02\u0174\u0176\x07`\x02\x02\u0175\u0172\x03" +
		"\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02\u0177" +
		"\u0179\x05\xF4{\x02\u0178\u017A\x05d3\x02\u0179\u0178\x03\x02\x02\x02" +
		"\u0179\u017A\x03\x02\x02\x02\u017A\u017D\x03\x02\x02\x02\u017B\u017C\x07" +
		"0\x02\x02\u017C\u017E\x05\xA0Q\x02\u017D\u017B\x03\x02\x02\x02\u017D\u017E" +
		"\x03\x02\x02\x02\u017E\u0181\x03\x02\x02\x02\u017F\u0180\x07\u0132\x02" +
		"\x02\u0180\u0182\x05\x1E\x10\x02\u0181\u017F\x03\x02\x02\x02\u0181\u0182" +
		"\x03\x02\x02\x02\u0182\u0183\x03\x02\x02\x02\u0183\u0189\x07\x1E\x02\x02" +
		"\u0184\u018A\x05\x10\t\x02\u0185\u0186\x07\x04\x02\x02\u0186\u0187\x05" +
		"\x10\t\x02\u0187\u0188\x07\x05\x02\x02\u0188\u018A\x03\x02\x02\x02\u0189" +
		"\u0184\x03\x02\x02\x02\u0189\u0185\x03\x02\x02\x02\u018A\u0190\x03\x02" +
		"\x02\x02\u018B\u018D\x07\u0132\x02\x02\u018C\u018E\x07\xB5\x02\x02\u018D" +
		"\u018C\x03\x02\x02\x02\u018D\u018E\x03\x02\x02\x02\u018E\u018F\x03\x02" +
		"\x02\x02\u018F\u0191\x07C\x02\x02\u0190\u018B\x03\x02\x02\x02\u0190\u0191" +
		"\x03\x02\x02\x02\u0191\u0492\x03\x02\x02\x02\u0192\u0195\x077\x02\x02" +
		"\u0193\u0194\x07\xC4\x02\x02\u0194\u0196\x07\xE4\x02\x02\u0195\u0193\x03" +
		"\x02\x02\x02\u0195\u0196\x03\x02\x02\x02\u0196\u0197\x03\x02\x02\x02\u0197" +
		"\u019B\x07\u0106\x02\x02\u0198\u0199\x07y\x02\x02\u0199\u019A\x07\xB8" +
		"\x02\x02\u019A\u019C\x07`\x02\x02\u019B\u0198\x03\x02\x02\x02\u019B\u019C" +
		"\x03\x02\x02\x02\u019C\u019D\x03\x02\x02\x02\u019D\u019E\x05\xF4{\x02" +
		"\u019E\u019F\x07\x04\x02\x02\u019F\u01A4\x05\x18\r\x02\u01A0\u01A1\x07" +
		"\x06\x02\x02\u01A1\u01A3\x05\x18\r\x02\u01A2\u01A0\x03\x02\x02\x02\u01A3" +
		"\u01A6\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02\u01A4\u01A5\x03\x02" +
		"\x02\x02\u01A5\u01A7\x03";
	private static readonly _serializedATNSegment2: string =
		"\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02\u01A7\u01AA\x07\x05\x02\x02\u01A8" +
		"\u01A9\x070\x02\x02\u01A9\u01AB\x05\xA0Q\x02\u01AA\u01A8\x03\x02\x02\x02" +
		"\u01AA\u01AB\x03\x02\x02\x02\u01AB\u01AE\x03\x02\x02\x02\u01AC\u01AD\x07" +
		"\u0132\x02\x02\u01AD\u01AF\x05\x1E\x10\x02\u01AE\u01AC\x03\x02\x02\x02" +
		"\u01AE\u01AF\x03\x02\x02\x02\u01AF\u0492\x03\x02\x02\x02\u01B0\u01B1\x07" +
		"U\x02\x02\u01B1\u01B4\x07\u0106\x02\x02\u01B2\u01B3\x07y\x02\x02\u01B3" +
		"\u01B5\x07`\x02\x02\u01B4\u01B2\x03\x02\x02\x02\u01B4\u01B5\x03\x02\x02" +
		"\x02\u01B5\u01B6\x03\x02\x02\x02\u01B6\u0492\x05\xF4{\x02\u01B7\u01B8" +
		"\x07\x81\x02\x02\u01B8\u01B9\x07\x84\x02\x02\u01B9\u01BB\x05\xF4{\x02" +
		"\u01BA\u01BC\x05d3\x02\u01BB\u01BA\x03\x02\x02\x02\u01BB\u01BC\x03\x02" +
		"\x02\x02\u01BC\u01BD\x03\x02\x02\x02\u01BD\u01BE\x05\x10\t\x02\u01BE\u0492" +
		"\x03\x02\x02\x02\u01BF\u01C0\x07K\x02\x02\u01C0\u01C1\x07k\x02\x02\u01C1" +
		"\u01C4\x05\xF4{\x02\u01C2\u01C3\x07\u012F\x02\x02\u01C3\u01C5\x05\x82" +
		"B\x02\u01C4\u01C2\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02\u01C5\u0492" +
		"\x03\x02\x02\x02\u01C6\u01C7\x07\u0114\x02\x02\u01C7\u01C8\x07\u0106\x02" +
		"\x02\u01C8\u0492\x05\xF4{\x02\u01C9\u01CA\x070\x02\x02\u01CA\u01CB\x07" +
		"\xC0\x02\x02\u01CB\u01CC\x07\u0106\x02\x02\u01CC\u01CD\x05\xF4{\x02\u01CD" +
		"\u01D0\x07\x87\x02\x02\u01CE\u01D1\x05\xA0Q\x02\u01CF\u01D1\x07\xB9\x02" +
		"\x02\u01D0\u01CE\x03\x02\x02\x02\u01D0\u01CF\x03\x02\x02\x02\u01D1\u0492" +
		"\x03\x02\x02\x02\u01D2\u01D3\x070\x02\x02\u01D3\u01D4\x07\xC0\x02\x02" +
		"\u01D4\u01D5\x07\u012D\x02\x02\u01D5\u01D6\x05\xF4{\x02\u01D6\u01D9\x07" +
		"\x87\x02\x02\u01D7\u01DA\x05\xA0Q\x02\u01D8\u01DA\x07\xB9\x02\x02\u01D9" +
		"\u01D7\x03\x02\x02\x02\u01D9\u01D8\x03\x02\x02\x02\u01DA\u0492\x03\x02" +
		"\x02\x02\u01DB\u01DC\x070\x02\x02\u01DC\u01DD\x07\xC0\x02\x02\u01DD\u01DE" +
		"\x07.\x02\x02\u01DE\u01DF\x05\xF4{\x02\u01DF\u01E2\x07\x87\x02\x02\u01E0" +
		"\u01E3\x05\xA0Q\x02\u01E1\u01E3\x07\xB9\x02\x02\u01E2\u01E0\x03\x02\x02" +
		"\x02\u01E2\u01E1\x03\x02\x02\x02\u01E3\u0492\x03\x02\x02\x02\u01E4\u01E5" +
		"\x07\x19\x02\x02\u01E5\u01E8\x07\u0106\x02\x02\u01E6\u01E7\x07y\x02\x02" +
		"\u01E7\u01E9\x07`\x02\x02\u01E8\u01E6\x03\x02\x02\x02\u01E8\u01E9\x03" +
		"\x02\x02\x02\u01E9\u01EA\x03\x02\x02\x02\u01EA\u01EB\x05\xF4{\x02\u01EB" +
		"\u01EC\x07\xE1\x02\x02\u01EC\u01ED\x07\u010F\x02\x02\u01ED\u01EE\x05\xF4" +
		"{\x02\u01EE\u0492\x03\x02\x02\x02\u01EF\u01F0\x07\x19\x02\x02\u01F0\u01F3" +
		"\x07\u0106\x02\x02\u01F1\u01F2\x07y\x02\x02\u01F2\u01F4\x07`\x02\x02\u01F3" +
		"\u01F1\x03\x02\x02\x02\u01F3\u01F4\x03\x02\x02\x02\u01F4\u01F5\x03\x02" +
		"\x02\x02\u01F5\u01F6\x05\xF4{\x02\u01F6\u01F7\x07\x15\x02\x02\u01F7\u01FB" +
		"\x07.\x02\x02\u01F8\u01F9\x07y\x02\x02\u01F9\u01FA\x07\xB8\x02\x02\u01FA" +
		"\u01FC\x07`\x02\x02\u01FB\u01F8\x03\x02\x02\x02\u01FB\u01FC\x03\x02\x02" +
		"\x02\u01FC\u01FD\x03\x02\x02\x02\u01FD\u01FE\x05\x1A\x0E\x02\u01FE\u0492" +
		"\x03\x02\x02\x02\u01FF\u0200\x07\x19\x02\x02\u0200\u0203\x07\u0106\x02" +
		"\x02\u0201\u0202\x07y\x02\x02\u0202\u0204\x07`\x02\x02\u0203\u0201\x03" +
		"\x02\x02\x02\u0203\u0204\x03\x02\x02\x02\u0204\u0205\x03\x02\x02\x02\u0205" +
		"\u0206\x05\xF4{\x02\u0206\u0207\x07\xE1\x02\x02\u0207\u020A\x07.\x02\x02" +
		"\u0208\u0209\x07y\x02\x02\u0209\u020B\x07`\x02\x02\u020A\u0208\x03\x02" +
		"\x02\x02\u020A\u020B\x03\x02\x02\x02\u020B\u020C\x03\x02\x02\x02\u020C" +
		"\u020D\x05\xF4{\x02\u020D\u020E\x07\u010F\x02\x02\u020E\u020F\x05\u0102" +
		"\x82\x02\u020F\u0492\x03\x02\x02\x02\u0210\u0211\x07\x19\x02\x02\u0211" +
		"\u0214\x07\u0106\x02\x02\u0212\u0213\x07y\x02\x02\u0213\u0215\x07`\x02" +
		"\x02\u0214\u0212\x03\x02\x02\x02\u0214\u0215\x03\x02\x02\x02\u0215\u0216" +
		"\x03\x02\x02\x02\u0216\u0217\x05\xF4{\x02\u0217\u0218\x07U\x02\x02\u0218" +
		"\u021B\x07.\x02\x02\u0219\u021A\x07y\x02\x02\u021A\u021C\x07`\x02\x02" +
		"\u021B\u0219\x03\x02\x02\x02\u021B\u021C\x03\x02\x02\x02\u021C\u021D\x03" +
		"\x02\x02\x02\u021D\u021E\x05\xF4{\x02\u021E\u0492\x03\x02\x02\x02\u021F" +
		"\u0220\x07\x19\x02\x02\u0220\u0223\x07\u0106\x02\x02\u0221\u0222\x07y" +
		"\x02\x02\u0222\u0224\x07`\x02\x02\u0223\u0221\x03\x02\x02\x02\u0223\u0224" +
		"\x03\x02\x02\x02\u0224\u0225\x03\x02\x02\x02\u0225\u0226\x05\xF4{\x02" +
		"\u0226\u0227\x07\x19\x02\x02\u0227\u0228\x07.\x02\x02\u0228\u0229\x05" +
		"\xF4{\x02\u0229\u022A\x07\xFD\x02\x02\u022A\u022B\x07C\x02\x02\u022B\u022C" +
		"\x07\u0116\x02\x02\u022C\u022D\x05\xB0Y\x02\u022D\u0492\x03\x02\x02\x02" +
		"\u022E\u022F\x07\x19\x02\x02\u022F\u0232\x07\u0106\x02\x02\u0230\u0231" +
		"\x07y\x02\x02\u0231\u0233\x07`\x02\x02\u0232\u0230\x03\x02\x02\x02\u0232" +
		"\u0233\x03\x02\x02\x02\u0233\u0234\x03\x02\x02\x02\u0234\u0235\x05\xF4" +
		"{\x02\u0235\u0236\x07\x19\x02\x02\u0236\u0237\x07.\x02\x02\u0237\u0238" +
		"\x05\u0102\x82\x02\u0238\u0239\x07U\x02\x02\u0239\u023A\x07\xB8\x02\x02" +
		"\u023A\u023B\x07\xB9\x02\x02\u023B\u0492\x03\x02\x02\x02\u023C\u023D\x07" +
		"\x19\x02\x02\u023D\u023E\x07\u0106\x02\x02\u023E\u023F\x05\xF4{\x02\u023F" +
		"\u0240\x07\xFD\x02\x02\u0240\u0241\x07!\x02\x02\u0241\u0242\x05\xFC\x7F" +
		"\x02\u0242\u0492\x03\x02\x02\x02\u0243\u0244\x07\x19\x02\x02\u0244\u0245" +
		"\x07\u0106\x02\x02\u0245\u0246\x05\xF4{\x02\u0246\u0247\x07\xFD\x02\x02" +
		"\u0247\u0248\x07\xDA\x02\x02\u0248\u0249\x05 \x11\x02\u0249\u0492\x03" +
		"\x02\x02\x02\u024A\u024B\x07\x19\x02\x02\u024B\u024C\x07\u0106\x02\x02" +
		"\u024C\u024D\x05\xF4{\x02\u024D\u024E\x07_\x02\x02\u024E\u025B\x05\u0102" +
		"\x82\x02\u024F\u0258\x07\x04\x02\x02\u0250\u0255\x05\xD2j\x02\u0251\u0252" +
		"\x07\x06\x02\x02\u0252\u0254\x05\xD2j\x02\u0253\u0251\x03\x02\x02\x02" +
		"\u0254\u0257\x03\x02\x02\x02\u0255\u0253\x03\x02\x02\x02\u0255\u0256\x03" +
		"\x02\x02\x02\u0256\u0259\x03\x02\x02\x02\u0257\u0255\x03\x02\x02\x02\u0258" +
		"\u0250\x03\x02\x02\x02\u0258\u0259\x03\x02\x02\x02\u0259\u025A\x03\x02" +
		"\x02\x02\u025A\u025C\x07\x05\x02\x02\u025B\u024F\x03\x02\x02\x02\u025B" +
		"\u025C\x03\x02\x02\x02\u025C\u025F\x03\x02\x02\x02\u025D\u025E\x07\u012F" +
		"\x02\x02\u025E\u0260\x05\x82B\x02\u025F\u025D\x03\x02\x02\x02\u025F\u0260" +
		"\x03\x02\x02\x02\u0260\u0492\x03\x02\x02\x02\u0261\u0262\x07\x1A\x02\x02" +
		"\u0262\u0265\x05\xF4{\x02\u0263\u0264\x07\u0132\x02\x02\u0264\u0266\x05" +
		"\x1E\x10\x02\u0265\u0263\x03\x02\x02\x02\u0265\u0266\x03\x02\x02\x02\u0266" +
		"\u0492\x03\x02\x02\x02\u0267\u026A\x077\x02\x02\u0268\u0269\x07\xC4\x02" +
		"\x02\u0269\u026B\x07\xE4\x02\x02\u026A\u0268\x03\x02\x02\x02\u026A\u026B" +
		"\x03\x02\x02\x02\u026B\u026C\x03\x02\x02\x02\u026C\u026D\x07\xA9\x02\x02" +
		"\u026D\u0271\x07\u012D\x02\x02\u026E\u026F\x07y\x02\x02\u026F\u0270\x07" +
		"\xB8\x02\x02\u0270\u0272\x07`\x02\x02\u0271\u026E\x03\x02\x02\x02\u0271" +
		"\u0272\x03\x02\x02\x02\u0272\u0273\x03\x02\x02\x02\u0273\u0277\x05\xF4" +
		"{\x02\u0274\u0275\x07o\x02\x02\u0275\u0276\x07\xD2\x02\x02\u0276\u0278" +
		"\x05\xAAV\x02\u0277\u0274\x03\x02\x02\x02\u0277\u0278\x03\x02\x02\x02" +
		"\u0278\u027B\x03\x02\x02\x02\u0279\u027A\x070\x02\x02\u027A\u027C\x05" +
		"\xA0Q\x02\u027B\u0279\x03\x02\x02\x02\u027B\u027C\x03\x02\x02\x02\u027C" +
		"\u027F\x03\x02\x02\x02\u027D\u027E\x07\u0132\x02\x02\u027E\u0280\x05\x1E" +
		"\x10\x02\u027F\u027D\x03\x02\x02\x02\u027F\u0280\x03\x02\x02\x02\u0280" +
		"\u0281\x03\x02\x02\x02\u0281\u0282\x07\x1E\x02\x02\u0282\u0283\x05\x10" +
		"\t\x02\u0283\u0492\x03\x02\x02\x02\u0284\u0287\x077\x02\x02\u0285\u0286" +
		"\x07\xC4\x02\x02\u0286\u0288\x07\xE4\x02\x02\u0287\u0285\x03\x02\x02\x02" +
		"\u0287\u0288\x03\x02\x02\x02\u0288\u0289\x03\x02\x02\x02\u0289\u028A\x07" +
		"\u012D\x02\x02\u028A\u028D\x05\xF4{\x02\u028B\u028C\x070\x02\x02\u028C" +
		"\u028E\x05\xA0Q\x02\u028D\u028B\x03\x02\x02\x02\u028D\u028E\x03\x02\x02" +
		"\x02\u028E\u0291\x03\x02\x02\x02\u028F\u0290\x07\xF8\x02\x02\u0290\u0292" +
		"\t\x03\x02\x02\u0291\u028F\x03\x02\x02\x02\u0291\u0292\x03\x02\x02\x02" +
		"\u0292\u0293\x03\x02\x02\x02\u0293\u0294\x07\x1E\x02\x02\u0294\u0295\x05" +
		"\x10\t\x02\u0295\u0492\x03\x02\x02\x02\u0296\u0297\x07\xE0\x02\x02\u0297" +
		"\u0298\x07\xA9\x02\x02\u0298\u0299\x07\u012D\x02\x02\u0299\u0492\x05\xF4" +
		"{\x02\u029A\u029B\x07U\x02\x02\u029B\u029C\x07\xA9\x02\x02\u029C\u029F" +
		"\x07\u012D\x02\x02\u029D\u029E\x07y\x02\x02\u029E\u02A0\x07`\x02\x02\u029F" +
		"\u029D\x03\x02\x02\x02\u029F\u02A0\x03\x02\x02\x02\u02A0\u02A1\x03\x02" +
		"\x02\x02\u02A1\u0492\x05\xF4{\x02\u02A2\u02A3\x07\x19\x02\x02\u02A3\u02A4" +
		"\x07\xA9\x02\x02\u02A4\u02A7\x07\u012D\x02\x02\u02A5\u02A6\x07y\x02\x02" +
		"\u02A6\u02A8\x07`\x02\x02\u02A7\u02A5\x03\x02\x02\x02\u02A7\u02A8\x03" +
		"\x02\x02\x02\u02A8\u02A9\x03\x02\x02\x02\u02A9\u02AA\x05\xF4{\x02\u02AA" +
		"\u02AB\x07\xE1\x02\x02\u02AB\u02AC\x07\u010F\x02\x02\u02AC\u02AD\x05\xF4" +
		"{\x02\u02AD\u0492\x03\x02\x02\x02\u02AE\u02AF\x07\x19\x02\x02\u02AF\u02B0" +
		"\x07\xA9\x02\x02\u02B0\u02B1\x07\u012D\x02\x02\u02B1\u02B2\x05\xF4{\x02" +
		"\u02B2\u02B3\x07\xFD\x02\x02\u02B3\u02B4\x07\xDA\x02\x02\u02B4\u02B5\x05" +
		" \x11\x02\u02B5\u0492\x03\x02\x02\x02\u02B6\u02B7\x07U\x02\x02\u02B7\u02BA" +
		"\x07\u012D\x02\x02\u02B8\u02B9\x07y\x02\x02\u02B9\u02BB\x07`\x02\x02\u02BA" +
		"\u02B8\x03\x02\x02\x02\u02BA\u02BB\x03\x02\x02\x02\u02BB\u02BC\x03\x02" +
		"\x02\x02\u02BC\u0492\x05\xF4{\x02\u02BD\u02BE\x07\x19\x02\x02\u02BE\u02BF" +
		"\x07\u012D\x02\x02\u02BF\u02C0\x05\xF4{\x02\u02C0\u02C1\x07\xE1\x02\x02" +
		"\u02C1\u02C2\x07\u010F\x02\x02\u02C2\u02C3\x05\xF4{\x02\u02C3\u0492\x03" +
		"\x02\x02\x02\u02C4\u02C5\x07\x19\x02\x02\u02C5\u02C6\x07\u012D\x02\x02" +
		"\u02C6\u02C7\x05\xF4{\x02\u02C7\u02C8\x07\xFD\x02\x02\u02C8\u02C9\x07" +
		"!\x02\x02\u02C9\u02CA\x05\xFC\x7F\x02\u02CA\u0492\x03\x02\x02\x02\u02CB" +
		"\u02CC\x07\'\x02\x02\u02CC\u02CD\x05\xF4{\x02\u02CD\u02D6\x07\x04\x02" +
		"\x02\u02CE\u02D3\x05\xD2j\x02\u02CF\u02D0\x07\x06\x02\x02\u02D0\u02D2" +
		"\x05\xD2j\x02\u02D1\u02CF\x03\x02\x02\x02\u02D2\u02D5\x03\x02\x02\x02" +
		"\u02D3\u02D1\x03\x02\x02\x02\u02D3\u02D4\x03\x02\x02\x02\u02D4\u02D7\x03" +
		"\x02\x02\x02\u02D5\u02D3\x03\x02\x02\x02\u02D6\u02CE\x03\x02\x02\x02\u02D6" +
		"\u02D7\x03\x02\x02\x02\u02D7\u02D8\x03\x02\x02\x02\u02D8\u02D9\x07\x05" +
		"\x02\x02\u02D9\u0492\x03\x02\x02\x02\u02DA\u02DD\x077\x02\x02\u02DB\u02DC" +
		"\x07\xC4\x02\x02\u02DC\u02DE\x07\xE4\x02\x02\u02DD\u02DB\x03\x02\x02\x02" +
		"\u02DD\u02DE\x03\x02\x02\x02\u02DE\u02DF\x03\x02\x02\x02\u02DF\u0492\x05" +
		"\xD8m\x02\u02E0\u02E1\x07U\x02\x02\u02E1\u02E4\x07m\x02\x02\u02E2\u02E3" +
		"\x07y\x02\x02\u02E3\u02E5\x07`\x02\x02\u02E4\u02E2\x03\x02\x02\x02\u02E4" +
		"\u02E5\x03\x02\x02\x02\u02E5\u02E6\x03\x02\x02\x02\u02E6\u0492\x05\xDA" +
		"n\x02\u02E7\u02E8\x077\x02\x02\u02E8\u02E9\x07\xED\x02\x02\u02E9\u02ED" +
		"\x05\u0102\x82\x02\u02EA\u02EB\x07\u0132\x02\x02\u02EB\u02EC\x07\x16\x02" +
		"\x02\u02EC\u02EE\x05\xFA~\x02\u02ED\u02EA\x03\x02\x02\x02\u02ED\u02EE" +
		"\x03\x02\x02\x02\u02EE\u02F1\x03\x02\x02\x02\u02EF\u02F0\x07|\x02\x02" +
		"\u02F0\u02F2\x05\u0102\x82\x02\u02F1\u02EF\x03\x02\x02\x02\u02F1\u02F2" +
		"\x03\x02\x02\x02\u02F2\u0492\x03\x02\x02\x02\u02F3\u02F4\x07U\x02\x02" +
		"\u02F4\u02F5\x07\xED\x02\x02\u02F5\u02F8\x05\u0102\x82\x02\u02F6\u02F7" +
		"\x07|\x02\x02\u02F7\u02F9\x05\u0102\x82\x02\u02F8\u02F6\x03\x02\x02\x02" +
		"\u02F8\u02F9\x03\x02\x02\x02\u02F9\u0492\x03\x02\x02\x02\u02FA\u02FB\x07" +
		"p\x02\x02\u02FB\u0300\x05\u0100\x81\x02\u02FC\u02FD\x07\x06\x02\x02\u02FD" +
		"\u02FF\x05\u0100\x81\x02\u02FE\u02FC\x03\x02\x02\x02\u02FF\u0302\x03\x02" +
		"\x02\x02\u0300\u02FE\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301" +
		"\u0303\x03\x02\x02\x02\u0302\u0300\x03\x02\x02\x02\u0303\u0304\x07\u010F" +
		"\x02\x02\u0304\u0309\x05\xFC\x7F\x02\u0305\u0306\x07\x06\x02\x02\u0306" +
		"\u0308\x05\xFC\x7F\x02\u0307\u0305\x03\x02\x02\x02\u0308\u030B\x03\x02" +
		"\x02\x02\u0309\u0307\x03\x02\x02\x02\u0309\u030A\x03\x02\x02\x02\u030A" +
		"\u030F\x03\x02\x02\x02\u030B\u0309\x03\x02\x02\x02\u030C\u030D\x07\u0132" +
		"\x02\x02\u030D\u030E\x07\x16\x02\x02\u030E\u0310\x07\xC3\x02\x02\u030F" +
		"\u030C\x03\x02\x02\x02\u030F\u0310\x03\x02\x02\x02\u0310\u0314\x03\x02" +
		"\x02\x02\u0311\u0312\x07q\x02\x02\u0312\u0313\x07&\x02\x02\u0313\u0315" +
		"\x05\xFA~\x02\u0314\u0311\x03\x02\x02\x02\u0314\u0315\x03\x02\x02\x02" +
		"\u0315\u0318\x03\x02\x02\x02\u0316\u0317\x07|\x02\x02\u0317\u0319\x05" +
		"\u0102\x82\x02\u0318\u0316\x03\x02\x02\x02\u0318\u0319\x03\x02\x02\x02" +
		"\u0319\u0492\x03\x02\x02\x02\u031A\u0325\x07p\x02\x02\u031B\u0320\x05" +
		"\u0100\x81\x02\u031C\u031D\x07\x06\x02\x02\u031D\u031F\x05\u0100\x81\x02" +
		"\u031E\u031C\x03\x02\x02\x02\u031F\u0322\x03\x02\x02\x02\u0320\u031E\x03" +
		"\x02\x02\x02\u0320\u0321\x03\x02\x02\x02\u0321\u0326\x03\x02\x02\x02\u0322" +
		"\u0320\x03\x02\x02\x02\u0323\u0324\x07\x18\x02\x02\u0324\u0326\x07\xD9" +
		"\x02\x02\u0325\u031B\x03\x02\x02\x02\u0325\u0323\x03\x02\x02\x02\u0326" +
		"\u0327\x03\x02\x02\x02\u0327\u0328\x07\xC0\x02\x02\u0328\u0329\x05\xF2" +
		"z\x02\u0329\u032A\x07\u010F\x02\x02\u032A\u032E\x05\xFC\x7F\x02\u032B" +
		"\u032C\x07\u0132\x02\x02\u032C\u032D\x07p\x02\x02\u032D\u032F\x07\xC3" +
		"\x02\x02\u032E\u032B\x03\x02\x02\x02\u032E\u032F\x03\x02\x02\x02\u032F" +
		"\u0492\x03\x02\x02\x02\u0330\u0334\x07\xEB\x02\x02\u0331\u0332\x07\x16" +
		"\x02\x02\u0332\u0333\x07\xC3\x02\x02\u0333\u0335\x07i\x02\x02\u0334\u0331" +
		"\x03\x02\x02\x02\u0334\u0335\x03\x02\x02\x02\u0335\u0336\x03\x02\x02\x02" +
		"\u0336\u033B\x05\u0100\x81\x02\u0337\u0338\x07\x06\x02\x02\u0338\u033A" +
		"\x05\u0100\x81\x02\u0339\u0337\x03\x02\x02\x02\u033A\u033D\x03\x02\x02" +
		"\x02\u033B\u0339\x03\x02\x02\x02\u033B\u033C\x03\x02\x02\x02\u033C\u033E" +
		"\x03\x02\x02\x02\u033D\u033B\x03\x02\x02\x02\u033E\u033F\x07k\x02\x02" +
		"\u033F\u0344\x05\xFC\x7F\x02\u0340\u0341\x07\x06\x02\x02\u0341\u0343\x05" +
		"\xFC\x7F\x02\u0342\u0340\x03\x02\x02\x02\u0343\u0346\x03\x02\x02\x02\u0344" +
		"\u0342\x03\x02\x02\x02\u0344\u0345\x03\x02\x02\x02\u0345\u034A\x03\x02" +
		"\x02\x02\u0346\u0344\x03\x02\x02\x02\u0347\u0348\x07q\x02\x02\u0348\u0349" +
		"\x07&\x02\x02\u0349\u034B\x05\xFA~\x02\u034A\u0347\x03\x02\x02\x02\u034A" +
		"\u034B\x03\x02\x02\x02\u034B\u034E\x03\x02\x02\x02\u034C\u034D\x07|\x02" +
		"\x02\u034D\u034F\x05\u0102\x82\x02\u034E\u034C\x03\x02\x02\x02\u034E\u034F" +
		"\x03\x02\x02\x02\u034F\u0492\x03\x02\x02\x02\u0350\u0354\x07\xEB\x02\x02" +
		"\u0351\u0352\x07p\x02\x02\u0352\u0353\x07\xC3\x02\x02\u0353\u0355\x07" +
		"i\x02\x02\u0354\u0351\x03\x02\x02\x02\u0354\u0355\x03\x02\x02\x02\u0355" +
		"\u0360\x03\x02\x02\x02\u0356\u035B\x05\u0100\x81\x02\u0357\u0358\x07\x06" +
		"\x02\x02\u0358\u035A\x05\u0100\x81\x02\u0359\u0357\x03\x02\x02\x02\u035A" +
		"\u035D\x03\x02\x02\x02\u035B\u0359\x03\x02\x02\x02\u035B\u035C\x03\x02" +
		"\x02\x02\u035C\u0361\x03\x02\x02\x02\u035D\u035B\x03\x02\x02\x02\u035E" +
		"\u035F\x07\x18\x02\x02\u035F\u0361\x07\xD9\x02\x02\u0360\u0356\x03\x02" +
		"\x02\x02\u0360\u035E\x03\x02\x02\x02\u0361\u0362\x03\x02\x02\x02\u0362" +
		"\u0363\x07\xC0\x02\x02\u0363\u0364\x05\xF2z\x02\u0364\u0365\x07k\x02\x02" +
		"\u0365\u0366\x05\xFC\x7F\x02\u0366\u0492\x03\x02\x02\x02\u0367\u0372\x07" +
		"L\x02\x02\u0368\u036D\x05\xEEx\x02\u0369\u036A\x07\x06\x02\x02\u036A\u036C" +
		"\x05\xEEx\x02\u036B\u0369\x03\x02\x02\x02\u036C\u036F\x03\x02\x02\x02" +
		"\u036D\u036B\x03\x02\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u0373\x03" +
		"\x02\x02\x02\u036F\u036D\x03\x02\x02\x02\u0370\u0371\x07\x18\x02\x02\u0371" +
		"\u0373\x07\xD9\x02\x02\u0372\u0368\x03\x02\x02\x02\u0372\u0370\x03\x02" +
		"\x02\x02\u0373\u0374\x03\x02\x02\x02\u0374\u0375\x07\xC0\x02\x02\u0375" +
		"\u0376\x05\xF2z\x02\u0376\u0377\x07\u010F\x02\x02\u0377\u0378\x05\xFC" +
		"\x7F\x02\u0378\u0492\x03\x02\x02\x02\u0379\u037A\x07\xFD\x02\x02\u037A" +
		"\u037E\x07\xED\x02\x02\u037B\u037F\x07\x18\x02\x02\u037C\u037F\x07\xB6" +
		"\x02\x02\u037D\u037F\x05\u0102\x82\x02\u037E\u037B\x03\x02\x02\x02\u037E" +
		"\u037C\x03\x02\x02\x02\u037E\u037D\x03\x02\x02\x02\u037F\u0382\x03\x02" +
		"\x02\x02\u0380\u0381\x07|\x02\x02\u0381\u0383\x05\u0102\x82\x02\u0382" +
		"\u0380\x03\x02\x02\x02\u0382\u0383\x03\x02\x02\x02\u0383\u0492\x03\x02" +
		"\x02\x02\u0384\u0385\x07\xFF\x02\x02\u0385\u0388\x07r\x02\x02\u0386\u0387" +
		"\x07\xC0\x02\x02\u0387\u0389\x05\xF2z\x02\u0388\u0386\x03\x02\x02\x02" +
		"\u0388\u0389\x03\x02\x02\x02\u0389\u0492\x03\x02\x02\x02\u038A\u0396\x07" +
		"a\x02\x02\u038B\u038C\x07\x04\x02\x02\u038C\u0391\x05\xCCg\x02\u038D\u038E" +
		"\x07\x06\x02\x02\u038E\u0390\x05\xCCg\x02\u038F\u038D\x03\x02\x02\x02" +
		"\u0390\u0393\x03\x02\x02\x02\u0391\u038F\x03\x02\x02\x02\u0391\u0392\x03" +
		"\x02\x02\x02\u0392\u0394\x03\x02\x02\x02\u0393\u0391\x03\x02\x02\x02\u0394" +
		"\u0395\x07\x05\x02\x02\u0395\u0397\x03\x02\x02\x02\u0396\u038B\x03\x02" +
		"\x02\x02\u0396\u0397\x03\x02\x02\x02\u0397\u0398\x03\x02\x02\x02\u0398" +
		"\u0492\x05\x0E\b\x02\u0399\u039A\x07a\x02\x02\u039A\u039C\x07\x1A\x02" +
		"\x02\u039B\u039D\x07\u012B\x02\x02\u039C\u039B\x03\x02\x02\x02\u039C\u039D" +
		"\x03\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u0492\x05\x0E\b\x02" +
		"\u039F\u03A0\x07\xFF\x02\x02\u03A0\u03A1\x077\x02\x02\u03A1\u03A2\x07" +
		"\u0106\x02\x02\u03A2\u0492\x05\xF4{\x02\u03A3\u03A4\x07\xFF\x02\x02\u03A4" +
		"\u03A5\x077\x02\x02\u03A5\u03A6\x07\xF5\x02\x02\u03A6\u0492\x05\xF4{\x02" +
		"\u03A7\u03A8\x07\xFF\x02\x02\u03A8\u03A9\x077\x02\x02\u03A9\u03AA\x07" +
		"\u012D\x02\x02\u03AA\u0492\x05\xF4{\x02\u03AB\u03AC\x07\xFF\x02\x02\u03AC" +
		"\u03AD\x077\x02\x02\u03AD\u03AE\x07\xA9\x02\x02\u03AE\u03AF\x07\u012D" +
		"\x02\x02\u03AF\u0492\x05\xF4{\x02\u03B0\u03B1\x07\xFF\x02\x02\u03B1\u03B4" +
		"\x07\u0107\x02\x02\u03B2\u03B3\t\x04\x02\x02\u03B3\u03B5\x05\xF4{\x02" +
		"\u03B4\u03B2\x03\x02\x02\x02\u03B4\u03B5\x03\x02\x02\x02\u03B5\u03BC\x03" +
		"\x02\x02\x02\u03B6\u03B7\x07\x9C\x02\x02\u03B7\u03BA\x05\xA0Q\x02\u03B8" +
		"\u03B9\x07\\\x02\x02\u03B9\u03BB\x05\xA0Q\x02\u03BA\u03B8\x03\x02\x02" +
		"\x02\u03BA\u03BB\x03\x02\x02\x02\u03BB\u03BD\x03\x02\x02\x02\u03BC\u03B6" +
		"\x03\x02\x02\x02\u03BC\u03BD\x03\x02\x02\x02\u03BD\u0492\x03\x02\x02\x02" +
		"\u03BE\u03BF\x07\xFF\x02\x02\u03BF\u03C2\x07\xF6\x02\x02\u03C0\u03C1\t" +
		"\x04\x02\x02\u03C1\u03C3\x05\u0102\x82\x02\u03C2\u03C0\x03\x02\x02\x02" +
		"\u03C2\u03C3\x03\x02\x02\x02\u03C3\u03CA\x03\x02\x02\x02\u03C4\u03C5\x07" +
		"\x9C\x02\x02\u03C5\u03C8\x05\xA0Q\x02\u03C6\u03C7\x07\\\x02\x02\u03C7" +
		"\u03C9\x05\xA0Q\x02\u03C8\u03C6\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02" +
		"\x02\u03C9\u03CB\x03\x02\x02\x02\u03CA\u03C4\x03\x02\x02\x02\u03CA\u03CB" +
		"\x03\x02\x02\x02\u03CB\u0492\x03\x02\x02\x02\u03CC\u03CD\x07\xFF\x02\x02" +
		"\u03CD\u03D4\x07-\x02\x02\u03CE\u03CF\x07\x9C\x02\x02\u03CF\u03D2\x05" +
		"\xA0Q\x02\u03D0\u03D1\x07\\\x02\x02\u03D1\u03D3\x05\xA0Q\x02\u03D2\u03D0" +
		"\x03\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D3\u03D5\x03\x02\x02\x02" +
		"\u03D4\u03CE\x03\x02\x02\x02\u03D4\u03D5\x03\x02\x02\x02\u03D5\u0492\x03" +
		"\x02\x02\x02\u03D6\u03D7\x07\xFF\x02\x02\u03D7\u03D8\x07/\x02\x02\u03D8" +
		"\u03D9\t\x04\x02\x02\u03D9\u03E0\x05\xF4{\x02\u03DA\u03DB\x07\x9C\x02" +
		"\x02\u03DB\u03DE\x05\xA0Q\x02\u03DC\u03DD\x07\\\x02\x02\u03DD\u03DF\x05" +
		"\xA0Q\x02\u03DE\u03DC\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF" +
		"\u03E1\x03\x02\x02\x02\u03E0\u03DA\x03\x02\x02\x02\u03E0\u03E1\x03\x02" +
		"\x02\x02\u03E1\u0492\x03\x02\x02\x02\u03E2\u03E3\x07\xFF\x02\x02\u03E3" +
		"\u03E4\x07\u0102\x02\x02\u03E4\u03E5\x07i\x02\x02\u03E5\u0492\x05\xF4" +
		"{\x02\u03E6\u03E7\x07\xFF\x02\x02\u03E7\u03E8\x07\u0102\x02\x02\u03E8" +
		"\u03E9\x07i\x02\x02\u03E9\u03EA\x07\x04\x02\x02\u03EA\u03EB\x05\x10\t" +
		"\x02\u03EB\u03EC\x07\x05\x02\x02\u03EC\u0492\x03\x02\x02\x02\u03ED\u03EF" +
		"\x07\xFF\x02\x02\u03EE\u03F0\x07:\x02\x02\u03EF\u03EE\x03\x02\x02\x02" +
		"\u03EF\u03F0\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1\u03F4\x07" +
		"\xEE\x02\x02\u03F2\u03F3\t\x04\x02\x02\u03F3\u03F5\x05\u0102\x82\x02\u03F4" +
		"\u03F2\x03\x02\x02\x02\u03F4\u03F5\x03\x02\x02\x02\u03F5\u0492\x03\x02" +
		"\x02\x02\u03F6\u03F7\x07\xFF\x02\x02\u03F7\u03F8\x07\xED\x02\x02\u03F8" +
		"\u03FB\x07r\x02\x02\u03F9\u03FA\t\x04\x02\x02\u03FA\u03FC\x05\u0102\x82" +
		"\x02\u03FB\u03F9\x03\x02\x02\x02\u03FB\u03FC\x03\x02\x02\x02\u03FC\u0492" +
		"\x03\x02\x02\x02\u03FD\u03FE\x07N\x02\x02\u03FE\u0492\x05\xF4{\x02\u03FF" +
		"\u0400\x07M\x02\x02\u0400\u0492\x05\xF4{\x02\u0401\u0402\x07\xFF\x02\x02" +
		"\u0402\u0405\x07n\x02\x02\u0403\u0404\t\x04\x02\x02\u0404\u0406\x05\xF4" +
		"{\x02\u0405\u0403\x03\x02\x02\x02\u0405\u0406\x03\x02\x02\x02\u0406\u040D" +
		"\x03\x02\x02\x02\u0407\u0408\x07\x9C\x02\x02\u0408\u040B\x05\xA0Q\x02" +
		"\u0409\u040A\x07\\\x02\x02\u040A\u040C\x05\xA0Q\x02\u040B\u0409\x03\x02" +
		"\x02\x02\u040B\u040C\x03\x02\x02\x02\u040C\u040E\x03\x02\x02\x02\u040D" +
		"\u0407\x03\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E\u0492\x03\x02" +
		"\x02\x02\u040F\u0410\x07\xFF\x02\x02\u0410\u0417\x07\xFC\x02\x02\u0411" +
		"\u0412\x07\x9C\x02\x02\u0412\u0415\x05\xA0Q\x02\u0413\u0414\x07\\\x02" +
		"\x02\u0414\u0416\x05\xA0Q\x02\u0415\u0413\x03\x02\x02\x02\u0415\u0416" +
		"\x03\x02\x02\x02\u0416\u0418\x03\x02\x02\x02\u0417\u0411\x03\x02\x02\x02" +
		"\u0417\u0418\x03\x02\x02\x02\u0418\u0492\x03\x02\x02\x02\u0419\u041A\x07" +
		"\xFD\x02\x02\u041A\u041B\x07\xFC\x02\x02\u041B\u041C\x07!\x02\x02\u041C" +
		"\u0492\x05\u0106\x84\x02\u041D\u041E\x07\xE5\x02\x02\u041E\u041F\x07\xFC" +
		"\x02\x02\u041F\u0492\x07!\x02\x02\u0420\u0421\x07\xFD\x02\x02\u0421\u0422" +
		"\x07\xFC\x02\x02\u0422\u0423\x05\xF4{\x02\u0423\u0424\x07\u013A\x02\x02" +
		"\u0424\u0425\x05\x80A\x02\u0425\u0492\x03\x02\x02\x02\u0426\u0427\x07" +
		"\xE5\x02\x02\u0427\u0428\x07\xFC\x02\x02\u0428\u0492\x05\xF4{\x02\u0429" +
		"\u042A\x07\u0101\x02\x02\u042A\u0433\x07\u0111\x02\x02\u042B\u0430\x05" +
		"\xCEh\x02\u042C\u042D\x07\x06\x02\x02\u042D\u042F\x05\xCEh\x02\u042E\u042C" +
		"\x03\x02\x02\x02\u042F\u0432\x03\x02\x02\x02\u0430\u042E\x03\x02\x02\x02" +
		"\u0430\u0431\x03\x02\x02\x02\u0431\u0434\x03\x02\x02\x02\u0432\u0430\x03" +
		"\x02\x02\x02\u0433\u042B\x03\x02\x02\x02\u0433\u0434\x03\x02\x02\x02\u0434" +
		"\u0492\x03\x02\x02\x02\u0435\u0437\x071\x02\x02\u0436\u0438\x07\u0135" +
		"\x02\x02\u0437\u0436\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438" +
		"\u0492\x03\x02\x02\x02\u0439\u043B\x07\xEF\x02\x02\u043A\u043C\x07\u0135" +
		"\x02\x02\u043B\u043A\x03\x02\x02\x02\u043B\u043C\x03\x02\x02\x02\u043C" +
		"\u0492\x03\x02\x02\x02\u043D\u043E\x07\xD8\x02\x02\u043E\u043F\x05\u0102" +
		"\x82\x02\u043F\u0440\x07k\x02\x02\u0440\u0441\x05\x0E\b\x02\u0441\u0492" +
		"\x03\x02\x02\x02\u0442\u0443\x07F\x02\x02\u0443\u0444\x07\xD8\x02\x02" +
		"\u0444\u0492\x05\u0102\x82\x02\u0445\u0446\x07_\x02\x02\u0446\u0450\x05" +
		"\u0102\x82\x02\u0447\u0448\x07\u0124\x02\x02\u0448\u044D\x05\x80A\x02" +
		"\u0449\u044A\x07\x06\x02\x02\u044A\u044C\x05\x80A\x02\u044B\u0449\x03" +
		"\x02\x02\x02\u044C\u044F\x03\x02\x02\x02\u044D\u044B\x03\x02\x02\x02\u044D" +
		"\u044E\x03\x02\x02\x02\u044E\u0451\x03\x02\x02\x02\u044F\u044D\x03\x02" +
		"\x02\x02\u0450\u0447\x03\x02\x02\x02\u0450\u0451\x03\x02\x02\x02\u0451" +
		"\u0492\x03\x02\x02\x02\u0452\u0453\x07_\x02\x02\u0453\u0454\x07{\x02\x02" +
		"\u0454\u045E\x05\xA0Q\x02\u0455\u0456\x07\u0124\x02\x02\u0456\u045B\x05" +
		"\x80A\x02\u0457\u0458\x07\x06\x02\x02\u0458\u045A\x05\x80A\x02\u0459\u0457" +
		"\x03\x02\x02\x02\u045A\u045D\x03\x02\x02\x02\u045B\u0459\x03\x02\x02\x02" +
		"\u045B\u045C\x03\x02\x02\x02\u045C\u045F\x03\x02\x02\x02\u045D\u045B\x03" +
		"\x02\x02\x02\u045E\u0455\x03\x02\x02\x02\u045E\u045F\x03\x02\x02\x02\u045F" +
		"\u0492\x03\x02\x02\x02\u0460\u0461\x07N\x02\x02\u0461\u0462\x07\x80\x02" +
		"\x02\u0462\u0492\x05\u0102\x82\x02\u0463\u0464\x07N\x02\x02\u0464\u0465" +
		"\x07\xC8\x02\x02\u0465\u0492\x05\u0102\x82\x02\u0466\u0467\x07\xFD\x02" +
		"\x02\u0467\u0468\x07\xCF\x02\x02\u0468\u0492\x05\xD6l\x02\u0469\u046A" +
		"\x07\xFD\x02\x02\u046A\u046B\x07\u010D\x02\x02\u046B\u046E\x07\u0139\x02" +
		"\x02\u046C\u046F\x07\x9F\x02\x02\u046D\u046F\x05\x80A\x02\u046E\u046C" +
		"\x03\x02\x02\x02\u046E\u046D\x03\x02\x02\x02\u046F\u0492\x03\x02\x02\x02" +
		"\u0470\u0471\x07\u0121\x02\x02\u0471\u0472\x05\xF4{\x02\u0472\u0473\x07" +
		"\xFD\x02\x02\u0473\u0478\x05\xCAf\x02\u0474\u0475\x07\x06\x02\x02\u0475" +
		"\u0477\x05\xCAf\x02\u0476\u0474\x03\x02\x02\x02\u0477\u047A\x03\x02\x02" +
		"\x02\u0478\u0476\x03\x02\x02\x02\u0478\u0479\x03\x02\x02\x02\u0479\u047D" +
		"\x03\x02\x02\x02\u047A\u0478\x03\x02\x02\x02\u047B\u047C\x07\u012F\x02" +
		"\x02\u047C\u047E\x05\x82B\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047E" +
		"\x03\x02\x02\x02\u047E\u0492\x03\x02\x02\x02\u047F\u0480\x07\xAB\x02\x02" +
		"\u0480\u0481\x07\x84\x02\x02\u0481\u0486\x05\xF4{\x02\u0482\u0484\x07" +
		"\x1E\x02\x02\u0483\u0482\x03\x02\x02\x02\u0483\u0484\x03\x02\x02\x02\u0484" +
		"\u0485\x03\x02\x02\x02\u0485\u0487\x05\u0102\x82\x02\u0486\u0483\x03\x02" +
		"\x02\x02\u0486\u0487\x03\x02\x02";
	private static readonly _serializedATNSegment3: string =
		"\x02\u0487\u0488\x03\x02\x02\x02\u0488\u0489\x07\u0124\x02\x02\u0489\u048A" +
		"\x05D#\x02\u048A\u048B\x07\xC0\x02\x02\u048B\u048D\x05\x80A\x02\u048C" +
		"\u048E\x05\xBA^\x02\u048D\u048C\x03\x02\x02\x02\u048E\u048F\x03\x02\x02" +
		"\x02\u048F\u048D\x03\x02\x02\x02\u048F\u0490\x03\x02\x02\x02\u0490\u0492" +
		"\x03\x02\x02\x02\u0491\u011C\x03\x02\x02\x02\u0491\u011D\x03\x02\x02\x02" +
		"\u0491\u011F\x03\x02\x02\x02\u0491\u0124\x03\x02\x02\x02\u0491\u013A\x03" +
		"\x02\x02\x02\u0491\u0144\x03\x02\x02\x02\u0491\u0154\x03\x02\x02\x02\u0491" +
		"\u015E\x03\x02\x02\x02\u0491\u0165\x03\x02\x02\x02\u0491\u016C\x03\x02" +
		"\x02\x02\u0491\u0192\x03\x02\x02\x02\u0491\u01B0\x03\x02\x02\x02\u0491" +
		"\u01B7\x03\x02\x02\x02\u0491\u01BF\x03\x02\x02\x02\u0491\u01C6\x03\x02" +
		"\x02\x02\u0491\u01C9\x03\x02\x02\x02\u0491\u01D2\x03\x02\x02\x02\u0491" +
		"\u01DB\x03\x02\x02\x02\u0491\u01E4\x03\x02\x02\x02\u0491\u01EF\x03\x02" +
		"\x02\x02\u0491\u01FF\x03\x02\x02\x02\u0491\u0210\x03\x02\x02\x02\u0491" +
		"\u021F\x03\x02\x02\x02\u0491\u022E\x03\x02\x02\x02\u0491\u023C\x03\x02" +
		"\x02\x02\u0491\u0243\x03\x02\x02\x02\u0491\u024A\x03\x02\x02\x02\u0491" +
		"\u0261\x03\x02\x02\x02\u0491\u0267\x03\x02\x02\x02\u0491\u0284\x03\x02" +
		"\x02\x02\u0491\u0296\x03\x02\x02\x02\u0491\u029A\x03\x02\x02\x02\u0491" +
		"\u02A2\x03\x02\x02\x02\u0491\u02AE\x03\x02\x02\x02\u0491\u02B6\x03\x02" +
		"\x02\x02\u0491\u02BD\x03\x02\x02\x02\u0491\u02C4\x03\x02\x02\x02\u0491" +
		"\u02CB\x03\x02\x02\x02\u0491\u02DA\x03\x02\x02\x02\u0491\u02E0\x03\x02" +
		"\x02\x02\u0491\u02E7\x03\x02\x02\x02\u0491\u02F3\x03\x02\x02\x02\u0491" +
		"\u02FA\x03\x02\x02\x02\u0491\u031A\x03\x02\x02\x02\u0491\u0330\x03\x02" +
		"\x02\x02\u0491\u0350\x03\x02\x02\x02\u0491\u0367\x03\x02\x02\x02\u0491" +
		"\u0379\x03\x02\x02\x02\u0491\u0384\x03\x02\x02\x02\u0491\u038A\x03\x02" +
		"\x02\x02\u0491\u0399\x03\x02\x02\x02\u0491\u039F\x03\x02\x02\x02\u0491" +
		"\u03A3\x03\x02\x02\x02\u0491\u03A7\x03\x02\x02\x02\u0491\u03AB\x03\x02" +
		"\x02\x02\u0491\u03B0\x03\x02\x02\x02\u0491\u03BE\x03\x02\x02\x02\u0491" +
		"\u03CC\x03\x02\x02\x02\u0491\u03D6\x03\x02\x02\x02\u0491\u03E2\x03\x02" +
		"\x02\x02\u0491\u03E6\x03\x02\x02\x02\u0491\u03ED\x03\x02\x02\x02\u0491" +
		"\u03F6\x03\x02\x02\x02\u0491\u03FD\x03\x02\x02\x02\u0491\u03FF\x03\x02" +
		"\x02\x02\u0491\u0401\x03\x02\x02\x02\u0491\u040F\x03\x02\x02\x02\u0491" +
		"\u0419\x03\x02\x02\x02\u0491\u041D\x03\x02\x02\x02\u0491\u0420\x03\x02" +
		"\x02\x02\u0491\u0426\x03\x02\x02\x02\u0491\u0429\x03\x02\x02\x02\u0491" +
		"\u0435\x03\x02\x02\x02\u0491\u0439\x03\x02\x02\x02\u0491\u043D\x03\x02" +
		"\x02\x02\u0491\u0442\x03\x02\x02\x02\u0491\u0445\x03\x02\x02\x02\u0491" +
		"\u0452\x03\x02\x02\x02\u0491\u0460\x03\x02\x02\x02\u0491\u0463\x03\x02" +
		"\x02\x02\u0491\u0466\x03\x02\x02\x02\u0491\u0469\x03\x02\x02\x02\u0491" +
		"\u0470\x03\x02\x02\x02\u0491\u047F\x03\x02\x02\x02\u0492\x0F\x03\x02\x02" +
		"\x02\u0493\u0495\x05\x12\n\x02\u0494\u0493\x03\x02\x02\x02\u0494\u0495" +
		"\x03\x02\x02\x02\u0495\u0496\x03\x02\x02\x02\u0496\u0497\x05\x14\v\x02" +
		"\u0497\x11\x03\x02\x02\x02\u0498\u0499\x07\u0132\x02\x02\u0499\u049E\x05" +
		"\xD8m\x02\u049A\u049B\x07\x06\x02\x02\u049B\u049D\x05\xD8m\x02\u049C\u049A" +
		"\x03\x02\x02\x02\u049D\u04A0\x03\x02\x02\x02\u049E\u049C\x03\x02\x02\x02" +
		"\u049E\u049F\x03\x02\x02\x02\u049F\x13\x03\x02\x02\x02\u04A0\u049E\x03" +
		"\x02\x02\x02\u04A1\u04A3\x05\x16\f\x02\u04A2\u04A1\x03\x02\x02\x02\u04A2" +
		"\u04A3\x03\x02\x02\x02\u04A3\u04A4\x03\x02\x02\x02\u04A4\u04A5\x05&\x14" +
		"\x02\u04A5\x15\x03\x02\x02\x02\u04A6\u04A8\x07\u0132\x02\x02\u04A7\u04A9" +
		"\x07\xDF\x02\x02\u04A8\u04A7\x03\x02\x02\x02\u04A8\u04A9\x03\x02\x02\x02" +
		"\u04A9\u04AA\x03\x02\x02\x02\u04AA\u04AF\x05> \x02\u04AB\u04AC\x07\x06" +
		"\x02\x02\u04AC\u04AE\x05> \x02\u04AD\u04AB\x03\x02\x02\x02\u04AE\u04B1" +
		"\x03\x02\x02\x02\u04AF\u04AD\x03\x02\x02\x02\u04AF\u04B0\x03\x02\x02\x02" +
		"\u04B0\x17\x03\x02\x02\x02\u04B1\u04AF\x03\x02\x02\x02\u04B2\u04B5\x05" +
		"\x1A\x0E\x02\u04B3\u04B5\x05\x1C\x0F\x02\u04B4\u04B2\x03\x02\x02\x02\u04B4" +
		"\u04B3\x03\x02\x02\x02\u04B5\x19\x03\x02\x02\x02\u04B6\u04B7\x05\xF4{" +
		"\x02\u04B7\u04BA\x05\xB0Y\x02\u04B8\u04B9\x07\xB8\x02\x02\u04B9\u04BB" +
		"\x07\xB9\x02\x02\u04BA\u04B8\x03\x02\x02\x02\u04BA\u04BB\x03\x02\x02\x02" +
		"\u04BB\u04BE\x03\x02\x02\x02\u04BC\u04BD\x070\x02\x02\u04BD\u04BF\x05" +
		"\xA0Q\x02\u04BE\u04BC\x03\x02\x02\x02\u04BE\u04BF\x03\x02\x02\x02\u04BF" +
		"\u04C2\x03\x02\x02\x02\u04C0\u04C1\x07\u0132\x02\x02\u04C1\u04C3\x05\x1E" +
		"\x10\x02\u04C2\u04C0\x03\x02\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3" +
		"\x1B\x03\x02\x02\x02\u04C4\u04C5\x07\x9C\x02\x02\u04C5\u04C8\x05\xF4{" +
		"\x02\u04C6\u04C7\t\x05\x02\x02\u04C7\u04C9\x07\xDA\x02\x02\u04C8\u04C6" +
		"\x03\x02\x02\x02\u04C8\u04C9\x03\x02\x02\x02\u04C9\x1D\x03\x02\x02\x02" +
		"\u04CA\u04CB\x07\x04\x02\x02\u04CB\u04CC\x05 \x11\x02\u04CC\u04CD\x07" +
		"\x05\x02\x02\u04CD\x1F\x03\x02\x02\x02\u04CE\u04D3\x05\"\x12\x02\u04CF" +
		"\u04D0\x07\x06\x02\x02\u04D0\u04D2\x05\"\x12\x02\u04D1\u04CF\x03\x02\x02" +
		"\x02\u04D2\u04D5\x03\x02\x02\x02\u04D3\u04D1\x03\x02\x02\x02\u04D3\u04D4" +
		"\x03\x02\x02\x02\u04D4!\x03\x02\x02\x02\u04D5\u04D3\x03\x02\x02\x02\u04D6" +
		"\u04D7\x05\u0102\x82\x02\u04D7\u04D8\x07\u013A\x02\x02\u04D8\u04D9\x05" +
		"$\x13\x02\u04D9#\x03\x02\x02\x02\u04DA\u04DD\x07H\x02\x02\u04DB\u04DD" +
		"\x05\x80A\x02\u04DC\u04DA\x03\x02\x02\x02\u04DC\u04DB\x03\x02\x02\x02" +
		"\u04DD%\x03\x02\x02\x02\u04DE\u04E9\x05,\x17\x02\u04DF\u04E0\x07\xC5\x02" +
		"\x02\u04E0\u04E1\x07&\x02\x02\u04E1\u04E6\x050\x19\x02\u04E2\u04E3\x07" +
		"\x06\x02\x02\u04E3\u04E5\x050\x19\x02\u04E4\u04E2\x03\x02\x02\x02\u04E5" +
		"\u04E8\x03\x02\x02\x02\u04E6\u04E4\x03\x02\x02\x02\u04E6\u04E7\x03\x02" +
		"\x02\x02\u04E7\u04EA\x03\x02\x02\x02\u04E8\u04E6\x03\x02\x02\x02\u04E9" +
		"\u04DF\x03\x02\x02\x02\u04E9\u04EA\x03\x02\x02\x02\u04EA\u04F0\x03\x02" +
		"\x02\x02\u04EB\u04EC\x07\xBE\x02\x02\u04EC\u04EE\x05*\x16\x02\u04ED\u04EF" +
		"\t\x06\x02\x02\u04EE\u04ED\x03\x02\x02\x02\u04EE\u04EF\x03\x02\x02\x02" +
		"\u04EF\u04F1\x03\x02\x02\x02\u04F0\u04EB\x03\x02\x02\x02\u04F0\u04F1\x03" +
		"\x02\x02\x02\u04F1\u04FF\x03\x02\x02\x02\u04F2\u04F3\x07\x9D\x02\x02\u04F3" +
		"\u0500\x05(\x15\x02\u04F4\u04F5\x07d\x02\x02\u04F5\u04F7\t\x07\x02\x02" +
		"\u04F6\u04F8\x05*\x16\x02\u04F7\u04F6\x03\x02\x02\x02\u04F7\u04F8\x03" +
		"\x02\x02\x02\u04F8\u04F9\x03\x02\x02\x02\u04F9\u04FD\t\x06\x02\x02\u04FA" +
		"\u04FE\x07\xC2\x02\x02\u04FB\u04FC\x07\u0132\x02\x02\u04FC\u04FE\x07\u010C" +
		"\x02\x02\u04FD\u04FA\x03\x02\x02\x02\u04FD\u04FB\x03\x02\x02\x02\u04FE" +
		"\u0500\x03\x02\x02\x02\u04FF\u04F2\x03\x02\x02\x02\u04FF\u04F4\x03\x02" +
		"\x02\x02\u04FF\u0500\x03\x02\x02\x02\u0500\'\x03\x02\x02\x02\u0501\u0504" +
		"\x07\x18\x02\x02\u0502\u0504\x05*\x16\x02\u0503\u0501\x03\x02\x02\x02" +
		"\u0503\u0502\x03\x02\x02\x02\u0504)\x03\x02\x02\x02\u0505\u0506\t\b\x02" +
		"\x02\u0506+\x03\x02\x02\x02\u0507\u0508\b\x17\x01\x02\u0508\u0509\x05" +
		".\x18\x02\u0509\u0518\x03\x02\x02\x02\u050A\u050B\f\x04\x02\x02\u050B" +
		"\u050D\x07\x82\x02\x02\u050C\u050E\x05@!\x02\u050D\u050C\x03\x02\x02\x02" +
		"\u050D\u050E\x03\x02\x02\x02\u050E\u050F\x03\x02\x02\x02\u050F\u0517\x05" +
		",\x17\x05\u0510\u0511\f\x03\x02\x02\u0511\u0513\t\t\x02\x02\u0512\u0514" +
		"\x05@!\x02\u0513\u0512\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514" +
		"\u0515\x03\x02\x02\x02\u0515\u0517\x05,\x17\x04\u0516\u050A\x03\x02\x02" +
		"\x02\u0516\u0510\x03\x02\x02\x02\u0517\u051A\x03\x02\x02\x02\u0518\u0516" +
		"\x03\x02\x02\x02\u0518\u0519\x03\x02\x02\x02\u0519-\x03\x02\x02\x02\u051A" +
		"\u0518\x03\x02\x02\x02\u051B\u052C\x052\x1A\x02\u051C\u051D\x07\u0106" +
		"\x02\x02\u051D\u052C\x05\xF4{\x02\u051E\u051F\x07\u012A\x02\x02\u051F" +
		"\u0524\x05\x80A\x02\u0520\u0521\x07\x06\x02\x02\u0521\u0523\x05\x80A\x02" +
		"\u0522\u0520\x03\x02\x02\x02\u0523\u0526\x03\x02\x02\x02\u0524\u0522\x03" +
		"\x02\x02\x02\u0524\u0525\x03\x02\x02\x02\u0525\u052C\x03\x02\x02\x02\u0526" +
		"\u0524\x03\x02\x02\x02\u0527\u0528\x07\x04\x02\x02\u0528\u0529\x05&\x14" +
		"\x02\u0529\u052A\x07\x05\x02\x02\u052A\u052C\x03\x02\x02\x02\u052B\u051B" +
		"\x03\x02\x02\x02\u052B\u051C\x03\x02\x02\x02\u052B\u051E\x03\x02\x02\x02" +
		"\u052B\u0527\x03\x02\x02\x02\u052C/\x03\x02\x02\x02\u052D\u052F\x05\x80" +
		"A\x02\u052E\u0530\t\n\x02\x02\u052F\u052E\x03\x02\x02\x02\u052F\u0530" +
		"\x03\x02\x02\x02\u0530\u0533\x03\x02\x02\x02\u0531\u0532\x07\xBB\x02\x02" +
		"\u0532\u0534\t\v\x02\x02\u0533\u0531\x03\x02\x02\x02\u0533\u0534\x03\x02" +
		"\x02\x02\u05341\x03\x02\x02\x02\u0535\u0537\x07\xFA\x02\x02\u0536\u0538" +
		"\x05@!\x02\u0537\u0536\x03\x02\x02\x02\u0537\u0538\x03\x02\x02\x02\u0538" +
		"\u0539\x03\x02\x02\x02\u0539\u053E\x05B\"\x02\u053A\u053B\x07\x06\x02" +
		"\x02\u053B\u053D\x05B\"\x02\u053C\u053A\x03\x02\x02\x02\u053D\u0540\x03" +
		"\x02\x02\x02\u053E\u053C\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F" +
		"\u054A\x03\x02\x02\x02\u0540\u053E\x03\x02\x02\x02\u0541\u0542\x07k\x02" +
		"\x02\u0542\u0547\x05D#\x02\u0543\u0544\x07\x06\x02\x02\u0544\u0546\x05" +
		"D#\x02\u0545\u0543\x03\x02\x02\x02\u0546\u0549\x03\x02\x02\x02\u0547\u0545" +
		"\x03\x02\x02\x02\u0547\u0548\x03\x02\x02\x02\u0548\u054B\x03\x02\x02\x02" +
		"\u0549\u0547\x03\x02\x02\x02\u054A\u0541\x03\x02\x02\x02\u054A\u054B\x03" +
		"\x02\x02\x02\u054B\u054E\x03\x02\x02\x02\u054C\u054D\x07\u012F\x02\x02" +
		"\u054D\u054F\x05\x82B\x02\u054E\u054C\x03\x02\x02\x02\u054E\u054F\x03" +
		"\x02\x02\x02\u054F\u0553\x03\x02\x02\x02\u0550\u0551\x07t\x02\x02\u0551" +
		"\u0552\x07&\x02\x02\u0552\u0554\x054\x1B\x02\u0553\u0550\x03\x02\x02\x02" +
		"\u0553\u0554\x03\x02\x02\x02\u0554\u0557\x03\x02\x02\x02\u0555\u0556\x07" +
		"w\x02\x02\u0556\u0558\x05\x82B\x02\u0557\u0555\x03\x02\x02\x02\u0557\u0558" +
		"\x03\x02\x02\x02\u0558\u0562\x03\x02\x02\x02\u0559\u055A\x07\u0131\x02" +
		"\x02\u055A\u055F\x05:\x1E\x02\u055B\u055C\x07\x06\x02\x02\u055C\u055E" +
		"\x05:\x1E\x02\u055D\u055B\x03\x02\x02\x02\u055E\u0561\x03\x02\x02\x02" +
		"\u055F\u055D\x03\x02\x02\x02\u055F\u0560\x03\x02\x02\x02\u0560\u0563\x03" +
		"\x02\x02\x02\u0561\u055F\x03\x02\x02\x02\u0562\u0559\x03\x02\x02\x02\u0562" +
		"\u0563\x03\x02\x02\x02\u05633\x03\x02\x02\x02\u0564\u0566\x05@!\x02\u0565" +
		"\u0564\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566\u0567\x03\x02" +
		"\x02\x02\u0567\u056C\x056\x1C\x02\u0568\u0569\x07\x06\x02\x02\u0569\u056B" +
		"\x056\x1C\x02\u056A\u0568\x03\x02\x02\x02\u056B\u056E\x03\x02\x02\x02" +
		"\u056C\u056A\x03\x02\x02\x02\u056C\u056D\x03\x02\x02\x02\u056D5\x03\x02" +
		"\x02\x02\u056E\u056C\x03\x02\x02\x02\u056F\u0598\x058\x1D\x02\u0570\u0571" +
		"\x07\xF0\x02\x02\u0571\u057A\x07\x04\x02\x02\u0572\u0577\x058\x1D\x02" +
		"\u0573\u0574\x07\x06\x02\x02\u0574\u0576\x058\x1D\x02\u0575\u0573\x03" +
		"\x02\x02\x02\u0576\u0579\x03\x02\x02\x02\u0577\u0575\x03\x02\x02\x02\u0577" +
		"\u0578\x03\x02\x02\x02\u0578\u057B\x03\x02\x02\x02\u0579\u0577\x03\x02" +
		"\x02\x02\u057A\u0572\x03\x02\x02\x02\u057A\u057B\x03\x02\x02\x02\u057B" +
		"\u057C\x03\x02\x02\x02\u057C\u0598\x07\x05\x02\x02\u057D\u057E\x079\x02" +
		"\x02\u057E\u0587\x07\x04\x02\x02\u057F\u0584\x058\x1D\x02\u0580\u0581" +
		"\x07\x06\x02\x02\u0581\u0583\x058\x1D\x02\u0582\u0580\x03\x02\x02\x02" +
		"\u0583\u0586\x03\x02\x02\x02\u0584\u0582\x03\x02\x02\x02\u0584\u0585\x03" +
		"\x02\x02\x02\u0585\u0588\x03\x02\x02\x02\u0586\u0584\x03\x02\x02\x02\u0587" +
		"\u057F\x03\x02\x02\x02\u0587\u0588\x03\x02\x02\x02\u0588\u0589\x03\x02" +
		"\x02\x02\u0589\u0598\x07\x05\x02\x02\u058A\u058B\x07u\x02\x02\u058B\u058C" +
		"\x07\xFE\x02\x02\u058C\u058D\x07\x04\x02\x02\u058D\u0592\x058\x1D\x02" +
		"\u058E\u058F\x07\x06\x02\x02\u058F\u0591\x058\x1D\x02\u0590\u058E\x03" +
		"\x02\x02\x02\u0591\u0594\x03\x02\x02\x02\u0592\u0590\x03\x02\x02\x02\u0592" +
		"\u0593\x03\x02\x02\x02\u0593\u0595\x03\x02\x02\x02\u0594\u0592\x03\x02" +
		"\x02\x02\u0595\u0596\x07\x05\x02\x02\u0596\u0598\x03\x02\x02\x02\u0597" +
		"\u056F\x03\x02\x02\x02\u0597\u0570\x03\x02\x02\x02\u0597\u057D\x03\x02" +
		"\x02\x02\u0597\u058A\x03\x02\x02\x02\u05987\x03\x02\x02\x02\u0599\u05A2" +
		"\x07\x04\x02\x02\u059A\u059F\x05\x80A\x02\u059B\u059C\x07\x06\x02\x02" +
		"\u059C\u059E\x05\x80A\x02\u059D\u059B\x03\x02\x02\x02\u059E\u05A1\x03" +
		"\x02\x02\x02\u059F\u059D\x03\x02\x02\x02\u059F\u05A0\x03\x02\x02\x02\u05A0" +
		"\u05A3\x03\x02\x02\x02\u05A1\u059F\x03\x02\x02\x02\u05A2\u059A\x03\x02" +
		"\x02\x02\u05A2\u05A3\x03\x02\x02\x02\u05A3\u05A4\x03\x02\x02\x02\u05A4" +
		"\u05A7\x07\x05\x02\x02\u05A5\u05A7\x05\x80A\x02\u05A6\u0599\x03\x02\x02" +
		"\x02\u05A6\u05A5\x03\x02\x02\x02\u05A79\x03\x02\x02\x02\u05A8\u05A9\x05" +
		"\u0102\x82\x02\u05A9\u05AA\x07\x1E\x02\x02\u05AA\u05AB\x07\x04\x02\x02" +
		"\u05AB\u05AC\x05<\x1F\x02\u05AC\u05AD\x07\x05\x02\x02\u05AD;\x03\x02\x02" +
		"\x02\u05AE\u05B0\x05\u0102\x82\x02\u05AF\u05AE\x03\x02\x02\x02\u05AF\u05B0" +
		"\x03\x02\x02\x02\u05B0\u05BB\x03\x02\x02\x02\u05B1\u05B2\x07\xCB\x02\x02" +
		"\u05B2\u05B3\x07&\x02\x02\u05B3\u05B8\x05\x80A\x02\u05B4\u05B5\x07\x06" +
		"\x02\x02\u05B5\u05B7\x05\x80A\x02\u05B6\u05B4\x03\x02\x02\x02\u05B7\u05BA" +
		"\x03\x02\x02\x02\u05B8\u05B6\x03\x02\x02\x02\u05B8\u05B9\x03\x02\x02\x02" +
		"\u05B9\u05BC\x03\x02\x02\x02\u05BA\u05B8\x03\x02\x02\x02\u05BB\u05B1\x03" +
		"\x02\x02\x02\u05BB\u05BC\x03\x02\x02\x02\u05BC\u05C7\x03\x02\x02\x02\u05BD" +
		"\u05BE\x07\xC5\x02\x02\u05BE\u05BF\x07&\x02\x02\u05BF\u05C4\x050\x19\x02" +
		"\u05C0\u05C1\x07\x06\x02\x02\u05C1\u05C3\x050\x19\x02\u05C2\u05C0\x03" +
		"\x02\x02\x02\u05C3\u05C6\x03\x02\x02\x02\u05C4\u05C2\x03\x02\x02\x02\u05C4" +
		"\u05C5\x03\x02\x02\x02\u05C5\u05C8\x03\x02\x02\x02\u05C6\u05C4\x03\x02" +
		"\x02\x02\u05C7\u05BD\x03\x02\x02\x02\u05C7\u05C8\x03\x02\x02\x02\u05C8" +
		"\u05CA\x03\x02\x02\x02\u05C9\u05CB\x05\xBE`\x02\u05CA\u05C9\x03\x02\x02" +
		"\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB=\x03\x02\x02\x02\u05CC\u05CE\x05" +
		"\u0102\x82\x02\u05CD\u05CF\x05d3\x02\u05CE\u05CD\x03\x02\x02\x02\u05CE" +
		"\u05CF\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D1\x07\x1E" +
		"\x02\x02\u05D1\u05D2\x07\x04\x02\x02\u05D2\u05D3\x05\x14\v\x02\u05D3\u05D4" +
		"\x07\x05\x02\x02\u05D4?\x03\x02\x02\x02\u05D5\u05D6\t\f\x02\x02\u05D6" +
		"A\x03\x02\x02\x02\u05D7\u05DC\x05\x80A\x02\u05D8\u05DA\x07\x1E\x02\x02" +
		"\u05D9\u05D8\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DB\x03" +
		"\x02\x02\x02\u05DB\u05DD\x05\u0102\x82\x02\u05DC\u05D9\x03\x02\x02\x02" +
		"\u05DC\u05DD\x03\x02\x02\x02\u05DD\u05E7\x03\x02\x02\x02\u05DE\u05DF\x05" +
		"\x88E\x02\u05DF\u05E0\x07\x03\x02\x02\u05E0\u05E3\x07\u0142\x02\x02\u05E1" +
		"\u05E2\x07\x1E\x02\x02\u05E2\u05E4\x05d3\x02\u05E3\u05E1\x03\x02\x02\x02" +
		"\u05E3\u05E4\x03\x02\x02\x02\u05E4\u05E7\x03\x02\x02\x02\u05E5\u05E7\x07" +
		"\u0142\x02\x02\u05E6\u05D7\x03\x02\x02\x02\u05E6\u05DE\x03\x02\x02\x02" +
		"\u05E6\u05E5\x03\x02\x02\x02\u05E7C\x03\x02\x02\x02\u05E8\u05E9\b#\x01" +
		"\x02\u05E9\u05EA\x05J&\x02\u05EA\u05FD\x03\x02\x02\x02\u05EB\u05F9\f\x04" +
		"\x02\x02\u05EC\u05ED\x078\x02\x02\u05ED\u05EE\x07\x8A\x02\x02\u05EE\u05FA" +
		"\x05J&\x02\u05EF\u05F0\x05F$\x02\u05F0\u05F1\x07\x8A\x02\x02\u05F1\u05F2" +
		"\x05D#\x02\u05F2\u05F3\x05H%\x02\u05F3\u05FA\x03\x02\x02\x02\u05F4\u05F5" +
		"\x07\xAE\x02\x02\u05F5\u05F6\x05F$\x02\u05F6\u05F7\x07\x8A\x02\x02\u05F7" +
		"\u05F8\x05J&\x02\u05F8\u05FA\x03\x02\x02\x02\u05F9\u05EC\x03\x02\x02\x02" +
		"\u05F9\u05EF\x03\x02\x02\x02\u05F9\u05F4\x03\x02\x02\x02\u05FA\u05FC\x03" +
		"\x02\x02\x02\u05FB\u05EB\x03\x02\x02\x02\u05FC\u05FF\x03\x02\x02\x02\u05FD" +
		"\u05FB\x03\x02\x02\x02\u05FD\u05FE\x03\x02\x02\x02\u05FEE\x03\x02\x02" +
		"\x02\u05FF\u05FD\x03\x02\x02\x02\u0600\u0602\x07\x7F\x02\x02\u0601\u0600" +
		"\x03\x02\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0610\x03\x02\x02\x02" +
		"\u0603\u0605\x07\x9A\x02\x02\u0604\u0606\x07\xC7\x02\x02\u0605\u0604\x03" +
		"\x02\x02\x02\u0605\u0606\x03\x02\x02\x02\u0606\u0610\x03\x02\x02\x02\u0607" +
		"\u0609\x07\xEC\x02\x02\u0608\u060A\x07\xC7\x02\x02\u0609\u0608\x03\x02" +
		"\x02\x02\u0609\u060A\x03\x02\x02\x02\u060A\u0610\x03\x02\x02\x02\u060B" +
		"\u060D\x07l\x02\x02\u060C\u060E\x07\xC7\x02\x02\u060D\u060C\x03\x02\x02" +
		"\x02\u060D\u060E\x03\x02\x02\x02\u060E\u0610\x03\x02\x02\x02\u060F\u0601" +
		"\x03\x02\x02\x02\u060F\u0603\x03\x02\x02\x02\u060F\u0607\x03\x02\x02\x02" +
		"\u060F\u060B\x03\x02\x02\x02\u0610G\x03\x02\x02\x02\u0611\u0612\x07\xC0" +
		"\x02\x02\u0612\u0620\x05\x82B\x02\u0613\u0614\x07\u0124\x02\x02\u0614" +
		"\u0615\x07\x04\x02\x02\u0615\u061A\x05\u0102\x82\x02\u0616\u0617\x07\x06" +
		"\x02\x02\u0617\u0619\x05\u0102\x82\x02\u0618\u0616\x03\x02\x02\x02\u0619" +
		"\u061C\x03\x02\x02\x02\u061A\u0618\x03\x02\x02\x02\u061A\u061B\x03\x02" +
		"\x02\x02\u061B\u061D\x03\x02\x02\x02\u061C\u061A\x03\x02\x02\x02\u061D" +
		"\u061E\x07\x05\x02\x02\u061E\u0620\x03\x02\x02\x02\u061F\u0611\x03\x02" +
		"\x02\x02\u061F\u0613\x03\x02\x02\x02\u0620I\x03\x02\x02\x02\u0621\u0628" +
		"\x05T+\x02\u0622\u0623\x07\u0108\x02\x02\u0623\u0624\x05L\'\x02\u0624" +
		"\u0625\x07\x04\x02\x02\u0625\u0626\x05\x80A\x02\u0626\u0627\x07\x05\x02" +
		"\x02\u0627\u0629\x03\x02\x02\x02\u0628\u0622\x03\x02\x02\x02\u0628\u0629" +
		"\x03\x02\x02\x02\u0629K\x03\x02\x02\x02\u062A\u062B\t\r\x02\x02\u062B" +
		"M\x03\x02\x02\x02\u062C\u062D\t\x0E\x02\x02\u062DO\x03\x02\x02\x02\u062E" +
		"\u0635\x07[\x02\x02\u062F\u0631\x07\u0114\x02\x02\u0630\u0632\x05\xA0" +
		"Q\x02\u0631\u0630\x03\x02\x02\x02\u0631\u0632\x03\x02\x02\x02\u0632\u0633" +
		"\x03\x02\x02\x02\u0633\u0635\x05R*\x02\u0634\u062E\x03\x02\x02\x02\u0634" +
		"\u062F\x03\x02\x02\x02\u0635Q\x03\x02\x02\x02\u0636\u0637\x07\u0132\x02" +
		"\x02\u0637\u063B\x075\x02\x02\u0638\u0639\x07\u0134\x02\x02\u0639\u063B" +
		"\x075\x02\x02\u063A\u0636\x03\x02\x02\x02\u063A\u0638\x03\x02\x02\x02" +
		"\u063BS\x03\x02\x02\x02\u063C\u068F\x05b2\x02\u063D\u063E\x07\xA8\x02" +
		"\x02\u063E\u0649\x07\x04\x02\x02\u063F\u0640\x07\xCB\x02\x02\u0640\u0641" +
		"\x07&\x02\x02\u0641\u0646\x05\x80A\x02\u0642\u0643\x07\x06\x02\x02\u0643" +
		"\u0645\x05\x80A\x02\u0644\u0642\x03\x02\x02\x02\u0645\u0648\x03\x02\x02" +
		"\x02\u0646\u0644\x03\x02\x02\x02\u0646\u0647\x03\x02\x02\x02\u0647\u064A" +
		"\x03\x02\x02\x02\u0648\u0646\x03\x02\x02\x02\u0649\u063F\x03\x02\x02\x02" +
		"\u0649\u064A\x03\x02\x02\x02\u064A\u0655\x03\x02\x02\x02\u064B\u064C\x07" +
		"\xC5\x02\x02\u064C\u064D\x07&\x02\x02\u064D\u0652\x050\x19\x02\u064E\u064F" +
		"\x07\x06\x02\x02\u064F\u0651\x050\x19\x02\u0650\u064E\x03\x02\x02\x02" +
		"\u0651\u0654\x03\x02\x02\x02\u0652\u0650\x03\x02\x02\x02\u0652\u0653\x03" +
		"\x02\x02\x02\u0653\u0656\x03\x02\x02\x02\u0654\u0652\x03\x02\x02\x02\u0655" +
		"\u064B\x03\x02\x02\x02\u0655\u0656\x03\x02\x02\x02\u0656\u0660\x03\x02" +
		"\x02\x02\u0657\u0658\x07\xAA\x02\x02\u0658\u065D\x05V,\x02\u0659\u065A" +
		"\x07\x06\x02\x02\u065A\u065C\x05V,\x02\u065B\u0659\x03\x02\x02\x02\u065C" +
		"\u065F\x03\x02\x02\x02\u065D\u065B\x03\x02\x02\x02\u065D\u065E\x03\x02" +
		"\x02\x02\u065E\u0661\x03\x02\x02\x02\u065F\u065D\x03\x02\x02\x02\u0660" +
		"\u0657\x03\x02\x02\x02\u0660\u0661\x03\x02\x02\x02\u0661\u0663\x03\x02" +
		"\x02\x02\u0662\u0664\x05X-\x02\u0663\u0662\x03\x02\x02\x02\u0663\u0664" +
		"\x03\x02\x02\x02\u0664\u0668\x03\x02\x02\x02\u0665\u0666\x07\x17\x02\x02" +
		"\u0666\u0667\x07\xA5\x02\x02\u0667\u0669\x05\\/\x02\u0668\u0665\x03\x02" +
		"\x02\x02\u0668\u0669\x03\x02\x02\x02\u0669\u066B\x03\x02\x02\x02\u066A" +
		"\u066C\t\x0F\x02\x02\u066B\u066A\x03\x02\x02\x02\u066B\u066C\x03\x02\x02" +
		"\x02\u066C\u066D\x03\x02\x02\x02\u066D\u066E\x07\xD0\x02\x02\u066E\u066F" +
		"\x07\x04\x02\x02\u066F\u0670\x05\xC4c\x02\u0670\u067A\x07\x05\x02\x02" +
		"\u0671\u0672\x07\u0103\x02\x02\u0672\u0677\x05^0\x02\u0673\u0674\x07\x06" +
		"\x02\x02\u0674\u0676\x05^0\x02\u0675\u0673\x03\x02\x02\x02\u0676\u0679" +
		"\x03\x02\x02\x02\u0677\u0675\x03\x02\x02\x02\u0677\u0678\x03\x02\x02\x02" +
		"\u0678\u067B\x03\x02\x02\x02\u0679\u0677\x03\x02\x02\x02\u067A\u0671\x03" +
		"\x02\x02\x02\u067A\u067B\x03\x02\x02\x02\u067B\u067C\x03\x02\x02\x02\u067C" +
		"\u067D\x07I\x02\x02\u067D\u0682\x05`1\x02\u067E\u067F\x07\x06\x02\x02" +
		"\u067F\u0681\x05`1\x02\u0680\u067E\x03\x02\x02\x02\u0681\u0684\x03\x02" +
		"\x02\x02\u0682\u0680\x03\x02\x02\x02\u0682\u0683\x03\x02\x02\x02\u0683" +
		"\u0685\x03\x02\x02\x02\u0684\u0682\x03\x02\x02\x02\u0685\u068D\x07\x05" +
		"\x02\x02\u0686\u0688\x07\x1E\x02\x02\u0687\u0686\x03\x02\x02\x02\u0687" +
		"\u0688\x03\x02\x02\x02\u0688\u0689\x03\x02\x02\x02\u0689\u068B\x05\u0102" +
		"\x82\x02\u068A\u068C\x05d3\x02\u068B\u068A\x03\x02\x02\x02\u068B\u068C" +
		"\x03\x02\x02\x02\u068C\u068E\x03\x02\x02\x02\u068D\u0687\x03\x02\x02\x02" +
		"\u068D\u068E\x03\x02\x02\x02\u068E\u0690\x03\x02\x02\x02\u068F\u063D\x03" +
		"\x02\x02\x02\u068F\u0690\x03\x02\x02\x02\u0690U\x03\x02\x02\x02\u0691" +
		"\u0692\x05\x80A\x02\u0692\u0693\x07\x1E\x02\x02\u0693\u0694\x05\u0102" +
		"\x82\x02\u0694W\x03\x02\x02\x02\u0695\u0696\x07\xC1\x02\x02\u0696\u0697" +
		"\x07\xF1\x02\x02\u0697\u0698\x07\xD1\x02\x02\u0698\u06A1\x07\xA5\x02\x02" +
		"\u0699\u069A\x07\x18\x02\x02\u069A\u069B\x07\xF2\x02\x02\u069B\u069C\x07" +
		"\xD1\x02\x02\u069C\u069E\x07\xA5\x02\x02\u069D\u069F\x05Z.\x02\u069E\u069D" +
		"\x03\x02\x02\x02\u069E\u069F\x03\x02\x02\x02\u069F\u06A1\x03\x02\x02\x02" +
		"\u06A0\u0695\x03\x02\x02\x02\u06A0\u0699\x03\x02\x02\x02\u06A1Y\x03\x02" +
		"\x02\x02\u06A2\u06A3\x07\xFF\x02\x02\u06A3\u06A4\x07W\x02\x02\u06A4\u06AC" +
		"\x07\xA7\x02\x02\u06A5\u06A6\x07\xBF\x02\x02\u06A6\u06A7\x07W\x02\x02" +
		"\u06A7\u06AC\x07\xA7\x02\x02\u06A8\u06A9\x07\u0132\x02\x02\u06A9\u06AA" +
		"\x07\u011E\x02\x02\u06AA\u06AC\x07\xF2\x02\x02\u06AB\u06A2\x03\x02\x02" +
		"\x02\u06AB\u06A5\x03\x02\x02\x02\u06AB\u06A8\x03\x02\x02\x02\u06AC[\x03" +
		"\x02\x02\x02\u06AD\u06AE\x07\x07\x02\x02\u06AE\u06AF\x07\u010F\x02\x02" +
		"\u06AF\u06B0\x07\xB0\x02\x02\u06B0\u06C1\x07\xF1\x02\x02\u06B1\u06B2\x07" +
		"\x07\x02\x02\u06B2\u06B3\x07\xCE\x02\x02\u06B3\u06B4\x07\x96\x02\x02\u06B4" +
		"\u06C1\x07\xF1\x02\x02\u06B5\u06B6\x07\x07\x02\x02\u06B6\u06B7\x07\u010F" +
		"\x02\x02\u06B7\u06B8\x07g\x02\x02\u06B8\u06C1\x05\u0102\x82\x02\u06B9" +
		"\u06BA\x07\x07\x02\x02\u06BA\u06BB\x07\u010F\x02\x02\u06BB\u06BC\x07\x96" +
		"\x02\x02\u06BC\u06C1\x05\u0102\x82\x02\u06BD\u06BE\x07\x07\x02\x02\u06BE" +
		"\u06BF\x07\u010F\x02\x02\u06BF\u06C1\x05\u0102\x82\x02\u06C0\u06AD\x03" +
		"\x02\x02\x02\u06C0\u06B1\x03\x02\x02\x02\u06C0\u06B5\x03\x02\x02\x02\u06C0" +
		"\u06B9\x03\x02\x02\x02\u06C0\u06BD\x03\x02\x02\x02\u06C1]\x03\x02\x02" +
		"\x02\u06C2\u06C3\x05\u0102\x82\x02\u06C3\u06C4\x07\u013A\x02\x02\u06C4" +
		"\u06C5\x07\x04\x02\x02\u06C5\u06CA\x05\u0102\x82\x02\u06C6\u06C7\x07\x06" +
		"\x02\x02\u06C7\u06C9\x05\u0102\x82\x02\u06C8\u06C6\x03\x02\x02\x02\u06C9" +
		"\u06CC\x03\x02\x02\x02\u06CA\u06C8\x03\x02\x02\x02\u06CA\u06CB\x03\x02" +
		"\x02\x02\u06CB\u06CD\x03\x02\x02\x02\u06CC\u06CA\x03\x02\x02\x02\u06CD" +
		"\u06CE\x07\x05\x02\x02\u06CE_\x03\x02\x02\x02\u06CF\u06D0\x05\u0102\x82" +
		"\x02\u06D0\u06D1\x07\x1E\x02\x02\u06D1\u06D2\x05\x80A\x02\u06D2a\x03\x02" +
		"\x02\x02\u06D3\u06DB\x05f4\x02\u06D4\u06D6\x07\x1E\x02\x02\u06D5\u06D4" +
		"\x03\x02\x02\x02\u06D5\u06D6\x03\x02\x02\x02\u06D6\u06D7\x03\x02\x02\x02" +
		"\u06D7\u06D9\x05\u0102\x82\x02\u06D8\u06DA\x05d3\x02\u06D9\u06D8\x03\x02" +
		"\x02\x02\u06D9\u06DA\x03\x02\x02\x02\u06DA\u06DC\x03\x02\x02\x02\u06DB" +
		"\u06D5\x03\x02\x02\x02\u06DB\u06DC\x03\x02\x02\x02\u06DCc\x03\x02\x02" +
		"\x02\u06DD\u06DE\x07\x04\x02\x02\u06DE\u06E3\x05\u0102\x82\x02\u06DF\u06E0" +
		"\x07\x06\x02\x02\u06E0\u06E2\x05\u0102\x82\x02\u06E1\u06DF\x03\x02\x02" +
		"\x02\u06E2\u06E5\x03\x02\x02\x02\u06E3\u06E1\x03\x02\x02\x02\u06E3\u06E4" +
		"\x03\x02\x02\x02\u06E4\u06E6\x03\x02\x02\x02\u06E5\u06E3\x03\x02\x02\x02" +
		"\u06E6\u06E7\x07\x05\x02\x02\u06E7e\x03\x02\x02\x02\u06E8\u06EA\x05\xF4" +
		"{\x02\u06E9\u06EB\x05\xF6|\x02\u06EA\u06E9\x03\x02\x02\x02\u06EA\u06EB" +
		"\x03\x02\x02\x02\u06EB\u0730\x03\x02\x02\x02\u06EC\u06ED\x07\x04\x02\x02" +
		"\u06ED\u06EE\x05\x14\v\x02\u06EE\u06EF\x07\x05\x02\x02\u06EF\u0730\x03" +
		"\x02\x02\x02\u06F0\u06F1\x07\u011F\x02\x02\u06F1\u06F2\x07\x04\x02\x02" +
		"\u06F2\u06F7\x05\x80A\x02\u06F3\u06F4\x07\x06\x02\x02\u06F4\u06F6\x05" +
		"\x80A\x02\u06F5\u06F3\x03\x02\x02\x02\u06F6\u06F9\x03\x02\x02\x02\u06F7" +
		"\u06F5\x03\x02\x02\x02\u06F7\u06F8\x03\x02\x02\x02\u06F8\u06FA\x03\x02" +
		"\x02\x02\u06F9\u06F7\x03\x02\x02\x02\u06FA\u06FD\x07\x05\x02\x02\u06FB" +
		"\u06FC\x07\u0132\x02\x02\u06FC\u06FE\x07\xC6\x02\x02\u06FD\u06FB\x03\x02" +
		"\x02\x02\u06FD\u06FE\x03\x02\x02\x02\u06FE\u0730\x03\x02\x02\x02\u06FF" +
		"\u0700\x07\x97\x02\x02\u0700\u0701\x07\x04\x02\x02\u0701\u0702\x05\x14" +
		"\v\x02\u0702\u0703\x07\x05\x02\x02\u0703";
	private static readonly _serializedATNSegment4: string =
		"\u0730\x03\x02\x02\x02\u0704\u0705\x07\u0106\x02\x02\u0705\u0706\x07\x04" +
		"\x02\x02\u0706\u0707\x05r:\x02\u0707\u0708\x07\x05\x02\x02\u0708\u0730" +
		"\x03\x02\x02\x02\u0709\u070A\x07\x04\x02\x02\u070A\u070B\x05D#\x02\u070B" +
		"\u070C\x07\x05\x02\x02\u070C\u0730\x03\x02\x02\x02\u070D\u070E\x07\x90" +
		"\x02\x02\u070E\u070F\x07\x04\x02\x02\u070F\u0710\x05\x8AF\x02\u0710\u0711" +
		"\x07/\x02\x02\u0711\u0712\x07\x04\x02\x02\u0712\u0717\x05h5\x02\u0713" +
		"\u0714\x07\x06\x02\x02\u0714\u0716\x05h5\x02\u0715\u0713\x03\x02\x02\x02" +
		"\u0716\u0719\x03\x02\x02\x02\u0717\u0715\x03\x02\x02\x02\u0717\u0718\x03" +
		"\x02\x02\x02\u0718\u071A\x03\x02\x02\x02\u0719\u0717\x03\x02\x02\x02\u071A" +
		"\u0726\x07\x05\x02\x02\u071B\u071C\x07\xD4\x02\x02\u071C\u071D\x07\x04" +
		"\x02\x02\u071D\u071E\x05j6\x02\u071E\u071F\x07\x05\x02\x02\u071F\u0727" +
		"\x03\x02\x02\x02\u0720\u0721\x07\xD4\x02\x02\u0721\u0722\x07H\x02\x02" +
		"\u0722\u0723\x07\x04\x02\x02\u0723\u0724\x05p9\x02\u0724\u0725\x07\x05" +
		"\x02\x02\u0725\u0727\x03\x02\x02\x02\u0726\u071B\x03\x02\x02\x02\u0726" +
		"\u0720\x03\x02\x02\x02\u0726\u0727\x03\x02\x02\x02\u0727\u072B\x03\x02" +
		"\x02\x02\u0728\u0729\t\x10\x02\x02\u0729\u072A\x07\xC0\x02\x02\u072A\u072C" +
		"\x07[\x02\x02\u072B\u0728\x03\x02\x02\x02\u072B\u072C\x03\x02\x02\x02" +
		"\u072C\u072D\x03\x02\x02\x02\u072D\u072E\x07\x05\x02\x02\u072E\u0730\x03" +
		"\x02\x02\x02\u072F\u06E8\x03\x02\x02\x02\u072F\u06EC\x03\x02\x02\x02\u072F" +
		"\u06F0\x03\x02\x02\x02\u072F\u06FF\x03\x02\x02\x02\u072F\u0704\x03\x02" +
		"\x02\x02\u072F\u0709\x03\x02\x02\x02\u072F\u070D\x03\x02\x02\x02\u0730" +
		"g\x03\x02\x02\x02\u0731\u0732\x05\u0102\x82\x02\u0732\u0733\x07i\x02\x02" +
		"\u0733\u0734\x07\xC6\x02\x02\u0734\u077F\x03\x02\x02\x02\u0735\u0736\x05" +
		"\u0102\x82\x02\u0736\u0739\x05\xB0Y\x02\u0737\u0738\x07\xCF\x02\x02\u0738" +
		"\u073A\x05\xA0Q\x02\u0739\u0737\x03\x02\x02\x02\u0739\u073A\x03\x02\x02" +
		"\x02\u073A\u073F\x03\x02\x02\x02\u073B\u073C\x05\x94K\x02\u073C\u073D" +
		"\x07\xC0\x02\x02\u073D\u073E\x07W\x02\x02\u073E\u0740\x03\x02\x02\x02" +
		"\u073F\u073B\x03\x02\x02\x02\u073F\u0740\x03\x02\x02\x02\u0740\u0745\x03" +
		"\x02\x02\x02\u0741\u0742\x05\x94K\x02\u0742\u0743\x07\xC0\x02\x02\u0743" +
		"\u0744\x07[\x02\x02\u0744\u0746\x03\x02\x02\x02\u0745\u0741\x03\x02\x02" +
		"\x02\u0745\u0746\x03\x02\x02\x02\u0746\u077F\x03\x02\x02\x02\u0747\u0748" +
		"\x05\u0102\x82\x02\u0748\u0749\x05\xB0Y\x02\u0749\u074A\x07j\x02\x02\u074A" +
		"\u074D\x05\x8EH\x02\u074B\u074C\x07\xCF\x02\x02\u074C\u074E\x05\xA0Q\x02" +
		"\u074D\u074B\x03\x02\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E\u0752\x03" +
		"\x02\x02\x02\u074F\u0750\x05\x96L\x02\u0750\u0751\x07\u0136\x02\x02\u0751" +
		"\u0753\x03\x02\x02\x02\u0752\u074F\x03\x02\x02\x02\u0752\u0753\x03\x02" +
		"\x02\x02\u0753\u075B\x03\x02\x02\x02\u0754\u0755\t\x11\x02\x02\u0755\u0759" +
		"\x07\xDC\x02\x02\u0756\u0757\x07\xC0\x02\x02\u0757\u0758\x07\xF4\x02\x02" +
		"\u0758\u075A\x07\u010A\x02\x02\u0759\u0756\x03\x02\x02\x02\u0759\u075A" +
		"\x03\x02\x02\x02\u075A\u075C\x03\x02\x02\x02\u075B\u0754\x03\x02\x02\x02" +
		"\u075B\u075C\x03\x02\x02\x02\u075C\u0761\x03\x02\x02\x02\u075D\u075E\x05" +
		"\x98M\x02\u075E\u075F\x07\xC0\x02\x02\u075F\u0760\x07W\x02\x02\u0760\u0762" +
		"\x03\x02\x02\x02\u0761\u075D\x03\x02\x02\x02\u0761\u0762\x03\x02\x02\x02" +
		"\u0762\u0767\x03\x02\x02\x02\u0763\u0764\x05\x98M\x02\u0764\u0765\x07" +
		"\xC0\x02\x02\u0765\u0766\x07[\x02\x02\u0766\u0768\x03\x02\x02\x02\u0767" +
		"\u0763\x03\x02\x02\x02\u0767\u0768\x03\x02\x02\x02\u0768\u077F\x03\x02" +
		"\x02\x02\u0769\u076B\x07\xAF\x02\x02\u076A\u076C\x07\xCF\x02\x02\u076B" +
		"\u076A\x03\x02\x02\x02\u076B\u076C\x03\x02\x02\x02\u076C\u076D\x03\x02" +
		"\x02\x02\u076D\u0770\x05\xA0Q\x02\u076E\u076F\x07\x1E\x02\x02\u076F\u0771" +
		"\x05\u0102\x82\x02\u0770\u076E\x03\x02\x02\x02\u0770\u0771\x03\x02\x02" +
		"\x02\u0771\u0772\x03\x02\x02\x02\u0772\u0773\x07/\x02\x02\u0773\u0774" +
		"\x07\x04\x02\x02\u0774\u0779\x05h5\x02\u0775\u0776\x07\x06\x02\x02\u0776" +
		"\u0778\x05h5\x02\u0777\u0775\x03\x02\x02\x02\u0778\u077B\x03\x02\x02\x02" +
		"\u0779\u0777\x03\x02\x02\x02\u0779\u077A\x03\x02\x02\x02\u077A\u077C\x03" +
		"\x02\x02\x02\u077B\u0779\x03\x02\x02\x02\u077C\u077D\x07\x05\x02\x02\u077D" +
		"\u077F\x03\x02\x02\x02\u077E\u0731\x03\x02\x02\x02\u077E\u0735\x03\x02" +
		"\x02\x02\u077E\u0747\x03\x02\x02\x02\u077E\u0769\x03\x02\x02\x02\u077F" +
		"i\x03\x02\x02\x02\u0780\u079A\x05l7\x02\u0781\u0782\x05l7\x02\u0782\u0783" +
		"\t\x12\x02\x02\u0783\u0784\x05n8\x02\u0784\u079A\x03\x02\x02\x02\u0785" +
		"\u0786\x05n8\x02\u0786\u0787\x07\u011B\x02\x02\u0787\u078C\x05n8\x02\u0788" +
		"\u0789\x07\u011B\x02\x02\u0789\u078B\x05n8\x02\u078A\u0788\x03\x02\x02" +
		"\x02\u078B\u078E\x03\x02\x02\x02\u078C\u078A\x03\x02\x02\x02\u078C\u078D" +
		"\x03\x02\x02\x02\u078D\u079A\x03\x02\x02\x02\u078E\u078C\x03\x02\x02\x02" +
		"\u078F\u0790\x05n8\x02\u0790\u0791\x078\x02\x02\u0791\u0796\x05n8\x02" +
		"\u0792\u0793\x078\x02\x02\u0793\u0795\x05n8\x02\u0794\u0792\x03\x02\x02" +
		"\x02\u0795\u0798\x03\x02\x02\x02\u0796\u0794\x03\x02\x02\x02\u0796\u0797" +
		"\x03\x02\x02\x02\u0797\u079A\x03\x02\x02\x02\u0798\u0796\x03\x02\x02\x02" +
		"\u0799\u0780\x03\x02\x02\x02\u0799\u0781\x03\x02\x02\x02\u0799\u0785\x03" +
		"\x02\x02\x02\u0799\u078F\x03\x02\x02\x02\u079Ak\x03\x02\x02\x02\u079B" +
		"\u079C\x05\u0102\x82\x02\u079Cm\x03\x02\x02\x02\u079D\u07A3\x05l7\x02" +
		"\u079E\u079F\x07\x04\x02\x02\u079F\u07A0\x05j6\x02\u07A0\u07A1\x07\x05" +
		"\x02\x02\u07A1\u07A3\x03\x02\x02\x02\u07A2\u079D\x03\x02\x02\x02\u07A2" +
		"\u079E\x03\x02\x02\x02\u07A3o\x03\x02\x02\x02\u07A4\u07A7\t\x12\x02\x02" +
		"\u07A5\u07A6\x07\x06\x02\x02\u07A6\u07A8\t\x13\x02\x02\u07A7\u07A5\x03" +
		"\x02\x02\x02\u07A7\u07A8\x03\x02\x02\x02\u07A8\u07AF\x03\x02\x02\x02\u07A9" +
		"\u07AC\t\x13\x02\x02\u07AA\u07AB\x07\x06\x02\x02\u07AB\u07AD\t\x12\x02" +
		"\x02\u07AC\u07AA\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD\u07AF" +
		"\x03\x02\x02\x02\u07AE\u07A4\x03\x02\x02\x02\u07AE\u07A9\x03\x02\x02\x02" +
		"\u07AFq\x03\x02\x02\x02\u07B0\u07B1\x05\xF4{\x02\u07B1\u07BA\x07\x04\x02" +
		"\x02\u07B2\u07B7\x05t;\x02\u07B3\u07B4\x07\x06\x02\x02\u07B4\u07B6\x05" +
		"t;\x02\u07B5\u07B3\x03\x02\x02\x02\u07B6\u07B9\x03\x02\x02\x02\u07B7\u07B5" +
		"\x03\x02\x02\x02\u07B7\u07B8\x03\x02\x02\x02\u07B8\u07BB\x03\x02\x02\x02" +
		"\u07B9\u07B7\x03\x02\x02\x02\u07BA\u07B2\x03\x02\x02\x02\u07BA\u07BB\x03" +
		"\x02\x02\x02\u07BB\u07C5\x03\x02\x02\x02\u07BC\u07BD\x076\x02\x02\u07BD" +
		"\u07C2\x05~@\x02\u07BE\u07BF\x07\x06\x02\x02\u07BF\u07C1\x05~@\x02\u07C0" +
		"\u07BE\x03\x02\x02\x02\u07C1\u07C4\x03\x02\x02\x02\u07C2\u07C0\x03\x02" +
		"\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07C6\x03\x02\x02\x02\u07C4" +
		"\u07C2\x03\x02\x02\x02\u07C5\u07BC\x03\x02\x02\x02\u07C5\u07C6\x03\x02" +
		"\x02\x02\u07C6\u07C7\x03\x02\x02\x02\u07C7\u07C8\x07\x05\x02\x02\u07C8" +
		"s\x03\x02\x02\x02\u07C9\u07CA\x05\u0102\x82\x02\u07CA\u07CB\x07\b\x02" +
		"\x02\u07CB\u07CD\x03\x02\x02\x02\u07CC\u07C9\x03\x02\x02\x02\u07CC\u07CD" +
		"\x03\x02\x02\x02\u07CD\u07D1\x03\x02\x02\x02\u07CE\u07D2\x05v<\x02\u07CF" +
		"\u07D2\x05z>\x02\u07D0\u07D2\x05\x80A\x02\u07D1\u07CE\x03\x02\x02\x02" +
		"\u07D1\u07CF\x03\x02\x02\x02\u07D1\u07D0\x03\x02\x02\x02\u07D2u\x03\x02" +
		"\x02\x02\u07D3\u07E5\x05x=\x02\u07D4\u07D5\x07\xCB\x02\x02\u07D5\u07E3" +
		"\x07&\x02\x02\u07D6\u07DF\x07\x04\x02\x02\u07D7\u07DC\x05\x80A\x02\u07D8" +
		"\u07D9\x07\x06\x02\x02\u07D9\u07DB\x05\x80A\x02\u07DA\u07D8\x03\x02\x02" +
		"\x02\u07DB\u07DE\x03\x02\x02\x02\u07DC\u07DA\x03\x02\x02\x02\u07DC\u07DD" +
		"\x03\x02\x02\x02\u07DD\u07E0\x03\x02\x02\x02\u07DE\u07DC\x03\x02\x02\x02" +
		"\u07DF\u07D7\x03\x02\x02\x02\u07DF\u07E0\x03\x02\x02\x02\u07E0\u07E1\x03" +
		"\x02\x02\x02\u07E1\u07E4\x07\x05\x02\x02\u07E2\u07E4\x05\x80A\x02\u07E3" +
		"\u07D6\x03\x02\x02\x02\u07E3\u07E2\x03\x02\x02\x02\u07E4\u07E6\x03\x02" +
		"\x02\x02\u07E5\u07D4\x03\x02\x02\x02\u07E5\u07E6\x03\x02\x02\x02\u07E6" +
		"\u07ED\x03\x02\x02\x02\u07E7\u07E8\x07\xDB\x02\x02\u07E8\u07E9\x07\u012E" +
		"\x02\x02\u07E9\u07EE\x07W\x02\x02\u07EA\u07EB\x07\x92\x02\x02\u07EB\u07EC" +
		"\x07\u012E\x02\x02\u07EC\u07EE\x07W\x02\x02\u07ED\u07E7\x03\x02\x02\x02" +
		"\u07ED\u07EA\x03\x02\x02\x02\u07ED\u07EE\x03\x02\x02\x02\u07EE\u07FF\x03" +
		"\x02\x02\x02\u07EF\u07F0\x07\xC5\x02\x02\u07F0\u07FD\x07&\x02\x02\u07F1" +
		"\u07F2\x07\x04\x02\x02\u07F2\u07F7\x050\x19\x02\u07F3\u07F4\x07\x06\x02" +
		"\x02\u07F4\u07F6\x050\x19\x02\u07F5\u07F3\x03\x02\x02\x02\u07F6\u07F9" +
		"\x03\x02\x02\x02\u07F7\u07F5\x03\x02\x02\x02\u07F7\u07F8\x03\x02\x02\x02" +
		"\u07F8\u07FA\x03\x02\x02\x02\u07F9\u07F7\x03\x02\x02\x02\u07FA\u07FB\x07" +
		"\x05\x02\x02\u07FB\u07FE\x03\x02\x02\x02\u07FC\u07FE\x050\x19\x02\u07FD" +
		"\u07F1\x03\x02\x02\x02\u07FD\u07FC\x03\x02\x02\x02\u07FE\u0800\x03\x02" +
		"\x02\x02\u07FF\u07EF\x03\x02\x02\x02\u07FF\u0800\x03\x02\x02\x02\u0800" +
		"w\x03\x02\x02\x02\u0801\u0802\x07\u0106\x02\x02\u0802\u0803\x07\x04\x02" +
		"\x02\u0803\u0804\x05\xF4{\x02\u0804\u080C\x07\x05\x02\x02\u0805\u0807" +
		"\x07\x1E\x02\x02\u0806\u0805\x03\x02\x02\x02\u0806\u0807\x03\x02\x02\x02" +
		"\u0807\u0808\x03\x02\x02\x02\u0808\u080A\x05\u0102\x82\x02\u0809\u080B" +
		"\x05d3\x02\u080A\u0809\x03\x02\x02\x02\u080A\u080B\x03\x02\x02\x02\u080B" +
		"\u080D\x03\x02\x02\x02\u080C\u0806\x03\x02\x02\x02\u080C\u080D\x03\x02" +
		"\x02\x02\u080D\u081C\x03\x02\x02\x02\u080E\u080F\x07\u0106\x02\x02\u080F" +
		"\u0810\x07\x04\x02\x02\u0810\u0811\x05\x14\v\x02\u0811\u0819\x07\x05\x02" +
		"\x02\u0812\u0814\x07\x1E\x02\x02\u0813\u0812\x03\x02\x02\x02\u0813\u0814" +
		"\x03\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0817\x05\u0102\x82" +
		"\x02\u0816\u0818\x05d3\x02\u0817\u0816\x03\x02\x02\x02\u0817\u0818\x03" +
		"\x02\x02\x02\u0818\u081A\x03\x02\x02\x02\u0819\u0813\x03\x02\x02\x02\u0819" +
		"\u081A\x03\x02\x02\x02\u081A\u081C\x03\x02\x02\x02\u081B\u0801\x03\x02" +
		"\x02\x02\u081B\u080E\x03\x02\x02\x02\u081Cy\x03\x02\x02\x02\u081D\u081E" +
		"\x07O\x02\x02\u081E\u081F\x07\x04\x02\x02\u081F\u0824\x05|?\x02\u0820" +
		"\u0821\x07\x06\x02\x02\u0821\u0823\x05|?\x02\u0822\u0820\x03\x02\x02\x02" +
		"\u0823\u0826\x03\x02\x02\x02\u0824\u0822\x03\x02\x02\x02\u0824\u0825\x03" +
		"\x02\x02\x02\u0825\u0827\x03\x02\x02\x02\u0826\u0824\x03\x02\x02\x02\u0827" +
		"\u0828\x07\x05\x02\x02\u0828\u0830\x03\x02\x02\x02\u0829\u082A\x07+\x02" +
		"\x02\u082A\u082B\x07\x04\x02\x02\u082B\u082C\x07\xB9\x02\x02\u082C\u082D" +
		"\x07\x1E\x02\x02\u082D\u082E\x07O\x02\x02\u082E\u0830\x07\x05\x02\x02" +
		"\u082F\u081D\x03\x02\x02\x02\u082F\u0829\x03\x02\x02\x02\u0830{\x03\x02" +
		"\x02\x02\u0831\u0833\x05\u0102\x82\x02\u0832\u0834\x05\xB0Y\x02\u0833" +
		"\u0832\x03\x02\x02\x02\u0833\u0834\x03\x02\x02\x02\u0834}\x03\x02\x02" +
		"\x02\u0835\u0836\x07\x04\x02\x02\u0836\u0837\x05\xF4{\x02\u0837\u0838" +
		"\x07\x06\x02\x02\u0838\u083D\x05\xF4{\x02\u0839\u083A\x07\x06\x02\x02" +
		"\u083A\u083C\x05\xF4{\x02\u083B\u0839\x03\x02\x02\x02\u083C\u083F\x03" +
		"\x02\x02\x02\u083D\u083B\x03\x02\x02\x02\u083D\u083E\x03\x02\x02\x02\u083E" +
		"\u0840\x03\x02\x02\x02\u083F\u083D\x03\x02\x02\x02\u0840\u0841\x07\x05" +
		"\x02\x02\u0841\x7F\x03\x02\x02\x02\u0842\u0843\x05\x82B\x02\u0843\x81" +
		"\x03\x02\x02\x02\u0844\u0845\bB\x01\x02\u0845\u0847\x05\x86D\x02\u0846" +
		"\u0848\x05\x84C\x02\u0847\u0846\x03\x02\x02\x02\u0847\u0848\x03\x02\x02" +
		"\x02\u0848\u084C\x03\x02\x02\x02\u0849\u084A\x07\xB8\x02\x02\u084A\u084C" +
		"\x05\x82B\x05\u084B\u0844\x03\x02\x02\x02\u084B\u0849\x03\x02\x02\x02" +
		"\u084C\u0855\x03\x02\x02\x02\u084D\u084E\f\x04\x02\x02\u084E\u084F\x07" +
		"\x1B\x02\x02\u084F\u0854\x05\x82B\x05\u0850\u0851\f\x03\x02\x02\u0851" +
		"\u0852\x07\xC4\x02\x02\u0852\u0854\x05\x82B\x04\u0853\u084D\x03\x02\x02" +
		"\x02\u0853\u0850\x03\x02\x02\x02\u0854\u0857\x03\x02\x02\x02\u0855\u0853" +
		"\x03\x02\x02\x02\u0855\u0856\x03\x02\x02\x02\u0856\x83\x03\x02\x02\x02" +
		"\u0857\u0855\x03\x02\x02\x02\u0858\u0859\x05\xA4S\x02\u0859\u085A\x05" +
		"\x86D\x02\u085A\u0896\x03\x02\x02\x02\u085B\u085C\x05\xA4S\x02\u085C\u085D" +
		"\x05\xA6T\x02\u085D\u085E\x07\x04\x02\x02\u085E\u085F\x05\x14\v\x02\u085F" +
		"\u0860\x07\x05\x02\x02\u0860\u0896\x03\x02\x02\x02\u0861\u0863\x07\xB8" +
		"\x02\x02\u0862\u0861\x03\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863" +
		"\u0864\x03\x02\x02\x02\u0864\u0865\x07$\x02\x02\u0865\u0866\x05\x86D\x02" +
		"\u0866\u0867\x07\x1B\x02\x02\u0867\u0868\x05\x86D\x02\u0868\u0896\x03" +
		"\x02\x02\x02\u0869\u086B\x07\xB8\x02\x02\u086A\u0869\x03\x02\x02\x02\u086A" +
		"\u086B\x03\x02\x02\x02\u086B\u086C\x03\x02\x02\x02\u086C\u086D\x07|\x02" +
		"\x02\u086D\u086E\x07\x04\x02\x02\u086E\u0873\x05\x80A\x02\u086F\u0870" +
		"\x07\x06\x02\x02\u0870\u0872\x05\x80A\x02\u0871\u086F\x03\x02\x02\x02" +
		"\u0872\u0875\x03\x02\x02\x02\u0873\u0871\x03\x02\x02\x02\u0873\u0874\x03" +
		"\x02\x02\x02\u0874\u0876\x03\x02\x02\x02\u0875\u0873\x03\x02\x02\x02\u0876" +
		"\u0877\x07\x05\x02\x02\u0877\u0896\x03\x02\x02\x02\u0878\u087A\x07\xB8" +
		"\x02\x02\u0879\u0878\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A" +
		"\u087B\x03\x02\x02\x02\u087B\u087C\x07|\x02\x02\u087C\u087D\x07\x04\x02" +
		"\x02\u087D\u087E\x05\x14\v\x02\u087E\u087F\x07\x05\x02\x02\u087F\u0896" +
		"\x03\x02\x02\x02\u0880\u0882\x07\xB8\x02\x02\u0881\u0880\x03\x02\x02\x02" +
		"\u0881\u0882\x03\x02\x02\x02\u0882\u0883\x03\x02\x02\x02\u0883\u0884\x07" +
		"\x9C\x02\x02\u0884\u0887\x05\x86D\x02\u0885\u0886\x07\\\x02\x02\u0886" +
		"\u0888\x05\x86D\x02\u0887\u0885\x03\x02\x02\x02\u0887\u0888\x03\x02\x02" +
		"\x02\u0888\u0896\x03\x02\x02\x02\u0889\u088B\x07\x87\x02\x02\u088A\u088C" +
		"\x07\xB8\x02\x02\u088B\u088A\x03\x02\x02\x02\u088B\u088C\x03\x02\x02\x02" +
		"\u088C\u088D\x03\x02\x02\x02\u088D\u0896\x07\xB9\x02\x02\u088E\u0890\x07" +
		"\x87\x02\x02\u088F\u0891\x07\xB8\x02\x02\u0890\u088F\x03\x02\x02\x02\u0890" +
		"\u0891\x03\x02\x02\x02\u0891\u0892\x03\x02\x02\x02\u0892\u0893\x07Q\x02" +
		"\x02\u0893\u0894\x07k\x02\x02\u0894\u0896\x05\x86D\x02\u0895\u0858\x03" +
		"\x02\x02\x02\u0895\u085B\x03\x02\x02\x02\u0895\u0862\x03\x02\x02\x02\u0895" +
		"\u086A\x03\x02\x02\x02\u0895\u0879\x03\x02\x02\x02\u0895\u0881\x03\x02" +
		"\x02\x02\u0895\u0889\x03\x02\x02\x02\u0895\u088E\x03\x02\x02\x02\u0896" +
		"\x85\x03\x02\x02\x02\u0897\u0898\bD\x01\x02\u0898\u089C\x05\x88E\x02\u0899" +
		"\u089A\t\x14\x02\x02\u089A\u089C\x05\x86D\x06\u089B\u0897\x03\x02\x02" +
		"\x02\u089B\u0899\x03\x02\x02\x02\u089C\u08AB\x03\x02\x02\x02\u089D\u089E" +
		"\f\x05\x02\x02\u089E\u089F\t\x15\x02\x02\u089F\u08AA\x05\x86D\x06\u08A0" +
		"\u08A1\f\x04\x02\x02\u08A1\u08A2\t\x14\x02\x02\u08A2\u08AA\x05\x86D\x05" +
		"\u08A3\u08A4\f\x03\x02\x02\u08A4\u08A5\x07\u0145\x02\x02\u08A5\u08AA\x05" +
		"\x86D\x04\u08A6\u08A7\f\x07\x02\x02\u08A7\u08A8\x07 \x02\x02\u08A8\u08AA" +
		"\x05\xA2R\x02\u08A9\u089D\x03\x02\x02\x02\u08A9\u08A0\x03\x02\x02\x02" +
		"\u08A9\u08A3\x03\x02\x02\x02\u08A9\u08A6\x03\x02\x02\x02\u08AA\u08AD\x03" +
		"\x02\x02\x02\u08AB\u08A9\x03\x02\x02\x02\u08AB\u08AC\x03\x02\x02\x02\u08AC" +
		"\x87\x03\x02\x02\x02\u08AD\u08AB\x03\x02\x02\x02\u08AE\u08AF\bE\x01\x02" +
		"\u08AF\u0A74\x07\xB9\x02\x02\u08B0\u0A74\x05\xAAV\x02\u08B1\u08B2\x05" +
		"\u0102\x82\x02\u08B2\u08B3\x05\xA0Q\x02\u08B3\u0A74\x03\x02\x02\x02\u08B4" +
		"\u08B5\x07T\x02\x02\u08B5\u08B6\x07\xD7\x02\x02\u08B6\u0A74\x05\xA0Q\x02" +
		"\u08B7\u0A74\x05\u0104\x83\x02\u08B8\u0A74\x05\xA8U\x02\u08B9\u0A74\x05" +
		"\xA0Q\x02\u08BA\u0A74\x07\u014A\x02\x02\u08BB\u0A74\x07\u0146\x02\x02" +
		"\u08BC\u08BD\x07\xD5\x02\x02\u08BD\u08BE\x07\x04\x02\x02\u08BE\u08BF\x05" +
		"\x86D\x02\u08BF\u08C0\x07|\x02\x02\u08C0\u08C1\x05\x86D\x02\u08C1\u08C2" +
		"\x07\x05\x02\x02\u08C2\u0A74\x03\x02\x02\x02\u08C3\u08C4\x07\x04\x02\x02" +
		"\u08C4\u08C7\x05\x80A\x02\u08C5\u08C6\x07\x06\x02\x02\u08C6\u08C8\x05" +
		"\x80A\x02\u08C7\u08C5\x03\x02\x02\x02\u08C8\u08C9\x03\x02\x02\x02\u08C9" +
		"\u08C7\x03\x02\x02\x02\u08C9\u08CA\x03\x02\x02\x02\u08CA\u08CB\x03\x02" +
		"\x02\x02\u08CB\u08CC\x07\x05\x02\x02\u08CC\u0A74\x03\x02\x02\x02\u08CD" +
		"\u08CE\x07\xF1\x02\x02\u08CE\u08CF\x07\x04\x02\x02\u08CF\u08D4\x05\x80" +
		"A\x02\u08D0\u08D1\x07\x06\x02\x02\u08D1\u08D3\x05\x80A\x02\u08D2\u08D0" +
		"\x03\x02\x02\x02\u08D3\u08D6\x03\x02\x02\x02\u08D4\u08D2\x03\x02\x02\x02" +
		"\u08D4\u08D5\x03\x02\x02\x02\u08D5\u08D7\x03\x02\x02\x02\u08D6\u08D4\x03" +
		"\x02\x02\x02\u08D7\u08D8\x07\x05\x02\x02\u08D8\u0A74\x03\x02\x02\x02\u08D9" +
		"\u08DA\x07\x9E\x02\x02\u08DA\u08DC\x07\x04\x02\x02\u08DB\u08DD\x05@!\x02" +
		"\u08DC\u08DB\x03\x02\x02\x02\u08DC\u08DD\x03\x02\x02\x02\u08DD\u08DE\x03" +
		"\x02\x02\x02\u08DE\u08E1\x05\x80A\x02\u08DF\u08E0\x07\x06\x02\x02\u08E0" +
		"\u08E2\x05\xA0Q\x02\u08E1\u08DF\x03\x02\x02\x02\u08E1\u08E2\x03\x02\x02" +
		"\x02\u08E2\u08E6\x03\x02\x02\x02\u08E3\u08E4\x07\xC0\x02\x02\u08E4\u08E5" +
		"\x07\xCA\x02\x02\u08E5\u08E7\x05P)\x02\u08E6\u08E3\x03\x02\x02\x02\u08E6" +
		"\u08E7\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E9\x07\x05" +
		"\x02\x02\u08E9\u08EA\x07\u0133\x02\x02\u08EA\u08EB\x07t\x02\x02\u08EB" +
		"\u08EC\x07\x04\x02\x02\u08EC\u08ED\x07\xC5\x02\x02\u08ED\u08EE\x07&\x02" +
		"\x02\u08EE\u08F3\x050\x19\x02\u08EF\u08F0\x07\x06\x02\x02\u08F0\u08F2" +
		"\x050\x19\x02\u08F1\u08EF\x03\x02\x02\x02\u08F2\u08F5\x03\x02\x02\x02" +
		"\u08F3\u08F1\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4\u08F6\x03" +
		"\x02\x02\x02\u08F5\u08F3\x03\x02\x02\x02\u08F6\u08F7\x07\x05\x02\x02\u08F7" +
		"\u08F9\x03\x02\x02\x02\u08F8\u08FA\x05\xB8]\x02\u08F9\u08F8\x03\x02\x02" +
		"\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u0A74\x03\x02\x02\x02\u08FB\u08FD" +
		"\x05\x9CO\x02\u08FC\u08FB\x03\x02\x02\x02\u08FC\u08FD\x03\x02\x02\x02" +
		"\u08FD\u08FE\x03\x02\x02\x02\u08FE\u08FF\x05\xF4{\x02\u08FF\u0903\x07" +
		"\x04\x02\x02\u0900\u0901\x05\u0102\x82\x02\u0901\u0902\x07\x03\x02\x02" +
		"\u0902\u0904\x03\x02\x02\x02\u0903\u0900\x03\x02\x02\x02\u0903\u0904\x03" +
		"\x02\x02\x02\u0904\u0905\x03\x02\x02\x02\u0905\u0906\x07\u0142\x02\x02" +
		"\u0906\u0908\x07\x05\x02\x02\u0907\u0909\x05\xB8]\x02\u0908\u0907\x03" +
		"\x02\x02\x02\u0908\u0909\x03\x02\x02\x02\u0909\u090B\x03\x02\x02\x02\u090A" +
		"\u090C\x05\xBC_\x02\u090B\u090A\x03\x02\x02\x02\u090B\u090C\x03\x02\x02" +
		"\x02\u090C\u0A74\x03\x02\x02\x02\u090D\u090F\x05\x9CO\x02\u090E\u090D" +
		"\x03\x02\x02\x02\u090E\u090F\x03\x02\x02\x02\u090F\u0910\x03\x02\x02\x02" +
		"\u0910\u0911\x05\xF4{\x02\u0911\u091D\x07\x04\x02\x02\u0912\u0914\x05" +
		"@!\x02\u0913\u0912\x03\x02\x02\x02\u0913\u0914\x03\x02\x02\x02\u0914\u0915" +
		"\x03\x02\x02\x02\u0915\u091A\x05\x80A\x02\u0916\u0917\x07\x06\x02\x02" +
		"\u0917\u0919\x05\x80A\x02\u0918\u0916\x03\x02\x02\x02\u0919\u091C\x03" +
		"\x02\x02\x02\u091A\u0918\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B" +
		"\u091E\x03\x02\x02\x02\u091C\u091A\x03\x02\x02\x02\u091D\u0913\x03\x02" +
		"\x02\x02\u091D\u091E\x03\x02\x02\x02\u091E\u0929\x03\x02\x02\x02\u091F" +
		"\u0920\x07\xC5\x02\x02\u0920\u0921\x07&\x02\x02\u0921\u0926\x050\x19\x02" +
		"\u0922\u0923\x07\x06\x02\x02\u0923\u0925\x050\x19\x02\u0924\u0922\x03" +
		"\x02\x02\x02\u0925\u0928\x03\x02\x02\x02\u0926\u0924\x03\x02\x02\x02\u0926" +
		"\u0927\x03\x02\x02\x02\u0927\u092A\x03\x02\x02\x02\u0928\u0926\x03\x02" +
		"\x02\x02\u0929\u091F\x03\x02\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A" +
		"\u092B\x03\x02\x02\x02\u092B\u092D\x07\x05\x02\x02\u092C\u092E\x05\xB8" +
		"]\x02\u092D\u092C\x03\x02\x02\x02\u092D\u092E\x03\x02\x02\x02\u092E\u0933" +
		"\x03\x02\x02\x02\u092F\u0931\x05\x9EP\x02\u0930\u092F\x03\x02\x02\x02" +
		"\u0930\u0931\x03\x02\x02\x02\u0931\u0932\x03\x02\x02\x02\u0932\u0934\x05" +
		"\xBC_\x02\u0933\u0930\x03\x02\x02\x02\u0933\u0934\x03\x02\x02\x02\u0934" +
		"\u0A74\x03\x02\x02\x02\u0935\u0936\x05\u0102\x82\x02\u0936\u0937\x05\xBC" +
		"_\x02\u0937\u0A74\x03\x02\x02\x02\u0938\u0939\x05\u0102\x82\x02\u0939" +
		"\u093A\x07\t\x02\x02\u093A\u093B\x05\x80A\x02\u093B\u0A74\x03\x02\x02" +
		"\x02\u093C\u0945\x07\x04\x02\x02\u093D\u0942\x05\u0102\x82\x02\u093E\u093F" +
		"\x07\x06\x02\x02\u093F\u0941\x05\u0102\x82\x02\u0940\u093E\x03\x02\x02" +
		"\x02\u0941\u0944\x03\x02\x02\x02\u0942\u0940\x03\x02\x02\x02\u0942\u0943" +
		"\x03\x02\x02\x02\u0943\u0946\x03\x02\x02\x02\u0944\u0942\x03\x02\x02\x02" +
		"\u0945\u093D\x03\x02\x02\x02\u0945\u0946\x03\x02\x02\x02\u0946\u0947\x03" +
		"\x02\x02\x02\u0947\u0948\x07\x05\x02\x02\u0948\u0949\x07\t\x02\x02\u0949" +
		"\u0A74\x05\x80A\x02\u094A\u094B\x07\x04\x02\x02\u094B\u094C\x05\x14\v" +
		"\x02\u094C\u094D\x07\x05\x02\x02\u094D\u0A74\x03\x02\x02\x02\u094E\u094F" +
		"\x07`\x02\x02\u094F\u0950\x07\x04\x02\x02\u0950\u0951\x05\x14\v\x02\u0951" +
		"\u0952\x07\x05\x02\x02\u0952\u0A74\x03\x02\x02\x02\u0953\u0954\x07*\x02" +
		"\x02\u0954\u0956\x05\x80A\x02\u0955\u0957\x05\xB6\\\x02\u0956\u0955\x03" +
		"\x02\x02\x02\u0957\u0958\x03\x02\x02\x02\u0958\u0956\x03\x02\x02\x02\u0958" +
		"\u0959\x03\x02\x02\x02\u0959\u095C\x03\x02\x02\x02\u095A\u095B\x07V\x02" +
		"\x02\u095B\u095D\x05\x80A\x02\u095C\u095A\x03\x02\x02\x02\u095C\u095D" +
		"\x03\x02\x02\x02\u095D\u095E\x03\x02\x02\x02\u095E\u095F\x07Z\x02\x02" +
		"\u095F\u0A74\x03\x02\x02\x02\u0960\u0962\x07*\x02\x02\u0961\u0963\x05" +
		"\xB6\\\x02\u0962\u0961\x03\x02\x02\x02\u0963\u0964\x03\x02\x02\x02\u0964" +
		"\u0962\x03\x02\x02\x02\u0964\u0965\x03\x02\x02\x02\u0965\u0968\x03\x02" +
		"\x02\x02\u0966\u0967\x07V\x02\x02\u0967\u0969\x05\x80A\x02\u0968\u0966" +
		"\x03\x02\x02\x02\u0968\u0969\x03\x02\x02\x02\u0969\u096A\x03\x02\x02\x02" +
		"\u096A\u096B\x07Z\x02\x02\u096B\u0A74\x03\x02\x02\x02\u096C\u096D\x07" +
		"+\x02\x02\u096D\u096E\x07\x04\x02\x02\u096E\u096F\x05\x80A\x02\u096F\u0970" +
		"\x07\x1E\x02\x02\u0970\u0971\x05\xB0Y\x02\u0971\u0972\x07\x05\x02\x02" +
		"\u0972\u0A74\x03\x02\x02\x02\u0973\u0974\x07\u0115\x02\x02\u0974\u0975" +
		"\x07\x04\x02\x02\u0975\u0976\x05\x80A\x02\u0976\u0977\x07\x1E\x02\x02" +
		"\u0977\u0978\x05\xB0Y\x02\u0978\u0979\x07\x05\x02\x02\u0979\u0A74\x03" +
		"\x02\x02\x02\u097A\u097B\x07\x1D\x02\x02\u097B\u0984\x07\n\x02\x02\u097C" +
		"\u0981\x05\x80A\x02\u097D\u097E\x07\x06\x02\x02\u097E\u0980\x05\x80A\x02" +
		"\u097F\u097D\x03\x02\x02\x02\u0980\u0983\x03\x02\x02\x02\u0981\u097F\x03" +
		"\x02\x02\x02\u0981\u0982\x03\x02\x02\x02\u0982\u0985\x03\x02\x02\x02\u0983" +
		"\u0981\x03\x02\x02\x02\u0984\u097C\x03\x02\x02\x02\u0984\u0985\x03\x02" +
		"\x02\x02\u0985\u0986\x03\x02\x02\x02\u0986\u0A74\x07\v\x02\x02\u0987\u0A74" +
		"\x05\u0102\x82\x02\u0988\u0A74\x07<\x02\x02\u0989\u098D\x07@\x02\x02\u098A" +
		"\u098B\x07\x04\x02\x02\u098B\u098C\x07\u014B\x02\x02\u098C\u098E\x07\x05" +
		"\x02\x02\u098D\u098A\x03\x02\x02\x02\u098D\u098E\x03\x02\x02\x02\u098E" +
		"\u0A74\x03\x02\x02\x02\u098F\u0993\x07A\x02\x02\u0990\u0991\x07\x04\x02" +
		"\x02\u0991\u0992\x07\u014B\x02\x02\u0992\u0994\x07\x05\x02\x02\u0993\u0990" +
		"\x03\x02\x02\x02\u0993\u0994\x03\x02\x02\x02\u0994\u0A74\x03\x02\x02\x02" +
		"\u0995\u0999\x07\xA0\x02\x02\u0996\u0997\x07\x04\x02\x02\u0997\u0998\x07" +
		"\u014B\x02\x02\u0998\u099A\x07\x05\x02\x02\u0999\u0996\x03\x02\x02\x02" +
		"\u0999\u099A\x03\x02\x02\x02\u099A\u0A74\x03\x02\x02\x02\u099B\u099F\x07" +
		"\xA1\x02\x02\u099C\u099D\x07\x04\x02\x02\u099D\u099E\x07\u014B\x02\x02" +
		"\u099E\u09A0\x07\x05\x02\x02\u099F\u099C\x03\x02\x02\x02\u099F\u09A0\x03" +
		"\x02\x02\x02\u09A0\u0A74\x03\x02\x02\x02\u09A1\u0A74\x07B\x02\x02\u09A2" +
		"\u0A74\x07;\x02\x02\u09A3\u0A74\x07?\x02\x02\u09A4\u0A74\x07=\x02\x02" +
		"\u09A5\u09A6\x07\u0112\x02\x02\u09A6\u09AE\x07\x04\x02\x02\u09A7\u09A9" +
		"\x05N(\x02\u09A8\u09A7\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02\x02\u09A9" +
		"\u09AB\x03\x02\x02\x02\u09AA\u09AC\x05\x86D\x02\u09AB\u09AA\x03\x02\x02" +
		"\x02\u09AB\u09AC\x03\x02\x02\x02\u09AC\u09AD\x03\x02\x02\x02\u09AD\u09AF" +
		"\x07k\x02\x02\u09AE\u09A8\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02" +
		"\u09AF\u09B0\x03\x02\x02\x02\u09B0\u09B1\x05\x86D\x02\u09B1\u09B2\x07" +
		"\x05\x02\x02\u09B2\u0A74\x03\x02\x02\x02\u09B3\u09B4\x07\u0112\x02\x02" +
		"\u09B4\u09B5\x07\x04\x02\x02\u09B5\u09B6\x05\x86D\x02\u09B6\u09B7\x07" +
		"\x06\x02\x02\u09B7\u09B8\x05\x86D\x02\u09B8\u09B9\x07\x05\x02\x02\u09B9" +
		"\u0A74\x03\x02\x02\x02\u09BA\u09BB\x07\u0104\x02\x02\u09BB\u09BC\x07\x04" +
		"\x02\x02\u09BC\u09BD\x05\x86D\x02\u09BD\u09BE\x07k\x02\x02\u09BE\u09C1" +
		"\x05\x86D\x02\u09BF\u09C0\x07i\x02\x02\u09C0\u09C2\x05\x86D\x02\u09C1" +
		"\u09BF\x03\x02\x02\x02\u09C1\u09C2\x03\x02\x02\x02\u09C2\u09C3\x03\x02" +
		"\x02\x02\u09C3\u09C4\x07\x05\x02\x02\u09C4\u0A74\x03\x02\x02\x02\u09C5" +
		"\u09C6\x07\xB7\x02\x02\u09C6\u09C7\x07\x04\x02\x02\u09C7\u09CA\x05\x86" +
		"D\x02\u09C8\u09C9\x07\x06\x02\x02\u09C9\u09CB\x05\xAEX\x02\u09CA\u09C8" +
		"\x03\x02\x02\x02\u09CA\u09CB\x03";
	private static readonly _serializedATNSegment5: string =
		"\x02\x02\x02\u09CB\u09CC\x03\x02\x02\x02\u09CC\u09CD\x07\x05\x02\x02\u09CD" +
		"\u0A74\x03\x02\x02\x02\u09CE\u09CF\x07b\x02\x02\u09CF\u09D0\x07\x04\x02" +
		"\x02\u09D0\u09D1\x05\u0102\x82\x02\u09D1\u09D2\x07k\x02\x02\u09D2\u09D3" +
		"\x05\x86D\x02\u09D3\u09D4\x07\x05\x02\x02\u09D4\u0A74\x03\x02\x02\x02" +
		"\u09D5\u09D6\x07\x04\x02\x02\u09D6\u09D7\x05\x80A\x02\u09D7\u09D8\x07" +
		"\x05\x02\x02\u09D8\u0A74\x03\x02\x02\x02\u09D9\u09DA\x07u\x02\x02\u09DA" +
		"\u09E3\x07\x04\x02\x02\u09DB\u09E0\x05\xF4{\x02\u09DC\u09DD\x07\x06\x02" +
		"\x02\u09DD\u09DF\x05\xF4{\x02\u09DE\u09DC\x03\x02\x02\x02\u09DF\u09E2" +
		"\x03\x02\x02\x02\u09E0\u09DE\x03\x02\x02\x02\u09E0\u09E1\x03\x02\x02\x02" +
		"\u09E1\u09E4\x03\x02\x02\x02\u09E2\u09E0\x03\x02\x02\x02\u09E3\u09DB\x03" +
		"\x02\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E5\x03\x02\x02\x02\u09E5" +
		"\u0A74\x07\x05\x02\x02\u09E6\u09E7\x07\x8D\x02\x02\u09E7\u09E8\x07\x04" +
		"\x02\x02\u09E8\u09ED\x05\x8AF\x02\u09E9\u09EA\x05\x92J\x02\u09EA\u09EB" +
		"\x07\xC0\x02\x02\u09EB\u09EC\x07[\x02\x02\u09EC\u09EE\x03\x02\x02\x02" +
		"\u09ED\u09E9\x03\x02\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09EF\x03" +
		"\x02\x02\x02\u09EF\u09F0\x07\x05\x02\x02\u09F0\u0A74\x03\x02\x02\x02\u09F1" +
		"\u09F2\x07\x91\x02\x02\u09F2\u09F3\x07\x04\x02\x02\u09F3\u09F6\x05\x8A" +
		"F\x02\u09F4\u09F5\x07\xE9\x02\x02\u09F5\u09F7\x05\xB0Y\x02\u09F6\u09F4" +
		"\x03\x02\x02\x02\u09F6\u09F7\x03\x02\x02\x02\u09F7\u09FC\x03\x02\x02\x02" +
		"\u09F8\u09F9\x05\x94K\x02\u09F9\u09FA\x07\xC0\x02\x02\u09FA\u09FB\x07" +
		"W\x02\x02\u09FB\u09FD\x03\x02\x02\x02\u09FC\u09F8\x03\x02\x02\x02\u09FC" +
		"\u09FD\x03\x02\x02\x02\u09FD\u0A02\x03\x02\x02\x02\u09FE\u09FF\x05\x94" +
		"K\x02\u09FF\u0A00\x07\xC0\x02\x02\u0A00\u0A01\x07[\x02\x02\u0A01\u0A03" +
		"\x03\x02\x02\x02\u0A02\u09FE\x03\x02\x02\x02\u0A02\u0A03\x03\x02\x02\x02" +
		"\u0A03\u0A04\x03\x02\x02\x02\u0A04\u0A05\x07\x05\x02\x02\u0A05\u0A74\x03" +
		"\x02\x02\x02\u0A06\u0A07\x07\x8F\x02\x02\u0A07\u0A08\x07\x04\x02\x02\u0A08" +
		"\u0A0F\x05\x8AF\x02\u0A09\u0A0A\x07\xE9\x02\x02\u0A0A\u0A0D\x05\xB0Y\x02" +
		"\u0A0B\u0A0C\x07j\x02\x02\u0A0C\u0A0E\x05\x8EH\x02\u0A0D\u0A0B\x03\x02" +
		"\x02\x02\u0A0D\u0A0E\x03\x02\x02\x02\u0A0E\u0A10\x03\x02\x02\x02\u0A0F" +
		"\u0A09\x03\x02\x02\x02\u0A0F\u0A10\x03\x02\x02\x02\u0A10\u0A14\x03\x02" +
		"\x02\x02\u0A11\u0A12\x05\x96L\x02\u0A12\u0A13\x07\u0136\x02\x02\u0A13" +
		"\u0A15\x03\x02\x02\x02\u0A14\u0A11\x03\x02\x02\x02\u0A14\u0A15\x03\x02" +
		"\x02\x02\u0A15\u0A1D\x03\x02\x02\x02\u0A16\u0A17\t\x11\x02\x02\u0A17\u0A1B" +
		"\x07\xDC\x02\x02\u0A18\u0A19\x07\xC0\x02\x02\u0A19\u0A1A\x07\xF4\x02\x02" +
		"\u0A1A\u0A1C\x07\u010A\x02\x02\u0A1B\u0A18\x03\x02\x02\x02\u0A1B\u0A1C" +
		"\x03\x02\x02\x02\u0A1C\u0A1E\x03\x02\x02\x02\u0A1D\u0A16\x03\x02\x02\x02" +
		"\u0A1D\u0A1E\x03\x02\x02\x02\u0A1E\u0A23\x03\x02\x02\x02\u0A1F\u0A20\x05" +
		"\x98M\x02\u0A20\u0A21\x07\xC0\x02\x02\u0A21\u0A22\x07W\x02\x02\u0A22\u0A24" +
		"\x03\x02\x02\x02\u0A23\u0A1F\x03\x02\x02\x02\u0A23\u0A24\x03\x02\x02\x02" +
		"\u0A24\u0A29\x03\x02\x02\x02\u0A25\u0A26\x05\x98M\x02\u0A26\u0A27\x07" +
		"\xC0\x02\x02\u0A27\u0A28\x07[\x02\x02\u0A28\u0A2A\x03\x02\x02\x02\u0A29" +
		"\u0A25\x03\x02\x02\x02\u0A29\u0A2A\x03\x02\x02\x02\u0A2A\u0A2B\x03\x02" +
		"\x02\x02\u0A2B\u0A2C\x07\x05\x02\x02\u0A2C\u0A74\x03\x02\x02\x02\u0A2D" +
		"\u0A2E\x07\x8E\x02\x02\u0A2E\u0A4B\x07\x04\x02\x02\u0A2F\u0A34\x05\x9A" +
		"N\x02\u0A30\u0A31\x07\x06\x02\x02\u0A31\u0A33\x05\x9AN\x02\u0A32\u0A30" +
		"\x03\x02\x02\x02\u0A33\u0A36\x03\x02\x02\x02\u0A34\u0A32\x03\x02\x02\x02" +
		"\u0A34\u0A35\x03\x02\x02\x02\u0A35\u0A3D\x03\x02\x02\x02\u0A36\u0A34\x03" +
		"\x02\x02\x02\u0A37\u0A38\x07\xB9\x02\x02\u0A38\u0A39\x07\xC0\x02\x02\u0A39" +
		"\u0A3E\x07\xB9\x02\x02\u0A3A\u0A3B\x07\x14\x02\x02\u0A3B\u0A3C\x07\xC0" +
		"\x02\x02\u0A3C\u0A3E\x07\xB9\x02\x02\u0A3D\u0A37\x03\x02\x02\x02\u0A3D" +
		"\u0A3A\x03\x02\x02\x02\u0A3D\u0A3E\x03\x02\x02\x02\u0A3E\u0A49\x03\x02" +
		"\x02\x02\u0A3F\u0A40\x07\u0132\x02\x02\u0A40\u0A42\x07\u011C\x02\x02\u0A41" +
		"\u0A43\x07\x94\x02\x02\u0A42\u0A41\x03\x02\x02\x02\u0A42\u0A43\x03\x02" +
		"\x02\x02\u0A43\u0A4A\x03\x02\x02\x02\u0A44\u0A45\x07\u0134\x02\x02\u0A45" +
		"\u0A47\x07\u011C\x02\x02\u0A46\u0A48\x07\x94\x02\x02\u0A47\u0A46\x03\x02" +
		"\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\u0A4A\x03\x02\x02\x02\u0A49" +
		"\u0A3F\x03\x02\x02\x02\u0A49\u0A44\x03\x02\x02\x02\u0A49\u0A4A\x03\x02" +
		"\x02\x02\u0A4A\u0A4C\x03\x02\x02\x02\u0A4B\u0A2F\x03\x02\x02\x02\u0A4B" +
		"\u0A4C\x03\x02\x02\x02\u0A4C\u0A53\x03\x02\x02\x02\u0A4D\u0A4E\x07\xE9" +
		"\x02\x02\u0A4E\u0A51\x05\xB0Y\x02\u0A4F\u0A50\x07j\x02\x02\u0A50\u0A52" +
		"\x05\x8EH\x02\u0A51\u0A4F\x03\x02\x02\x02\u0A51\u0A52\x03\x02\x02\x02" +
		"\u0A52\u0A54\x03\x02\x02\x02\u0A53\u0A4D\x03\x02\x02\x02\u0A53\u0A54\x03" +
		"\x02\x02\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55\u0A74\x07\x05\x02\x02\u0A56" +
		"\u0A57\x07\x8C\x02\x02\u0A57\u0A68\x07\x04\x02\x02\u0A58\u0A5D\x05\x8C" +
		"G\x02\u0A59\u0A5A\x07\x06\x02\x02\u0A5A\u0A5C\x05\x8CG\x02\u0A5B\u0A59" +
		"\x03\x02\x02\x02\u0A5C\u0A5F\x03\x02\x02\x02\u0A5D\u0A5B\x03\x02\x02\x02" +
		"\u0A5D\u0A5E\x03\x02\x02\x02\u0A5E\u0A66\x03\x02\x02\x02\u0A5F\u0A5D\x03" +
		"\x02\x02\x02\u0A60\u0A61\x07\xB9\x02\x02\u0A61\u0A62\x07\xC0\x02\x02\u0A62" +
		"\u0A67\x07\xB9\x02\x02\u0A63\u0A64\x07\x14\x02\x02\u0A64\u0A65\x07\xC0" +
		"\x02\x02\u0A65\u0A67\x07\xB9\x02\x02\u0A66\u0A60\x03\x02\x02\x02\u0A66" +
		"\u0A63\x03\x02\x02\x02\u0A66\u0A67\x03\x02\x02\x02\u0A67\u0A69\x03\x02" +
		"\x02\x02\u0A68\u0A58\x03\x02\x02\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69" +
		"\u0A70\x03\x02\x02\x02\u0A6A\u0A6B\x07\xE9\x02\x02\u0A6B\u0A6E\x05\xB0" +
		"Y\x02\u0A6C\u0A6D\x07j\x02\x02\u0A6D\u0A6F\x05\x8EH\x02\u0A6E\u0A6C\x03" +
		"\x02\x02\x02\u0A6E\u0A6F\x03\x02\x02\x02\u0A6F\u0A71\x03\x02\x02\x02\u0A70" +
		"\u0A6A\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02\u0A71\u0A72\x03\x02" +
		"\x02\x02\u0A72\u0A74\x07\x05\x02\x02\u0A73\u08AE\x03\x02\x02\x02\u0A73" +
		"\u08B0\x03\x02\x02\x02\u0A73\u08B1\x03\x02\x02\x02\u0A73\u08B4\x03\x02" +
		"\x02\x02\u0A73\u08B7\x03\x02\x02\x02\u0A73\u08B8\x03\x02\x02\x02\u0A73" +
		"\u08B9\x03\x02\x02\x02\u0A73\u08BA\x03\x02\x02\x02\u0A73\u08BB\x03\x02" +
		"\x02\x02\u0A73\u08BC\x03\x02\x02\x02\u0A73\u08C3\x03\x02\x02\x02\u0A73" +
		"\u08CD\x03\x02\x02\x02\u0A73\u08D9\x03\x02\x02\x02\u0A73\u08FC\x03\x02" +
		"\x02\x02\u0A73\u090E\x03\x02\x02\x02\u0A73\u0935\x03\x02\x02\x02\u0A73" +
		"\u0938\x03\x02\x02\x02\u0A73\u093C\x03\x02\x02\x02\u0A73\u094A\x03\x02" +
		"\x02\x02\u0A73\u094E\x03\x02\x02\x02\u0A73\u0953\x03\x02\x02\x02\u0A73" +
		"\u0960\x03\x02\x02\x02\u0A73\u096C\x03\x02\x02\x02\u0A73\u0973\x03\x02" +
		"\x02\x02\u0A73\u097A\x03\x02\x02\x02\u0A73\u0987\x03\x02\x02\x02\u0A73" +
		"\u0988\x03\x02\x02\x02\u0A73\u0989\x03\x02\x02\x02\u0A73\u098F\x03\x02" +
		"\x02\x02\u0A73\u0995\x03\x02\x02\x02\u0A73\u099B\x03\x02\x02\x02\u0A73" +
		"\u09A1\x03\x02\x02\x02\u0A73\u09A2\x03\x02\x02\x02\u0A73\u09A3\x03\x02" +
		"\x02\x02\u0A73\u09A4\x03\x02\x02\x02\u0A73\u09A5\x03\x02\x02\x02\u0A73" +
		"\u09B3\x03\x02\x02\x02\u0A73\u09BA\x03\x02\x02\x02\u0A73\u09C5\x03\x02" +
		"\x02\x02\u0A73\u09CE\x03\x02\x02\x02\u0A73\u09D5\x03\x02\x02\x02\u0A73" +
		"\u09D9\x03\x02\x02\x02\u0A73\u09E6\x03\x02\x02\x02\u0A73\u09F1\x03\x02" +
		"\x02\x02\u0A73\u0A06\x03\x02\x02\x02\u0A73\u0A2D\x03\x02\x02\x02\u0A73" +
		"\u0A56\x03\x02\x02\x02\u0A74\u0A7F\x03\x02\x02\x02\u0A75\u0A76\f\x1A\x02" +
		"\x02\u0A76\u0A77\x07\n\x02\x02\u0A77\u0A78\x05\x86D\x02\u0A78\u0A79\x07" +
		"\v\x02\x02\u0A79\u0A7E\x03\x02\x02\x02\u0A7A\u0A7B\f\x18\x02\x02\u0A7B" +
		"\u0A7C\x07\x03\x02\x02\u0A7C\u0A7E\x05\u0102\x82\x02\u0A7D\u0A75\x03\x02" +
		"\x02\x02\u0A7D\u0A7A\x03\x02\x02\x02\u0A7E\u0A81\x03\x02\x02\x02\u0A7F" +
		"\u0A7D\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80\x89\x03\x02\x02" +
		"\x02\u0A81\u0A7F\x03\x02\x02\x02\u0A82\u0A83\x05\x8CG\x02\u0A83\u0A84" +
		"\x07\x06\x02\x02\u0A84\u0A87\x05\xA0Q\x02\u0A85\u0A86\x07\x1E\x02\x02" +
		"\u0A86\u0A88\x05\u0102\x82\x02\u0A87\u0A85\x03\x02\x02\x02\u0A87\u0A88" +
		"\x03\x02\x02\x02\u0A88\u0A92\x03\x02\x02\x02\u0A89\u0A8A\x07\xCD\x02\x02" +
		"\u0A8A\u0A8F\x05\x90I\x02\u0A8B\u0A8C\x07\x06\x02\x02\u0A8C\u0A8E\x05" +
		"\x90I\x02\u0A8D\u0A8B\x03\x02\x02\x02\u0A8E\u0A91\x03\x02\x02\x02\u0A8F" +
		"\u0A8D\x03\x02\x02\x02\u0A8F\u0A90\x03\x02\x02\x02\u0A90\u0A93\x03\x02" +
		"\x02\x02\u0A91\u0A8F\x03\x02\x02\x02\u0A92\u0A89\x03\x02\x02\x02\u0A92" +
		"\u0A93\x03\x02\x02\x02\u0A93\x8B\x03\x02\x02\x02\u0A94\u0A97\x05\x80A" +
		"\x02\u0A95\u0A96\x07j\x02\x02\u0A96\u0A98\x05\x8EH\x02\u0A97\u0A95\x03" +
		"\x02\x02\x02\u0A97\u0A98\x03\x02\x02\x02\u0A98\x8D\x03\x02\x02\x02\u0A99" +
		"\u0A9C\x07\x8B\x02\x02\u0A9A\u0A9B\x07Y\x02\x02\u0A9B\u0A9D\t\x16\x02" +
		"\x02\u0A9C\u0A9A\x03\x02\x02\x02\u0A9C\u0A9D\x03\x02\x02\x02\u0A9D\x8F" +
		"\x03\x02\x02\x02\u0A9E\u0A9F\x05\x8CG\x02\u0A9F\u0AA0\x07\x1E\x02\x02" +
		"\u0AA0\u0AA1\x05\u0102\x82\x02\u0AA1\x91\x03\x02\x02\x02\u0AA2\u0AA3\t" +
		"\x17\x02\x02\u0AA3\x93\x03\x02\x02\x02\u0AA4\u0AA9\x07[\x02\x02\u0AA5" +
		"\u0AA9\x07\xB9\x02\x02\u0AA6\u0AA7\x07H\x02\x02\u0AA7\u0AA9\x05\x80A\x02" +
		"\u0AA8\u0AA4\x03\x02\x02\x02\u0AA8\u0AA5\x03\x02\x02\x02\u0AA8\u0AA6\x03" +
		"\x02\x02\x02\u0AA9\x95\x03\x02\x02\x02\u0AAA\u0AAC\x07\u0134\x02\x02\u0AAB" +
		"\u0AAD\x07\x1D\x02\x02\u0AAC\u0AAB\x03\x02\x02\x02\u0AAC\u0AAD\x03\x02" +
		"\x02\x02\u0AAD\u0AB6\x03\x02\x02\x02\u0AAE\u0AB0\x07\u0132\x02\x02\u0AAF" +
		"\u0AB1\t\x18\x02\x02\u0AB0\u0AAF\x03\x02\x02\x02\u0AB0\u0AB1\x03\x02\x02" +
		"\x02\u0AB1\u0AB3\x03\x02\x02\x02\u0AB2\u0AB4\x07\x1D\x02\x02\u0AB3\u0AB2" +
		"\x03\x02\x02\x02\u0AB3\u0AB4\x03\x02\x02\x02\u0AB4\u0AB6\x03\x02\x02\x02" +
		"\u0AB5\u0AAA\x03\x02\x02\x02\u0AB5\u0AAE\x03\x02\x02\x02\u0AB6\x97\x03" +
		"\x02\x02\x02\u0AB7\u0ABE\x07[\x02\x02\u0AB8\u0ABE\x07\xB9\x02\x02\u0AB9" +
		"\u0ABA\x07W\x02\x02\u0ABA\u0ABE\x07\x1D\x02\x02\u0ABB\u0ABC\x07W\x02\x02" +
		"\u0ABC\u0ABE\x07\xBC\x02\x02\u0ABD\u0AB7\x03\x02\x02\x02\u0ABD\u0AB8\x03" +
		"\x02\x02\x02\u0ABD\u0AB9\x03\x02\x02\x02\u0ABD\u0ABB\x03\x02\x02\x02\u0ABE" +
		"\x99\x03\x02\x02\x02\u0ABF\u0AC1\x07\x93\x02\x02\u0AC0\u0ABF\x03\x02\x02" +
		"\x02\u0AC0\u0AC1\x03\x02\x02\x02\u0AC1\u0AC2\x03\x02\x02\x02\u0AC2\u0AC3" +
		"\x05\x80A\x02\u0AC3\u0AC4\x07\u0129\x02\x02\u0AC4\u0AC5\x05\x8CG\x02\u0AC5" +
		"\u0ACB\x03\x02\x02\x02\u0AC6\u0AC7\x05\x80A\x02\u0AC7\u0AC8\x07\f\x02" +
		"\x02\u0AC8\u0AC9\x05\x8CG\x02\u0AC9\u0ACB\x03\x02\x02\x02\u0ACA\u0AC0" +
		"\x03\x02\x02\x02\u0ACA\u0AC6\x03\x02\x02\x02\u0ACB\x9B\x03\x02\x02\x02" +
		"\u0ACC\u0ACD\t\x19\x02\x02\u0ACD\x9D\x03\x02\x02\x02\u0ACE\u0ACF\x07z" +
		"\x02\x02\u0ACF\u0AD3\x07\xBB\x02\x02\u0AD0\u0AD1\x07\xE6\x02\x02\u0AD1" +
		"\u0AD3\x07\xBB\x02\x02\u0AD2\u0ACE\x03\x02\x02\x02\u0AD2\u0AD0\x03\x02" +
		"\x02\x02\u0AD3\x9F\x03\x02\x02\x02\u0AD4\u0ADB\x07\u0148\x02\x02\u0AD5" +
		"\u0AD8\x07\u0149\x02\x02\u0AD6\u0AD7\x07\u0117\x02\x02\u0AD7\u0AD9\x07" +
		"\u0148\x02\x02\u0AD8\u0AD6\x03\x02\x02\x02\u0AD8\u0AD9\x03\x02\x02\x02" +
		"\u0AD9\u0ADB\x03\x02\x02\x02\u0ADA\u0AD4\x03\x02\x02\x02\u0ADA\u0AD5\x03" +
		"\x02\x02\x02\u0ADB\xA1\x03\x02\x02\x02\u0ADC\u0ADD\x07\u010D\x02\x02\u0ADD" +
		"\u0ADE\x07\u0139\x02\x02\u0ADE\u0AE3\x05\xAAV\x02\u0ADF\u0AE0\x07\u010D" +
		"\x02\x02\u0AE0\u0AE1\x07\u0139\x02\x02\u0AE1\u0AE3\x05\xA0Q\x02\u0AE2" +
		"\u0ADC\x03\x02\x02\x02\u0AE2\u0ADF\x03\x02\x02\x02\u0AE3\xA3\x03\x02\x02" +
		"\x02\u0AE4\u0AE5\t\x1A\x02\x02\u0AE5\xA5\x03\x02\x02\x02\u0AE6\u0AE7\t" +
		"\x1B\x02\x02\u0AE7\xA7\x03\x02\x02\x02\u0AE8\u0AE9\t\x1C\x02\x02\u0AE9" +
		"\xA9\x03\x02\x02\x02\u0AEA\u0AEC\x07\x83\x02\x02\u0AEB\u0AED\t\x14\x02" +
		"\x02\u0AEC\u0AEB\x03\x02\x02\x02\u0AEC\u0AED\x03\x02\x02\x02\u0AED\u0AEE" +
		"\x03\x02\x02\x02\u0AEE\u0AEF\x05\xA0Q\x02\u0AEF\u0AF2\x05\xACW\x02\u0AF0" +
		"\u0AF1\x07\u010F\x02\x02\u0AF1\u0AF3\x05\xACW\x02\u0AF2\u0AF0\x03\x02" +
		"\x02\x02\u0AF2\u0AF3\x03\x02\x02\x02\u0AF3\xAB\x03\x02\x02\x02\u0AF4\u0AF5" +
		"\t\x1D\x02\x02\u0AF5\xAD\x03\x02\x02\x02\u0AF6\u0AF7\t\x1E\x02\x02\u0AF7" +
		"\xAF\x03\x02\x02\x02\u0AF8\u0AF9\bY\x01\x02\u0AF9\u0AFA\x07\xF1\x02\x02" +
		"\u0AFA\u0AFB\x07\x04\x02\x02\u0AFB\u0B00\x05\xB2Z\x02\u0AFC\u0AFD\x07" +
		"\x06\x02\x02\u0AFD\u0AFF\x05\xB2Z\x02\u0AFE\u0AFC\x03\x02\x02\x02\u0AFF" +
		"\u0B02\x03\x02\x02\x02\u0B00\u0AFE\x03\x02\x02\x02\u0B00\u0B01\x03\x02" +
		"\x02\x02\u0B01\u0B03\x03\x02\x02\x02\u0B02\u0B00\x03\x02\x02\x02\u0B03" +
		"\u0B04\x07\x05\x02\x02\u0B04\u0B54\x03\x02\x02\x02\u0B05\u0B06\x07\x83" +
		"\x02\x02\u0B06\u0B09\x05\xACW\x02\u0B07\u0B08\x07\u010F\x02\x02\u0B08" +
		"\u0B0A\x05\xACW\x02\u0B09\u0B07\x03\x02\x02\x02\u0B09\u0B0A\x03\x02\x02" +
		"\x02\u0B0A\u0B54\x03\x02\x02\x02\u0B0B\u0B10\x07\u010E\x02\x02\u0B0C\u0B0D" +
		"\x07\x04\x02\x02\u0B0D\u0B0E\x05\xB4[\x02\u0B0E\u0B0F\x07\x05\x02\x02" +
		"\u0B0F\u0B11\x03\x02\x02\x02\u0B10\u0B0C\x03\x02\x02\x02\u0B10\u0B11\x03" +
		"\x02\x02\x02\u0B11\u0B15\x03\x02\x02\x02\u0B12\u0B13\x07\u0134\x02\x02" +
		"\u0B13\u0B14\x07\u010D\x02\x02\u0B14\u0B16\x07\u0139\x02\x02\u0B15\u0B12" +
		"\x03\x02\x02\x02\u0B15\u0B16\x03\x02\x02\x02\u0B16\u0B54\x03\x02\x02\x02" +
		"\u0B17\u0B1C\x07\u010E\x02\x02\u0B18\u0B19\x07\x04\x02\x02\u0B19\u0B1A" +
		"\x05\xB4[\x02\u0B1A\u0B1B\x07\x05\x02\x02\u0B1B\u0B1D\x03\x02\x02\x02" +
		"\u0B1C\u0B18\x03\x02\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1E\x03" +
		"\x02\x02\x02\u0B1E\u0B1F\x07\u0132\x02\x02\u0B1F\u0B20\x07\u010D\x02\x02" +
		"\u0B20\u0B54\x07\u0139\x02\x02\u0B21\u0B26\x07\u010D\x02\x02\u0B22\u0B23" +
		"\x07\x04\x02\x02\u0B23\u0B24\x05\xB4[\x02\u0B24\u0B25\x07\x05\x02\x02" +
		"\u0B25\u0B27\x03\x02\x02\x02\u0B26\u0B22\x03\x02\x02\x02\u0B26\u0B27\x03" +
		"\x02\x02\x02\u0B27\u0B2B\x03\x02\x02\x02\u0B28\u0B29\x07\u0134\x02\x02" +
		"\u0B29\u0B2A\x07\u010D\x02\x02\u0B2A\u0B2C\x07\u0139\x02\x02\u0B2B\u0B28" +
		"\x03\x02\x02\x02\u0B2B\u0B2C\x03\x02\x02\x02\u0B2C\u0B54\x03\x02\x02\x02" +
		"\u0B2D\u0B32\x07\u010D\x02\x02\u0B2E\u0B2F\x07\x04\x02\x02\u0B2F\u0B30" +
		"\x05\xB4[\x02\u0B30\u0B31\x07\x05\x02\x02\u0B31\u0B33\x03\x02\x02\x02" +
		"\u0B32\u0B2E\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B34\x03" +
		"\x02\x02\x02\u0B34\u0B35\x07\u0132\x02\x02\u0B35\u0B36\x07\u010D\x02\x02" +
		"\u0B36\u0B54\x07\u0139\x02\x02\u0B37\u0B38\x07T\x02\x02\u0B38\u0B54\x07" +
		"\xD7\x02\x02\u0B39\u0B3A\x07\x1D\x02\x02\u0B3A\u0B3B\x07\u013C\x02\x02" +
		"\u0B3B\u0B3C\x05\xB0Y\x02\u0B3C\u0B3D\x07\u013E\x02\x02\u0B3D\u0B54\x03" +
		"\x02\x02\x02\u0B3E\u0B3F\x07\xA4\x02\x02\u0B3F\u0B40\x07\u013C\x02\x02" +
		"\u0B40\u0B41\x05\xB0Y\x02\u0B41\u0B42\x07\x06\x02\x02\u0B42\u0B43\x05" +
		"\xB0Y\x02\u0B43\u0B44\x07\u013E\x02\x02\u0B44\u0B54\x03\x02\x02\x02\u0B45" +
		"\u0B51\x05\u0102\x82\x02\u0B46\u0B47\x07\x04\x02\x02\u0B47\u0B4C\x05\xB4" +
		"[\x02\u0B48\u0B49\x07\x06\x02\x02\u0B49\u0B4B\x05\xB4[\x02\u0B4A\u0B48" +
		"\x03\x02\x02\x02\u0B4B\u0B4E\x03\x02\x02\x02\u0B4C\u0B4A\x03\x02\x02\x02" +
		"\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B4F\x03\x02\x02\x02\u0B4E\u0B4C\x03" +
		"\x02\x02\x02\u0B4F\u0B50\x07\x05\x02\x02\u0B50\u0B52\x03\x02\x02\x02\u0B51" +
		"\u0B46\x03\x02\x02\x02\u0B51\u0B52\x03\x02\x02\x02\u0B52\u0B54\x03\x02" +
		"\x02\x02\u0B53\u0AF8\x03\x02\x02\x02\u0B53\u0B05\x03\x02\x02\x02\u0B53" +
		"\u0B0B\x03\x02\x02\x02\u0B53\u0B17\x03\x02\x02\x02\u0B53\u0B21\x03\x02" +
		"\x02\x02\u0B53\u0B2D\x03\x02\x02\x02\u0B53\u0B37\x03\x02\x02\x02\u0B53" +
		"\u0B39\x03\x02\x02\x02\u0B53\u0B3E\x03\x02\x02\x02\u0B53\u0B45\x03\x02" +
		"\x02\x02\u0B54\u0B5E\x03\x02\x02\x02\u0B55\u0B56\f\x04\x02\x02\u0B56\u0B5A" +
		"\x07\x1D\x02\x02\u0B57\u0B58\x07\n\x02\x02\u0B58\u0B59\x07\u014B\x02\x02" +
		"\u0B59\u0B5B\x07\v\x02\x02\u0B5A\u0B57\x03\x02\x02\x02\u0B5A\u0B5B\x03" +
		"\x02\x02\x02\u0B5B\u0B5D\x03\x02\x02\x02\u0B5C\u0B55\x03\x02\x02\x02\u0B5D" +
		"\u0B60\x03\x02\x02\x02\u0B5E\u0B5C\x03\x02\x02\x02\u0B5E\u0B5F\x03\x02" +
		"\x02\x02\u0B5F\xB1\x03\x02\x02\x02\u0B60\u0B5E\x03\x02\x02\x02\u0B61\u0B66" +
		"\x05\xB0Y\x02\u0B62\u0B63\x05\u0102\x82\x02\u0B63\u0B64\x05\xB0Y\x02\u0B64" +
		"\u0B66\x03\x02\x02\x02\u0B65\u0B61\x03\x02\x02\x02\u0B65\u0B62\x03\x02" +
		"\x02\x02\u0B66\xB3\x03\x02\x02\x02\u0B67\u0B6A\x07\u014B\x02\x02\u0B68" +
		"\u0B6A\x05\xB0Y\x02\u0B69\u0B67\x03\x02\x02\x02\u0B69\u0B68\x03\x02\x02" +
		"\x02\u0B6A\xB5\x03\x02\x02\x02\u0B6B\u0B6C\x07\u012E\x02\x02\u0B6C\u0B6D" +
		"\x05\x80A\x02\u0B6D\u0B6E\x07\u010B\x02\x02\u0B6E\u0B6F\x05\x80A\x02\u0B6F" +
		"\xB7\x03\x02\x02\x02\u0B70\u0B71\x07e\x02\x02\u0B71\u0B72\x07\x04\x02" +
		"\x02\u0B72\u0B73\x07\u012F\x02\x02\u0B73\u0B74\x05\x82B\x02\u0B74\u0B75" +
		"\x07\x05\x02\x02\u0B75\xB9\x03\x02\x02\x02\u0B76\u0B77\x07\u012E\x02\x02" +
		"\u0B77\u0B7A\x07\xA6\x02\x02\u0B78\u0B79\x07\x1B\x02\x02\u0B79\u0B7B\x05" +
		"\x80A\x02\u0B7A\u0B78\x03\x02\x02\x02\u0B7A\u0B7B\x03\x02\x02\x02\u0B7B" +
		"\u0B7C\x03\x02\x02\x02\u0B7C\u0B7D\x07\u010B\x02\x02\u0B7D\u0B7E\x07\u0121" +
		"\x02\x02\u0B7E\u0B7F\x07\xFD\x02\x02\u0B7F\u0B80\x05\u0102\x82\x02\u0B80" +
		"\u0B81\x07\u013A\x02\x02\u0B81\u0B89\x05\x80A\x02\u0B82\u0B83\x07\x06" +
		"\x02\x02\u0B83\u0B84\x05\u0102\x82\x02\u0B84\u0B85\x07\u013A\x02\x02\u0B85" +
		"\u0B86\x05\x80A\x02\u0B86\u0B88\x03\x02\x02\x02\u0B87\u0B82\x03\x02\x02" +
		"\x02\u0B88\u0B8B\x03\x02\x02\x02\u0B89\u0B87\x03\x02\x02\x02\u0B89\u0B8A" +
		"\x03\x02\x02\x02\u0B8A\u0BB7\x03\x02\x02\x02\u0B8B\u0B89\x03\x02\x02\x02" +
		"\u0B8C\u0B8D\x07\u012E\x02\x02\u0B8D\u0B90\x07\xA6\x02\x02\u0B8E\u0B8F" +
		"\x07\x1B\x02\x02\u0B8F\u0B91\x05\x80A\x02\u0B90\u0B8E\x03\x02\x02\x02" +
		"\u0B90\u0B91\x03\x02\x02\x02\u0B91\u0B92\x03\x02\x02\x02\u0B92\u0B93\x07" +
		"\u010B\x02\x02\u0B93\u0BB7\x07K\x02\x02\u0B94\u0B95\x07\u012E\x02\x02" +
		"\u0B95\u0B96\x07\xB8\x02\x02\u0B96\u0B99\x07\xA6\x02\x02\u0B97\u0B98\x07" +
		"\x1B\x02\x02\u0B98\u0B9A\x05\x80A\x02\u0B99\u0B97\x03\x02\x02\x02\u0B99" +
		"\u0B9A\x03\x02\x02\x02\u0B9A\u0B9B\x03\x02\x02\x02\u0B9B\u0B9C\x07\u010B" +
		"\x02\x02\u0B9C\u0BA8\x07\x81\x02\x02\u0B9D\u0B9E\x07\x04\x02\x02\u0B9E" +
		"\u0BA3\x05\u0102\x82\x02\u0B9F\u0BA0\x07\x06\x02\x02\u0BA0\u0BA2\x05\u0102" +
		"\x82\x02\u0BA1\u0B9F\x03\x02\x02\x02\u0BA2\u0BA5\x03\x02\x02\x02\u0BA3" +
		"\u0BA1\x03\x02\x02\x02\u0BA3\u0BA4\x03\x02\x02\x02\u0BA4\u0BA6\x03\x02" +
		"\x02\x02\u0BA5\u0BA3\x03\x02\x02\x02\u0BA6\u0BA7\x07\x05\x02\x02\u0BA7" +
		"\u0BA9\x03\x02\x02\x02\u0BA8\u0B9D\x03\x02\x02\x02\u0BA8\u0BA9\x03\x02" +
		"\x02\x02\u0BA9\u0BAA\x03\x02\x02\x02\u0BAA\u0BAB\x07\u012A\x02\x02\u0BAB" +
		"\u0BAC\x07\x04\x02\x02\u0BAC\u0BB1\x05\x80A\x02\u0BAD\u0BAE\x07\x06\x02" +
		"\x02\u0BAE\u0BB0\x05\x80A\x02\u0BAF\u0BAD\x03\x02\x02\x02\u0BB0\u0BB3" +
		"\x03\x02\x02\x02\u0BB1\u0BAF\x03\x02\x02\x02\u0BB1\u0BB2\x03\x02\x02\x02" +
		"\u0BB2\u0BB4\x03\x02\x02\x02\u0BB3\u0BB1\x03\x02\x02\x02\u0BB4\u0BB5\x07" +
		"\x05\x02\x02\u0BB5\u0BB7\x03\x02\x02\x02\u0BB6\u0B76\x03\x02\x02\x02\u0BB6" +
		"\u0B8C\x03\x02\x02\x02\u0BB6\u0B94\x03\x02\x02\x02\u0BB7\xBB\x03\x02\x02" +
		"\x02\u0BB8\u0BBE\x07\xC9\x02\x02\u0BB9\u0BBF\x05\u0102\x82\x02\u0BBA\u0BBB" +
		"\x07\x04\x02\x02\u0BBB\u0BBC\x05<\x1F\x02\u0BBC\u0BBD\x07\x05\x02\x02" +
		"\u0BBD\u0BBF\x03\x02\x02\x02\u0BBE\u0BB9\x03\x02\x02\x02\u0BBE\u0BBA\x03" +
		"\x02\x02\x02\u0BBF\xBD\x03\x02\x02\x02\u0BC0\u0BC1\x07\xAA\x02\x02\u0BC1" +
		"\u0BC6\x05V,\x02\u0BC2\u0BC3\x07\x06\x02\x02\u0BC3\u0BC5\x05V,\x02\u0BC4" +
		"\u0BC2\x03\x02\x02\x02\u0BC5\u0BC8\x03\x02\x02\x02\u0BC6\u0BC4\x03\x02" +
		"\x02\x02\u0BC6\u0BC7\x03\x02\x02\x02\u0BC7\u0BCA\x03\x02\x02\x02\u0BC8" +
		"\u0BC6\x03\x02\x02\x02\u0BC9\u0BC0\x03\x02\x02\x02\u0BC9\u0BCA\x03\x02" +
		"\x02\x02\u0BCA\u0BCB\x03\x02\x02\x02\u0BCB\u0BCF\x05\xC0a\x02\u0BCC\u0BCD" +
		"\x07\x17\x02\x02\u0BCD\u0BCE\x07\xA5\x02\x02\u0BCE\u0BD0\x05\\/\x02\u0BCF" +
		"\u0BCC\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0\u0BD2\x03\x02" +
		"\x02\x02\u0BD1\u0BD3\t\x0F\x02\x02\u0BD2\u0BD1\x03\x02\x02\x02\u0BD2\u0BD3" +
		"\x03\x02\x02\x02\u0BD3\u0BD9\x03\x02\x02\x02\u0BD4\u0BD5\x07\xD0\x02\x02" +
		"\u0BD5\u0BD6\x07\x04\x02\x02\u0BD6\u0BD7\x05\xC4c\x02\u0BD7\u0BD8\x07" +
		"\x05\x02\x02\u0BD8\u0BDA\x03\x02\x02\x02\u0BD9\u0BD4\x03\x02\x02\x02\u0BD9" +
		"\u0BDA\x03\x02\x02\x02\u0BDA\u0BE4\x03\x02\x02\x02\u0BDB\u0BDC\x07\u0103" +
		"\x02\x02\u0BDC\u0BE1\x05^0\x02\u0BDD\u0BDE\x07\x06\x02\x02\u0BDE\u0BE0" +
		"\x05^0\x02\u0BDF\u0BDD\x03\x02\x02\x02\u0BE0\u0BE3\x03\x02\x02\x02\u0BE1" +
		"\u0BDF\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BE5\x03\x02" +
		"\x02\x02\u0BE3\u0BE1\x03\x02\x02\x02\u0BE4\u0BDB\x03\x02\x02\x02\u0BE4" +
		"\u0BE5\x03\x02\x02\x02\u0BE5\u0BEF\x03\x02\x02\x02\u0BE6\u0BE7\x07I\x02" +
		"\x02\u0BE7\u0BEC\x05`1\x02\u0BE8\u0BE9\x07\x06\x02\x02\u0BE9\u0BEB\x05" +
		"`1\x02\u0BEA\u0BE8\x03\x02\x02\x02\u0BEB\u0BEE\x03\x02\x02\x02\u0BEC\u0BEA" +
		"\x03\x02\x02\x02\u0BEC\u0BED\x03\x02\x02\x02\u0BED\u0BF0\x03\x02\x02\x02" +
		"\u0BEE\u0BEC\x03\x02\x02\x02\u0BEF\u0BE6\x03\x02\x02\x02\u0BEF\u0BF0\x03" +
		"\x02\x02\x02\u0BF0\xBF\x03\x02\x02\x02\u0BF1\u0BF2\x07\xDD\x02\x02\u0BF2" +
		"\u0C0A\x05\xC2b\x02\u0BF3\u0BF4\x07\xF2\x02\x02\u0BF4\u0C0A\x05\xC2b\x02" +
		"\u0BF5\u0BF6\x07v\x02\x02\u0BF6\u0C0A\x05\xC2b\x02\u0BF7\u0BF8\x07\xDD" +
		"\x02\x02\u0BF8\u0BF9\x07$\x02\x02\u0BF9\u0BFA\x05\xC2b\x02\u0BFA\u0BFB" +
		"\x07\x1B\x02\x02\u0BFB\u0BFC\x05\xC2b\x02\u0BFC\u0C0A\x03\x02\x02\x02" +
		"\u0BFD\u0BFE\x07\xF2\x02\x02\u0BFE\u0BFF\x07$\x02\x02\u0BFF\u0C00\x05" +
		"\xC2b\x02\u0C00\u0C01\x07\x1B\x02\x02\u0C01\u0C02\x05\xC2b\x02\u0C02\u0C0A" +
		"\x03\x02\x02\x02\u0C03\u0C04\x07v\x02\x02\u0C04\u0C05\x07$\x02\x02\u0C05" +
		"\u0C06\x05\xC2b\x02\u0C06\u0C07\x07\x1B\x02\x02\u0C07\u0C08\x05\xC2b\x02" +
		"\u0C08\u0C0A\x03\x02\x02\x02\u0C09\u0BF1\x03\x02\x02\x02\u0C09\u0BF3\x03" +
		"\x02\x02\x02\u0C09\u0BF5\x03\x02\x02\x02\u0C09\u0BF7\x03\x02\x02\x02\u0C09" +
		"\u0BFD\x03\x02\x02\x02\u0C09\u0C03\x03\x02\x02\x02\u0C0A\xC1\x03\x02\x02" +
		"\x02\u0C0B\u0C0C\x07\u0118\x02\x02\u0C0C\u0C15\x07\xD6\x02\x02\u0C0D\u0C0E" +
		"\x07\u0118\x02\x02\u0C0E\u0C15\x07h\x02\x02\u0C0F\u0C10\x07:\x02\x02\u0C10" +
		"\u0C15\x07\xF1\x02\x02\u0C11\u0C12\x05\x80A\x02\u0C12\u0C13\t\x1F\x02" +
		"\x02\u0C13\u0C15\x03\x02\x02\x02\u0C14\u0C0B\x03\x02\x02\x02\u0C14\u0C0D" +
		"\x03\x02\x02\x02\u0C14\u0C0F\x03\x02\x02\x02\u0C14\u0C11\x03\x02\x02\x02" +
		"\u0C15\xC3\x03\x02\x02\x02\u0C16\u0C17\bc\x01\x02\u0C17\u0C19\x05\xC6" +
		"d\x02\u0C18\u0C1A\x05\xC8e\x02\u0C19\u0C18\x03\x02\x02\x02\u0C19\u0C1A" +
		"\x03\x02\x02\x02\u0C1A\u0C22\x03\x02\x02\x02\u0C1B\u0C1C\f\x04\x02\x02" +
		"\u0C1C\u0C21\x05\xC4c\x05\u0C1D\u0C1E\f\x03\x02\x02\u0C1E\u0C1F\x07\r" +
		"\x02\x02\u0C1F\u0C21\x05\xC4c\x04\u0C20\u0C1B\x03\x02\x02\x02\u0C20\u0C1D" +
		"\x03\x02\x02\x02\u0C21\u0C24\x03\x02\x02\x02\u0C22\u0C20\x03\x02\x02\x02" +
		"\u0C22\u0C23\x03\x02\x02\x02\u0C23\xC5\x03\x02\x02\x02\u0C24\u0C22\x03" +
		"\x02\x02\x02\u0C25\u0C3F\x05\u0102\x82\x02\u0C26\u0C27\x07\x04\x02\x02" +
		"\u0C27\u0C3F\x07\x05\x02\x02\u0C28\u0C29\x07\xD3\x02\x02\u0C29\u0C2A\x07" +
		"\x04\x02\x02\u0C2A\u0C2F\x05\xC4c\x02\u0C2B\u0C2C\x07\x06\x02\x02\u0C2C" +
		"\u0C2E\x05\xC4c\x02\u0C2D\u0C2B\x03\x02\x02\x02\u0C2E\u0C31\x03\x02\x02" +
		"\x02\u0C2F\u0C2D\x03\x02\x02\x02\u0C2F\u0C30\x03\x02\x02\x02\u0C30\u0C32" +
		"\x03\x02\x02\x02\u0C31\u0C2F\x03\x02\x02\x02\u0C32\u0C33\x07\x05\x02\x02" +
		"\u0C33\u0C3F\x03\x02\x02\x02\u0C34\u0C35\x07\x04\x02\x02\u0C35\u0C36\x05" +
		"\xC4c\x02\u0C36\u0C37\x07\x05\x02\x02\u0C37\u0C3F\x03\x02\x02\x02\u0C38" +
		"\u0C3F\x07\x0E\x02\x02\u0C39\u0C3F\x07\x0F\x02\x02\u0C3A\u0C3B\x07\x10" +
		"\x02\x02\u0C3B\u0C3C\x05\xC4c\x02\u0C3C\u0C3D\x07\x11\x02\x02\u0C3D\u0C3F" +
		"\x03\x02\x02\x02\u0C3E\u0C25\x03\x02\x02\x02\u0C3E\u0C26\x03\x02\x02\x02" +
		"\u0C3E\u0C28\x03\x02\x02\x02\u0C3E\u0C34\x03\x02\x02\x02\u0C3E\u0C38\x03" +
		"\x02\x02\x02\u0C3E\u0C39\x03\x02\x02\x02\u0C3E\u0C3A\x03\x02\x02\x02\u0C3F" +
		"\xC7\x03\x02\x02\x02\u0C40\u0C42\x07\u0142\x02\x02\u0C41\u0C43\x07\u0146" +
		"\x02\x02\u0C42\u0C41\x03\x02\x02\x02\u0C42\u0C43\x03\x02\x02\x02\u0C43" +
		"\u0C5F\x03\x02\x02\x02\u0C44\u0C46\x07\u0140\x02\x02\u0C45\u0C47\x07\u0146" +
		"\x02\x02\u0C46\u0C45\x03\x02\x02\x02\u0C46\u0C47\x03\x02\x02\x02\u0C47" +
		"\u0C5F\x03\x02\x02\x02\u0C48\u0C4A\x07\u0146\x02\x02\u0C49\u0C4B\x07\u0146" +
		"\x02\x02\u0C4A\u0C49\x03\x02\x02\x02\u0C4A\u0C4B\x03\x02\x02\x02\u0C4B" +
		"\u0C5F\x03\x02\x02\x02\u0C4C\u0C4D\x07\x12\x02\x02\u0C4D\u0C4E\x07\u014B" +
		"\x02\x02\u0C4E\u0C50\x07\x13\x02\x02\u0C4F\u0C51\x07\u0146\x02\x02\u0C50" +
		"\u0C4F\x03\x02\x02\x02\u0C50\u0C51\x03\x02\x02\x02\u0C51\u0C5F\x03\x02" +
		"\x02\x02\u0C52\u0C54\x07\x12\x02\x02\u0C53\u0C55\x07\u014B\x02\x02\u0C54" +
		"\u0C53\x03\x02\x02\x02\u0C54\u0C55\x03\x02\x02\x02\u0C55\u0C56\x03\x02" +
		"\x02\x02\u0C56\u0C58\x07\x06\x02\x02\u0C57\u0C59\x07\u014B\x02\x02\u0C58" +
		"\u0C57\x03\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C5A\x03\x02" +
		"\x02\x02\u0C5A\u0C5C\x07\x13\x02\x02\u0C5B\u0C5D\x07\u0146\x02\x02\u0C5C" +
		"\u0C5B\x03\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02\x02\u0C5D\u0C5F\x03\x02" +
		"\x02\x02\u0C5E\u0C40\x03\x02\x02\x02\u0C5E\u0C44\x03\x02\x02\x02\u0C5E" +
		"\u0C48\x03\x02\x02\x02\u0C5E\u0C4C\x03\x02\x02\x02\u0C5E\u0C52\x03\x02" +
		"\x02\x02\u0C5F\xC9\x03\x02\x02\x02\u0C60\u0C61\x05\u0102\x82\x02\u0C61" +
		"\u0C62\x07\u013A\x02";
	private static readonly _serializedATNSegment6: string =
		"\x02\u0C62\u0C63\x05\x80A\x02\u0C63\xCB\x03\x02\x02\x02\u0C64\u0C65\x07" +
		"j\x02\x02\u0C65\u0C69\t \x02\x02\u0C66\u0C67\x07\u0116\x02\x02\u0C67\u0C69" +
		"\t!\x02\x02\u0C68\u0C64\x03\x02\x02\x02\u0C68\u0C66\x03\x02\x02\x02\u0C69" +
		"\xCD\x03\x02\x02\x02\u0C6A\u0C6B\x07\x88\x02\x02\u0C6B\u0C6C\x07\x9B\x02" +
		"\x02\u0C6C\u0C70\x05\xD0i\x02\u0C6D\u0C6E\x07\xDE\x02\x02\u0C6E\u0C70" +
		"\t\"\x02\x02\u0C6F\u0C6A\x03\x02\x02\x02\u0C6F\u0C6D\x03\x02\x02\x02\u0C70" +
		"\xCF\x03\x02\x02\x02\u0C71\u0C72\x07\xDE\x02\x02\u0C72\u0C79\x07\u0119" +
		"\x02\x02\u0C73\u0C74\x07\xDE\x02\x02\u0C74\u0C79\x072\x02\x02\u0C75\u0C76" +
		"\x07\xE3\x02\x02\u0C76\u0C79\x07\xDE\x02\x02\u0C77\u0C79\x07\xFB\x02\x02" +
		"\u0C78\u0C71\x03\x02\x02\x02\u0C78\u0C73\x03\x02\x02\x02\u0C78\u0C75\x03" +
		"\x02\x02\x02\u0C78\u0C77\x03\x02\x02\x02\u0C79\xD1\x03\x02\x02\x02\u0C7A" +
		"\u0C80\x05\x80A\x02\u0C7B\u0C7C\x05\u0102\x82\x02\u0C7C\u0C7D\x07\b\x02" +
		"\x02\u0C7D\u0C7E\x05\x80A\x02\u0C7E\u0C80\x03\x02\x02\x02\u0C7F\u0C7A" +
		"\x03\x02\x02\x02\u0C7F\u0C7B\x03\x02\x02\x02\u0C80\xD3\x03\x02\x02\x02" +
		"\u0C81\u0C82\x05\u0102\x82\x02\u0C82\u0C83\x07\x03\x02\x02\u0C83\u0C84" +
		"\x05\u0102\x82\x02\u0C84\u0C87\x03\x02\x02\x02\u0C85\u0C87\x05\u0102\x82" +
		"\x02\u0C86\u0C81\x03\x02\x02\x02\u0C86\u0C85\x03\x02\x02\x02\u0C87\xD5" +
		"\x03\x02\x02\x02\u0C88\u0C8D\x05\xD4k\x02\u0C89\u0C8A\x07\x06\x02\x02" +
		"\u0C8A\u0C8C\x05\xD4k\x02\u0C8B\u0C89\x03\x02\x02\x02\u0C8C\u0C8F\x03" +
		"\x02\x02\x02\u0C8D\u0C8B\x03\x02\x02\x02\u0C8D\u0C8E\x03\x02\x02\x02\u0C8E" +
		"\xD7\x03\x02\x02\x02\u0C8F\u0C8D\x03\x02\x02\x02\u0C90\u0C91\x07m\x02" +
		"\x02\u0C91\u0C92\x05\xDAn\x02\u0C92\u0C96\x05\xDEp\x02\u0C93\u0C95\x05" +
		"\xE0q\x02\u0C94\u0C93\x03\x02\x02\x02\u0C95\u0C98\x03\x02\x02\x02\u0C96" +
		"\u0C94\x03\x02\x02\x02\u0C96\u0C97\x03\x02\x02\x02\u0C97\u0C99\x03\x02" +
		"\x02\x02\u0C98\u0C96\x03\x02\x02\x02\u0C99\u0C9A\x05\xE2r\x02\u0C9A\xD9" +
		"\x03\x02\x02\x02\u0C9B\u0C9C\x05\xF4{\x02\u0C9C\u0CA5\x07\x04\x02\x02" +
		"\u0C9D\u0CA2\x05\xDCo\x02\u0C9E\u0C9F\x07\x06\x02\x02\u0C9F\u0CA1\x05" +
		"\xDCo\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA1\u0CA4\x03\x02\x02\x02\u0CA2" +
		"\u0CA0\x03\x02\x02\x02\u0CA2\u0CA3\x03\x02\x02\x02\u0CA3\u0CA6\x03\x02" +
		"\x02\x02\u0CA4\u0CA2\x03\x02\x02\x02\u0CA5\u0C9D\x03\x02\x02\x02\u0CA5" +
		"\u0CA6\x03\x02\x02\x02\u0CA6\u0CA7\x03\x02\x02\x02\u0CA7\u0CA8\x07\x05" +
		"\x02\x02\u0CA8\xDB\x03\x02\x02\x02\u0CA9\u0CAB\x05\u0102\x82\x02\u0CAA" +
		"\u0CA9\x03\x02\x02\x02\u0CAA\u0CAB\x03\x02\x02\x02\u0CAB\u0CAC\x03\x02" +
		"\x02\x02\u0CAC\u0CAD\x05\xB0Y\x02\u0CAD\xDD\x03\x02\x02\x02\u0CAE\u0CAF" +
		"\x07\xEA\x02\x02\u0CAF\u0CB0\x05\xB0Y\x02\u0CB0\xDF\x03\x02\x02\x02\u0CB1" +
		"\u0CB2\x07\x95\x02\x02\u0CB2\u0CC5\x05\u0102\x82\x02\u0CB3\u0CB5\x07\xB8" +
		"\x02\x02\u0CB4\u0CB3\x03\x02\x02\x02\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5" +
		"\u0CB6\x03\x02\x02\x02\u0CB6\u0CC5\x07P\x02\x02\u0CB7\u0CB8\x07\xEA\x02" +
		"\x02\u0CB8\u0CB9\x07\xB9\x02\x02\u0CB9\u0CBA\x07\xC0\x02\x02\u0CBA\u0CBB" +
		"\x07\xB9\x02\x02\u0CBB\u0CC5\x07\x80\x02\x02\u0CBC\u0CBD\x07(\x02\x02" +
		"\u0CBD\u0CBE\x07\xC0\x02\x02\u0CBE\u0CBF\x07\xB9\x02\x02\u0CBF\u0CC5\x07" +
		"\x80\x02\x02\u0CC0\u0CC1\x07\xF8\x02\x02\u0CC1\u0CC5\t\x03\x02\x02\u0CC2" +
		"\u0CC3\x070\x02\x02\u0CC3\u0CC5\x05\xA0Q\x02\u0CC4\u0CB1\x03\x02\x02\x02" +
		"\u0CC4\u0CB4\x03\x02\x02\x02\u0CC4\u0CB7\x03\x02\x02\x02\u0CC4\u0CBC\x03" +
		"\x02\x02\x02\u0CC4\u0CC0\x03\x02\x02\x02\u0CC4\u0CC2\x03\x02\x02\x02\u0CC5" +
		"\xE1\x03\x02\x02\x02\u0CC6\u0CC7\x07\xE8\x02\x02\u0CC7\u0D2A\x05\x86D" +
		"\x02\u0CC8\u0CC9\x07\xFD\x02\x02\u0CC9\u0CCA\x05\u0102\x82\x02\u0CCA\u0CCB" +
		"\x07\u013A\x02\x02\u0CCB\u0CCC\x05\x80A\x02\u0CCC\u0D2A\x03\x02\x02\x02" +
		"\u0CCD\u0CCE\x07*\x02\x02\u0CCE\u0CD0\x05\x80A\x02\u0CCF\u0CD1\x05\xE4" +
		"s\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD1\u0CD2\x03\x02\x02\x02\u0CD2\u0CD0" +
		"\x03\x02\x02\x02\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD5\x03\x02\x02\x02" +
		"\u0CD4\u0CD6\x05\xE8u\x02\u0CD5\u0CD4\x03\x02\x02\x02\u0CD5\u0CD6\x03" +
		"\x02\x02\x02\u0CD6\u0CD7\x03\x02\x02\x02\u0CD7\u0CD8\x07Z\x02\x02\u0CD8" +
		"\u0CD9\x07*\x02\x02\u0CD9\u0D2A\x03\x02\x02\x02\u0CDA\u0CDC\x07*\x02\x02" +
		"\u0CDB\u0CDD\x05\xE4s\x02\u0CDC\u0CDB\x03\x02\x02\x02\u0CDD\u0CDE\x03" +
		"\x02\x02\x02\u0CDE\u0CDC\x03\x02\x02\x02\u0CDE\u0CDF\x03\x02\x02\x02\u0CDF" +
		"\u0CE1\x03\x02\x02\x02\u0CE0\u0CE2\x05\xE8u\x02\u0CE1\u0CE0\x03\x02\x02" +
		"\x02\u0CE1\u0CE2\x03\x02\x02\x02\u0CE2\u0CE3\x03\x02\x02\x02\u0CE3\u0CE4" +
		"\x07Z\x02\x02\u0CE4\u0CE5\x07*\x02\x02\u0CE5\u0D2A\x03\x02\x02\x02\u0CE6" +
		"\u0CE7\x07y\x02\x02\u0CE7\u0CE8\x05\x80A\x02\u0CE8\u0CE9\x07\u010B\x02" +
		"\x02\u0CE9\u0CED\x05\xECw\x02\u0CEA\u0CEC\x05\xE6t\x02\u0CEB\u0CEA\x03" +
		"\x02\x02\x02\u0CEC\u0CEF\x03\x02\x02\x02\u0CED\u0CEB\x03\x02\x02\x02\u0CED" +
		"\u0CEE\x03\x02\x02\x02\u0CEE\u0CF1\x03\x02\x02\x02\u0CEF\u0CED\x03\x02" +
		"\x02\x02\u0CF0\u0CF2\x05\xE8u\x02\u0CF1\u0CF0\x03\x02\x02\x02\u0CF1\u0CF2" +
		"\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF4\x07Z\x02\x02" +
		"\u0CF4\u0CF5\x07y\x02\x02\u0CF5\u0D2A\x03\x02\x02\x02\u0CF6\u0CF7\x07" +
		"\x89\x02\x02\u0CF7\u0D2A\x05\u0102\x82\x02\u0CF8\u0CF9\x07\x99\x02\x02" +
		"\u0CF9\u0D2A\x05\u0102\x82\x02\u0CFA\u0D00\x07\"\x02\x02\u0CFB\u0CFC\x05" +
		"\xEAv\x02\u0CFC\u0CFD\x07\u0147\x02\x02\u0CFD\u0CFF\x03\x02\x02\x02\u0CFE" +
		"\u0CFB\x03\x02\x02\x02\u0CFF\u0D02\x03\x02\x02\x02\u0D00\u0CFE\x03\x02" +
		"\x02\x02\u0D00\u0D01\x03\x02\x02\x02\u0D01\u0D04\x03\x02\x02\x02\u0D02" +
		"\u0D00\x03\x02\x02\x02\u0D03\u0D05\x05\xECw\x02\u0D04\u0D03\x03\x02\x02" +
		"\x02\u0D04\u0D05\x03\x02\x02\x02\u0D05\u0D06\x03\x02\x02\x02\u0D06\u0D2A" +
		"\x07Z\x02\x02\u0D07\u0D08\x05\u0102\x82\x02\u0D08\u0D09\x07\f\x02\x02" +
		"\u0D09\u0D0B\x03\x02\x02\x02\u0D0A\u0D07\x03\x02\x02\x02\u0D0A\u0D0B\x03" +
		"\x02\x02\x02\u0D0B\u0D0C\x03\x02\x02\x02\u0D0C\u0D0D\x07\xA3\x02\x02\u0D0D" +
		"\u0D0E\x05\xECw\x02\u0D0E\u0D0F\x07Z\x02\x02\u0D0F\u0D10\x07\xA3\x02\x02" +
		"\u0D10\u0D2A\x03\x02\x02\x02\u0D11\u0D12\x05\u0102\x82\x02\u0D12\u0D13" +
		"\x07\f\x02\x02\u0D13\u0D15\x03\x02\x02\x02\u0D14\u0D11\x03\x02\x02\x02" +
		"\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D17\x07" +
		"\u0130\x02\x02\u0D17\u0D18\x05\x80A\x02\u0D18\u0D19\x07S\x02\x02\u0D19" +
		"\u0D1A\x05\xECw\x02\u0D1A\u0D1B\x07Z\x02\x02\u0D1B\u0D1C\x07\u0130\x02" +
		"\x02\u0D1C\u0D2A\x03\x02\x02\x02\u0D1D\u0D1E\x05\u0102\x82\x02\u0D1E\u0D1F" +
		"\x07\f\x02\x02\u0D1F\u0D21\x03\x02\x02\x02\u0D20\u0D1D\x03\x02\x02\x02" +
		"\u0D20\u0D21\x03\x02\x02\x02\u0D21\u0D22\x03\x02\x02\x02\u0D22\u0D23\x07" +
		"\xE2\x02\x02\u0D23\u0D24\x05\xECw\x02\u0D24\u0D25\x07\u0120\x02\x02\u0D25" +
		"\u0D26\x05\x80A\x02\u0D26\u0D27\x07Z\x02\x02\u0D27\u0D28\x07\xE2\x02\x02" +
		"\u0D28\u0D2A\x03\x02\x02\x02\u0D29\u0CC6\x03\x02\x02\x02\u0D29\u0CC8\x03" +
		"\x02\x02\x02\u0D29\u0CCD\x03\x02\x02\x02\u0D29\u0CDA\x03\x02\x02\x02\u0D29" +
		"\u0CE6\x03\x02\x02\x02\u0D29\u0CF6\x03\x02\x02\x02\u0D29\u0CF8\x03\x02" +
		"\x02\x02\u0D29\u0CFA\x03\x02\x02\x02\u0D29\u0D0A\x03\x02\x02\x02\u0D29" +
		"\u0D14\x03\x02\x02\x02\u0D29\u0D20\x03\x02\x02\x02\u0D2A\xE3\x03\x02\x02" +
		"\x02\u0D2B\u0D2C\x07\u012E\x02\x02\u0D2C\u0D2D\x05\x80A\x02\u0D2D\u0D2E" +
		"\x07\u010B\x02\x02\u0D2E\u0D2F\x05\xECw\x02\u0D2F\xE5\x03\x02\x02\x02" +
		"\u0D30\u0D31\x07X\x02\x02\u0D31\u0D32\x05\x80A\x02\u0D32\u0D33\x07\u010B" +
		"\x02\x02\u0D33\u0D34\x05\xECw\x02\u0D34\xE7\x03\x02\x02\x02\u0D35\u0D36" +
		"\x07V\x02\x02\u0D36\u0D37\x05\xECw\x02\u0D37\xE9\x03\x02\x02\x02\u0D38" +
		"\u0D39\x07G\x02\x02\u0D39\u0D3E\x05\u0102\x82\x02\u0D3A\u0D3B\x07\x06" +
		"\x02\x02\u0D3B\u0D3D\x05\u0102\x82\x02\u0D3C\u0D3A\x03\x02\x02\x02\u0D3D" +
		"\u0D40\x03\x02\x02\x02\u0D3E\u0D3C\x03\x02\x02\x02\u0D3E\u0D3F\x03\x02" +
		"\x02\x02\u0D3F\u0D41\x03\x02\x02\x02\u0D40\u0D3E\x03\x02\x02\x02\u0D41" +
		"\u0D44\x05\xB0Y\x02\u0D42\u0D43\x07H\x02\x02\u0D43\u0D45\x05\x86D\x02" +
		"\u0D44\u0D42\x03\x02\x02\x02\u0D44\u0D45\x03\x02\x02\x02\u0D45\xEB\x03" +
		"\x02\x02\x02\u0D46\u0D47\x05\xE2r\x02\u0D47\u0D48\x07\u0147\x02\x02\u0D48" +
		"\u0D4A\x03\x02\x02\x02\u0D49\u0D46\x03\x02\x02\x02\u0D4A\u0D4B\x03\x02" +
		"\x02\x02\u0D4B\u0D49\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C" +
		"\xED\x03\x02\x02\x02\u0D4D\u0D54\x077\x02\x02\u0D4E\u0D54\x07\xFA\x02" +
		"\x02\u0D4F\u0D54\x07K\x02\x02\u0D50\u0D54\x07\x81\x02\x02\u0D51\u0D54" +
		"\x07\u0121\x02\x02\u0D52\u0D54\x05\u0102\x82\x02\u0D53\u0D4D\x03\x02\x02" +
		"\x02\u0D53\u0D4E\x03\x02\x02\x02\u0D53\u0D4F\x03\x02\x02\x02\u0D53\u0D50" +
		"\x03\x02\x02\x02\u0D53\u0D51\x03\x02\x02\x02\u0D53\u0D52\x03\x02\x02\x02" +
		"\u0D54\xEF\x03\x02\x02\x02\u0D55\u0D59\x07\u0106\x02\x02\u0D56\u0D59\x07" +
		"\xF5\x02\x02\u0D57\u0D59\x05\u0102\x82\x02\u0D58\u0D55\x03\x02\x02\x02" +
		"\u0D58\u0D56\x03\x02\x02\x02\u0D58\u0D57\x03\x02\x02\x02\u0D59\xF1\x03" +
		"\x02\x02\x02\u0D5A\u0D5C\x05\xF0y\x02\u0D5B\u0D5A\x03\x02\x02\x02\u0D5B" +
		"\u0D5C\x03\x02\x02\x02\u0D5C\u0D5D\x03\x02\x02\x02\u0D5D\u0D5E\x05\xF4" +
		"{\x02\u0D5E\xF3\x03\x02\x02\x02\u0D5F\u0D64\x05\u0102\x82\x02\u0D60\u0D61" +
		"\x07\x03\x02\x02\u0D61\u0D63\x05\u0102\x82\x02\u0D62\u0D60\x03\x02\x02" +
		"\x02\u0D63\u0D66\x03\x02\x02\x02\u0D64\u0D62\x03\x02\x02\x02\u0D64\u0D65" +
		"\x03\x02\x02\x02\u0D65\xF5\x03\x02\x02\x02\u0D66\u0D64\x03\x02\x02\x02" +
		"\u0D67\u0D68\x07i\x02\x02\u0D68\u0D69\x05\xF8}\x02\u0D69\u0D6A\x07\x1E" +
		"\x02\x02\u0D6A\u0D6B\x07\xBD\x02\x02\u0D6B\u0D6C\x05\x86D\x02\u0D6C\xF7" +
		"\x03\x02\x02\x02\u0D6D\u0D6E\t#\x02\x02\u0D6E\xF9\x03\x02\x02\x02\u0D6F" +
		"\u0D73\x05\xFC\x7F\x02\u0D70\u0D73\x07B\x02\x02\u0D71\u0D73\x07>\x02\x02" +
		"\u0D72\u0D6F\x03\x02\x02\x02\u0D72\u0D70\x03\x02\x02\x02\u0D72\u0D71\x03" +
		"\x02\x02\x02\u0D73\xFB\x03\x02\x02\x02\u0D74\u0D7A\x05\u0102\x82\x02\u0D75" +
		"\u0D76\x07\u0123\x02\x02\u0D76\u0D7A\x05\u0102\x82\x02\u0D77\u0D78\x07" +
		"\xED\x02\x02\u0D78\u0D7A\x05\u0102\x82\x02\u0D79\u0D74\x03\x02\x02\x02" +
		"\u0D79\u0D75\x03\x02\x02\x02\u0D79\u0D77\x03\x02\x02\x02\u0D7A\xFD\x03" +
		"\x02\x02\x02\u0D7B\u0D80\x05\u0102\x82\x02\u0D7C\u0D7D\x07\x06\x02\x02" +
		"\u0D7D\u0D7F\x05\u0102\x82\x02\u0D7E\u0D7C\x03\x02\x02\x02\u0D7F\u0D82" +
		"\x03\x02\x02\x02\u0D80\u0D7E\x03\x02\x02\x02\u0D80\u0D81\x03\x02\x02\x02" +
		"\u0D81\xFF\x03\x02\x02\x02\u0D82\u0D80\x03\x02\x02\x02\u0D83\u0D8A\x07" +
		"7\x02\x02\u0D84\u0D8A\x07\xFA\x02\x02\u0D85\u0D8A\x07K\x02\x02\u0D86\u0D8A" +
		"\x07\x81\x02\x02\u0D87\u0D8A\x07\u0121\x02\x02\u0D88\u0D8A\x05\u0102\x82" +
		"\x02\u0D89\u0D83\x03\x02\x02\x02\u0D89\u0D84\x03\x02\x02\x02\u0D89\u0D85" +
		"\x03\x02\x02\x02\u0D89\u0D86\x03\x02\x02\x02\u0D89\u0D87\x03\x02\x02\x02" +
		"\u0D89\u0D88\x03\x02\x02\x02\u0D8A\u0101\x03\x02\x02\x02\u0D8B\u0D91\x07" +
		"\u014E\x02\x02\u0D8C\u0D91\x07\u0150\x02\x02\u0D8D\u0D91\x05\u0108\x85" +
		"\x02\u0D8E\u0D91\x07\u0151\x02\x02\u0D8F\u0D91\x07\u014F\x02\x02\u0D90" +
		"\u0D8B\x03\x02\x02\x02\u0D90\u0D8C\x03\x02\x02\x02\u0D90\u0D8D\x03\x02" +
		"\x02\x02\u0D90\u0D8E\x03\x02\x02\x02\u0D90\u0D8F\x03\x02\x02\x02\u0D91" +
		"\u0103\x03\x02\x02\x02\u0D92\u0D94\x07\u0141\x02\x02\u0D93\u0D92\x03\x02" +
		"\x02\x02\u0D93\u0D94\x03\x02\x02\x02\u0D94\u0D95\x03\x02\x02\x02\u0D95" +
		"\u0D9F\x07\u014C\x02\x02\u0D96\u0D98\x07\u0141\x02\x02\u0D97\u0D96\x03" +
		"\x02\x02\x02\u0D97\u0D98\x03\x02\x02\x02\u0D98\u0D99\x03\x02\x02\x02\u0D99" +
		"\u0D9F\x07\u014D\x02\x02\u0D9A\u0D9C\x07\u0141\x02\x02\u0D9B\u0D9A\x03" +
		"\x02\x02\x02\u0D9B\u0D9C\x03\x02\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02\u0D9D" +
		"\u0D9F\x07\u014B\x02\x02\u0D9E\u0D93\x03\x02\x02\x02\u0D9E\u0D97\x03\x02" +
		"\x02\x02\u0D9E\u0D9B\x03\x02\x02\x02\u0D9F\u0105\x03\x02\x02\x02\u0DA0" +
		"\u0DA3\x05\u0102\x82\x02\u0DA1\u0DA3\x05\xA0Q\x02\u0DA2\u0DA0\x03\x02" +
		"\x02\x02\u0DA2\u0DA1\x03\x02\x02\x02\u0DA3\u0107\x03\x02\x02\x02\u0DA4" +
		"\u0DA5\t$\x02\x02\u0DA5\u0109\x03\x02\x02\x02\u01CC\u0129\u0130\u0134" +
		"\u0138\u013E\u0142\u0149\u014E\u0152\u0158\u015C\u016F\u0175\u0179\u017D" +
		"\u0181\u0189\u018D\u0190\u0195\u019B\u01A4\u01AA\u01AE\u01B4\u01BB\u01C4" +
		"\u01D0\u01D9\u01E2\u01E8\u01F3\u01FB\u0203\u020A\u0214\u021B\u0223\u0232" +
		"\u0255\u0258\u025B\u025F\u0265\u026A\u0271\u0277\u027B\u027F\u0287\u028D" +
		"\u0291\u029F\u02A7\u02BA\u02D3\u02D6\u02DD\u02E4\u02ED\u02F1\u02F8\u0300" +
		"\u0309\u030F\u0314\u0318\u0320\u0325\u032E\u0334\u033B\u0344\u034A\u034E" +
		"\u0354\u035B\u0360\u036D\u0372\u037E\u0382\u0388\u0391\u0396\u039C\u03B4" +
		"\u03BA\u03BC\u03C2\u03C8\u03CA\u03D2\u03D4\u03DE\u03E0\u03EF\u03F4\u03FB" +
		"\u0405\u040B\u040D\u0415\u0417\u0430\u0433\u0437\u043B\u044D\u0450\u045B" +
		"\u045E\u046E\u0478\u047D\u0483\u0486\u048F\u0491\u0494\u049E\u04A2\u04A8" +
		"\u04AF\u04B4\u04BA\u04BE\u04C2\u04C8\u04D3\u04DC\u04E6\u04E9\u04EE\u04F0" +
		"\u04F7\u04FD\u04FF\u0503\u050D\u0513\u0516\u0518\u0524\u052B\u052F\u0533" +
		"\u0537\u053E\u0547\u054A\u054E\u0553\u0557\u055F\u0562\u0565\u056C\u0577" +
		"\u057A\u0584\u0587\u0592\u0597\u059F\u05A2\u05A6\u05AF\u05B8\u05BB\u05C4" +
		"\u05C7\u05CA\u05CE\u05D9\u05DC\u05E3\u05E6\u05F9\u05FD\u0601\u0605\u0609" +
		"\u060D\u060F\u061A\u061F\u0628\u0631\u0634\u063A\u0646\u0649\u0652\u0655" +
		"\u065D\u0660\u0663\u0668\u066B\u0677\u067A\u0682\u0687\u068B\u068D\u068F" +
		"\u069E\u06A0\u06AB\u06C0\u06CA\u06D5\u06D9\u06DB\u06E3\u06EA\u06F7\u06FD" +
		"\u0717\u0726\u072B\u072F\u0739\u073F\u0745\u074D\u0752\u0759\u075B\u0761" +
		"\u0767\u076B\u0770\u0779\u077E\u078C\u0796\u0799\u07A2\u07A7\u07AC\u07AE" +
		"\u07B7\u07BA\u07C2\u07C5\u07CC\u07D1\u07DC\u07DF\u07E3\u07E5\u07ED\u07F7" +
		"\u07FD\u07FF\u0806\u080A\u080C\u0813\u0817\u0819\u081B\u0824\u082F\u0833" +
		"\u083D\u0847\u084B\u0853\u0855\u0862\u086A\u0873\u0879\u0881\u0887\u088B" +
		"\u0890\u0895\u089B\u08A9\u08AB\u08C9\u08D4\u08DC\u08E1\u08E6\u08F3\u08F9" +
		"\u08FC\u0903\u0908\u090B\u090E\u0913\u091A\u091D\u0926\u0929\u092D\u0930" +
		"\u0933\u0942\u0945\u0958\u095C\u0964\u0968\u0981\u0984\u098D\u0993\u0999" +
		"\u099F\u09A8\u09AB\u09AE\u09C1\u09CA\u09E0\u09E3\u09ED\u09F6\u09FC\u0A02" +
		"\u0A0D\u0A0F\u0A14\u0A1B\u0A1D\u0A23\u0A29\u0A34\u0A3D\u0A42\u0A47\u0A49" +
		"\u0A4B\u0A51\u0A53\u0A5D\u0A66\u0A68\u0A6E\u0A70\u0A73\u0A7D\u0A7F\u0A87" +
		"\u0A8F\u0A92\u0A97\u0A9C\u0AA8\u0AAC\u0AB0\u0AB3\u0AB5\u0ABD\u0AC0\u0ACA" +
		"\u0AD2\u0AD8\u0ADA\u0AE2\u0AEC\u0AF2\u0B00\u0B09\u0B10\u0B15\u0B1C\u0B26" +
		"\u0B2B\u0B32\u0B4C\u0B51\u0B53\u0B5A\u0B5E\u0B65\u0B69\u0B7A\u0B89\u0B90" +
		"\u0B99\u0BA3\u0BA8\u0BB1\u0BB6\u0BBE\u0BC6\u0BC9\u0BCF\u0BD2\u0BD9\u0BE1" +
		"\u0BE4\u0BEC\u0BEF\u0C09\u0C14\u0C19\u0C20\u0C22\u0C2F\u0C3E\u0C42\u0C46" +
		"\u0C4A\u0C50\u0C54\u0C58\u0C5C\u0C5E\u0C68\u0C6F\u0C78\u0C7F\u0C86\u0C8D" +
		"\u0C96\u0CA2\u0CA5\u0CAA\u0CB4\u0CC4\u0CD2\u0CD5\u0CDE\u0CE1\u0CED\u0CF1" +
		"\u0D00\u0D04\u0D0A\u0D14\u0D20\u0D29\u0D3E\u0D44\u0D4B\u0D53\u0D58\u0D5B" +
		"\u0D64\u0D72\u0D79\u0D80\u0D89\u0D90\u0D93\u0D97\u0D9B\u0D9E\u0DA2";
	public static readonly _serializedATN: string = Utils.join(
		[
			TrinoSQLParser._serializedATNSegment0,
			TrinoSQLParser._serializedATNSegment1,
			TrinoSQLParser._serializedATNSegment2,
			TrinoSQLParser._serializedATNSegment3,
			TrinoSQLParser._serializedATNSegment4,
			TrinoSQLParser._serializedATNSegment5,
			TrinoSQLParser._serializedATNSegment6,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TrinoSQLParser.__ATN) {
			TrinoSQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TrinoSQLParser._serializedATN));
		}

		return TrinoSQLParser.__ATN;
	}

}

export class SingleStatementContext extends ParserRuleContext {
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_singleStatement; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSingleStatement) {
			listener.enterSingleStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSingleStatement) {
			listener.exitSingleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSingleStatement) {
			return visitor.visitSingleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StandaloneExpressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_standaloneExpression; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStandaloneExpression) {
			listener.enterStandaloneExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStandaloneExpression) {
			listener.exitStandaloneExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStandaloneExpression) {
			return visitor.visitStandaloneExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StandalonePathSpecificationContext extends ParserRuleContext {
	public pathSpecification(): PathSpecificationContext {
		return this.getRuleContext(0, PathSpecificationContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_standalonePathSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStandalonePathSpecification) {
			listener.enterStandalonePathSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStandalonePathSpecification) {
			listener.exitStandalonePathSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStandalonePathSpecification) {
			return visitor.visitStandalonePathSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StandaloneTypeContext extends ParserRuleContext {
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_standaloneType; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStandaloneType) {
			listener.enterStandaloneType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStandaloneType) {
			listener.exitStandaloneType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStandaloneType) {
			return visitor.visitStandaloneType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StandaloneRowPatternContext extends ParserRuleContext {
	public rowPattern(): RowPatternContext {
		return this.getRuleContext(0, RowPatternContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_standaloneRowPattern; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStandaloneRowPattern) {
			listener.enterStandaloneRowPattern(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStandaloneRowPattern) {
			listener.exitStandaloneRowPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStandaloneRowPattern) {
			return visitor.visitStandaloneRowPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StandaloneFunctionSpecificationContext extends ParserRuleContext {
	public functionSpecification(): FunctionSpecificationContext {
		return this.getRuleContext(0, FunctionSpecificationContext);
	}
	public EOF(): TerminalNode { return this.getToken(TrinoSQLParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_standaloneFunctionSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStandaloneFunctionSpecification) {
			listener.enterStandaloneFunctionSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStandaloneFunctionSpecification) {
			listener.exitStandaloneFunctionSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStandaloneFunctionSpecification) {
			return visitor.visitStandaloneFunctionSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_statement; }
	public copyFrom(ctx: StatementContext): void {
		super.copyFrom(ctx);
	}
}
export class StatementDefaultContext extends StatementContext {
	public rootQuery(): RootQueryContext {
		return this.getRuleContext(0, RootQueryContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStatementDefault) {
			listener.enterStatementDefault(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStatementDefault) {
			listener.exitStatementDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStatementDefault) {
			return visitor.visitStatementDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UseContext extends StatementContext {
	public _schema!: IdentifierContext;
	public _catalog!: IdentifierContext;
	public USE(): TerminalNode { return this.getToken(TrinoSQLParser.USE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUse) {
			listener.enterUse(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUse) {
			listener.exitUse(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUse) {
			return visitor.visitUse(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateCatalogContext extends StatementContext {
	public _catalog!: IdentifierContext;
	public _connectorName!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public CATALOG(): TerminalNode { return this.getToken(TrinoSQLParser.CATALOG, 0); }
	public USING(): TerminalNode { return this.getToken(TrinoSQLParser.USING, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public principal(): PrincipalContext | undefined {
		return this.tryGetRuleContext(0, PrincipalContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateCatalog) {
			listener.enterCreateCatalog(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateCatalog) {
			listener.exitCreateCatalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateCatalog) {
			return visitor.visitCreateCatalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropCatalogContext extends StatementContext {
	public _catalog!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public CATALOG(): TerminalNode { return this.getToken(TrinoSQLParser.CATALOG, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESTRICT, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropCatalog) {
			listener.enterDropCatalog(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropCatalog) {
			listener.exitDropCatalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropCatalog) {
			return visitor.visitDropCatalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateSchemaContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMA, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public principal(): PrincipalContext | undefined {
		return this.tryGetRuleContext(0, PrincipalContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateSchema) {
			listener.enterCreateSchema(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateSchema) {
			listener.exitCreateSchema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateSchema) {
			return visitor.visitCreateSchema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropSchemaContext extends StatementContext {
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMA, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESTRICT, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropSchema) {
			listener.enterDropSchema(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropSchema) {
			listener.exitDropSchema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropSchema) {
			return visitor.visitDropSchema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RenameSchemaContext extends StatementContext {
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMA, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public RENAME(): TerminalNode { return this.getToken(TrinoSQLParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRenameSchema) {
			listener.enterRenameSchema(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRenameSchema) {
			listener.exitRenameSchema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRenameSchema) {
			return visitor.visitRenameSchema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetSchemaAuthorizationContext extends StatementContext {
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMA, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetSchemaAuthorization) {
			listener.enterSetSchemaAuthorization(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetSchemaAuthorization) {
			listener.exitSetSchemaAuthorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetSchemaAuthorization) {
			return visitor.visitSetSchemaAuthorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateTableAsSelectContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public rootQuery(): RootQueryContext | undefined {
		return this.tryGetRuleContext(0, RootQueryContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.WITH);
		} else {
			return this.getToken(TrinoSQLParser.WITH, i);
		}
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public DATA(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DATA, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NO, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateTableAsSelect) {
			listener.enterCreateTableAsSelect(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateTableAsSelect) {
			listener.exitCreateTableAsSelect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateTableAsSelect) {
			return visitor.visitCreateTableAsSelect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateTableContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public tableElement(): TableElementContext[];
	public tableElement(i: number): TableElementContext;
	public tableElement(i?: number): TableElementContext | TableElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableElementContext);
		} else {
			return this.getRuleContext(i, TableElementContext);
		}
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateTable) {
			listener.enterCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateTable) {
			listener.exitCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateTable) {
			return visitor.visitCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropTableContext extends StatementContext {
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropTable) {
			listener.enterDropTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropTable) {
			listener.exitDropTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropTable) {
			return visitor.visitDropTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InsertIntoContext extends StatementContext {
	public INSERT(): TerminalNode { return this.getToken(TrinoSQLParser.INSERT, 0); }
	public INTO(): TerminalNode { return this.getToken(TrinoSQLParser.INTO, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public rootQuery(): RootQueryContext {
		return this.getRuleContext(0, RootQueryContext);
	}
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterInsertInto) {
			listener.enterInsertInto(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitInsertInto) {
			listener.exitInsertInto(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitInsertInto) {
			return visitor.visitInsertInto(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DeleteContext extends StatementContext {
	public DELETE(): TerminalNode { return this.getToken(TrinoSQLParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHERE, 0); }
	public booleanExpression(): BooleanExpressionContext | undefined {
		return this.tryGetRuleContext(0, BooleanExpressionContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDelete) {
			listener.enterDelete(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDelete) {
			listener.exitDelete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDelete) {
			return visitor.visitDelete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TruncateTableContext extends StatementContext {
	public TRUNCATE(): TerminalNode { return this.getToken(TrinoSQLParser.TRUNCATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTruncateTable) {
			listener.enterTruncateTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTruncateTable) {
			listener.exitTruncateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTruncateTable) {
			return visitor.visitTruncateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentTableContext extends StatementContext {
	public COMMENT(): TerminalNode { return this.getToken(TrinoSQLParser.COMMENT, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IS(): TerminalNode { return this.getToken(TrinoSQLParser.IS, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCommentTable) {
			listener.enterCommentTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCommentTable) {
			listener.exitCommentTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCommentTable) {
			return visitor.visitCommentTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentViewContext extends StatementContext {
	public COMMENT(): TerminalNode { return this.getToken(TrinoSQLParser.COMMENT, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IS(): TerminalNode { return this.getToken(TrinoSQLParser.IS, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCommentView) {
			listener.enterCommentView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCommentView) {
			listener.exitCommentView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCommentView) {
			return visitor.visitCommentView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentColumnContext extends StatementContext {
	public COMMENT(): TerminalNode { return this.getToken(TrinoSQLParser.COMMENT, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IS(): TerminalNode { return this.getToken(TrinoSQLParser.IS, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCommentColumn) {
			listener.enterCommentColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCommentColumn) {
			listener.exitCommentColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCommentColumn) {
			return visitor.visitCommentColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RenameTableContext extends StatementContext {
	public _from!: QualifiedNameContext;
	public _to!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public RENAME(): TerminalNode { return this.getToken(TrinoSQLParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRenameTable) {
			listener.enterRenameTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRenameTable) {
			listener.exitRenameTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRenameTable) {
			return visitor.visitRenameTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AddColumnContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _column!: ColumnDefinitionContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public ADD(): TerminalNode { return this.getToken(TrinoSQLParser.ADD, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public columnDefinition(): ColumnDefinitionContext {
		return this.getRuleContext(0, ColumnDefinitionContext);
	}
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.IF);
		} else {
			return this.getToken(TrinoSQLParser.IF, i);
		}
	}
	public EXISTS(): TerminalNode[];
	public EXISTS(i: number): TerminalNode;
	public EXISTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.EXISTS);
		} else {
			return this.getToken(TrinoSQLParser.EXISTS, i);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAddColumn) {
			listener.enterAddColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAddColumn) {
			listener.exitAddColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAddColumn) {
			return visitor.visitAddColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RenameColumnContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _from!: QualifiedNameContext;
	public _to!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public RENAME(): TerminalNode { return this.getToken(TrinoSQLParser.RENAME, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.IF);
		} else {
			return this.getToken(TrinoSQLParser.IF, i);
		}
	}
	public EXISTS(): TerminalNode[];
	public EXISTS(i: number): TerminalNode;
	public EXISTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.EXISTS);
		} else {
			return this.getToken(TrinoSQLParser.EXISTS, i);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRenameColumn) {
			listener.enterRenameColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRenameColumn) {
			listener.exitRenameColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRenameColumn) {
			return visitor.visitRenameColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropColumnContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _column!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.IF);
		} else {
			return this.getToken(TrinoSQLParser.IF, i);
		}
	}
	public EXISTS(): TerminalNode[];
	public EXISTS(i: number): TerminalNode;
	public EXISTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.EXISTS);
		} else {
			return this.getToken(TrinoSQLParser.EXISTS, i);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropColumn) {
			listener.enterDropColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropColumn) {
			listener.exitDropColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropColumn) {
			return visitor.visitDropColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetColumnTypeContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _columnName!: QualifiedNameContext;
	public ALTER(): TerminalNode[];
	public ALTER(i: number): TerminalNode;
	public ALTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ALTER);
		} else {
			return this.getToken(TrinoSQLParser.ALTER, i);
		}
	}
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public DATA(): TerminalNode { return this.getToken(TrinoSQLParser.DATA, 0); }
	public TYPE(): TerminalNode { return this.getToken(TrinoSQLParser.TYPE, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetColumnType) {
			listener.enterSetColumnType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetColumnType) {
			listener.exitSetColumnType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetColumnType) {
			return visitor.visitSetColumnType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropNotNullConstraintContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _columnName!: IdentifierContext;
	public ALTER(): TerminalNode[];
	public ALTER(i: number): TerminalNode;
	public ALTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ALTER);
		} else {
			return this.getToken(TrinoSQLParser.ALTER, i);
		}
	}
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public COLUMN(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMN, 0); }
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public NOT(): TerminalNode { return this.getToken(TrinoSQLParser.NOT, 0); }
	public NULL(): TerminalNode { return this.getToken(TrinoSQLParser.NULL, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropNotNullConstraint) {
			listener.enterDropNotNullConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropNotNullConstraint) {
			listener.exitDropNotNullConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropNotNullConstraint) {
			return visitor.visitDropNotNullConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetTableAuthorizationContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetTableAuthorization) {
			listener.enterSetTableAuthorization(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetTableAuthorization) {
			listener.exitSetTableAuthorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetTableAuthorization) {
			return visitor.visitSetTableAuthorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetTablePropertiesContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public PROPERTIES(): TerminalNode { return this.getToken(TrinoSQLParser.PROPERTIES, 0); }
	public propertyAssignments(): PropertyAssignmentsContext {
		return this.getRuleContext(0, PropertyAssignmentsContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetTableProperties) {
			listener.enterSetTableProperties(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetTableProperties) {
			listener.exitSetTableProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetTableProperties) {
			return visitor.visitSetTableProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableExecuteContext extends StatementContext {
	public _tableName!: QualifiedNameContext;
	public _procedureName!: IdentifierContext;
	public _where!: BooleanExpressionContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public EXECUTE(): TerminalNode { return this.getToken(TrinoSQLParser.EXECUTE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHERE, 0); }
	public booleanExpression(): BooleanExpressionContext | undefined {
		return this.tryGetRuleContext(0, BooleanExpressionContext);
	}
	public callArgument(): CallArgumentContext[];
	public callArgument(i: number): CallArgumentContext;
	public callArgument(i?: number): CallArgumentContext | CallArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallArgumentContext);
		} else {
			return this.getRuleContext(i, CallArgumentContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableExecute) {
			listener.enterTableExecute(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableExecute) {
			listener.exitTableExecute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableExecute) {
			return visitor.visitTableExecute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AnalyzeContext extends StatementContext {
	public ANALYZE(): TerminalNode { return this.getToken(TrinoSQLParser.ANALYZE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAnalyze) {
			listener.enterAnalyze(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAnalyze) {
			listener.exitAnalyze(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAnalyze) {
			return visitor.visitAnalyze(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateMaterializedViewContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public rootQuery(): RootQueryContext {
		return this.getRuleContext(0, RootQueryContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	public GRACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRACE, 0); }
	public PERIOD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PERIOD, 0); }
	public interval(): IntervalContext | undefined {
		return this.tryGetRuleContext(0, IntervalContext);
	}
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateMaterializedView) {
			listener.enterCreateMaterializedView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateMaterializedView) {
			listener.exitCreateMaterializedView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateMaterializedView) {
			return visitor.visitCreateMaterializedView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateViewContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public rootQuery(): RootQueryContext {
		return this.getRuleContext(0, RootQueryContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SECURITY, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INVOKER, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateView) {
			listener.enterCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateView) {
			listener.exitCreateView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateView) {
			return visitor.visitCreateView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RefreshMaterializedViewContext extends StatementContext {
	public REFRESH(): TerminalNode { return this.getToken(TrinoSQLParser.REFRESH, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRefreshMaterializedView) {
			listener.enterRefreshMaterializedView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRefreshMaterializedView) {
			listener.exitRefreshMaterializedView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRefreshMaterializedView) {
			return visitor.visitRefreshMaterializedView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropMaterializedViewContext extends StatementContext {
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropMaterializedView) {
			listener.enterDropMaterializedView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropMaterializedView) {
			listener.exitDropMaterializedView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropMaterializedView) {
			return visitor.visitDropMaterializedView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RenameMaterializedViewContext extends StatementContext {
	public _from!: QualifiedNameContext;
	public _to!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public RENAME(): TerminalNode { return this.getToken(TrinoSQLParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRenameMaterializedView) {
			listener.enterRenameMaterializedView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRenameMaterializedView) {
			listener.exitRenameMaterializedView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRenameMaterializedView) {
			return visitor.visitRenameMaterializedView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public PROPERTIES(): TerminalNode { return this.getToken(TrinoSQLParser.PROPERTIES, 0); }
	public propertyAssignments(): PropertyAssignmentsContext {
		return this.getRuleContext(0, PropertyAssignmentsContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetMaterializedViewProperties) {
			listener.enterSetMaterializedViewProperties(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetMaterializedViewProperties) {
			listener.exitSetMaterializedViewProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetMaterializedViewProperties) {
			return visitor.visitSetMaterializedViewProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropViewContext extends StatementContext {
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropView) {
			listener.enterDropView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropView) {
			listener.exitDropView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropView) {
			return visitor.visitDropView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RenameViewContext extends StatementContext {
	public _from!: QualifiedNameContext;
	public _to!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public RENAME(): TerminalNode { return this.getToken(TrinoSQLParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRenameView) {
			listener.enterRenameView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRenameView) {
			listener.exitRenameView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRenameView) {
			return visitor.visitRenameView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetViewAuthorizationContext extends StatementContext {
	public _from!: QualifiedNameContext;
	public ALTER(): TerminalNode { return this.getToken(TrinoSQLParser.ALTER, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetViewAuthorization) {
			listener.enterSetViewAuthorization(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetViewAuthorization) {
			listener.exitSetViewAuthorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetViewAuthorization) {
			return visitor.visitSetViewAuthorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CallContext extends StatementContext {
	public CALL(): TerminalNode { return this.getToken(TrinoSQLParser.CALL, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public callArgument(): CallArgumentContext[];
	public callArgument(i: number): CallArgumentContext;
	public callArgument(i?: number): CallArgumentContext | CallArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CallArgumentContext);
		} else {
			return this.getRuleContext(i, CallArgumentContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCall) {
			listener.enterCall(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCall) {
			listener.exitCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCall) {
			return visitor.visitCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateFunctionContext extends StatementContext {
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public functionSpecification(): FunctionSpecificationContext {
		return this.getRuleContext(0, FunctionSpecificationContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateFunction) {
			listener.enterCreateFunction(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateFunction) {
			listener.exitCreateFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateFunction) {
			return visitor.visitCreateFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropFunctionContext extends StatementContext {
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(TrinoSQLParser.FUNCTION, 0); }
	public functionDeclaration(): FunctionDeclarationContext {
		return this.getRuleContext(0, FunctionDeclarationContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXISTS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropFunction) {
			listener.enterDropFunction(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropFunction) {
			listener.exitDropFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropFunction) {
			return visitor.visitDropFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CreateRoleContext extends StatementContext {
	public _name!: IdentifierContext;
	public _catalog!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.ROLE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ADMIN, 0); }
	public grantor(): GrantorContext | undefined {
		return this.tryGetRuleContext(0, GrantorContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCreateRole) {
			listener.enterCreateRole(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCreateRole) {
			listener.exitCreateRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCreateRole) {
			return visitor.visitCreateRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DropRoleContext extends StatementContext {
	public _name!: IdentifierContext;
	public _catalog!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(TrinoSQLParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.ROLE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDropRole) {
			listener.enterDropRole(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDropRole) {
			listener.exitDropRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDropRole) {
			return visitor.visitDropRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantRolesContext extends StatementContext {
	public _catalog!: IdentifierContext;
	public GRANT(): TerminalNode { return this.getToken(TrinoSQLParser.GRANT, 0); }
	public privilegeOrRole(): PrivilegeOrRoleContext[];
	public privilegeOrRole(i: number): PrivilegeOrRoleContext;
	public privilegeOrRole(i?: number): PrivilegeOrRoleContext | PrivilegeOrRoleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeOrRoleContext);
		} else {
			return this.getRuleContext(i, PrivilegeOrRoleContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public principal(): PrincipalContext[];
	public principal(i: number): PrincipalContext;
	public principal(i?: number): PrincipalContext | PrincipalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrincipalContext);
		} else {
			return this.getRuleContext(i, PrincipalContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ADMIN, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OPTION, 0); }
	public GRANTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANTED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public grantor(): GrantorContext | undefined {
		return this.tryGetRuleContext(0, GrantorContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGrantRoles) {
			listener.enterGrantRoles(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGrantRoles) {
			listener.exitGrantRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGrantRoles) {
			return visitor.visitGrantRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GrantPrivilegesContext extends StatementContext {
	public GRANT(): TerminalNode[];
	public GRANT(i: number): TerminalNode;
	public GRANT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.GRANT);
		} else {
			return this.getToken(TrinoSQLParser.GRANT, i);
		}
	}
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public grantObject(): GrantObjectContext {
		return this.getRuleContext(0, GrantObjectContext);
	}
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRIVILEGES, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OPTION, 0); }
	public privilegeOrRole(): PrivilegeOrRoleContext[];
	public privilegeOrRole(i: number): PrivilegeOrRoleContext;
	public privilegeOrRole(i?: number): PrivilegeOrRoleContext | PrivilegeOrRoleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeOrRoleContext);
		} else {
			return this.getRuleContext(i, PrivilegeOrRoleContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGrantPrivileges) {
			listener.enterGrantPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGrantPrivileges) {
			listener.exitGrantPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGrantPrivileges) {
			return visitor.visitGrantPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokeRolesContext extends StatementContext {
	public _catalog!: IdentifierContext;
	public REVOKE(): TerminalNode { return this.getToken(TrinoSQLParser.REVOKE, 0); }
	public privilegeOrRole(): PrivilegeOrRoleContext[];
	public privilegeOrRole(i: number): PrivilegeOrRoleContext;
	public privilegeOrRole(i?: number): PrivilegeOrRoleContext | PrivilegeOrRoleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeOrRoleContext);
		} else {
			return this.getRuleContext(i, PrivilegeOrRoleContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public principal(): PrincipalContext[];
	public principal(i: number): PrincipalContext;
	public principal(i?: number): PrincipalContext | PrincipalContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrincipalContext);
		} else {
			return this.getRuleContext(i, PrincipalContext);
		}
	}
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ADMIN, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OPTION, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOR, 0); }
	public GRANTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANTED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public grantor(): GrantorContext | undefined {
		return this.tryGetRuleContext(0, GrantorContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRevokeRoles) {
			listener.enterRevokeRoles(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRevokeRoles) {
			listener.exitRevokeRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRevokeRoles) {
			return visitor.visitRevokeRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RevokePrivilegesContext extends StatementContext {
	public _grantee!: PrincipalContext;
	public REVOKE(): TerminalNode { return this.getToken(TrinoSQLParser.REVOKE, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public grantObject(): GrantObjectContext {
		return this.getRuleContext(0, GrantObjectContext);
	}
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRIVILEGES, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANT, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OPTION, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOR, 0); }
	public privilegeOrRole(): PrivilegeOrRoleContext[];
	public privilegeOrRole(i: number): PrivilegeOrRoleContext;
	public privilegeOrRole(i?: number): PrivilegeOrRoleContext | PrivilegeOrRoleContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeOrRoleContext);
		} else {
			return this.getRuleContext(i, PrivilegeOrRoleContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRevokePrivileges) {
			listener.enterRevokePrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRevokePrivileges) {
			listener.exitRevokePrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRevokePrivileges) {
			return visitor.visitRevokePrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DenyContext extends StatementContext {
	public _grantee!: PrincipalContext;
	public DENY(): TerminalNode { return this.getToken(TrinoSQLParser.DENY, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public grantObject(): GrantObjectContext {
		return this.getRuleContext(0, GrantObjectContext);
	}
	public TO(): TerminalNode { return this.getToken(TrinoSQLParser.TO, 0); }
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	public privilege(): PrivilegeContext[];
	public privilege(i: number): PrivilegeContext;
	public privilege(i?: number): PrivilegeContext | PrivilegeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeContext);
		} else {
			return this.getRuleContext(i, PrivilegeContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRIVILEGES, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDeny) {
			listener.enterDeny(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDeny) {
			listener.exitDeny(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDeny) {
			return visitor.visitDeny(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetRoleContext extends StatementContext {
	public _role!: IdentifierContext;
	public _catalog!: IdentifierContext;
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.ROLE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NONE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetRole) {
			listener.enterSetRole(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetRole) {
			listener.exitSetRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetRole) {
			return visitor.visitSetRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowGrantsContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public GRANTS(): TerminalNode { return this.getToken(TrinoSQLParser.GRANTS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public grantObject(): GrantObjectContext | undefined {
		return this.tryGetRuleContext(0, GrantObjectContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowGrants) {
			listener.enterShowGrants(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowGrants) {
			listener.exitShowGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowGrants) {
			return visitor.visitShowGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExplainContext extends StatementContext {
	public EXPLAIN(): TerminalNode { return this.getToken(TrinoSQLParser.EXPLAIN, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public explainOption(): ExplainOptionContext[];
	public explainOption(i: number): ExplainOptionContext;
	public explainOption(i?: number): ExplainOptionContext | ExplainOptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExplainOptionContext);
		} else {
			return this.getRuleContext(i, ExplainOptionContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExplain) {
			listener.enterExplain(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExplain) {
			listener.exitExplain(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExplain) {
			return visitor.visitExplain(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExplainAnalyzeContext extends StatementContext {
	public EXPLAIN(): TerminalNode { return this.getToken(TrinoSQLParser.EXPLAIN, 0); }
	public ANALYZE(): TerminalNode { return this.getToken(TrinoSQLParser.ANALYZE, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VERBOSE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExplainAnalyze) {
			listener.enterExplainAnalyze(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExplainAnalyze) {
			listener.exitExplainAnalyze(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExplainAnalyze) {
			return visitor.visitExplainAnalyze(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateTableContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowCreateTable) {
			listener.enterShowCreateTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowCreateTable) {
			listener.exitShowCreateTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowCreateTable) {
			return visitor.visitShowCreateTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateSchemaContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMA, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowCreateSchema) {
			listener.enterShowCreateSchema(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowCreateSchema) {
			listener.exitShowCreateSchema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowCreateSchema) {
			return visitor.visitShowCreateSchema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateViewContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowCreateView) {
			listener.enterShowCreateView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowCreateView) {
			listener.exitShowCreateView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowCreateView) {
			return visitor.visitShowCreateView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCreateMaterializedViewContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public CREATE(): TerminalNode { return this.getToken(TrinoSQLParser.CREATE, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(TrinoSQLParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(TrinoSQLParser.VIEW, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowCreateMaterializedView) {
			listener.enterShowCreateMaterializedView(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowCreateMaterializedView) {
			listener.exitShowCreateMaterializedView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowCreateMaterializedView) {
			return visitor.visitShowCreateMaterializedView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowTablesContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public TABLES(): TerminalNode { return this.getToken(TrinoSQLParser.TABLES, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowTables) {
			listener.enterShowTables(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowTables) {
			listener.exitShowTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowTables) {
			return visitor.visitShowTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSchemasContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public SCHEMAS(): TerminalNode { return this.getToken(TrinoSQLParser.SCHEMAS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowSchemas) {
			listener.enterShowSchemas(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowSchemas) {
			listener.exitShowSchemas(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowSchemas) {
			return visitor.visitShowSchemas(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowCatalogsContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public CATALOGS(): TerminalNode { return this.getToken(TrinoSQLParser.CATALOGS, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowCatalogs) {
			listener.enterShowCatalogs(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowCatalogs) {
			listener.exitShowCatalogs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowCatalogs) {
			return visitor.visitShowCatalogs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowColumnsContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SHOW, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COLUMNS, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DESCRIBE, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DESC, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowColumns) {
			listener.enterShowColumns(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowColumns) {
			listener.exitShowColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowColumns) {
			return visitor.visitShowColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowStatsContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public STATS(): TerminalNode { return this.getToken(TrinoSQLParser.STATS, 0); }
	public FOR(): TerminalNode { return this.getToken(TrinoSQLParser.FOR, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowStats) {
			listener.enterShowStats(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowStats) {
			listener.exitShowStats(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowStats) {
			return visitor.visitShowStats(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowStatsForQueryContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public STATS(): TerminalNode { return this.getToken(TrinoSQLParser.STATS, 0); }
	public FOR(): TerminalNode { return this.getToken(TrinoSQLParser.FOR, 0); }
	public rootQuery(): RootQueryContext {
		return this.getRuleContext(0, RootQueryContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowStatsForQuery) {
			listener.enterShowStatsForQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowStatsForQuery) {
			listener.exitShowStatsForQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowStatsForQuery) {
			return visitor.visitShowStatsForQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowRolesContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public ROLES(): TerminalNode { return this.getToken(TrinoSQLParser.ROLES, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CURRENT, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowRoles) {
			listener.enterShowRoles(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowRoles) {
			listener.exitShowRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowRoles) {
			return visitor.visitShowRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowRoleGrantsContext extends StatementContext {
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.ROLE, 0); }
	public GRANTS(): TerminalNode { return this.getToken(TrinoSQLParser.GRANTS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowRoleGrants) {
			listener.enterShowRoleGrants(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowRoleGrants) {
			listener.exitShowRoleGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowRoleGrants) {
			return visitor.visitShowRoleGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowFunctionsContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public FUNCTIONS(): TerminalNode { return this.getToken(TrinoSQLParser.FUNCTIONS, 0); }
	public qualifiedName(): QualifiedNameContext | undefined {
		return this.tryGetRuleContext(0, QualifiedNameContext);
	}
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IN, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowFunctions) {
			listener.enterShowFunctions(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowFunctions) {
			listener.exitShowFunctions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowFunctions) {
			return visitor.visitShowFunctions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ShowSessionContext extends StatementContext {
	public _pattern!: StringContext;
	public _escape!: StringContext;
	public SHOW(): TerminalNode { return this.getToken(TrinoSQLParser.SHOW, 0); }
	public SESSION(): TerminalNode { return this.getToken(TrinoSQLParser.SESSION, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIKE, 0); }
	public string(): StringContext[];
	public string(i: number): StringContext;
	public string(i?: number): StringContext | StringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringContext);
		} else {
			return this.getRuleContext(i, StringContext);
		}
	}
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterShowSession) {
			listener.enterShowSession(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitShowSession) {
			listener.exitShowSession(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitShowSession) {
			return visitor.visitShowSession(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetSessionAuthorizationContext extends StatementContext {
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public SESSION(): TerminalNode { return this.getToken(TrinoSQLParser.SESSION, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public authorizationUser(): AuthorizationUserContext {
		return this.getRuleContext(0, AuthorizationUserContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetSessionAuthorization) {
			listener.enterSetSessionAuthorization(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetSessionAuthorization) {
			listener.exitSetSessionAuthorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetSessionAuthorization) {
			return visitor.visitSetSessionAuthorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ResetSessionAuthorizationContext extends StatementContext {
	public RESET(): TerminalNode { return this.getToken(TrinoSQLParser.RESET, 0); }
	public SESSION(): TerminalNode { return this.getToken(TrinoSQLParser.SESSION, 0); }
	public AUTHORIZATION(): TerminalNode { return this.getToken(TrinoSQLParser.AUTHORIZATION, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterResetSessionAuthorization) {
			listener.enterResetSessionAuthorization(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitResetSessionAuthorization) {
			listener.exitResetSessionAuthorization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitResetSessionAuthorization) {
			return visitor.visitResetSessionAuthorization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetSessionContext extends StatementContext {
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public SESSION(): TerminalNode { return this.getToken(TrinoSQLParser.SESSION, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public EQ(): TerminalNode { return this.getToken(TrinoSQLParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetSession) {
			listener.enterSetSession(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetSession) {
			listener.exitSetSession(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetSession) {
			return visitor.visitSetSession(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ResetSessionContext extends StatementContext {
	public RESET(): TerminalNode { return this.getToken(TrinoSQLParser.RESET, 0); }
	public SESSION(): TerminalNode { return this.getToken(TrinoSQLParser.SESSION, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterResetSession) {
			listener.enterResetSession(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitResetSession) {
			listener.exitResetSession(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitResetSession) {
			return visitor.visitResetSession(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StartTransactionContext extends StatementContext {
	public START(): TerminalNode { return this.getToken(TrinoSQLParser.START, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(TrinoSQLParser.TRANSACTION, 0); }
	public transactionMode(): TransactionModeContext[];
	public transactionMode(i: number): TransactionModeContext;
	public transactionMode(i?: number): TransactionModeContext | TransactionModeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TransactionModeContext);
		} else {
			return this.getRuleContext(i, TransactionModeContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStartTransaction) {
			listener.enterStartTransaction(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStartTransaction) {
			listener.exitStartTransaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStartTransaction) {
			return visitor.visitStartTransaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommitContext extends StatementContext {
	public COMMIT(): TerminalNode { return this.getToken(TrinoSQLParser.COMMIT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WORK, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCommit) {
			listener.enterCommit(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCommit) {
			listener.exitCommit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCommit) {
			return visitor.visitCommit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RollbackContext extends StatementContext {
	public ROLLBACK(): TerminalNode { return this.getToken(TrinoSQLParser.ROLLBACK, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WORK, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRollback) {
			listener.enterRollback(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRollback) {
			listener.exitRollback(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRollback) {
			return visitor.visitRollback(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PrepareContext extends StatementContext {
	public PREPARE(): TerminalNode { return this.getToken(TrinoSQLParser.PREPARE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPrepare) {
			listener.enterPrepare(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPrepare) {
			listener.exitPrepare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPrepare) {
			return visitor.visitPrepare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DeallocateContext extends StatementContext {
	public DEALLOCATE(): TerminalNode { return this.getToken(TrinoSQLParser.DEALLOCATE, 0); }
	public PREPARE(): TerminalNode { return this.getToken(TrinoSQLParser.PREPARE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDeallocate) {
			listener.enterDeallocate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDeallocate) {
			listener.exitDeallocate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDeallocate) {
			return visitor.visitDeallocate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecuteContext extends StatementContext {
	public EXECUTE(): TerminalNode { return this.getToken(TrinoSQLParser.EXECUTE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.USING, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExecute) {
			listener.enterExecute(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExecute) {
			listener.exitExecute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExecute) {
			return visitor.visitExecute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecuteImmediateContext extends StatementContext {
	public EXECUTE(): TerminalNode { return this.getToken(TrinoSQLParser.EXECUTE, 0); }
	public IMMEDIATE(): TerminalNode { return this.getToken(TrinoSQLParser.IMMEDIATE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.USING, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExecuteImmediate) {
			listener.enterExecuteImmediate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExecuteImmediate) {
			listener.exitExecuteImmediate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExecuteImmediate) {
			return visitor.visitExecuteImmediate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DescribeInputContext extends StatementContext {
	public DESCRIBE(): TerminalNode { return this.getToken(TrinoSQLParser.DESCRIBE, 0); }
	public INPUT(): TerminalNode { return this.getToken(TrinoSQLParser.INPUT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDescribeInput) {
			listener.enterDescribeInput(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDescribeInput) {
			listener.exitDescribeInput(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDescribeInput) {
			return visitor.visitDescribeInput(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DescribeOutputContext extends StatementContext {
	public DESCRIBE(): TerminalNode { return this.getToken(TrinoSQLParser.DESCRIBE, 0); }
	public OUTPUT(): TerminalNode { return this.getToken(TrinoSQLParser.OUTPUT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDescribeOutput) {
			listener.enterDescribeOutput(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDescribeOutput) {
			listener.exitDescribeOutput(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDescribeOutput) {
			return visitor.visitDescribeOutput(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetPathContext extends StatementContext {
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public PATH(): TerminalNode { return this.getToken(TrinoSQLParser.PATH, 0); }
	public pathSpecification(): PathSpecificationContext {
		return this.getRuleContext(0, PathSpecificationContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetPath) {
			listener.enterSetPath(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetPath) {
			listener.exitSetPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetPath) {
			return visitor.visitSetPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetTimeZoneContext extends StatementContext {
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public TIME(): TerminalNode { return this.getToken(TrinoSQLParser.TIME, 0); }
	public ZONE(): TerminalNode { return this.getToken(TrinoSQLParser.ZONE, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LOCAL, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetTimeZone) {
			listener.enterSetTimeZone(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetTimeZone) {
			listener.exitSetTimeZone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetTimeZone) {
			return visitor.visitSetTimeZone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UpdateContext extends StatementContext {
	public _where!: BooleanExpressionContext;
	public UPDATE(): TerminalNode { return this.getToken(TrinoSQLParser.UPDATE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public updateAssignment(): UpdateAssignmentContext[];
	public updateAssignment(i: number): UpdateAssignmentContext;
	public updateAssignment(i?: number): UpdateAssignmentContext | UpdateAssignmentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UpdateAssignmentContext);
		} else {
			return this.getRuleContext(i, UpdateAssignmentContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHERE, 0); }
	public booleanExpression(): BooleanExpressionContext | undefined {
		return this.tryGetRuleContext(0, BooleanExpressionContext);
	}
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUpdate) {
			listener.enterUpdate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUpdate) {
			listener.exitUpdate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUpdate) {
			return visitor.visitUpdate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MergeContext extends StatementContext {
	public MERGE(): TerminalNode { return this.getToken(TrinoSQLParser.MERGE, 0); }
	public INTO(): TerminalNode { return this.getToken(TrinoSQLParser.INTO, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public USING(): TerminalNode { return this.getToken(TrinoSQLParser.USING, 0); }
	public relation(): RelationContext {
		return this.getRuleContext(0, RelationContext);
	}
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public mergeCase(): MergeCaseContext[];
	public mergeCase(i: number): MergeCaseContext;
	public mergeCase(i?: number): MergeCaseContext | MergeCaseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MergeCaseContext);
		} else {
			return this.getRuleContext(i, MergeCaseContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	constructor(ctx: StatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMerge) {
			listener.enterMerge(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMerge) {
			listener.exitMerge(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMerge) {
			return visitor.visitMerge(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RootQueryContext extends ParserRuleContext {
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	public withFunction(): WithFunctionContext | undefined {
		return this.tryGetRuleContext(0, WithFunctionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rootQuery; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRootQuery) {
			listener.enterRootQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRootQuery) {
			listener.exitRootQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRootQuery) {
			return visitor.visitRootQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithFunctionContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TrinoSQLParser.WITH, 0); }
	public functionSpecification(): FunctionSpecificationContext[];
	public functionSpecification(i: number): FunctionSpecificationContext;
	public functionSpecification(i?: number): FunctionSpecificationContext | FunctionSpecificationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionSpecificationContext);
		} else {
			return this.getRuleContext(i, FunctionSpecificationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_withFunction; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWithFunction) {
			listener.enterWithFunction(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWithFunction) {
			listener.exitWithFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWithFunction) {
			return visitor.visitWithFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryContext extends ParserRuleContext {
	public queryNoWith(): QueryNoWithContext {
		return this.getRuleContext(0, QueryNoWithContext);
	}
	public with(): WithContext | undefined {
		return this.tryGetRuleContext(0, WithContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_query; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQuery) {
			listener.enterQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQuery) {
			listener.exitQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQuery) {
			return visitor.visitQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(TrinoSQLParser.WITH, 0); }
	public namedQuery(): NamedQueryContext[];
	public namedQuery(i: number): NamedQueryContext;
	public namedQuery(i?: number): NamedQueryContext | NamedQueryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NamedQueryContext);
		} else {
			return this.getRuleContext(i, NamedQueryContext);
		}
	}
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RECURSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_with; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWith) {
			listener.enterWith(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWith) {
			listener.exitWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWith) {
			return visitor.visitWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableElementContext extends ParserRuleContext {
	public columnDefinition(): ColumnDefinitionContext | undefined {
		return this.tryGetRuleContext(0, ColumnDefinitionContext);
	}
	public likeClause(): LikeClauseContext | undefined {
		return this.tryGetRuleContext(0, LikeClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_tableElement; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableElement) {
			listener.enterTableElement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableElement) {
			listener.exitTableElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableElement) {
			return visitor.visitTableElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnDefinitionContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_columnDefinition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterColumnDefinition) {
			listener.enterColumnDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitColumnDefinition) {
			listener.exitColumnDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitColumnDefinition) {
			return visitor.visitColumnDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LikeClauseContext extends ParserRuleContext {
	public _optionType!: Token;
	public LIKE(): TerminalNode { return this.getToken(TrinoSQLParser.LIKE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PROPERTIES, 0); }
	public INCLUDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INCLUDING, 0); }
	public EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXCLUDING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_likeClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLikeClause) {
			listener.enterLikeClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLikeClause) {
			listener.exitLikeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLikeClause) {
			return visitor.visitLikeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertiesContext extends ParserRuleContext {
	public propertyAssignments(): PropertyAssignmentsContext {
		return this.getRuleContext(0, PropertyAssignmentsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_properties; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterProperties) {
			listener.enterProperties(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitProperties) {
			listener.exitProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitProperties) {
			return visitor.visitProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyAssignmentsContext extends ParserRuleContext {
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_propertyAssignments; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPropertyAssignments) {
			listener.enterPropertyAssignments(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPropertyAssignments) {
			listener.exitPropertyAssignments(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPropertyAssignments) {
			return visitor.visitPropertyAssignments(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQ(): TerminalNode { return this.getToken(TrinoSQLParser.EQ, 0); }
	public propertyValue(): PropertyValueContext {
		return this.getRuleContext(0, PropertyValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_property; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterProperty) {
			listener.enterProperty(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitProperty) {
			listener.exitProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitProperty) {
			return visitor.visitProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyValueContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_propertyValue; }
	public copyFrom(ctx: PropertyValueContext): void {
		super.copyFrom(ctx);
	}
}
export class DefaultPropertyValueContext extends PropertyValueContext {
	public DEFAULT(): TerminalNode { return this.getToken(TrinoSQLParser.DEFAULT, 0); }
	constructor(ctx: PropertyValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDefaultPropertyValue) {
			listener.enterDefaultPropertyValue(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDefaultPropertyValue) {
			listener.exitDefaultPropertyValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDefaultPropertyValue) {
			return visitor.visitDefaultPropertyValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: PropertyValueContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNonDefaultPropertyValue) {
			listener.enterNonDefaultPropertyValue(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNonDefaultPropertyValue) {
			listener.exitNonDefaultPropertyValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNonDefaultPropertyValue) {
			return visitor.visitNonDefaultPropertyValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryNoWithContext extends ParserRuleContext {
	public _offset!: RowCountContext;
	public _limit!: LimitRowCountContext;
	public _fetchFirst!: RowCountContext;
	public queryTerm(): QueryTermContext {
		return this.getRuleContext(0, QueryTermContext);
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OFFSET, 0); }
	public rowCount(): RowCountContext[];
	public rowCount(i: number): RowCountContext;
	public rowCount(i?: number): RowCountContext | RowCountContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowCountContext);
		} else {
			return this.getRuleContext(i, RowCountContext);
		}
	}
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIMIT, 0); }
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FETCH, 0); }
	public limitRowCount(): LimitRowCountContext | undefined {
		return this.tryGetRuleContext(0, LimitRowCountContext);
	}
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NEXT, 0); }
	public ROW(): TerminalNode[];
	public ROW(i: number): TerminalNode;
	public ROW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ROW);
		} else {
			return this.getToken(TrinoSQLParser.ROW, i);
		}
	}
	public ROWS(): TerminalNode[];
	public ROWS(i: number): TerminalNode;
	public ROWS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ROWS);
		} else {
			return this.getToken(TrinoSQLParser.ROWS, i);
		}
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ONLY, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_queryNoWith; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQueryNoWith) {
			listener.enterQueryNoWith(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQueryNoWith) {
			listener.exitQueryNoWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQueryNoWith) {
			return visitor.visitQueryNoWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitRowCountContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public rowCount(): RowCountContext | undefined {
		return this.tryGetRuleContext(0, RowCountContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_limitRowCount; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLimitRowCount) {
			listener.enterLimitRowCount(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLimitRowCount) {
			listener.exitLimitRowCount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLimitRowCount) {
			return visitor.visitLimitRowCount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowCountContext extends ParserRuleContext {
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	public QUESTION_MARK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUESTION_MARK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rowCount; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRowCount) {
			listener.enterRowCount(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRowCount) {
			listener.exitRowCount(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRowCount) {
			return visitor.visitRowCount(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryTermContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_queryTerm; }
	public copyFrom(ctx: QueryTermContext): void {
		super.copyFrom(ctx);
	}
}
export class QueryTermDefaultContext extends QueryTermContext {
	public queryPrimary(): QueryPrimaryContext {
		return this.getRuleContext(0, QueryPrimaryContext);
	}
	constructor(ctx: QueryTermContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQueryTermDefault) {
			listener.enterQueryTermDefault(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQueryTermDefault) {
			listener.exitQueryTermDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQueryTermDefault) {
			return visitor.visitQueryTermDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SetOperationContext extends QueryTermContext {
	public _left!: QueryTermContext;
	public _operator!: Token;
	public _right!: QueryTermContext;
	public queryTerm(): QueryTermContext[];
	public queryTerm(i: number): QueryTermContext;
	public queryTerm(i?: number): QueryTermContext | QueryTermContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QueryTermContext);
		} else {
			return this.getRuleContext(i, QueryTermContext);
		}
	}
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTERSECT, 0); }
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public UNION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNION, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXCEPT, 0); }
	constructor(ctx: QueryTermContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetOperation) {
			listener.enterSetOperation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetOperation) {
			listener.exitSetOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetOperation) {
			return visitor.visitSetOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryPrimaryContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_queryPrimary; }
	public copyFrom(ctx: QueryPrimaryContext): void {
		super.copyFrom(ctx);
	}
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
	public querySpecification(): QuerySpecificationContext {
		return this.getRuleContext(0, QuerySpecificationContext);
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQueryPrimaryDefault) {
			listener.enterQueryPrimaryDefault(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQueryPrimaryDefault) {
			listener.exitQueryPrimaryDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQueryPrimaryDefault) {
			return visitor.visitQueryPrimaryDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableContext extends QueryPrimaryContext {
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTable) {
			listener.enterTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTable) {
			listener.exitTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTable) {
			return visitor.visitTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InlineTableContext extends QueryPrimaryContext {
	public VALUES(): TerminalNode { return this.getToken(TrinoSQLParser.VALUES, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterInlineTable) {
			listener.enterInlineTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitInlineTable) {
			listener.exitInlineTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitInlineTable) {
			return visitor.visitInlineTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryContext extends QueryPrimaryContext {
	public queryNoWith(): QueryNoWithContext {
		return this.getRuleContext(0, QueryNoWithContext);
	}
	constructor(ctx: QueryPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubquery) {
			listener.enterSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubquery) {
			listener.exitSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubquery) {
			return visitor.visitSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortItemContext extends ParserRuleContext {
	public _ordering!: Token;
	public _nullOrdering!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULLS, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DESC, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_sortItem; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSortItem) {
			listener.enterSortItem(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSortItem) {
			listener.exitSortItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSortItem) {
			return visitor.visitSortItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuerySpecificationContext extends ParserRuleContext {
	public _where!: BooleanExpressionContext;
	public _having!: BooleanExpressionContext;
	public SELECT(): TerminalNode { return this.getToken(TrinoSQLParser.SELECT, 0); }
	public selectItem(): SelectItemContext[];
	public selectItem(i: number): SelectItemContext;
	public selectItem(i?: number): SelectItemContext | SelectItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectItemContext);
		} else {
			return this.getRuleContext(i, SelectItemContext);
		}
	}
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public relation(): RelationContext[];
	public relation(i: number): RelationContext;
	public relation(i?: number): RelationContext | RelationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RelationContext);
		} else {
			return this.getRuleContext(i, RelationContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHERE, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GROUP, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public groupBy(): GroupByContext | undefined {
		return this.tryGetRuleContext(0, GroupByContext);
	}
	public HAVING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.HAVING, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WINDOW, 0); }
	public windowDefinition(): WindowDefinitionContext[];
	public windowDefinition(i: number): WindowDefinitionContext;
	public windowDefinition(i?: number): WindowDefinitionContext | WindowDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WindowDefinitionContext);
		} else {
			return this.getRuleContext(i, WindowDefinitionContext);
		}
	}
	public booleanExpression(): BooleanExpressionContext[];
	public booleanExpression(i: number): BooleanExpressionContext;
	public booleanExpression(i?: number): BooleanExpressionContext | BooleanExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BooleanExpressionContext);
		} else {
			return this.getRuleContext(i, BooleanExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_querySpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQuerySpecification) {
			listener.enterQuerySpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQuerySpecification) {
			listener.exitQuerySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQuerySpecification) {
			return visitor.visitQuerySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByContext extends ParserRuleContext {
	public groupingElement(): GroupingElementContext[];
	public groupingElement(i: number): GroupingElementContext;
	public groupingElement(i?: number): GroupingElementContext | GroupingElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingElementContext);
		} else {
			return this.getRuleContext(i, GroupingElementContext);
		}
	}
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_groupBy; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGroupBy) {
			listener.enterGroupBy(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGroupBy) {
			listener.exitGroupBy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGroupBy) {
			return visitor.visitGroupBy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_groupingElement; }
	public copyFrom(ctx: GroupingElementContext): void {
		super.copyFrom(ctx);
	}
}
export class SingleGroupingSetContext extends GroupingElementContext {
	public groupingSet(): GroupingSetContext {
		return this.getRuleContext(0, GroupingSetContext);
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSingleGroupingSet) {
			listener.enterSingleGroupingSet(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSingleGroupingSet) {
			listener.exitSingleGroupingSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSingleGroupingSet) {
			return visitor.visitSingleGroupingSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RollupContext extends GroupingElementContext {
	public ROLLUP(): TerminalNode { return this.getToken(TrinoSQLParser.ROLLUP, 0); }
	public groupingSet(): GroupingSetContext[];
	public groupingSet(i: number): GroupingSetContext;
	public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingSetContext);
		} else {
			return this.getRuleContext(i, GroupingSetContext);
		}
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRollup) {
			listener.enterRollup(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRollup) {
			listener.exitRollup(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRollup) {
			return visitor.visitRollup(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CubeContext extends GroupingElementContext {
	public CUBE(): TerminalNode { return this.getToken(TrinoSQLParser.CUBE, 0); }
	public groupingSet(): GroupingSetContext[];
	public groupingSet(i: number): GroupingSetContext;
	public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingSetContext);
		} else {
			return this.getRuleContext(i, GroupingSetContext);
		}
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCube) {
			listener.enterCube(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCube) {
			listener.exitCube(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCube) {
			return visitor.visitCube(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
	public GROUPING(): TerminalNode { return this.getToken(TrinoSQLParser.GROUPING, 0); }
	public SETS(): TerminalNode { return this.getToken(TrinoSQLParser.SETS, 0); }
	public groupingSet(): GroupingSetContext[];
	public groupingSet(i: number): GroupingSetContext;
	public groupingSet(i?: number): GroupingSetContext | GroupingSetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GroupingSetContext);
		} else {
			return this.getRuleContext(i, GroupingSetContext);
		}
	}
	constructor(ctx: GroupingElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMultipleGroupingSets) {
			listener.enterMultipleGroupingSets(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMultipleGroupingSets) {
			listener.exitMultipleGroupingSets(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMultipleGroupingSets) {
			return visitor.visitMultipleGroupingSets(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetContext extends ParserRuleContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_groupingSet; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGroupingSet) {
			listener.enterGroupingSet(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGroupingSet) {
			listener.exitGroupingSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGroupingSet) {
			return visitor.visitGroupingSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowDefinitionContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public windowSpecification(): WindowSpecificationContext {
		return this.getRuleContext(0, WindowSpecificationContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_windowDefinition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWindowDefinition) {
			listener.enterWindowDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWindowDefinition) {
			listener.exitWindowDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWindowDefinition) {
			return visitor.visitWindowDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowSpecificationContext extends ParserRuleContext {
	public _existingWindowName!: IdentifierContext;
	public _expression!: ExpressionContext;
	public _partition: ExpressionContext[] = [];
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.BY);
		} else {
			return this.getToken(TrinoSQLParser.BY, i);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public windowFrame(): WindowFrameContext | undefined {
		return this.tryGetRuleContext(0, WindowFrameContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_windowSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWindowSpecification) {
			listener.enterWindowSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWindowSpecification) {
			listener.exitWindowSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWindowSpecification) {
			return visitor.visitWindowSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NamedQueryContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_namedQuery; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNamedQuery) {
			listener.enterNamedQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNamedQuery) {
			listener.exitNamedQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNamedQuery) {
			return visitor.visitNamedQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetQuantifierContext extends ParserRuleContext {
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DISTINCT, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_setQuantifier; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSetQuantifier) {
			listener.enterSetQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSetQuantifier) {
			listener.exitSetQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSetQuantifier) {
			return visitor.visitSetQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_selectItem; }
	public copyFrom(ctx: SelectItemContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectSingleContext extends SelectItemContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	constructor(ctx: SelectItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSelectSingle) {
			listener.enterSelectSingle(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSelectSingle) {
			listener.exitSelectSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSelectSingle) {
			return visitor.visitSelectSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectAllContext extends SelectItemContext {
	public primaryExpression(): PrimaryExpressionContext | undefined {
		return this.tryGetRuleContext(0, PrimaryExpressionContext);
	}
	public ASTERISK(): TerminalNode { return this.getToken(TrinoSQLParser.ASTERISK, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: SelectItemContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSelectAll) {
			listener.enterSelectAll(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSelectAll) {
			listener.exitSelectAll(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSelectAll) {
			return visitor.visitSelectAll(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_relation; }
	public copyFrom(ctx: RelationContext): void {
		super.copyFrom(ctx);
	}
}
export class JoinRelationContext extends RelationContext {
	public _left!: RelationContext;
	public _right!: SampledRelationContext;
	public _rightRelation!: RelationContext;
	public relation(): RelationContext[];
	public relation(i: number): RelationContext;
	public relation(i?: number): RelationContext | RelationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RelationContext);
		} else {
			return this.getRuleContext(i, RelationContext);
		}
	}
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CROSS, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.JOIN, 0); }
	public joinType(): JoinTypeContext | undefined {
		return this.tryGetRuleContext(0, JoinTypeContext);
	}
	public joinCriteria(): JoinCriteriaContext | undefined {
		return this.tryGetRuleContext(0, JoinCriteriaContext);
	}
	public NATURAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NATURAL, 0); }
	public sampledRelation(): SampledRelationContext | undefined {
		return this.tryGetRuleContext(0, SampledRelationContext);
	}
	constructor(ctx: RelationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJoinRelation) {
			listener.enterJoinRelation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJoinRelation) {
			listener.exitJoinRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJoinRelation) {
			return visitor.visitJoinRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RelationDefaultContext extends RelationContext {
	public sampledRelation(): SampledRelationContext {
		return this.getRuleContext(0, SampledRelationContext);
	}
	constructor(ctx: RelationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRelationDefault) {
			listener.enterRelationDefault(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRelationDefault) {
			listener.exitRelationDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRelationDefault) {
			return visitor.visitRelationDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinTypeContext extends ParserRuleContext {
	public INNER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INNER, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LEFT, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OUTER, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RIGHT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_joinType; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJoinType) {
			listener.enterJoinType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJoinType) {
			listener.exitJoinType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJoinType) {
			return visitor.visitJoinType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinCriteriaContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public booleanExpression(): BooleanExpressionContext | undefined {
		return this.tryGetRuleContext(0, BooleanExpressionContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.USING, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_joinCriteria; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJoinCriteria) {
			listener.enterJoinCriteria(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJoinCriteria) {
			listener.exitJoinCriteria(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJoinCriteria) {
			return visitor.visitJoinCriteria(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SampledRelationContext extends ParserRuleContext {
	public _percentage!: ExpressionContext;
	public patternRecognition(): PatternRecognitionContext {
		return this.getRuleContext(0, PatternRecognitionContext);
	}
	public TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TABLESAMPLE, 0); }
	public sampleType(): SampleTypeContext | undefined {
		return this.tryGetRuleContext(0, SampleTypeContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_sampledRelation; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSampledRelation) {
			listener.enterSampledRelation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSampledRelation) {
			listener.exitSampledRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSampledRelation) {
			return visitor.visitSampledRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SampleTypeContext extends ParserRuleContext {
	public BERNOULLI(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BERNOULLI, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SYSTEM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_sampleType; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSampleType) {
			listener.enterSampleType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSampleType) {
			listener.exitSampleType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSampleType) {
			return visitor.visitSampleType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TrimsSpecificationContext extends ParserRuleContext {
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LEADING, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRAILING, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BOTH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_trimsSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTrimsSpecification) {
			listener.enterTrimsSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTrimsSpecification) {
			listener.exitTrimsSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTrimsSpecification) {
			return visitor.visitTrimsSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListAggOverflowBehaviorContext extends ParserRuleContext {
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRUNCATE, 0); }
	public listaggCountIndication(): ListaggCountIndicationContext | undefined {
		return this.tryGetRuleContext(0, ListaggCountIndicationContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_listAggOverflowBehavior; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterListAggOverflowBehavior) {
			listener.enterListAggOverflowBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitListAggOverflowBehavior) {
			listener.exitListAggOverflowBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitListAggOverflowBehavior) {
			return visitor.visitListAggOverflowBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListaggCountIndicationContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public COUNT(): TerminalNode { return this.getToken(TrinoSQLParser.COUNT, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_listaggCountIndication; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterListaggCountIndication) {
			listener.enterListaggCountIndication(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitListaggCountIndication) {
			listener.exitListaggCountIndication(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitListaggCountIndication) {
			return visitor.visitListaggCountIndication(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternRecognitionContext extends ParserRuleContext {
	public _expression!: ExpressionContext;
	public _partition: ExpressionContext[] = [];
	public aliasedRelation(): AliasedRelationContext {
		return this.getRuleContext(0, AliasedRelationContext);
	}
	public MATCH_RECOGNIZE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCH_RECOGNIZE, 0); }
	public PATTERN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATTERN, 0); }
	public rowPattern(): RowPatternContext | undefined {
		return this.tryGetRuleContext(0, RowPatternContext);
	}
	public DEFINE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINE, 0); }
	public variableDefinition(): VariableDefinitionContext[];
	public variableDefinition(i: number): VariableDefinitionContext;
	public variableDefinition(i?: number): VariableDefinitionContext | VariableDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableDefinitionContext);
		} else {
			return this.getRuleContext(i, VariableDefinitionContext);
		}
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.BY);
		} else {
			return this.getToken(TrinoSQLParser.BY, i);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public MEASURES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MEASURES, 0); }
	public measureDefinition(): MeasureDefinitionContext[];
	public measureDefinition(i: number): MeasureDefinitionContext;
	public measureDefinition(i?: number): MeasureDefinitionContext | MeasureDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MeasureDefinitionContext);
		} else {
			return this.getRuleContext(i, MeasureDefinitionContext);
		}
	}
	public rowsPerMatch(): RowsPerMatchContext | undefined {
		return this.tryGetRuleContext(0, RowsPerMatchContext);
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AFTER, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCH, 0); }
	public skipTo(): SkipToContext | undefined {
		return this.tryGetRuleContext(0, SkipToContext);
	}
	public SUBSET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SUBSET, 0); }
	public subsetDefinition(): SubsetDefinitionContext[];
	public subsetDefinition(i: number): SubsetDefinitionContext;
	public subsetDefinition(i?: number): SubsetDefinitionContext | SubsetDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubsetDefinitionContext);
		} else {
			return this.getRuleContext(i, SubsetDefinitionContext);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INITIAL, 0); }
	public SEEK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SEEK, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_patternRecognition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPatternRecognition) {
			listener.enterPatternRecognition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPatternRecognition) {
			listener.exitPatternRecognition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPatternRecognition) {
			return visitor.visitPatternRecognition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MeasureDefinitionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_measureDefinition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMeasureDefinition) {
			listener.enterMeasureDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMeasureDefinition) {
			listener.exitMeasureDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMeasureDefinition) {
			return visitor.visitMeasureDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsPerMatchContext extends ParserRuleContext {
	public ONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ONE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROW, 0); }
	public PER(): TerminalNode { return this.getToken(TrinoSQLParser.PER, 0); }
	public MATCH(): TerminalNode { return this.getToken(TrinoSQLParser.MATCH, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROWS, 0); }
	public emptyMatchHandling(): EmptyMatchHandlingContext | undefined {
		return this.tryGetRuleContext(0, EmptyMatchHandlingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rowsPerMatch; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRowsPerMatch) {
			listener.enterRowsPerMatch(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRowsPerMatch) {
			listener.exitRowsPerMatch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRowsPerMatch) {
			return visitor.visitRowsPerMatch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EmptyMatchHandlingContext extends ParserRuleContext {
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SHOW, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public MATCHES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCHES, 0); }
	public OMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OMIT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public UNMATCHED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNMATCHED, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_emptyMatchHandling; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterEmptyMatchHandling) {
			listener.enterEmptyMatchHandling(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitEmptyMatchHandling) {
			listener.exitEmptyMatchHandling(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitEmptyMatchHandling) {
			return visitor.visitEmptyMatchHandling(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkipToContext extends ParserRuleContext {
	public TO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TO, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NEXT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROW, 0); }
	public PAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PAST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LAST, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FIRST, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_skipTo; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSkipTo) {
			listener.enterSkipTo(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSkipTo) {
			listener.exitSkipTo(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSkipTo) {
			return visitor.visitSkipTo(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubsetDefinitionContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _identifier!: IdentifierContext;
	public _union: IdentifierContext[] = [];
	public EQ(): TerminalNode { return this.getToken(TrinoSQLParser.EQ, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_subsetDefinition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubsetDefinition) {
			listener.enterSubsetDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubsetDefinition) {
			listener.exitSubsetDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubsetDefinition) {
			return visitor.visitSubsetDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableDefinitionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_variableDefinition; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterVariableDefinition) {
			listener.enterVariableDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitVariableDefinition) {
			listener.exitVariableDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitVariableDefinition) {
			return visitor.visitVariableDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AliasedRelationContext extends ParserRuleContext {
	public relationPrimary(): RelationPrimaryContext {
		return this.getRuleContext(0, RelationPrimaryContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_aliasedRelation; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAliasedRelation) {
			listener.enterAliasedRelation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAliasedRelation) {
			listener.exitAliasedRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAliasedRelation) {
			return visitor.visitAliasedRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnAliasesContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_columnAliases; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterColumnAliases) {
			listener.enterColumnAliases(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitColumnAliases) {
			listener.exitColumnAliases(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitColumnAliases) {
			return visitor.visitColumnAliases(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationPrimaryContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_relationPrimary; }
	public copyFrom(ctx: RelationPrimaryContext): void {
		super.copyFrom(ctx);
	}
}
export class TableNameContext extends RelationPrimaryContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public queryPeriod(): QueryPeriodContext | undefined {
		return this.tryGetRuleContext(0, QueryPeriodContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableName) {
			listener.enterTableName(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableName) {
			listener.exitTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableName) {
			return visitor.visitTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryRelationContext extends RelationPrimaryContext {
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubqueryRelation) {
			listener.enterSubqueryRelation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubqueryRelation) {
			listener.exitSubqueryRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubqueryRelation) {
			return visitor.visitSubqueryRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnnestContext extends RelationPrimaryContext {
	public UNNEST(): TerminalNode { return this.getToken(TrinoSQLParser.UNNEST, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDINALITY, 0); }
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnnest) {
			listener.enterUnnest(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnnest) {
			listener.exitUnnest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnnest) {
			return visitor.visitUnnest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LateralContext extends RelationPrimaryContext {
	public LATERAL(): TerminalNode { return this.getToken(TrinoSQLParser.LATERAL, 0); }
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLateral) {
			listener.enterLateral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLateral) {
			listener.exitLateral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLateral) {
			return visitor.visitLateral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableFunctionInvocationContext extends RelationPrimaryContext {
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public tableFunctionCall(): TableFunctionCallContext {
		return this.getRuleContext(0, TableFunctionCallContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableFunctionInvocation) {
			listener.enterTableFunctionInvocation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableFunctionInvocation) {
			listener.exitTableFunctionInvocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableFunctionInvocation) {
			return visitor.visitTableFunctionInvocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
	public relation(): RelationContext {
		return this.getRuleContext(0, RelationContext);
	}
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterParenthesizedRelation) {
			listener.enterParenthesizedRelation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitParenthesizedRelation) {
			listener.exitParenthesizedRelation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitParenthesizedRelation) {
			return visitor.visitParenthesizedRelation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonTableContext extends RelationPrimaryContext {
	public JSON_TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_TABLE, 0); }
	public jsonPathInvocation(): JsonPathInvocationContext {
		return this.getRuleContext(0, JsonPathInvocationContext);
	}
	public COLUMNS(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMNS, 0); }
	public jsonTableColumn(): JsonTableColumnContext[];
	public jsonTableColumn(i: number): JsonTableColumnContext;
	public jsonTableColumn(i?: number): JsonTableColumnContext | JsonTableColumnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonTableColumnContext);
		} else {
			return this.getRuleContext(i, JsonTableColumnContext);
		}
	}
	public PLAN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PLAN, 0); }
	public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | undefined {
		return this.tryGetRuleContext(0, JsonTableSpecificPlanContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFAULT, 0); }
	public jsonTableDefaultPlan(): JsonTableDefaultPlanContext | undefined {
		return this.tryGetRuleContext(0, JsonTableDefaultPlanContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public ERROR(): TerminalNode[];
	public ERROR(i: number): TerminalNode;
	public ERROR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ERROR);
		} else {
			return this.getToken(TrinoSQLParser.ERROR, i);
		}
	}
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	constructor(ctx: RelationPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonTable) {
			listener.enterJsonTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonTable) {
			listener.exitJsonTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonTable) {
			return visitor.visitJsonTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTableColumnContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonTableColumn; }
	public copyFrom(ctx: JsonTableColumnContext): void {
		super.copyFrom(ctx);
	}
}
export class OrdinalityColumnContext extends JsonTableColumnContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FOR(): TerminalNode { return this.getToken(TrinoSQLParser.FOR, 0); }
	public ORDINALITY(): TerminalNode { return this.getToken(TrinoSQLParser.ORDINALITY, 0); }
	constructor(ctx: JsonTableColumnContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterOrdinalityColumn) {
			listener.enterOrdinalityColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitOrdinalityColumn) {
			listener.exitOrdinalityColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitOrdinalityColumn) {
			return visitor.visitOrdinalityColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ValueColumnContext extends JsonTableColumnContext {
	public _emptyBehavior!: JsonValueBehaviorContext;
	public _errorBehavior!: JsonValueBehaviorContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATH, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ON);
		} else {
			return this.getToken(TrinoSQLParser.ON, i);
		}
	}
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public jsonValueBehavior(): JsonValueBehaviorContext[];
	public jsonValueBehavior(i: number): JsonValueBehaviorContext;
	public jsonValueBehavior(i?: number): JsonValueBehaviorContext | JsonValueBehaviorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonValueBehaviorContext);
		} else {
			return this.getRuleContext(i, JsonValueBehaviorContext);
		}
	}
	constructor(ctx: JsonTableColumnContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterValueColumn) {
			listener.enterValueColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitValueColumn) {
			listener.exitValueColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitValueColumn) {
			return visitor.visitValueColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QueryColumnContext extends JsonTableColumnContext {
	public _emptyBehavior!: JsonQueryBehaviorContext;
	public _errorBehavior!: JsonQueryBehaviorContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public FORMAT(): TerminalNode { return this.getToken(TrinoSQLParser.FORMAT, 0); }
	public jsonRepresentation(): JsonRepresentationContext {
		return this.getRuleContext(0, JsonRepresentationContext);
	}
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATH, 0); }
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | undefined {
		return this.tryGetRuleContext(0, JsonQueryWrapperBehaviorContext);
	}
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WRAPPER, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUOTES, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ON);
		} else {
			return this.getToken(TrinoSQLParser.ON, i);
		}
	}
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEEP, 0); }
	public OMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OMIT, 0); }
	public jsonQueryBehavior(): JsonQueryBehaviorContext[];
	public jsonQueryBehavior(i: number): JsonQueryBehaviorContext;
	public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext | JsonQueryBehaviorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonQueryBehaviorContext);
		} else {
			return this.getRuleContext(i, JsonQueryBehaviorContext);
		}
	}
	public SCALAR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCALAR, 0); }
	public TEXT_STRING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TEXT_STRING, 0); }
	constructor(ctx: JsonTableColumnContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQueryColumn) {
			listener.enterQueryColumn(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQueryColumn) {
			listener.exitQueryColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQueryColumn) {
			return visitor.visitQueryColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NestedColumnsContext extends JsonTableColumnContext {
	public NESTED(): TerminalNode { return this.getToken(TrinoSQLParser.NESTED, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public COLUMNS(): TerminalNode { return this.getToken(TrinoSQLParser.COLUMNS, 0); }
	public jsonTableColumn(): JsonTableColumnContext[];
	public jsonTableColumn(i: number): JsonTableColumnContext;
	public jsonTableColumn(i?: number): JsonTableColumnContext | JsonTableColumnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonTableColumnContext);
		} else {
			return this.getRuleContext(i, JsonTableColumnContext);
		}
	}
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATH, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: JsonTableColumnContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNestedColumns) {
			listener.enterNestedColumns(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNestedColumns) {
			listener.exitNestedColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNestedColumns) {
			return visitor.visitNestedColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTableSpecificPlanContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonTableSpecificPlan; }
	public copyFrom(ctx: JsonTableSpecificPlanContext): void {
		super.copyFrom(ctx);
	}
}
export class LeafPlanContext extends JsonTableSpecificPlanContext {
	public jsonTablePathName(): JsonTablePathNameContext {
		return this.getRuleContext(0, JsonTablePathNameContext);
	}
	constructor(ctx: JsonTableSpecificPlanContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLeafPlan) {
			listener.enterLeafPlan(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLeafPlan) {
			listener.exitLeafPlan(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLeafPlan) {
			return visitor.visitLeafPlan(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JoinPlanContext extends JsonTableSpecificPlanContext {
	public jsonTablePathName(): JsonTablePathNameContext {
		return this.getRuleContext(0, JsonTablePathNameContext);
	}
	public planPrimary(): PlanPrimaryContext {
		return this.getRuleContext(0, PlanPrimaryContext);
	}
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OUTER, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INNER, 0); }
	constructor(ctx: JsonTableSpecificPlanContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJoinPlan) {
			listener.enterJoinPlan(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJoinPlan) {
			listener.exitJoinPlan(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJoinPlan) {
			return visitor.visitJoinPlan(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnionPlanContext extends JsonTableSpecificPlanContext {
	public planPrimary(): PlanPrimaryContext[];
	public planPrimary(i: number): PlanPrimaryContext;
	public planPrimary(i?: number): PlanPrimaryContext | PlanPrimaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PlanPrimaryContext);
		} else {
			return this.getRuleContext(i, PlanPrimaryContext);
		}
	}
	public UNION(): TerminalNode[];
	public UNION(i: number): TerminalNode;
	public UNION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.UNION);
		} else {
			return this.getToken(TrinoSQLParser.UNION, i);
		}
	}
	constructor(ctx: JsonTableSpecificPlanContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnionPlan) {
			listener.enterUnionPlan(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnionPlan) {
			listener.exitUnionPlan(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnionPlan) {
			return visitor.visitUnionPlan(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CrossPlanContext extends JsonTableSpecificPlanContext {
	public planPrimary(): PlanPrimaryContext[];
	public planPrimary(i: number): PlanPrimaryContext;
	public planPrimary(i?: number): PlanPrimaryContext | PlanPrimaryContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PlanPrimaryContext);
		} else {
			return this.getRuleContext(i, PlanPrimaryContext);
		}
	}
	public CROSS(): TerminalNode[];
	public CROSS(i: number): TerminalNode;
	public CROSS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.CROSS);
		} else {
			return this.getToken(TrinoSQLParser.CROSS, i);
		}
	}
	constructor(ctx: JsonTableSpecificPlanContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCrossPlan) {
			listener.enterCrossPlan(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCrossPlan) {
			listener.exitCrossPlan(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCrossPlan) {
			return visitor.visitCrossPlan(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTablePathNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonTablePathName; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonTablePathName) {
			listener.enterJsonTablePathName(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonTablePathName) {
			listener.exitJsonTablePathName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonTablePathName) {
			return visitor.visitJsonTablePathName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlanPrimaryContext extends ParserRuleContext {
	public jsonTablePathName(): JsonTablePathNameContext | undefined {
		return this.tryGetRuleContext(0, JsonTablePathNameContext);
	}
	public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | undefined {
		return this.tryGetRuleContext(0, JsonTableSpecificPlanContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_planPrimary; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPlanPrimary) {
			listener.enterPlanPrimary(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPlanPrimary) {
			listener.exitPlanPrimary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPlanPrimary) {
			return visitor.visitPlanPrimary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTableDefaultPlanContext extends ParserRuleContext {
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OUTER, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INNER, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNION, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CROSS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonTableDefaultPlan; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonTableDefaultPlan) {
			listener.enterJsonTableDefaultPlan(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonTableDefaultPlan) {
			listener.exitJsonTableDefaultPlan(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonTableDefaultPlan) {
			return visitor.visitJsonTableDefaultPlan(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableFunctionCallContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public tableFunctionArgument(): TableFunctionArgumentContext[];
	public tableFunctionArgument(i: number): TableFunctionArgumentContext;
	public tableFunctionArgument(i?: number): TableFunctionArgumentContext | TableFunctionArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableFunctionArgumentContext);
		} else {
			return this.getRuleContext(i, TableFunctionArgumentContext);
		}
	}
	public COPARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COPARTITION, 0); }
	public copartitionTables(): CopartitionTablesContext[];
	public copartitionTables(i: number): CopartitionTablesContext;
	public copartitionTables(i?: number): CopartitionTablesContext | CopartitionTablesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CopartitionTablesContext);
		} else {
			return this.getRuleContext(i, CopartitionTablesContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_tableFunctionCall; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableFunctionCall) {
			listener.enterTableFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableFunctionCall) {
			listener.exitTableFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableFunctionCall) {
			return visitor.visitTableFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableFunctionArgumentContext extends ParserRuleContext {
	public tableArgument(): TableArgumentContext | undefined {
		return this.tryGetRuleContext(0, TableArgumentContext);
	}
	public descriptorArgument(): DescriptorArgumentContext | undefined {
		return this.tryGetRuleContext(0, DescriptorArgumentContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_tableFunctionArgument; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableFunctionArgument) {
			listener.enterTableFunctionArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableFunctionArgument) {
			listener.exitTableFunctionArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableFunctionArgument) {
			return visitor.visitTableFunctionArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableArgumentContext extends ParserRuleContext {
	public tableArgumentRelation(): TableArgumentRelationContext {
		return this.getRuleContext(0, TableArgumentRelationContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PARTITION, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.BY);
		} else {
			return this.getToken(TrinoSQLParser.BY, i);
		}
	}
	public PRUNE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRUNE, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHEN, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEEP, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_tableArgument; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableArgument) {
			listener.enterTableArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableArgument) {
			listener.exitTableArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableArgument) {
			return visitor.visitTableArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableArgumentRelationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_tableArgumentRelation; }
	public copyFrom(ctx: TableArgumentRelationContext): void {
		super.copyFrom(ctx);
	}
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: TableArgumentRelationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableArgumentTable) {
			listener.enterTableArgumentTable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableArgumentTable) {
			listener.exitTableArgumentTable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableArgumentTable) {
			return visitor.visitTableArgumentTable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
	public TABLE(): TerminalNode { return this.getToken(TrinoSQLParser.TABLE, 0); }
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public columnAliases(): ColumnAliasesContext | undefined {
		return this.tryGetRuleContext(0, ColumnAliasesContext);
	}
	constructor(ctx: TableArgumentRelationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTableArgumentQuery) {
			listener.enterTableArgumentQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTableArgumentQuery) {
			listener.exitTableArgumentQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTableArgumentQuery) {
			return visitor.visitTableArgumentQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescriptorArgumentContext extends ParserRuleContext {
	public DESCRIPTOR(): TerminalNode { return this.getToken(TrinoSQLParser.DESCRIPTOR, 0); }
	public descriptorField(): DescriptorFieldContext[];
	public descriptorField(i: number): DescriptorFieldContext;
	public descriptorField(i?: number): DescriptorFieldContext | DescriptorFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DescriptorFieldContext);
		} else {
			return this.getRuleContext(i, DescriptorFieldContext);
		}
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CAST, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_descriptorArgument; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDescriptorArgument) {
			listener.enterDescriptorArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDescriptorArgument) {
			listener.exitDescriptorArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDescriptorArgument) {
			return visitor.visitDescriptorArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescriptorFieldContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_descriptorField; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDescriptorField) {
			listener.enterDescriptorField(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDescriptorField) {
			listener.exitDescriptorField(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDescriptorField) {
			return visitor.visitDescriptorField(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CopartitionTablesContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_copartitionTables; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCopartitionTables) {
			listener.enterCopartitionTables(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCopartitionTables) {
			listener.exitCopartitionTables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCopartitionTables) {
			return visitor.visitCopartitionTables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_expression; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExpression) {
			listener.enterExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExpression) {
			listener.exitExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExpression) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_booleanExpression; }
	public copyFrom(ctx: BooleanExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class PredicatedContext extends BooleanExpressionContext {
	public _valueExpression!: ValueExpressionContext;
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public predicate(): PredicateContext | undefined {
		return this.tryGetRuleContext(0, PredicateContext);
	}
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPredicated) {
			listener.enterPredicated(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPredicated) {
			listener.exitPredicated(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPredicated) {
			return visitor.visitPredicated(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LogicalNotContext extends BooleanExpressionContext {
	public NOT(): TerminalNode { return this.getToken(TrinoSQLParser.NOT, 0); }
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLogicalNot) {
			listener.enterLogicalNot(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLogicalNot) {
			listener.exitLogicalNot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLogicalNot) {
			return visitor.visitLogicalNot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AndContext extends BooleanExpressionContext {
	public booleanExpression(): BooleanExpressionContext[];
	public booleanExpression(i: number): BooleanExpressionContext;
	public booleanExpression(i?: number): BooleanExpressionContext | BooleanExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BooleanExpressionContext);
		} else {
			return this.getRuleContext(i, BooleanExpressionContext);
		}
	}
	public AND(): TerminalNode { return this.getToken(TrinoSQLParser.AND, 0); }
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAnd) {
			listener.enterAnd(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAnd) {
			listener.exitAnd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAnd) {
			return visitor.visitAnd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OrContext extends BooleanExpressionContext {
	public booleanExpression(): BooleanExpressionContext[];
	public booleanExpression(i: number): BooleanExpressionContext;
	public booleanExpression(i?: number): BooleanExpressionContext | BooleanExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BooleanExpressionContext);
		} else {
			return this.getRuleContext(i, BooleanExpressionContext);
		}
	}
	public OR(): TerminalNode { return this.getToken(TrinoSQLParser.OR, 0); }
	constructor(ctx: BooleanExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterOr) {
			listener.enterOr(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitOr) {
			listener.exitOr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitOr) {
			return visitor.visitOr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	public value: ParserRuleContext;
	constructor(parent: ParserRuleContext | undefined, invokingState: number, value: ParserRuleContext) {
		super(parent, invokingState);
		this.value = value;
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_predicate; }
	public copyFrom(ctx: PredicateContext): void {
		super.copyFrom(ctx);
		this.value = ctx.value;
	}
}
export class ComparisonContext extends PredicateContext {
	public _right!: ValueExpressionContext;
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterComparison) {
			listener.enterComparison(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitComparison) {
			listener.exitComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitComparison) {
			return visitor.visitComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QuantifiedComparisonContext extends PredicateContext {
	public comparisonOperator(): ComparisonOperatorContext {
		return this.getRuleContext(0, ComparisonOperatorContext);
	}
	public comparisonQuantifier(): ComparisonQuantifierContext {
		return this.getRuleContext(0, ComparisonQuantifierContext);
	}
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQuantifiedComparison) {
			listener.enterQuantifiedComparison(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQuantifiedComparison) {
			listener.exitQuantifiedComparison(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQuantifiedComparison) {
			return visitor.visitQuantifiedComparison(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BetweenContext extends PredicateContext {
	public _lower!: ValueExpressionContext;
	public _upper!: ValueExpressionContext;
	public BETWEEN(): TerminalNode { return this.getToken(TrinoSQLParser.BETWEEN, 0); }
	public AND(): TerminalNode { return this.getToken(TrinoSQLParser.AND, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBetween) {
			listener.enterBetween(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBetween) {
			listener.exitBetween(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBetween) {
			return visitor.visitBetween(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InListContext extends PredicateContext {
	public IN(): TerminalNode { return this.getToken(TrinoSQLParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterInList) {
			listener.enterInList(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitInList) {
			listener.exitInList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitInList) {
			return visitor.visitInList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InSubqueryContext extends PredicateContext {
	public IN(): TerminalNode { return this.getToken(TrinoSQLParser.IN, 0); }
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterInSubquery) {
			listener.enterInSubquery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitInSubquery) {
			listener.exitInSubquery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitInSubquery) {
			return visitor.visitInSubquery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LikeContext extends PredicateContext {
	public _pattern!: ValueExpressionContext;
	public _escape!: ValueExpressionContext;
	public LIKE(): TerminalNode { return this.getToken(TrinoSQLParser.LIKE, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ESCAPE, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLike) {
			listener.enterLike(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLike) {
			listener.exitLike(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLike) {
			return visitor.visitLike(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NullPredicateContext extends PredicateContext {
	public IS(): TerminalNode { return this.getToken(TrinoSQLParser.IS, 0); }
	public NULL(): TerminalNode { return this.getToken(TrinoSQLParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNullPredicate) {
			listener.enterNullPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNullPredicate) {
			listener.exitNullPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNullPredicate) {
			return visitor.visitNullPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DistinctFromContext extends PredicateContext {
	public _right!: ValueExpressionContext;
	public IS(): TerminalNode { return this.getToken(TrinoSQLParser.IS, 0); }
	public DISTINCT(): TerminalNode { return this.getToken(TrinoSQLParser.DISTINCT, 0); }
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: PredicateContext) {
		super(ctx.parent, ctx.invokingState, ctx.value);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDistinctFrom) {
			listener.enterDistinctFrom(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDistinctFrom) {
			listener.exitDistinctFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDistinctFrom) {
			return visitor.visitDistinctFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValueExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_valueExpression; }
	public copyFrom(ctx: ValueExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterValueExpressionDefault) {
			listener.enterValueExpressionDefault(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitValueExpressionDefault) {
			listener.exitValueExpressionDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitValueExpressionDefault) {
			return visitor.visitValueExpressionDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AtTimeZoneContext extends ValueExpressionContext {
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public AT(): TerminalNode { return this.getToken(TrinoSQLParser.AT, 0); }
	public timeZoneSpecifier(): TimeZoneSpecifierContext {
		return this.getRuleContext(0, TimeZoneSpecifierContext);
	}
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAtTimeZone) {
			listener.enterAtTimeZone(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAtTimeZone) {
			listener.exitAtTimeZone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAtTimeZone) {
			return visitor.visitAtTimeZone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
	public _operator!: Token;
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PLUS, 0); }
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterArithmeticUnary) {
			listener.enterArithmeticUnary(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitArithmeticUnary) {
			listener.exitArithmeticUnary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitArithmeticUnary) {
			return visitor.visitArithmeticUnary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
	public _left!: ValueExpressionContext;
	public _operator!: Token;
	public _right!: ValueExpressionContext;
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public ASTERISK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ASTERISK, 0); }
	public SLASH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SLASH, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PERCENT, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterArithmeticBinary) {
			listener.enterArithmeticBinary(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitArithmeticBinary) {
			listener.exitArithmeticBinary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitArithmeticBinary) {
			return visitor.visitArithmeticBinary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ConcatenationContext extends ValueExpressionContext {
	public _left!: ValueExpressionContext;
	public _right!: ValueExpressionContext;
	public CONCAT(): TerminalNode { return this.getToken(TrinoSQLParser.CONCAT, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	constructor(ctx: ValueExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterConcatenation) {
			listener.enterConcatenation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitConcatenation) {
			listener.exitConcatenation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitConcatenation) {
			return visitor.visitConcatenation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrimaryExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_primaryExpression; }
	public copyFrom(ctx: PrimaryExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class NullLiteralContext extends PrimaryExpressionContext {
	public NULL(): TerminalNode { return this.getToken(TrinoSQLParser.NULL, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNullLiteral) {
			listener.enterNullLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNullLiteral) {
			listener.exitNullLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNullLiteral) {
			return visitor.visitNullLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
	public interval(): IntervalContext {
		return this.getRuleContext(0, IntervalContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIntervalLiteral) {
			listener.enterIntervalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIntervalLiteral) {
			listener.exitIntervalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIntervalLiteral) {
			return visitor.visitIntervalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TypeConstructorContext extends PrimaryExpressionContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRECISION, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTypeConstructor) {
			listener.enterTypeConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTypeConstructor) {
			listener.exitTypeConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTypeConstructor) {
			return visitor.visitTypeConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NumericLiteralContext extends PrimaryExpressionContext {
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNumericLiteral) {
			listener.enterNumericLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNumericLiteral) {
			listener.exitNumericLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNumericLiteral) {
			return visitor.visitNumericLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
	public booleanValue(): BooleanValueContext {
		return this.getRuleContext(0, BooleanValueContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBooleanLiteral) {
			listener.enterBooleanLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBooleanLiteral) {
			listener.exitBooleanLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBooleanLiteral) {
			return visitor.visitBooleanLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringLiteralContext extends PrimaryExpressionContext {
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStringLiteral) {
			return visitor.visitStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
	public BINARY_LITERAL(): TerminalNode { return this.getToken(TrinoSQLParser.BINARY_LITERAL, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBinaryLiteral) {
			listener.enterBinaryLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBinaryLiteral) {
			listener.exitBinaryLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBinaryLiteral) {
			return visitor.visitBinaryLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParameterContext extends PrimaryExpressionContext {
	public QUESTION_MARK(): TerminalNode { return this.getToken(TrinoSQLParser.QUESTION_MARK, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterParameter) {
			listener.enterParameter(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitParameter) {
			listener.exitParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitParameter) {
			return visitor.visitParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PositionContext extends PrimaryExpressionContext {
	public POSITION(): TerminalNode { return this.getToken(TrinoSQLParser.POSITION, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public IN(): TerminalNode { return this.getToken(TrinoSQLParser.IN, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPosition) {
			listener.enterPosition(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPosition) {
			listener.exitPosition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPosition) {
			return visitor.visitPosition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RowConstructorContext extends PrimaryExpressionContext {
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROW, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRowConstructor) {
			listener.enterRowConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRowConstructor) {
			listener.exitRowConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRowConstructor) {
			return visitor.visitRowConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ListaggContext extends PrimaryExpressionContext {
	public _name!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public LISTAGG(): TerminalNode { return this.getToken(TrinoSQLParser.LISTAGG, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHIN, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GROUP, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public string(): StringContext | undefined {
		return this.tryGetRuleContext(0, StringContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public OVERFLOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OVERFLOW, 0); }
	public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | undefined {
		return this.tryGetRuleContext(0, ListAggOverflowBehaviorContext);
	}
	public filter(): FilterContext | undefined {
		return this.tryGetRuleContext(0, FilterContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterListagg) {
			listener.enterListagg(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitListagg) {
			listener.exitListagg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitListagg) {
			return visitor.visitListagg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FunctionCallContext extends PrimaryExpressionContext {
	public _label!: IdentifierContext;
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public ASTERISK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ASTERISK, 0); }
	public processingMode(): ProcessingModeContext | undefined {
		return this.tryGetRuleContext(0, ProcessingModeContext);
	}
	public filter(): FilterContext | undefined {
		return this.tryGetRuleContext(0, FilterContext);
	}
	public over(): OverContext | undefined {
		return this.tryGetRuleContext(0, OverContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BY, 0); }
	public sortItem(): SortItemContext[];
	public sortItem(i: number): SortItemContext;
	public sortItem(i?: number): SortItemContext | SortItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortItemContext);
		} else {
			return this.getRuleContext(i, SortItemContext);
		}
	}
	public setQuantifier(): SetQuantifierContext | undefined {
		return this.tryGetRuleContext(0, SetQuantifierContext);
	}
	public nullTreatment(): NullTreatmentContext | undefined {
		return this.tryGetRuleContext(0, NullTreatmentContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterFunctionCall) {
			listener.enterFunctionCall(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitFunctionCall) {
			listener.exitFunctionCall(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitFunctionCall) {
			return visitor.visitFunctionCall(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MeasureContext extends PrimaryExpressionContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public over(): OverContext {
		return this.getRuleContext(0, OverContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMeasure) {
			listener.enterMeasure(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMeasure) {
			listener.exitMeasure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMeasure) {
			return visitor.visitMeasure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LambdaContext extends PrimaryExpressionContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLambda) {
			listener.enterLambda(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLambda) {
			listener.exitLambda(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLambda) {
			return visitor.visitLambda(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubqueryExpression) {
			listener.enterSubqueryExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubqueryExpression) {
			listener.exitSubqueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubqueryExpression) {
			return visitor.visitSubqueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistsContext extends PrimaryExpressionContext {
	public EXISTS(): TerminalNode { return this.getToken(TrinoSQLParser.EXISTS, 0); }
	public query(): QueryContext {
		return this.getRuleContext(0, QueryContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExists) {
			listener.enterExists(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExists) {
			listener.exitExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExists) {
			return visitor.visitExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleCaseContext extends PrimaryExpressionContext {
	public _operand!: ExpressionContext;
	public _elseExpression!: ExpressionContext;
	public CASE(): TerminalNode { return this.getToken(TrinoSQLParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public whenClause(): WhenClauseContext[];
	public whenClause(i: number): WhenClauseContext;
	public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenClauseContext);
		} else {
			return this.getRuleContext(i, WhenClauseContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ELSE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSimpleCase) {
			listener.enterSimpleCase(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSimpleCase) {
			listener.exitSimpleCase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSimpleCase) {
			return visitor.visitSimpleCase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SearchedCaseContext extends PrimaryExpressionContext {
	public _elseExpression!: ExpressionContext;
	public CASE(): TerminalNode { return this.getToken(TrinoSQLParser.CASE, 0); }
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public whenClause(): WhenClauseContext[];
	public whenClause(i: number): WhenClauseContext;
	public whenClause(i?: number): WhenClauseContext | WhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(WhenClauseContext);
		} else {
			return this.getRuleContext(i, WhenClauseContext);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ELSE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSearchedCase) {
			listener.enterSearchedCase(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSearchedCase) {
			listener.exitSearchedCase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSearchedCase) {
			return visitor.visitSearchedCase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CastContext extends PrimaryExpressionContext {
	public CAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CAST, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public TRY_CAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRY_CAST, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCast) {
			listener.enterCast(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCast) {
			listener.exitCast(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCast) {
			return visitor.visitCast(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
	public ARRAY(): TerminalNode { return this.getToken(TrinoSQLParser.ARRAY, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterArrayConstructor) {
			listener.enterArrayConstructor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitArrayConstructor) {
			listener.exitArrayConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitArrayConstructor) {
			return visitor.visitArrayConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubscriptContext extends PrimaryExpressionContext {
	public _value!: PrimaryExpressionContext;
	public _index!: ValueExpressionContext;
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubscript) {
			listener.enterSubscript(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubscript) {
			listener.exitSubscript(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubscript) {
			return visitor.visitSubscript(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterColumnReference) {
			listener.enterColumnReference(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitColumnReference) {
			listener.exitColumnReference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitColumnReference) {
			return visitor.visitColumnReference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DereferenceContext extends PrimaryExpressionContext {
	public _base!: PrimaryExpressionContext;
	public _fieldName!: IdentifierContext;
	public primaryExpression(): PrimaryExpressionContext {
		return this.getRuleContext(0, PrimaryExpressionContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDereference) {
			listener.enterDereference(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDereference) {
			listener.exitDereference(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDereference) {
			return visitor.visitDereference(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentDateContext extends PrimaryExpressionContext {
	public _name!: Token;
	public CURRENT_DATE(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_DATE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentDate) {
			listener.enterCurrentDate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentDate) {
			listener.exitCurrentDate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentDate) {
			return visitor.visitCurrentDate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentTimeContext extends PrimaryExpressionContext {
	public _name!: Token;
	public _precision!: Token;
	public CURRENT_TIME(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_TIME, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentTime) {
			listener.enterCurrentTime(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentTime) {
			listener.exitCurrentTime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentTime) {
			return visitor.visitCurrentTime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentTimestampContext extends PrimaryExpressionContext {
	public _name!: Token;
	public _precision!: Token;
	public CURRENT_TIMESTAMP(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_TIMESTAMP, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentTimestamp) {
			listener.enterCurrentTimestamp(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentTimestamp) {
			listener.exitCurrentTimestamp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentTimestamp) {
			return visitor.visitCurrentTimestamp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LocalTimeContext extends PrimaryExpressionContext {
	public _name!: Token;
	public _precision!: Token;
	public LOCALTIME(): TerminalNode { return this.getToken(TrinoSQLParser.LOCALTIME, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLocalTime) {
			listener.enterLocalTime(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLocalTime) {
			listener.exitLocalTime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLocalTime) {
			return visitor.visitLocalTime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LocalTimestampContext extends PrimaryExpressionContext {
	public _name!: Token;
	public _precision!: Token;
	public LOCALTIMESTAMP(): TerminalNode { return this.getToken(TrinoSQLParser.LOCALTIMESTAMP, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLocalTimestamp) {
			listener.enterLocalTimestamp(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLocalTimestamp) {
			listener.exitLocalTimestamp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLocalTimestamp) {
			return visitor.visitLocalTimestamp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentUserContext extends PrimaryExpressionContext {
	public _name!: Token;
	public CURRENT_USER(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_USER, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentUser) {
			listener.enterCurrentUser(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentUser) {
			listener.exitCurrentUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentUser) {
			return visitor.visitCurrentUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
	public _name!: Token;
	public CURRENT_CATALOG(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_CATALOG, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentCatalog) {
			listener.enterCurrentCatalog(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentCatalog) {
			listener.exitCurrentCatalog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentCatalog) {
			return visitor.visitCurrentCatalog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
	public _name!: Token;
	public CURRENT_SCHEMA(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_SCHEMA, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentSchema) {
			listener.enterCurrentSchema(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentSchema) {
			listener.exitCurrentSchema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentSchema) {
			return visitor.visitCurrentSchema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentPathContext extends PrimaryExpressionContext {
	public _name!: Token;
	public CURRENT_PATH(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_PATH, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentPath) {
			listener.enterCurrentPath(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentPath) {
			listener.exitCurrentPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentPath) {
			return visitor.visitCurrentPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TrimContext extends PrimaryExpressionContext {
	public _trimChar!: ValueExpressionContext;
	public _trimSource!: ValueExpressionContext;
	public TRIM(): TerminalNode { return this.getToken(TrinoSQLParser.TRIM, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FROM, 0); }
	public trimsSpecification(): TrimsSpecificationContext | undefined {
		return this.tryGetRuleContext(0, TrimsSpecificationContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTrim) {
			listener.enterTrim(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTrim) {
			listener.exitTrim(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTrim) {
			return visitor.visitTrim(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SubstringContext extends PrimaryExpressionContext {
	public SUBSTRING(): TerminalNode { return this.getToken(TrinoSQLParser.SUBSTRING, 0); }
	public valueExpression(): ValueExpressionContext[];
	public valueExpression(i: number): ValueExpressionContext;
	public valueExpression(i?: number): ValueExpressionContext | ValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ValueExpressionContext);
		} else {
			return this.getRuleContext(i, ValueExpressionContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOR, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSubstring) {
			listener.enterSubstring(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSubstring) {
			listener.exitSubstring(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSubstring) {
			return visitor.visitSubstring(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NormalizeContext extends PrimaryExpressionContext {
	public NORMALIZE(): TerminalNode { return this.getToken(TrinoSQLParser.NORMALIZE, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	public normalForm(): NormalFormContext | undefined {
		return this.tryGetRuleContext(0, NormalFormContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNormalize) {
			listener.enterNormalize(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNormalize) {
			listener.exitNormalize(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNormalize) {
			return visitor.visitNormalize(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExtractContext extends PrimaryExpressionContext {
	public EXTRACT(): TerminalNode { return this.getToken(TrinoSQLParser.EXTRACT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FROM(): TerminalNode { return this.getToken(TrinoSQLParser.FROM, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExtract) {
			listener.enterExtract(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExtract) {
			listener.exitExtract(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExtract) {
			return visitor.visitExtract(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterParenthesizedExpression) {
			listener.enterParenthesizedExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitParenthesizedExpression) {
			listener.exitParenthesizedExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitParenthesizedExpression) {
			return visitor.visitParenthesizedExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GroupingOperationContext extends PrimaryExpressionContext {
	public GROUPING(): TerminalNode { return this.getToken(TrinoSQLParser.GROUPING, 0); }
	public qualifiedName(): QualifiedNameContext[];
	public qualifiedName(i: number): QualifiedNameContext;
	public qualifiedName(i?: number): QualifiedNameContext | QualifiedNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(QualifiedNameContext);
		} else {
			return this.getRuleContext(i, QualifiedNameContext);
		}
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGroupingOperation) {
			listener.enterGroupingOperation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGroupingOperation) {
			listener.exitGroupingOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGroupingOperation) {
			return visitor.visitGroupingOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonExistsContext extends PrimaryExpressionContext {
	public JSON_EXISTS(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_EXISTS, 0); }
	public jsonPathInvocation(): JsonPathInvocationContext {
		return this.getRuleContext(0, JsonPathInvocationContext);
	}
	public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | undefined {
		return this.tryGetRuleContext(0, JsonExistsErrorBehaviorContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonExists) {
			listener.enterJsonExists(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonExists) {
			listener.exitJsonExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonExists) {
			return visitor.visitJsonExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonValueContext extends PrimaryExpressionContext {
	public _emptyBehavior!: JsonValueBehaviorContext;
	public _errorBehavior!: JsonValueBehaviorContext;
	public JSON_VALUE(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_VALUE, 0); }
	public jsonPathInvocation(): JsonPathInvocationContext {
		return this.getRuleContext(0, JsonPathInvocationContext);
	}
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNING, 0); }
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ON);
		} else {
			return this.getToken(TrinoSQLParser.ON, i);
		}
	}
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public jsonValueBehavior(): JsonValueBehaviorContext[];
	public jsonValueBehavior(i: number): JsonValueBehaviorContext;
	public jsonValueBehavior(i?: number): JsonValueBehaviorContext | JsonValueBehaviorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonValueBehaviorContext);
		} else {
			return this.getRuleContext(i, JsonValueBehaviorContext);
		}
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonValue) {
			listener.enterJsonValue(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonValue) {
			listener.exitJsonValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonValue) {
			return visitor.visitJsonValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonQueryContext extends PrimaryExpressionContext {
	public _emptyBehavior!: JsonQueryBehaviorContext;
	public _errorBehavior!: JsonQueryBehaviorContext;
	public JSON_QUERY(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_QUERY, 0); }
	public jsonPathInvocation(): JsonPathInvocationContext {
		return this.getRuleContext(0, JsonPathInvocationContext);
	}
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNING, 0); }
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | undefined {
		return this.tryGetRuleContext(0, JsonQueryWrapperBehaviorContext);
	}
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WRAPPER, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUOTES, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.ON);
		} else {
			return this.getToken(TrinoSQLParser.ON, i);
		}
	}
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEEP, 0); }
	public OMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OMIT, 0); }
	public jsonQueryBehavior(): JsonQueryBehaviorContext[];
	public jsonQueryBehavior(i: number): JsonQueryBehaviorContext;
	public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext | JsonQueryBehaviorContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonQueryBehaviorContext);
		} else {
			return this.getRuleContext(i, JsonQueryBehaviorContext);
		}
	}
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FORMAT, 0); }
	public jsonRepresentation(): JsonRepresentationContext | undefined {
		return this.tryGetRuleContext(0, JsonRepresentationContext);
	}
	public SCALAR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCALAR, 0); }
	public TEXT_STRING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TEXT_STRING, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonQuery) {
			listener.enterJsonQuery(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonQuery) {
			listener.exitJsonQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonQuery) {
			return visitor.visitJsonQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonObjectContext extends PrimaryExpressionContext {
	public JSON_OBJECT(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_OBJECT, 0); }
	public jsonObjectMember(): JsonObjectMemberContext[];
	public jsonObjectMember(i: number): JsonObjectMemberContext;
	public jsonObjectMember(i?: number): JsonObjectMemberContext | JsonObjectMemberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonObjectMemberContext);
		} else {
			return this.getRuleContext(i, JsonObjectMemberContext);
		}
	}
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNING, 0); }
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.NULL);
		} else {
			return this.getToken(TrinoSQLParser.NULL, i);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public ABSENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ABSENT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNIQUE, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHOUT, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FORMAT, 0); }
	public jsonRepresentation(): JsonRepresentationContext | undefined {
		return this.tryGetRuleContext(0, JsonRepresentationContext);
	}
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEYS, 0); }
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonObject) {
			listener.enterJsonObject(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonObject) {
			listener.exitJsonObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonObject) {
			return visitor.visitJsonObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class JsonArrayContext extends PrimaryExpressionContext {
	public JSON_ARRAY(): TerminalNode { return this.getToken(TrinoSQLParser.JSON_ARRAY, 0); }
	public jsonValueExpression(): JsonValueExpressionContext[];
	public jsonValueExpression(i: number): JsonValueExpressionContext;
	public jsonValueExpression(i?: number): JsonValueExpressionContext | JsonValueExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonValueExpressionContext);
		} else {
			return this.getRuleContext(i, JsonValueExpressionContext);
		}
	}
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNING, 0); }
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.NULL);
		} else {
			return this.getToken(TrinoSQLParser.NULL, i);
		}
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ON, 0); }
	public ABSENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ABSENT, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FORMAT, 0); }
	public jsonRepresentation(): JsonRepresentationContext | undefined {
		return this.tryGetRuleContext(0, JsonRepresentationContext);
	}
	constructor(ctx: PrimaryExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonArray) {
			listener.enterJsonArray(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonArray) {
			listener.exitJsonArray(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonArray) {
			return visitor.visitJsonArray(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonPathInvocationContext extends ParserRuleContext {
	public _path!: StringContext;
	public _pathName!: IdentifierContext;
	public jsonValueExpression(): JsonValueExpressionContext {
		return this.getRuleContext(0, JsonValueExpressionContext);
	}
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AS, 0); }
	public PASSING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PASSING, 0); }
	public jsonArgument(): JsonArgumentContext[];
	public jsonArgument(i: number): JsonArgumentContext;
	public jsonArgument(i?: number): JsonArgumentContext | JsonArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonArgumentContext);
		} else {
			return this.getRuleContext(i, JsonArgumentContext);
		}
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonPathInvocation; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonPathInvocation) {
			listener.enterJsonPathInvocation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonPathInvocation) {
			listener.exitJsonPathInvocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonPathInvocation) {
			return visitor.visitJsonPathInvocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonValueExpressionContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FORMAT, 0); }
	public jsonRepresentation(): JsonRepresentationContext | undefined {
		return this.tryGetRuleContext(0, JsonRepresentationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonValueExpression; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonValueExpression) {
			listener.enterJsonValueExpression(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonValueExpression) {
			listener.exitJsonValueExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonValueExpression) {
			return visitor.visitJsonValueExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonRepresentationContext extends ParserRuleContext {
	public JSON(): TerminalNode { return this.getToken(TrinoSQLParser.JSON, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ENCODING, 0); }
	public UTF8(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF8, 0); }
	public UTF16(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF16, 0); }
	public UTF32(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF32, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonRepresentation; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonRepresentation) {
			listener.enterJsonRepresentation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonRepresentation) {
			listener.exitJsonRepresentation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonRepresentation) {
			return visitor.visitJsonRepresentation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonArgumentContext extends ParserRuleContext {
	public jsonValueExpression(): JsonValueExpressionContext {
		return this.getRuleContext(0, JsonValueExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonArgument; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonArgument) {
			listener.enterJsonArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonArgument) {
			listener.exitJsonArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonArgument) {
			return visitor.visitJsonArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonExistsErrorBehaviorContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FALSE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNKNOWN, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonExistsErrorBehavior; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonExistsErrorBehavior) {
			listener.enterJsonExistsErrorBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonExistsErrorBehavior) {
			listener.exitJsonExistsErrorBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonExistsErrorBehavior) {
			return visitor.visitJsonExistsErrorBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonValueBehaviorContext extends ParserRuleContext {
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFAULT, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonValueBehavior; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonValueBehavior) {
			listener.enterJsonValueBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonValueBehavior) {
			listener.exitJsonValueBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonValueBehavior) {
			return visitor.visitJsonValueBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonQueryWrapperBehaviorContext extends ParserRuleContext {
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHOUT, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ARRAY, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	public CONDITIONAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CONDITIONAL, 0); }
	public UNCONDITIONAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNCONDITIONAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonQueryWrapperBehavior; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonQueryWrapperBehavior) {
			listener.enterJsonQueryWrapperBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonQueryWrapperBehavior) {
			listener.exitJsonQueryWrapperBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonQueryWrapperBehavior) {
			return visitor.visitJsonQueryWrapperBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonQueryBehaviorContext extends ParserRuleContext {
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULL, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ARRAY, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OBJECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonQueryBehavior; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonQueryBehavior) {
			listener.enterJsonQueryBehavior(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonQueryBehavior) {
			listener.exitJsonQueryBehavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonQueryBehavior) {
			return visitor.visitJsonQueryBehavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonObjectMemberContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VALUE, 0); }
	public jsonValueExpression(): JsonValueExpressionContext {
		return this.getRuleContext(0, JsonValueExpressionContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_jsonObjectMember; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterJsonObjectMember) {
			listener.enterJsonObjectMember(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitJsonObjectMember) {
			listener.exitJsonObjectMember(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitJsonObjectMember) {
			return visitor.visitJsonObjectMember(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcessingModeContext extends ParserRuleContext {
	public RUNNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RUNNING, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FINAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_processingMode; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterProcessingMode) {
			listener.enterProcessingMode(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitProcessingMode) {
			listener.exitProcessingMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitProcessingMode) {
			return visitor.visitProcessingMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NullTreatmentContext extends ParserRuleContext {
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IGNORE, 0); }
	public NULLS(): TerminalNode { return this.getToken(TrinoSQLParser.NULLS, 0); }
	public RESPECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESPECT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_nullTreatment; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNullTreatment) {
			listener.enterNullTreatment(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNullTreatment) {
			listener.exitNullTreatment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNullTreatment) {
			return visitor.visitNullTreatment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_string; }
	public copyFrom(ctx: StringContext): void {
		super.copyFrom(ctx);
	}
}
export class BasicStringLiteralContext extends StringContext {
	public STRING(): TerminalNode { return this.getToken(TrinoSQLParser.STRING, 0); }
	constructor(ctx: StringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBasicStringLiteral) {
			listener.enterBasicStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBasicStringLiteral) {
			listener.exitBasicStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBasicStringLiteral) {
			return visitor.visitBasicStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnicodeStringLiteralContext extends StringContext {
	public UNICODE_STRING(): TerminalNode { return this.getToken(TrinoSQLParser.UNICODE_STRING, 0); }
	public UESCAPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UESCAPE, 0); }
	public STRING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.STRING, 0); }
	constructor(ctx: StringContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnicodeStringLiteral) {
			listener.enterUnicodeStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnicodeStringLiteral) {
			listener.exitUnicodeStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnicodeStringLiteral) {
			return visitor.visitUnicodeStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimeZoneSpecifierContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_timeZoneSpecifier; }
	public copyFrom(ctx: TimeZoneSpecifierContext): void {
		super.copyFrom(ctx);
	}
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
	public TIME(): TerminalNode { return this.getToken(TrinoSQLParser.TIME, 0); }
	public ZONE(): TerminalNode { return this.getToken(TrinoSQLParser.ZONE, 0); }
	public interval(): IntervalContext {
		return this.getRuleContext(0, IntervalContext);
	}
	constructor(ctx: TimeZoneSpecifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTimeZoneInterval) {
			listener.enterTimeZoneInterval(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTimeZoneInterval) {
			listener.exitTimeZoneInterval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTimeZoneInterval) {
			return visitor.visitTimeZoneInterval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
	public TIME(): TerminalNode { return this.getToken(TrinoSQLParser.TIME, 0); }
	public ZONE(): TerminalNode { return this.getToken(TrinoSQLParser.ZONE, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: TimeZoneSpecifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTimeZoneString) {
			listener.enterTimeZoneString(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTimeZoneString) {
			listener.exitTimeZoneString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTimeZoneString) {
			return visitor.visitTimeZoneString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonOperatorContext extends ParserRuleContext {
	public EQ(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EQ, 0); }
	public NEQ(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NEQ, 0); }
	public LT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LT, 0); }
	public LTE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LTE, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GT, 0); }
	public GTE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_comparisonOperator; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterComparisonOperator) {
			listener.enterComparisonOperator(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitComparisonOperator) {
			listener.exitComparisonOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitComparisonOperator) {
			return visitor.visitComparisonOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonQuantifierContext extends ParserRuleContext {
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SOME, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ANY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_comparisonQuantifier; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterComparisonQuantifier) {
			listener.enterComparisonQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitComparisonQuantifier) {
			listener.exitComparisonQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitComparisonQuantifier) {
			return visitor.visitComparisonQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_booleanValue; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBooleanValue) {
			listener.enterBooleanValue(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBooleanValue) {
			listener.exitBooleanValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBooleanValue) {
			return visitor.visitBooleanValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalContext extends ParserRuleContext {
	public _sign!: Token;
	public _from!: IntervalFieldContext;
	public _to!: IntervalFieldContext;
	public INTERVAL(): TerminalNode { return this.getToken(TrinoSQLParser.INTERVAL, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public intervalField(): IntervalFieldContext[];
	public intervalField(i: number): IntervalFieldContext;
	public intervalField(i?: number): IntervalFieldContext | IntervalFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalFieldContext);
		} else {
			return this.getRuleContext(i, IntervalFieldContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TO, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_interval; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterInterval) {
			listener.enterInterval(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitInterval) {
			listener.exitInterval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitInterval) {
			return visitor.visitInterval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalFieldContext extends ParserRuleContext {
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.YEAR, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MONTH, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DAY, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.HOUR, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUTE, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SECOND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_intervalField; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIntervalField) {
			listener.enterIntervalField(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIntervalField) {
			listener.exitIntervalField(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIntervalField) {
			return visitor.visitIntervalField(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NormalFormContext extends ParserRuleContext {
	public NFD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFD, 0); }
	public NFC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFC, 0); }
	public NFKD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFKD, 0); }
	public NFKC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFKC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_normalForm; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNormalForm) {
			listener.enterNormalForm(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNormalForm) {
			listener.exitNormalForm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNormalForm) {
			return visitor.visitNormalForm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_type; }
	public copyFrom(ctx: TypeContext): void {
		super.copyFrom(ctx);
	}
}
export class RowTypeContext extends TypeContext {
	public ROW(): TerminalNode { return this.getToken(TrinoSQLParser.ROW, 0); }
	public rowField(): RowFieldContext[];
	public rowField(i: number): RowFieldContext;
	public rowField(i?: number): RowFieldContext | RowFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowFieldContext);
		} else {
			return this.getRuleContext(i, RowFieldContext);
		}
	}
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRowType) {
			listener.enterRowType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRowType) {
			listener.exitRowType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRowType) {
			return visitor.visitRowType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntervalTypeContext extends TypeContext {
	public _from!: IntervalFieldContext;
	public _to!: IntervalFieldContext;
	public INTERVAL(): TerminalNode { return this.getToken(TrinoSQLParser.INTERVAL, 0); }
	public intervalField(): IntervalFieldContext[];
	public intervalField(i: number): IntervalFieldContext;
	public intervalField(i?: number): IntervalFieldContext | IntervalFieldContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IntervalFieldContext);
		} else {
			return this.getRuleContext(i, IntervalFieldContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TO, 0); }
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIntervalType) {
			listener.enterIntervalType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIntervalType) {
			listener.exitIntervalType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIntervalType) {
			return visitor.visitIntervalType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DateTimeTypeContext extends TypeContext {
	public _base!: Token;
	public _precision!: TypeParameterContext;
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIMESTAMP, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHOUT, 0); }
	public TIME(): TerminalNode[];
	public TIME(i: number): TerminalNode;
	public TIME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.TIME);
		} else {
			return this.getToken(TrinoSQLParser.TIME, i);
		}
	}
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ZONE, 0); }
	public typeParameter(): TypeParameterContext | undefined {
		return this.tryGetRuleContext(0, TypeParameterContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITH, 0); }
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDateTimeType) {
			listener.enterDateTimeType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDateTimeType) {
			listener.exitDateTimeType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDateTimeType) {
			return visitor.visitDateTimeType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoublePrecisionTypeContext extends TypeContext {
	public DOUBLE(): TerminalNode { return this.getToken(TrinoSQLParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode { return this.getToken(TrinoSQLParser.PRECISION, 0); }
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDoublePrecisionType) {
			listener.enterDoublePrecisionType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDoublePrecisionType) {
			listener.exitDoublePrecisionType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDoublePrecisionType) {
			return visitor.visitDoublePrecisionType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LegacyArrayTypeContext extends TypeContext {
	public ARRAY(): TerminalNode { return this.getToken(TrinoSQLParser.ARRAY, 0); }
	public LT(): TerminalNode { return this.getToken(TrinoSQLParser.LT, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public GT(): TerminalNode { return this.getToken(TrinoSQLParser.GT, 0); }
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLegacyArrayType) {
			listener.enterLegacyArrayType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLegacyArrayType) {
			listener.exitLegacyArrayType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLegacyArrayType) {
			return visitor.visitLegacyArrayType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LegacyMapTypeContext extends TypeContext {
	public _keyType!: TypeContext;
	public _valueType!: TypeContext;
	public MAP(): TerminalNode { return this.getToken(TrinoSQLParser.MAP, 0); }
	public LT(): TerminalNode { return this.getToken(TrinoSQLParser.LT, 0); }
	public GT(): TerminalNode { return this.getToken(TrinoSQLParser.GT, 0); }
	public type(): TypeContext[];
	public type(i: number): TypeContext;
	public type(i?: number): TypeContext | TypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeContext);
		} else {
			return this.getRuleContext(i, TypeContext);
		}
	}
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLegacyMapType) {
			listener.enterLegacyMapType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLegacyMapType) {
			listener.exitLegacyMapType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLegacyMapType) {
			return visitor.visitLegacyMapType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ArrayTypeContext extends TypeContext {
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public ARRAY(): TerminalNode { return this.getToken(TrinoSQLParser.ARRAY, 0); }
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterArrayType) {
			listener.enterArrayType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitArrayType) {
			listener.exitArrayType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitArrayType) {
			return visitor.visitArrayType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GenericTypeContext extends TypeContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public typeParameter(): TypeParameterContext[];
	public typeParameter(i: number): TypeParameterContext;
	public typeParameter(i?: number): TypeParameterContext | TypeParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypeParameterContext);
		} else {
			return this.getRuleContext(i, TypeParameterContext);
		}
	}
	constructor(ctx: TypeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGenericType) {
			listener.enterGenericType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGenericType) {
			listener.exitGenericType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGenericType) {
			return visitor.visitGenericType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFieldContext extends ParserRuleContext {
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rowField; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRowField) {
			listener.enterRowField(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRowField) {
			listener.exitRowField(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRowField) {
			return visitor.visitRowField(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeParameterContext extends ParserRuleContext {
	public INTEGER_VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	public type(): TypeContext | undefined {
		return this.tryGetRuleContext(0, TypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_typeParameter; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTypeParameter) {
			listener.enterTypeParameter(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTypeParameter) {
			listener.exitTypeParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTypeParameter) {
			return visitor.visitTypeParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenClauseContext extends ParserRuleContext {
	public _condition!: ExpressionContext;
	public _result!: ExpressionContext;
	public WHEN(): TerminalNode { return this.getToken(TrinoSQLParser.WHEN, 0); }
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_whenClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWhenClause) {
			listener.enterWhenClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWhenClause) {
			listener.exitWhenClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWhenClause) {
			return visitor.visitWhenClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FilterContext extends ParserRuleContext {
	public FILTER(): TerminalNode { return this.getToken(TrinoSQLParser.FILTER, 0); }
	public WHERE(): TerminalNode { return this.getToken(TrinoSQLParser.WHERE, 0); }
	public booleanExpression(): BooleanExpressionContext {
		return this.getRuleContext(0, BooleanExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_filter; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterFilter) {
			listener.enterFilter(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitFilter) {
			listener.exitFilter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitFilter) {
			return visitor.visitFilter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeCaseContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_mergeCase; }
	public copyFrom(ctx: MergeCaseContext): void {
		super.copyFrom(ctx);
	}
}
export class MergeUpdateContext extends MergeCaseContext {
	public _condition!: ExpressionContext;
	public _identifier!: IdentifierContext;
	public _targets: IdentifierContext[] = [];
	public _expression!: ExpressionContext;
	public _values: ExpressionContext[] = [];
	public WHEN(): TerminalNode { return this.getToken(TrinoSQLParser.WHEN, 0); }
	public MATCHED(): TerminalNode { return this.getToken(TrinoSQLParser.MATCHED, 0); }
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public UPDATE(): TerminalNode { return this.getToken(TrinoSQLParser.UPDATE, 0); }
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.EQ);
		} else {
			return this.getToken(TrinoSQLParser.EQ, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AND, 0); }
	constructor(ctx: MergeCaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMergeUpdate) {
			listener.enterMergeUpdate(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMergeUpdate) {
			listener.exitMergeUpdate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMergeUpdate) {
			return visitor.visitMergeUpdate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MergeDeleteContext extends MergeCaseContext {
	public _condition!: ExpressionContext;
	public WHEN(): TerminalNode { return this.getToken(TrinoSQLParser.WHEN, 0); }
	public MATCHED(): TerminalNode { return this.getToken(TrinoSQLParser.MATCHED, 0); }
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public DELETE(): TerminalNode { return this.getToken(TrinoSQLParser.DELETE, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AND, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(ctx: MergeCaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMergeDelete) {
			listener.enterMergeDelete(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMergeDelete) {
			listener.exitMergeDelete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMergeDelete) {
			return visitor.visitMergeDelete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class MergeInsertContext extends MergeCaseContext {
	public _condition!: ExpressionContext;
	public _identifier!: IdentifierContext;
	public _targets: IdentifierContext[] = [];
	public _expression!: ExpressionContext;
	public _values: ExpressionContext[] = [];
	public WHEN(): TerminalNode { return this.getToken(TrinoSQLParser.WHEN, 0); }
	public NOT(): TerminalNode { return this.getToken(TrinoSQLParser.NOT, 0); }
	public MATCHED(): TerminalNode { return this.getToken(TrinoSQLParser.MATCHED, 0); }
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public INSERT(): TerminalNode { return this.getToken(TrinoSQLParser.INSERT, 0); }
	public VALUES(): TerminalNode { return this.getToken(TrinoSQLParser.VALUES, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AND, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(ctx: MergeCaseContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterMergeInsert) {
			listener.enterMergeInsert(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitMergeInsert) {
			listener.exitMergeInsert(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitMergeInsert) {
			return visitor.visitMergeInsert(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OverContext extends ParserRuleContext {
	public _windowName!: IdentifierContext;
	public OVER(): TerminalNode { return this.getToken(TrinoSQLParser.OVER, 0); }
	public windowSpecification(): WindowSpecificationContext | undefined {
		return this.tryGetRuleContext(0, WindowSpecificationContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_over; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterOver) {
			listener.enterOver(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitOver) {
			listener.exitOver(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitOver) {
			return visitor.visitOver(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WindowFrameContext extends ParserRuleContext {
	public frameExtent(): FrameExtentContext {
		return this.getRuleContext(0, FrameExtentContext);
	}
	public MEASURES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MEASURES, 0); }
	public measureDefinition(): MeasureDefinitionContext[];
	public measureDefinition(i: number): MeasureDefinitionContext;
	public measureDefinition(i?: number): MeasureDefinitionContext | MeasureDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MeasureDefinitionContext);
		} else {
			return this.getRuleContext(i, MeasureDefinitionContext);
		}
	}
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AFTER, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCH, 0); }
	public skipTo(): SkipToContext | undefined {
		return this.tryGetRuleContext(0, SkipToContext);
	}
	public PATTERN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATTERN, 0); }
	public rowPattern(): RowPatternContext | undefined {
		return this.tryGetRuleContext(0, RowPatternContext);
	}
	public SUBSET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SUBSET, 0); }
	public subsetDefinition(): SubsetDefinitionContext[];
	public subsetDefinition(i: number): SubsetDefinitionContext;
	public subsetDefinition(i?: number): SubsetDefinitionContext | SubsetDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubsetDefinitionContext);
		} else {
			return this.getRuleContext(i, SubsetDefinitionContext);
		}
	}
	public DEFINE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINE, 0); }
	public variableDefinition(): VariableDefinitionContext[];
	public variableDefinition(i: number): VariableDefinitionContext;
	public variableDefinition(i?: number): VariableDefinitionContext | VariableDefinitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableDefinitionContext);
		} else {
			return this.getRuleContext(i, VariableDefinitionContext);
		}
	}
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INITIAL, 0); }
	public SEEK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SEEK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_windowFrame; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWindowFrame) {
			listener.enterWindowFrame(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWindowFrame) {
			listener.exitWindowFrame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWindowFrame) {
			return visitor.visitWindowFrame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameExtentContext extends ParserRuleContext {
	public _frameType!: Token;
	public _start!: FrameBoundContext;
	public _end!: FrameBoundContext;
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RANGE, 0); }
	public frameBound(): FrameBoundContext[];
	public frameBound(i: number): FrameBoundContext;
	public frameBound(i?: number): FrameBoundContext | FrameBoundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FrameBoundContext);
		} else {
			return this.getRuleContext(i, FrameBoundContext);
		}
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROWS, 0); }
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GROUPS, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BETWEEN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_frameExtent; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterFrameExtent) {
			listener.enterFrameExtent(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitFrameExtent) {
			listener.exitFrameExtent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitFrameExtent) {
			return visitor.visitFrameExtent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameBoundContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_frameBound; }
	public copyFrom(ctx: FrameBoundContext): void {
		super.copyFrom(ctx);
	}
}
export class UnboundedFrameContext extends FrameBoundContext {
	public _boundType!: Token;
	public UNBOUNDED(): TerminalNode { return this.getToken(TrinoSQLParser.UNBOUNDED, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRECEDING, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOLLOWING, 0); }
	constructor(ctx: FrameBoundContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnboundedFrame) {
			listener.enterUnboundedFrame(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnboundedFrame) {
			listener.exitUnboundedFrame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnboundedFrame) {
			return visitor.visitUnboundedFrame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentRowBoundContext extends FrameBoundContext {
	public CURRENT(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT, 0); }
	public ROW(): TerminalNode { return this.getToken(TrinoSQLParser.ROW, 0); }
	constructor(ctx: FrameBoundContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentRowBound) {
			listener.enterCurrentRowBound(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentRowBound) {
			listener.exitCurrentRowBound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentRowBound) {
			return visitor.visitCurrentRowBound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BoundedFrameContext extends FrameBoundContext {
	public _boundType!: Token;
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRECEDING, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOLLOWING, 0); }
	constructor(ctx: FrameBoundContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBoundedFrame) {
			listener.enterBoundedFrame(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBoundedFrame) {
			listener.exitBoundedFrame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBoundedFrame) {
			return visitor.visitBoundedFrame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowPatternContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rowPattern; }
	public copyFrom(ctx: RowPatternContext): void {
		super.copyFrom(ctx);
	}
}
export class QuantifiedPrimaryContext extends RowPatternContext {
	public patternPrimary(): PatternPrimaryContext {
		return this.getRuleContext(0, PatternPrimaryContext);
	}
	public patternQuantifier(): PatternQuantifierContext | undefined {
		return this.tryGetRuleContext(0, PatternQuantifierContext);
	}
	constructor(ctx: RowPatternContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQuantifiedPrimary) {
			listener.enterQuantifiedPrimary(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQuantifiedPrimary) {
			listener.exitQuantifiedPrimary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQuantifiedPrimary) {
			return visitor.visitQuantifiedPrimary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PatternConcatenationContext extends RowPatternContext {
	public rowPattern(): RowPatternContext[];
	public rowPattern(i: number): RowPatternContext;
	public rowPattern(i?: number): RowPatternContext | RowPatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowPatternContext);
		} else {
			return this.getRuleContext(i, RowPatternContext);
		}
	}
	constructor(ctx: RowPatternContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPatternConcatenation) {
			listener.enterPatternConcatenation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPatternConcatenation) {
			listener.exitPatternConcatenation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPatternConcatenation) {
			return visitor.visitPatternConcatenation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PatternAlternationContext extends RowPatternContext {
	public rowPattern(): RowPatternContext[];
	public rowPattern(i: number): RowPatternContext;
	public rowPattern(i?: number): RowPatternContext | RowPatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowPatternContext);
		} else {
			return this.getRuleContext(i, RowPatternContext);
		}
	}
	constructor(ctx: RowPatternContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPatternAlternation) {
			listener.enterPatternAlternation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPatternAlternation) {
			listener.exitPatternAlternation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPatternAlternation) {
			return visitor.visitPatternAlternation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternPrimaryContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_patternPrimary; }
	public copyFrom(ctx: PatternPrimaryContext): void {
		super.copyFrom(ctx);
	}
}
export class PatternVariableContext extends PatternPrimaryContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPatternVariable) {
			listener.enterPatternVariable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPatternVariable) {
			listener.exitPatternVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPatternVariable) {
			return visitor.visitPatternVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EmptyPatternContext extends PatternPrimaryContext {
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterEmptyPattern) {
			listener.enterEmptyPattern(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitEmptyPattern) {
			listener.exitEmptyPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitEmptyPattern) {
			return visitor.visitEmptyPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PatternPermutationContext extends PatternPrimaryContext {
	public PERMUTE(): TerminalNode { return this.getToken(TrinoSQLParser.PERMUTE, 0); }
	public rowPattern(): RowPatternContext[];
	public rowPattern(i: number): RowPatternContext;
	public rowPattern(i?: number): RowPatternContext | RowPatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowPatternContext);
		} else {
			return this.getRuleContext(i, RowPatternContext);
		}
	}
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPatternPermutation) {
			listener.enterPatternPermutation(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPatternPermutation) {
			listener.exitPatternPermutation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPatternPermutation) {
			return visitor.visitPatternPermutation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class GroupedPatternContext extends PatternPrimaryContext {
	public rowPattern(): RowPatternContext {
		return this.getRuleContext(0, RowPatternContext);
	}
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGroupedPattern) {
			listener.enterGroupedPattern(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGroupedPattern) {
			listener.exitGroupedPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGroupedPattern) {
			return visitor.visitGroupedPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPartitionStartAnchor) {
			listener.enterPartitionStartAnchor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPartitionStartAnchor) {
			listener.exitPartitionStartAnchor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPartitionStartAnchor) {
			return visitor.visitPartitionStartAnchor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPartitionEndAnchor) {
			listener.enterPartitionEndAnchor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPartitionEndAnchor) {
			listener.exitPartitionEndAnchor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPartitionEndAnchor) {
			return visitor.visitPartitionEndAnchor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExcludedPatternContext extends PatternPrimaryContext {
	public rowPattern(): RowPatternContext {
		return this.getRuleContext(0, RowPatternContext);
	}
	constructor(ctx: PatternPrimaryContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExcludedPattern) {
			listener.enterExcludedPattern(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExcludedPattern) {
			listener.exitExcludedPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExcludedPattern) {
			return visitor.visitExcludedPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternQuantifierContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_patternQuantifier; }
	public copyFrom(ctx: PatternQuantifierContext): void {
		super.copyFrom(ctx);
	}
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
	public _reluctant!: Token;
	public ASTERISK(): TerminalNode { return this.getToken(TrinoSQLParser.ASTERISK, 0); }
	public QUESTION_MARK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUESTION_MARK, 0); }
	constructor(ctx: PatternQuantifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterZeroOrMoreQuantifier) {
			listener.enterZeroOrMoreQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitZeroOrMoreQuantifier) {
			listener.exitZeroOrMoreQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitZeroOrMoreQuantifier) {
			return visitor.visitZeroOrMoreQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
	public _reluctant!: Token;
	public PLUS(): TerminalNode { return this.getToken(TrinoSQLParser.PLUS, 0); }
	public QUESTION_MARK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUESTION_MARK, 0); }
	constructor(ctx: PatternQuantifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterOneOrMoreQuantifier) {
			listener.enterOneOrMoreQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitOneOrMoreQuantifier) {
			listener.exitOneOrMoreQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitOneOrMoreQuantifier) {
			return visitor.visitOneOrMoreQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
	public _reluctant!: Token;
	public QUESTION_MARK(): TerminalNode[];
	public QUESTION_MARK(i: number): TerminalNode;
	public QUESTION_MARK(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.QUESTION_MARK);
		} else {
			return this.getToken(TrinoSQLParser.QUESTION_MARK, i);
		}
	}
	constructor(ctx: PatternQuantifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterZeroOrOneQuantifier) {
			listener.enterZeroOrOneQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitZeroOrOneQuantifier) {
			listener.exitZeroOrOneQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitZeroOrOneQuantifier) {
			return visitor.visitZeroOrOneQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RangeQuantifierContext extends PatternQuantifierContext {
	public _exactly!: Token;
	public _reluctant!: Token;
	public _atLeast!: Token;
	public _atMost!: Token;
	public INTEGER_VALUE(): TerminalNode[];
	public INTEGER_VALUE(i: number): TerminalNode;
	public INTEGER_VALUE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.INTEGER_VALUE);
		} else {
			return this.getToken(TrinoSQLParser.INTEGER_VALUE, i);
		}
	}
	public QUESTION_MARK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUESTION_MARK, 0); }
	constructor(ctx: PatternQuantifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRangeQuantifier) {
			listener.enterRangeQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRangeQuantifier) {
			listener.exitRangeQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRangeQuantifier) {
			return visitor.visitRangeQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateAssignmentContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQ(): TerminalNode { return this.getToken(TrinoSQLParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_updateAssignment; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUpdateAssignment) {
			listener.enterUpdateAssignment(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUpdateAssignment) {
			listener.exitUpdateAssignment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUpdateAssignment) {
			return visitor.visitUpdateAssignment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainOptionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_explainOption; }
	public copyFrom(ctx: ExplainOptionContext): void {
		super.copyFrom(ctx);
	}
}
export class ExplainFormatContext extends ExplainOptionContext {
	public _value!: Token;
	public FORMAT(): TerminalNode { return this.getToken(TrinoSQLParser.FORMAT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TEXT, 0); }
	public GRAPHVIZ(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRAPHVIZ, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.JSON, 0); }
	constructor(ctx: ExplainOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExplainFormat) {
			listener.enterExplainFormat(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExplainFormat) {
			listener.exitExplainFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExplainFormat) {
			return visitor.visitExplainFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExplainTypeContext extends ExplainOptionContext {
	public _value!: Token;
	public TYPE(): TerminalNode { return this.getToken(TrinoSQLParser.TYPE, 0); }
	public LOGICAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LOGICAL, 0); }
	public DISTRIBUTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DISTRIBUTED, 0); }
	public VALIDATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VALIDATE, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IO, 0); }
	constructor(ctx: ExplainOptionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterExplainType) {
			listener.enterExplainType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitExplainType) {
			listener.exitExplainType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitExplainType) {
			return visitor.visitExplainType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_transactionMode; }
	public copyFrom(ctx: TransactionModeContext): void {
		super.copyFrom(ctx);
	}
}
export class IsolationLevelContext extends TransactionModeContext {
	public ISOLATION(): TerminalNode { return this.getToken(TrinoSQLParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode { return this.getToken(TrinoSQLParser.LEVEL, 0); }
	public levelOfIsolation(): LevelOfIsolationContext {
		return this.getRuleContext(0, LevelOfIsolationContext);
	}
	constructor(ctx: TransactionModeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIsolationLevel) {
			listener.enterIsolationLevel(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIsolationLevel) {
			listener.exitIsolationLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIsolationLevel) {
			return visitor.visitIsolationLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TransactionAccessModeContext extends TransactionModeContext {
	public _accessMode!: Token;
	public READ(): TerminalNode { return this.getToken(TrinoSQLParser.READ, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ONLY, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WRITE, 0); }
	constructor(ctx: TransactionModeContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterTransactionAccessMode) {
			listener.enterTransactionAccessMode(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitTransactionAccessMode) {
			listener.exitTransactionAccessMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitTransactionAccessMode) {
			return visitor.visitTransactionAccessMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelOfIsolationContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_levelOfIsolation; }
	public copyFrom(ctx: LevelOfIsolationContext): void {
		super.copyFrom(ctx);
	}
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
	public READ(): TerminalNode { return this.getToken(TrinoSQLParser.READ, 0); }
	public UNCOMMITTED(): TerminalNode { return this.getToken(TrinoSQLParser.UNCOMMITTED, 0); }
	constructor(ctx: LevelOfIsolationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterReadUncommitted) {
			listener.enterReadUncommitted(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitReadUncommitted) {
			listener.exitReadUncommitted(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitReadUncommitted) {
			return visitor.visitReadUncommitted(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ReadCommittedContext extends LevelOfIsolationContext {
	public READ(): TerminalNode { return this.getToken(TrinoSQLParser.READ, 0); }
	public COMMITTED(): TerminalNode { return this.getToken(TrinoSQLParser.COMMITTED, 0); }
	constructor(ctx: LevelOfIsolationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterReadCommitted) {
			listener.enterReadCommitted(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitReadCommitted) {
			listener.exitReadCommitted(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitReadCommitted) {
			return visitor.visitReadCommitted(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RepeatableReadContext extends LevelOfIsolationContext {
	public REPEATABLE(): TerminalNode { return this.getToken(TrinoSQLParser.REPEATABLE, 0); }
	public READ(): TerminalNode { return this.getToken(TrinoSQLParser.READ, 0); }
	constructor(ctx: LevelOfIsolationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRepeatableRead) {
			listener.enterRepeatableRead(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRepeatableRead) {
			listener.exitRepeatableRead(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRepeatableRead) {
			return visitor.visitRepeatableRead(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SerializableContext extends LevelOfIsolationContext {
	public SERIALIZABLE(): TerminalNode { return this.getToken(TrinoSQLParser.SERIALIZABLE, 0); }
	constructor(ctx: LevelOfIsolationContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSerializable) {
			listener.enterSerializable(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSerializable) {
			listener.exitSerializable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSerializable) {
			return visitor.visitSerializable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallArgumentContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_callArgument; }
	public copyFrom(ctx: CallArgumentContext): void {
		super.copyFrom(ctx);
	}
}
export class PositionalArgumentContext extends CallArgumentContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: CallArgumentContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPositionalArgument) {
			listener.enterPositionalArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPositionalArgument) {
			listener.exitPositionalArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPositionalArgument) {
			return visitor.visitPositionalArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NamedArgumentContext extends CallArgumentContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: CallArgumentContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNamedArgument) {
			listener.enterNamedArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNamedArgument) {
			listener.exitNamedArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNamedArgument) {
			return visitor.visitNamedArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PathElementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_pathElement; }
	public copyFrom(ctx: PathElementContext): void {
		super.copyFrom(ctx);
	}
}
export class QualifiedArgumentContext extends PathElementContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(ctx: PathElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQualifiedArgument) {
			listener.enterQualifiedArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQualifiedArgument) {
			listener.exitQualifiedArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQualifiedArgument) {
			return visitor.visitQualifiedArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UnqualifiedArgumentContext extends PathElementContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PathElementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnqualifiedArgument) {
			listener.enterUnqualifiedArgument(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnqualifiedArgument) {
			listener.exitUnqualifiedArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnqualifiedArgument) {
			return visitor.visitUnqualifiedArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PathSpecificationContext extends ParserRuleContext {
	public pathElement(): PathElementContext[];
	public pathElement(i: number): PathElementContext;
	public pathElement(i?: number): PathElementContext | PathElementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PathElementContext);
		} else {
			return this.getRuleContext(i, PathElementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_pathSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPathSpecification) {
			listener.enterPathSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPathSpecification) {
			listener.exitPathSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPathSpecification) {
			return visitor.visitPathSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionSpecificationContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode { return this.getToken(TrinoSQLParser.FUNCTION, 0); }
	public functionDeclaration(): FunctionDeclarationContext {
		return this.getRuleContext(0, FunctionDeclarationContext);
	}
	public returnsClause(): ReturnsClauseContext {
		return this.getRuleContext(0, ReturnsClauseContext);
	}
	public controlStatement(): ControlStatementContext {
		return this.getRuleContext(0, ControlStatementContext);
	}
	public routineCharacteristic(): RoutineCharacteristicContext[];
	public routineCharacteristic(i: number): RoutineCharacteristicContext;
	public routineCharacteristic(i?: number): RoutineCharacteristicContext | RoutineCharacteristicContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoutineCharacteristicContext);
		} else {
			return this.getRuleContext(i, RoutineCharacteristicContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_functionSpecification; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterFunctionSpecification) {
			listener.enterFunctionSpecification(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitFunctionSpecification) {
			listener.exitFunctionSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitFunctionSpecification) {
			return visitor.visitFunctionSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionDeclarationContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public parameterDeclaration(): ParameterDeclarationContext[];
	public parameterDeclaration(i: number): ParameterDeclarationContext;
	public parameterDeclaration(i?: number): ParameterDeclarationContext | ParameterDeclarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParameterDeclarationContext);
		} else {
			return this.getRuleContext(i, ParameterDeclarationContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_functionDeclaration; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterFunctionDeclaration) {
			listener.enterFunctionDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitFunctionDeclaration) {
			listener.exitFunctionDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitFunctionDeclaration) {
			return visitor.visitFunctionDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParameterDeclarationContext extends ParserRuleContext {
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_parameterDeclaration; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterParameterDeclaration) {
			listener.enterParameterDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitParameterDeclaration) {
			listener.exitParameterDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitParameterDeclaration) {
			return visitor.visitParameterDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnsClauseContext extends ParserRuleContext {
	public RETURNS(): TerminalNode { return this.getToken(TrinoSQLParser.RETURNS, 0); }
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_returnsClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterReturnsClause) {
			listener.enterReturnsClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitReturnsClause) {
			listener.exitReturnsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitReturnsClause) {
			return visitor.visitReturnsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoutineCharacteristicContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_routineCharacteristic; }
	public copyFrom(ctx: RoutineCharacteristicContext): void {
		super.copyFrom(ctx);
	}
}
export class LanguageCharacteristicContext extends RoutineCharacteristicContext {
	public LANGUAGE(): TerminalNode { return this.getToken(TrinoSQLParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLanguageCharacteristic) {
			listener.enterLanguageCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLanguageCharacteristic) {
			listener.exitLanguageCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLanguageCharacteristic) {
			return visitor.visitLanguageCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DeterministicCharacteristicContext extends RoutineCharacteristicContext {
	public DETERMINISTIC(): TerminalNode { return this.getToken(TrinoSQLParser.DETERMINISTIC, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NOT, 0); }
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDeterministicCharacteristic) {
			listener.enterDeterministicCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDeterministicCharacteristic) {
			listener.exitDeterministicCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDeterministicCharacteristic) {
			return visitor.visitDeterministicCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ReturnsNullOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
	public RETURNS(): TerminalNode { return this.getToken(TrinoSQLParser.RETURNS, 0); }
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.NULL);
		} else {
			return this.getToken(TrinoSQLParser.NULL, i);
		}
	}
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public INPUT(): TerminalNode { return this.getToken(TrinoSQLParser.INPUT, 0); }
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterReturnsNullOnNullInputCharacteristic) {
			listener.enterReturnsNullOnNullInputCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitReturnsNullOnNullInputCharacteristic) {
			listener.exitReturnsNullOnNullInputCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitReturnsNullOnNullInputCharacteristic) {
			return visitor.visitReturnsNullOnNullInputCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CalledOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
	public CALLED(): TerminalNode { return this.getToken(TrinoSQLParser.CALLED, 0); }
	public ON(): TerminalNode { return this.getToken(TrinoSQLParser.ON, 0); }
	public NULL(): TerminalNode { return this.getToken(TrinoSQLParser.NULL, 0); }
	public INPUT(): TerminalNode { return this.getToken(TrinoSQLParser.INPUT, 0); }
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCalledOnNullInputCharacteristic) {
			listener.enterCalledOnNullInputCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCalledOnNullInputCharacteristic) {
			listener.exitCalledOnNullInputCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCalledOnNullInputCharacteristic) {
			return visitor.visitCalledOnNullInputCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SecurityCharacteristicContext extends RoutineCharacteristicContext {
	public SECURITY(): TerminalNode { return this.getToken(TrinoSQLParser.SECURITY, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINER, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INVOKER, 0); }
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSecurityCharacteristic) {
			listener.enterSecurityCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSecurityCharacteristic) {
			listener.exitSecurityCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSecurityCharacteristic) {
			return visitor.visitSecurityCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CommentCharacteristicContext extends RoutineCharacteristicContext {
	public COMMENT(): TerminalNode { return this.getToken(TrinoSQLParser.COMMENT, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: RoutineCharacteristicContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCommentCharacteristic) {
			listener.enterCommentCharacteristic(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCommentCharacteristic) {
			listener.exitCommentCharacteristic(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCommentCharacteristic) {
			return visitor.visitCommentCharacteristic(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ControlStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_controlStatement; }
	public copyFrom(ctx: ControlStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ReturnStatementContext extends ControlStatementContext {
	public RETURN(): TerminalNode { return this.getToken(TrinoSQLParser.RETURN, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitReturnStatement) {
			return visitor.visitReturnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AssignmentStatementContext extends ControlStatementContext {
	public SET(): TerminalNode { return this.getToken(TrinoSQLParser.SET, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQ(): TerminalNode { return this.getToken(TrinoSQLParser.EQ, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterAssignmentStatement) {
			listener.enterAssignmentStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitAssignmentStatement) {
			listener.exitAssignmentStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitAssignmentStatement) {
			return visitor.visitAssignmentStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SimpleCaseStatementContext extends ControlStatementContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.CASE);
		} else {
			return this.getToken(TrinoSQLParser.CASE, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
	public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext;
	public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext | CaseStatementWhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseStatementWhenClauseContext);
		} else {
			return this.getRuleContext(i, CaseStatementWhenClauseContext);
		}
	}
	public elseClause(): ElseClauseContext | undefined {
		return this.tryGetRuleContext(0, ElseClauseContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSimpleCaseStatement) {
			listener.enterSimpleCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSimpleCaseStatement) {
			listener.exitSimpleCaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSimpleCaseStatement) {
			return visitor.visitSimpleCaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SearchedCaseStatementContext extends ControlStatementContext {
	public CASE(): TerminalNode[];
	public CASE(i: number): TerminalNode;
	public CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.CASE);
		} else {
			return this.getToken(TrinoSQLParser.CASE, i);
		}
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
	public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext;
	public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext | CaseStatementWhenClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CaseStatementWhenClauseContext);
		} else {
			return this.getRuleContext(i, CaseStatementWhenClauseContext);
		}
	}
	public elseClause(): ElseClauseContext | undefined {
		return this.tryGetRuleContext(0, ElseClauseContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSearchedCaseStatement) {
			listener.enterSearchedCaseStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSearchedCaseStatement) {
			listener.exitSearchedCaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSearchedCaseStatement) {
			return visitor.visitSearchedCaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IfStatementContext extends ControlStatementContext {
	public IF(): TerminalNode[];
	public IF(i: number): TerminalNode;
	public IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.IF);
		} else {
			return this.getToken(TrinoSQLParser.IF, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public elseIfClause(): ElseIfClauseContext[];
	public elseIfClause(i: number): ElseIfClauseContext;
	public elseIfClause(i?: number): ElseIfClauseContext | ElseIfClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ElseIfClauseContext);
		} else {
			return this.getRuleContext(i, ElseIfClauseContext);
		}
	}
	public elseClause(): ElseClauseContext | undefined {
		return this.tryGetRuleContext(0, ElseClauseContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIfStatement) {
			return visitor.visitIfStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IterateStatementContext extends ControlStatementContext {
	public ITERATE(): TerminalNode { return this.getToken(TrinoSQLParser.ITERATE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIterateStatement) {
			listener.enterIterateStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIterateStatement) {
			listener.exitIterateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIterateStatement) {
			return visitor.visitIterateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LeaveStatementContext extends ControlStatementContext {
	public LEAVE(): TerminalNode { return this.getToken(TrinoSQLParser.LEAVE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLeaveStatement) {
			listener.enterLeaveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLeaveStatement) {
			listener.exitLeaveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLeaveStatement) {
			return visitor.visitLeaveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CompoundStatementContext extends ControlStatementContext {
	public BEGIN(): TerminalNode { return this.getToken(TrinoSQLParser.BEGIN, 0); }
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public variableDeclaration(): VariableDeclarationContext[];
	public variableDeclaration(i: number): VariableDeclarationContext;
	public variableDeclaration(i?: number): VariableDeclarationContext | VariableDeclarationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableDeclarationContext);
		} else {
			return this.getRuleContext(i, VariableDeclarationContext);
		}
	}
	public SEMICOLON(): TerminalNode[];
	public SEMICOLON(i: number): TerminalNode;
	public SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.SEMICOLON);
		} else {
			return this.getToken(TrinoSQLParser.SEMICOLON, i);
		}
	}
	public sqlStatementList(): SqlStatementListContext | undefined {
		return this.tryGetRuleContext(0, SqlStatementListContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCompoundStatement) {
			listener.enterCompoundStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCompoundStatement) {
			listener.exitCompoundStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCompoundStatement) {
			return visitor.visitCompoundStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LoopStatementContext extends ControlStatementContext {
	public _label!: IdentifierContext;
	public LOOP(): TerminalNode[];
	public LOOP(i: number): TerminalNode;
	public LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.LOOP);
		} else {
			return this.getToken(TrinoSQLParser.LOOP, i);
		}
	}
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterLoopStatement) {
			listener.enterLoopStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitLoopStatement) {
			listener.exitLoopStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitLoopStatement) {
			return visitor.visitLoopStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WhileStatementContext extends ControlStatementContext {
	public _label!: IdentifierContext;
	public WHILE(): TerminalNode[];
	public WHILE(i: number): TerminalNode;
	public WHILE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.WHILE);
		} else {
			return this.getToken(TrinoSQLParser.WHILE, i);
		}
	}
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DO(): TerminalNode { return this.getToken(TrinoSQLParser.DO, 0); }
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterWhileStatement) {
			listener.enterWhileStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitWhileStatement) {
			listener.exitWhileStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitWhileStatement) {
			return visitor.visitWhileStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RepeatStatementContext extends ControlStatementContext {
	public _label!: IdentifierContext;
	public REPEAT(): TerminalNode[];
	public REPEAT(i: number): TerminalNode;
	public REPEAT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.REPEAT);
		} else {
			return this.getToken(TrinoSQLParser.REPEAT, i);
		}
	}
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	public UNTIL(): TerminalNode { return this.getToken(TrinoSQLParser.UNTIL, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public END(): TerminalNode { return this.getToken(TrinoSQLParser.END, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: ControlStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRepeatStatement) {
			listener.enterRepeatStatement(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRepeatStatement) {
			listener.exitRepeatStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRepeatStatement) {
			return visitor.visitRepeatStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseStatementWhenClauseContext extends ParserRuleContext {
	public WHEN(): TerminalNode { return this.getToken(TrinoSQLParser.WHEN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_caseStatementWhenClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCaseStatementWhenClause) {
			listener.enterCaseStatementWhenClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCaseStatementWhenClause) {
			listener.exitCaseStatementWhenClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCaseStatementWhenClause) {
			return visitor.visitCaseStatementWhenClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ElseIfClauseContext extends ParserRuleContext {
	public ELSEIF(): TerminalNode { return this.getToken(TrinoSQLParser.ELSEIF, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public THEN(): TerminalNode { return this.getToken(TrinoSQLParser.THEN, 0); }
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_elseIfClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterElseIfClause) {
			listener.enterElseIfClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitElseIfClause) {
			listener.exitElseIfClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitElseIfClause) {
			return visitor.visitElseIfClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ElseClauseContext extends ParserRuleContext {
	public ELSE(): TerminalNode { return this.getToken(TrinoSQLParser.ELSE, 0); }
	public sqlStatementList(): SqlStatementListContext {
		return this.getRuleContext(0, SqlStatementListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_elseClause; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterElseClause) {
			listener.enterElseClause(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitElseClause) {
			listener.exitElseClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitElseClause) {
			return visitor.visitElseClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableDeclarationContext extends ParserRuleContext {
	public DECLARE(): TerminalNode { return this.getToken(TrinoSQLParser.DECLARE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public type(): TypeContext {
		return this.getRuleContext(0, TypeContext);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFAULT, 0); }
	public valueExpression(): ValueExpressionContext | undefined {
		return this.tryGetRuleContext(0, ValueExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_variableDeclaration; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterVariableDeclaration) {
			listener.enterVariableDeclaration(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitVariableDeclaration) {
			listener.exitVariableDeclaration(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitVariableDeclaration) {
			return visitor.visitVariableDeclaration(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlStatementListContext extends ParserRuleContext {
	public controlStatement(): ControlStatementContext[];
	public controlStatement(i: number): ControlStatementContext;
	public controlStatement(i?: number): ControlStatementContext | ControlStatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ControlStatementContext);
		} else {
			return this.getRuleContext(i, ControlStatementContext);
		}
	}
	public SEMICOLON(): TerminalNode[];
	public SEMICOLON(i: number): TerminalNode;
	public SEMICOLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(TrinoSQLParser.SEMICOLON);
		} else {
			return this.getToken(TrinoSQLParser.SEMICOLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_sqlStatementList; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSqlStatementList) {
			listener.enterSqlStatementList(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSqlStatementList) {
			listener.exitSqlStatementList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSqlStatementList) {
			return visitor.visitSqlStatementList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CREATE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SELECT, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DELETE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UPDATE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_privilege; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPrivilege) {
			return visitor.visitPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityKindContext extends ParserRuleContext {
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TABLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCHEMA, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_entityKind; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterEntityKind) {
			listener.enterEntityKind(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitEntityKind) {
			listener.exitEntityKind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitEntityKind) {
			return visitor.visitEntityKind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantObjectContext extends ParserRuleContext {
	public qualifiedName(): QualifiedNameContext {
		return this.getRuleContext(0, QualifiedNameContext);
	}
	public entityKind(): EntityKindContext | undefined {
		return this.tryGetRuleContext(0, EntityKindContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_grantObject; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterGrantObject) {
			listener.enterGrantObject(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitGrantObject) {
			listener.exitGrantObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitGrantObject) {
			return visitor.visitGrantObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedNameContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_qualifiedName; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQualifiedName) {
			listener.enterQualifiedName(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQualifiedName) {
			listener.exitQualifiedName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQualifiedName) {
			return visitor.visitQualifiedName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryPeriodContext extends ParserRuleContext {
	public _end!: ValueExpressionContext;
	public FOR(): TerminalNode { return this.getToken(TrinoSQLParser.FOR, 0); }
	public rangeType(): RangeTypeContext {
		return this.getRuleContext(0, RangeTypeContext);
	}
	public AS(): TerminalNode { return this.getToken(TrinoSQLParser.AS, 0); }
	public OF(): TerminalNode { return this.getToken(TrinoSQLParser.OF, 0); }
	public valueExpression(): ValueExpressionContext {
		return this.getRuleContext(0, ValueExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_queryPeriod; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQueryPeriod) {
			listener.enterQueryPeriod(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQueryPeriod) {
			listener.exitQueryPeriod(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQueryPeriod) {
			return visitor.visitQueryPeriod(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RangeTypeContext extends ParserRuleContext {
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIMESTAMP, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VERSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_rangeType; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRangeType) {
			listener.enterRangeType(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRangeType) {
			listener.exitRangeType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRangeType) {
			return visitor.visitRangeType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_grantor; }
	public copyFrom(ctx: GrantorContext): void {
		super.copyFrom(ctx);
	}
}
export class SpecifiedPrincipalContext extends GrantorContext {
	public principal(): PrincipalContext {
		return this.getRuleContext(0, PrincipalContext);
	}
	constructor(ctx: GrantorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterSpecifiedPrincipal) {
			listener.enterSpecifiedPrincipal(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitSpecifiedPrincipal) {
			listener.exitSpecifiedPrincipal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitSpecifiedPrincipal) {
			return visitor.visitSpecifiedPrincipal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentUserGrantorContext extends GrantorContext {
	public CURRENT_USER(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_USER, 0); }
	constructor(ctx: GrantorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentUserGrantor) {
			listener.enterCurrentUserGrantor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentUserGrantor) {
			listener.exitCurrentUserGrantor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentUserGrantor) {
			return visitor.visitCurrentUserGrantor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class CurrentRoleGrantorContext extends GrantorContext {
	public CURRENT_ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.CURRENT_ROLE, 0); }
	constructor(ctx: GrantorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterCurrentRoleGrantor) {
			listener.enterCurrentRoleGrantor(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitCurrentRoleGrantor) {
			listener.exitCurrentRoleGrantor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitCurrentRoleGrantor) {
			return visitor.visitCurrentRoleGrantor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_principal; }
	public copyFrom(ctx: PrincipalContext): void {
		super.copyFrom(ctx);
	}
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrincipalContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnspecifiedPrincipal) {
			listener.enterUnspecifiedPrincipal(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnspecifiedPrincipal) {
			listener.exitUnspecifiedPrincipal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnspecifiedPrincipal) {
			return visitor.visitUnspecifiedPrincipal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class UserPrincipalContext extends PrincipalContext {
	public USER(): TerminalNode { return this.getToken(TrinoSQLParser.USER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrincipalContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUserPrincipal) {
			listener.enterUserPrincipal(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUserPrincipal) {
			listener.exitUserPrincipal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUserPrincipal) {
			return visitor.visitUserPrincipal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class RolePrincipalContext extends PrincipalContext {
	public ROLE(): TerminalNode { return this.getToken(TrinoSQLParser.ROLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: PrincipalContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRolePrincipal) {
			listener.enterRolePrincipal(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRolePrincipal) {
			listener.exitRolePrincipal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRolePrincipal) {
			return visitor.visitRolePrincipal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RolesContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_roles; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterRoles) {
			listener.enterRoles(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitRoles) {
			listener.exitRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitRoles) {
			return visitor.visitRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeOrRoleContext extends ParserRuleContext {
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CREATE, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SELECT, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DELETE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UPDATE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_privilegeOrRole; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterPrivilegeOrRole) {
			listener.enterPrivilegeOrRole(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitPrivilegeOrRole) {
			listener.exitPrivilegeOrRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitPrivilegeOrRole) {
			return visitor.visitPrivilegeOrRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_identifier; }
	public copyFrom(ctx: IdentifierContext): void {
		super.copyFrom(ctx);
	}
}
export class UnquotedIdentifierContext extends IdentifierContext {
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IDENTIFIER, 0); }
	public nonReserved(): NonReservedContext | undefined {
		return this.tryGetRuleContext(0, NonReservedContext);
	}
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterUnquotedIdentifier) {
			listener.enterUnquotedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitUnquotedIdentifier) {
			listener.exitUnquotedIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitUnquotedIdentifier) {
			return visitor.visitUnquotedIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class QuotedIdentifierContext extends IdentifierContext {
	public QUOTED_IDENTIFIER(): TerminalNode { return this.getToken(TrinoSQLParser.QUOTED_IDENTIFIER, 0); }
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterQuotedIdentifier) {
			listener.enterQuotedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitQuotedIdentifier) {
			listener.exitQuotedIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitQuotedIdentifier) {
			return visitor.visitQuotedIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BackQuotedIdentifierContext extends IdentifierContext {
	public BACKQUOTED_IDENTIFIER(): TerminalNode { return this.getToken(TrinoSQLParser.BACKQUOTED_IDENTIFIER, 0); }
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterBackQuotedIdentifier) {
			listener.enterBackQuotedIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitBackQuotedIdentifier) {
			listener.exitBackQuotedIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitBackQuotedIdentifier) {
			return visitor.visitBackQuotedIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DigitIdentifierContext extends IdentifierContext {
	public DIGIT_IDENTIFIER(): TerminalNode { return this.getToken(TrinoSQLParser.DIGIT_IDENTIFIER, 0); }
	constructor(ctx: IdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDigitIdentifier) {
			listener.enterDigitIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDigitIdentifier) {
			listener.exitDigitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDigitIdentifier) {
			return visitor.visitDigitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_number; }
	public copyFrom(ctx: NumberContext): void {
		super.copyFrom(ctx);
	}
}
export class DecimalLiteralContext extends NumberContext {
	public DECIMAL_VALUE(): TerminalNode { return this.getToken(TrinoSQLParser.DECIMAL_VALUE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDecimalLiteral) {
			listener.enterDecimalLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDecimalLiteral) {
			listener.exitDecimalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDecimalLiteral) {
			return visitor.visitDecimalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DoubleLiteralContext extends NumberContext {
	public DOUBLE_VALUE(): TerminalNode { return this.getToken(TrinoSQLParser.DOUBLE_VALUE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterDoubleLiteral) {
			listener.enterDoubleLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitDoubleLiteral) {
			listener.exitDoubleLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitDoubleLiteral) {
			return visitor.visitDoubleLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntegerLiteralContext extends NumberContext {
	public INTEGER_VALUE(): TerminalNode { return this.getToken(TrinoSQLParser.INTEGER_VALUE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUS, 0); }
	constructor(ctx: NumberContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIntegerLiteral) {
			listener.enterIntegerLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIntegerLiteral) {
			listener.exitIntegerLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIntegerLiteral) {
			return visitor.visitIntegerLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AuthorizationUserContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_authorizationUser; }
	public copyFrom(ctx: AuthorizationUserContext): void {
		super.copyFrom(ctx);
	}
}
export class IdentifierUserContext extends AuthorizationUserContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(ctx: AuthorizationUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterIdentifierUser) {
			listener.enterIdentifierUser(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitIdentifierUser) {
			listener.exitIdentifierUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitIdentifierUser) {
			return visitor.visitIdentifierUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class StringUserContext extends AuthorizationUserContext {
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	constructor(ctx: AuthorizationUserContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterStringUser) {
			listener.enterStringUser(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitStringUser) {
			listener.exitStringUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitStringUser) {
			return visitor.visitStringUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonReservedContext extends ParserRuleContext {
	public ABSENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ABSENT, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ADD, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ADMIN, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AFTER, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ALL, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ANALYZE, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ANY, 0); }
	public ARRAY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ARRAY, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ASC, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AT, 0); }
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.AUTHORIZATION, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BEGIN, 0); }
	public BERNOULLI(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BERNOULLI, 0); }
	public BOTH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.BOTH, 0); }
	public CALL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CALL, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CALLED, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CASCADE, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CATALOG, 0); }
	public CATALOGS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CATALOGS, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COLUMN, 0); }
	public COLUMNS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COLUMNS, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMIT, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COMMITTED, 0); }
	public CONDITIONAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CONDITIONAL, 0); }
	public COPARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COPARTITION, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.COUNT, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.CURRENT, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DATA, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DATE, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DAY, 0); }
	public DECLARE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DECLARE, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFAULT, 0); }
	public DEFINE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINE, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DEFINER, 0); }
	public DENY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DENY, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DESC, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DESCRIPTOR, 0); }
	public DETERMINISTIC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DETERMINISTIC, 0); }
	public DISTRIBUTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DISTRIBUTED, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DO, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.DOUBLE, 0); }
	public ELSEIF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ELSEIF, 0); }
	public EMPTY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EMPTY, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ENCODING, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ERROR, 0); }
	public EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXCLUDING, 0); }
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.EXPLAIN, 0); }
	public FETCH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FETCH, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FILTER, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FINAL, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FIRST, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FOLLOWING, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FORMAT, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FUNCTION, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.FUNCTIONS, 0); }
	public GRACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRACE, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANT, 0); }
	public GRANTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANTED, 0); }
	public GRANTS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRANTS, 0); }
	public GRAPHVIZ(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GRAPHVIZ, 0); }
	public GROUPS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.GROUPS, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.HOUR, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IF, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IGNORE, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IMMEDIATE, 0); }
	public INCLUDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INCLUDING, 0); }
	public INITIAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INITIAL, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INPUT, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INTERVAL, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.INVOKER, 0); }
	public IO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.IO, 0); }
	public ITERATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ITERATE, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ISOLATION, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.JSON, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEEP, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEY, 0); }
	public KEYS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.KEYS, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LANGUAGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LAST, 0); }
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LATERAL, 0); }
	public LEADING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LEADING, 0); }
	public LEAVE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LEAVE, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LEVEL, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LIMIT, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LOCAL, 0); }
	public LOGICAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LOGICAL, 0); }
	public LOOP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.LOOP, 0); }
	public MAP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MAP, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCH, 0); }
	public MATCHED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCHED, 0); }
	public MATCHES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCHES, 0); }
	public MATCH_RECOGNIZE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATCH_RECOGNIZE, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MATERIALIZED, 0); }
	public MEASURES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MEASURES, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MERGE, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MINUTE, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.MONTH, 0); }
	public NESTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NESTED, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NEXT, 0); }
	public NFC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFC, 0); }
	public NFD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFD, 0); }
	public NFKC(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFKC, 0); }
	public NFKD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NFKD, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NO, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NONE, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULLIF, 0); }
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.NULLS, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OBJECT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OF, 0); }
	public OFFSET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OFFSET, 0); }
	public OMIT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OMIT, 0); }
	public ONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ONE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ONLY, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OPTION, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ORDINALITY, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OUTPUT, 0); }
	public OVER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OVER, 0); }
	public OVERFLOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.OVERFLOW, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PARTITION, 0); }
	public PARTITIONS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PARTITIONS, 0); }
	public PASSING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PASSING, 0); }
	public PAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PAST, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATH, 0); }
	public PATTERN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PATTERN, 0); }
	public PER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PER, 0); }
	public PERIOD(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PERIOD, 0); }
	public PERMUTE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PERMUTE, 0); }
	public PLAN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PLAN, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.POSITION, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRECEDING, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRECISION, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRIVILEGES, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PROPERTIES, 0); }
	public PRUNE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.PRUNE, 0); }
	public QUOTES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.QUOTES, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RANGE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.READ, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REFRESH, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RENAME, 0); }
	public REPEAT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPEAT, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPEATABLE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REPLACE, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESET, 0); }
	public RESPECT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESPECT, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RESTRICT, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURN, 0); }
	public RETURNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNING, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RETURNS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.REVOKE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROLE, 0); }
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROLES, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROLLBACK, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ROWS, 0); }
	public RUNNING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.RUNNING, 0); }
	public SCALAR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCALAR, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCHEMA, 0); }
	public SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SCHEMAS, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SECOND, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SECURITY, 0); }
	public SEEK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SEEK, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SERIALIZABLE, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SESSION, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SET, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SETS, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SHOW, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SOME, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.START, 0); }
	public STATS(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.STATS, 0); }
	public SUBSET(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SUBSET, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SUBSTRING, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.SYSTEM, 0); }
	public TABLES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TABLES, 0); }
	public TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TABLESAMPLE, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TEXT, 0); }
	public TEXT_STRING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TEXT_STRING, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIES, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TIMESTAMP, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TO, 0); }
	public TRAILING(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRAILING, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRANSACTION, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRUNCATE, 0); }
	public TRY_CAST(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TRY_CAST, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.TYPE, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNBOUNDED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNCOMMITTED, 0); }
	public UNCONDITIONAL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNCONDITIONAL, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNIQUE, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNKNOWN, 0); }
	public UNMATCHED(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNMATCHED, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UNTIL, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UPDATE, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.USE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.USER, 0); }
	public UTF16(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF16, 0); }
	public UTF32(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF32, 0); }
	public UTF8(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.UTF8, 0); }
	public VALIDATE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VALIDATE, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VALUE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VERBOSE, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VERSION, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.VIEW, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WHILE, 0); }
	public WINDOW(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WINDOW, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHIN, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WORK, 0); }
	public WRAPPER(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WRAPPER, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.WRITE, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.YEAR, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(TrinoSQLParser.ZONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return TrinoSQLParser.RULE_nonReserved; }
	// @Override
	public enterRule(listener: TrinoSQLListener): void {
		if (listener.enterNonReserved) {
			listener.enterNonReserved(this);
		}
	}
	// @Override
	public exitRule(listener: TrinoSQLListener): void {
		if (listener.exitNonReserved) {
			listener.exitNonReserved(this);
		}
	}
	// @Override
	public accept<Result>(visitor: TrinoSQLVisitor<Result>): Result {
		if (visitor.visitNonReserved) {
			return visitor.visitNonReserved(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


